(function () {
    'use strict';

    function _mergeNamespaces(n, m) {
        m.forEach(function (e) {
            e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
                if (k !== 'default' && !(k in n)) {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        });
        return Object.freeze(n);
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function ascending$3(a, b) {
      return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector(f) {
      let delta = f;
      let compare1 = f;
      let compare2 = f;

      if (f.length !== 2) {
        delta = (d, x) => f(d) - x;
        compare1 = ascending$3;
        compare2 = (d, x) => ascending$3(f(d), x);
      }

      function left(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
          if (compare1(x, x) !== 0) return hi;
          do {
            const mid = (lo + hi) >>> 1;
            if (compare2(a[mid], x) < 0) lo = mid + 1;
            else hi = mid;
          } while (lo < hi);
        }
        return lo;
      }

      function right(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
          if (compare1(x, x) !== 0) return hi;
          do {
            const mid = (lo + hi) >>> 1;
            if (compare2(a[mid], x) <= 0) lo = mid + 1;
            else hi = mid;
          } while (lo < hi);
        }
        return lo;
      }

      function center(a, x, lo = 0, hi = a.length) {
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
      }

      return {left, center, right};
    }

    function number$3(x) {
      return x === null ? NaN : +x;
    }

    function* numbers(values, valueof) {
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            yield value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            yield value;
          }
        }
      }
    }

    const ascendingBisect = bisector(ascending$3);
    const bisectRight = ascendingBisect.right;
    const bisectLeft = ascendingBisect.left;
    const bisectCenter = bisector(number$3).center;
    var bisect = bisectRight;

    function count$1(values, valueof) {
      let count = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count;
          }
        }
      }
      return count;
    }

    function length$3(array) {
      return array.length | 0;
    }

    function empty$2(length) {
      return !(length > 0);
    }

    function arrayify(values) {
      return typeof values !== "object" || "length" in values ? values : Array.from(values);
    }

    function reducer(reduce) {
      return values => reduce(...values);
    }

    function cross$2(...values) {
      const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
      values = values.map(arrayify);
      const lengths = values.map(length$3);
      const j = values.length - 1;
      const index = new Array(j + 1).fill(0);
      const product = [];
      if (j < 0 || lengths.some(empty$2)) return product;
      while (true) {
        product.push(index.map((j, i) => values[i][j]));
        let i = j;
        while (++index[i] === lengths[i]) {
          if (i === 0) return reduce ? product.map(reduce) : product;
          index[i--] = 0;
        }
      }
    }

    function cumsum$3(values, valueof) {
      var sum = 0, index = 0;
      return Float64Array.from(values, valueof === undefined
        ? v => (sum += +v || 0)
        : v => (sum += +valueof(v, index++, values) || 0));
    }

    function descending$2(a, b) {
      return a == null || b == null ? NaN
        : b < a ? -1
        : b > a ? 1
        : b >= a ? 0
        : NaN;
    }

    function variance(values, valueof) {
      let count = 0;
      let delta;
      let mean = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      }
      if (count > 1) return sum / (count - 1);
    }

    function deviation(values, valueof) {
      const v = variance(values, valueof);
      return v ? Math.sqrt(v) : v;
    }

    function extent$1(values, valueof) {
      let min;
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      }
      return [min, max];
    }

    // https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
    class Adder {
      constructor() {
        this._partials = new Float64Array(32);
        this._n = 0;
      }
      add(x) {
        const p = this._partials;
        let i = 0;
        for (let j = 0; j < this._n && j < 32; j++) {
          const y = p[j],
            hi = x + y,
            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
          if (lo) p[i++] = lo;
          x = hi;
        }
        p[i] = x;
        this._n = i + 1;
        return this;
      }
      valueOf() {
        const p = this._partials;
        let n = this._n, x, y, lo, hi = 0;
        if (n > 0) {
          hi = p[--n];
          while (n > 0) {
            x = hi;
            y = p[--n];
            hi = x + y;
            lo = y - (hi - x);
            if (lo) break;
          }
          if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {
            y = lo * 2;
            x = hi + y;
            if (y == x - hi) hi = x;
          }
        }
        return hi;
      }
    }

    function fsum(values, valueof) {
      const adder = new Adder();
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            adder.add(value);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            adder.add(value);
          }
        }
      }
      return +adder;
    }

    function fcumsum(values, valueof) {
      const adder = new Adder();
      let index = -1;
      return Float64Array.from(values, valueof === undefined
          ? v => adder.add(+v || 0)
          : v => adder.add(+valueof(v, ++index, values) || 0)
      );
    }

    class InternMap extends Map {
      constructor(entries, key = keyof) {
        super();
        Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
        if (entries != null) for (const [key, value] of entries) this.set(key, value);
      }
      get(key) {
        return super.get(intern_get(this, key));
      }
      has(key) {
        return super.has(intern_get(this, key));
      }
      set(key, value) {
        return super.set(intern_set(this, key), value);
      }
      delete(key) {
        return super.delete(intern_delete(this, key));
      }
    }

    class InternSet extends Set {
      constructor(values, key = keyof) {
        super();
        Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
        if (values != null) for (const value of values) this.add(value);
      }
      has(value) {
        return super.has(intern_get(this, value));
      }
      add(value) {
        return super.add(intern_set(this, value));
      }
      delete(value) {
        return super.delete(intern_delete(this, value));
      }
    }

    function intern_get({_intern, _key}, value) {
      const key = _key(value);
      return _intern.has(key) ? _intern.get(key) : value;
    }

    function intern_set({_intern, _key}, value) {
      const key = _key(value);
      if (_intern.has(key)) return _intern.get(key);
      _intern.set(key, value);
      return value;
    }

    function intern_delete({_intern, _key}, value) {
      const key = _key(value);
      if (_intern.has(key)) {
        value = _intern.get(key);
        _intern.delete(key);
      }
      return value;
    }

    function keyof(value) {
      return value !== null && typeof value === "object" ? value.valueOf() : value;
    }

    function identity$b(x) {
      return x;
    }

    function group(values, ...keys) {
      return nest(values, identity$b, identity$b, keys);
    }

    function groups(values, ...keys) {
      return nest(values, Array.from, identity$b, keys);
    }

    function flatten$2(groups, keys) {
      for (let i = 1, n = keys.length; i < n; ++i) {
        groups = groups.flatMap(g => g.pop().map(([key, value]) => [...g, key, value]));
      }
      return groups;
    }

    function flatGroup(values, ...keys) {
      return flatten$2(groups(values, ...keys), keys);
    }

    function flatRollup(values, reduce, ...keys) {
      return flatten$2(rollups(values, reduce, ...keys), keys);
    }

    function rollup(values, reduce, ...keys) {
      return nest(values, identity$b, reduce, keys);
    }

    function rollups(values, reduce, ...keys) {
      return nest(values, Array.from, reduce, keys);
    }

    function index$4(values, ...keys) {
      return nest(values, identity$b, unique$3, keys);
    }

    function indexes(values, ...keys) {
      return nest(values, Array.from, unique$3, keys);
    }

    function unique$3(values) {
      if (values.length !== 1) throw new Error("duplicate key");
      return values[0];
    }

    function nest(values, map, reduce, keys) {
      return (function regroup(values, i) {
        if (i >= keys.length) return reduce(values);
        const groups = new InternMap();
        const keyof = keys[i++];
        let index = -1;
        for (const value of values) {
          const key = keyof(value, ++index, values);
          const group = groups.get(key);
          if (group) group.push(value);
          else groups.set(key, [value]);
        }
        for (const [key, values] of groups) {
          groups.set(key, regroup(values, i));
        }
        return map(groups);
      })(values, 0);
    }

    function permute(source, keys) {
      return Array.from(keys, key => source[key]);
    }

    function sort(values, ...F) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      values = Array.from(values);
      let [f] = F;
      if ((f && f.length !== 2) || F.length > 1) {
        const index = Uint32Array.from(values, (d, i) => i);
        if (F.length > 1) {
          F = F.map(f => values.map(f));
          index.sort((i, j) => {
            for (const f of F) {
              const c = ascendingDefined(f[i], f[j]);
              if (c) return c;
            }
          });
        } else {
          f = values.map(f);
          index.sort((i, j) => ascendingDefined(f[i], f[j]));
        }
        return permute(values, index);
      }
      return values.sort(compareDefined(f));
    }

    function compareDefined(compare = ascending$3) {
      if (compare === ascending$3) return ascendingDefined;
      if (typeof compare !== "function") throw new TypeError("compare is not a function");
      return (a, b) => {
        const x = compare(a, b);
        if (x || x === 0) return x;
        return (compare(b, b) === 0) - (compare(a, a) === 0);
      };
    }

    function ascendingDefined(a, b) {
      return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);
    }

    function groupSort(values, reduce, key) {
      return (reduce.length !== 2
        ? sort(rollup(values, reduce, key), (([ak, av], [bk, bv]) => ascending$3(av, bv) || ascending$3(ak, bk)))
        : sort(group(values, key), (([ak, av], [bk, bv]) => reduce(av, bv) || ascending$3(ak, bk))))
        .map(([key]) => key);
    }

    var array$5 = Array.prototype;

    var slice$6 = array$5.slice;

    function constant$b(x) {
      return () => x;
    }

    var e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);

    function ticks(start, stop, count) {
      var reverse,
          i = -1,
          n,
          ticks,
          step;

      stop = +stop, start = +start, count = +count;
      if (start === stop && count > 0) return [start];
      if (reverse = stop < start) n = start, start = stop, stop = n;
      if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

      if (step > 0) {
        let r0 = Math.round(start / step), r1 = Math.round(stop / step);
        if (r0 * step < start) ++r0;
        if (r1 * step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while (++i < n) ticks[i] = (r0 + i) * step;
      } else {
        step = -step;
        let r0 = Math.round(start * step), r1 = Math.round(stop * step);
        if (r0 / step < start) ++r0;
        if (r1 / step > stop) --r1;
        ticks = new Array(n = r1 - r0 + 1);
        while (++i < n) ticks[i] = (r0 + i) / step;
      }

      if (reverse) ticks.reverse();

      return ticks;
    }

    function tickIncrement(start, stop, count) {
      var step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log(step) / Math.LN10),
          error = step / Math.pow(10, power);
      return power >= 0
          ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
          : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
    }

    function tickStep(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10) step1 *= 10;
      else if (error >= e5) step1 *= 5;
      else if (error >= e2) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function nice$1(start, stop, count) {
      let prestep;
      while (true) {
        const step = tickIncrement(start, stop, count);
        if (step === prestep || step === 0 || !isFinite(step)) {
          return [start, stop];
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
        }
        prestep = step;
      }
    }

    function thresholdSturges(values) {
      return Math.ceil(Math.log(count$1(values)) / Math.LN2) + 1;
    }

    function bin() {
      var value = identity$b,
          domain = extent$1,
          threshold = thresholdSturges;

      function histogram(data) {
        if (!Array.isArray(data)) data = Array.from(data);

        var i,
            n = data.length,
            x,
            values = new Array(n);

        for (i = 0; i < n; ++i) {
          values[i] = value(data[i], i, data);
        }

        var xz = domain(values),
            x0 = xz[0],
            x1 = xz[1],
            tz = threshold(values, x0, x1);

        // Convert number of thresholds into uniform thresholds, and nice the
        // default domain accordingly.
        if (!Array.isArray(tz)) {
          const max = x1, tn = +tz;
          if (domain === extent$1) [x0, x1] = nice$1(x0, x1, tn);
          tz = ticks(x0, x1, tn);

          // If the last threshold is coincident with the domain’s upper bound, the
          // last bin will be zero-width. If the default domain is used, and this
          // last threshold is coincident with the maximum input value, we can
          // extend the niced upper bound by one tick to ensure uniform bin widths;
          // otherwise, we simply remove the last threshold. Note that we don’t
          // coerce values or the domain to numbers, and thus must be careful to
          // compare order (>=) rather than strict equality (===)!
          if (tz[tz.length - 1] >= x1) {
            if (max >= x1 && domain === extent$1) {
              const step = tickIncrement(x0, x1, tn);
              if (isFinite(step)) {
                if (step > 0) {
                  x1 = (Math.floor(x1 / step) + 1) * step;
                } else if (step < 0) {
                  x1 = (Math.ceil(x1 * -step) + 1) / -step;
                }
              }
            } else {
              tz.pop();
            }
          }
        }

        // Remove any thresholds outside the domain.
        var m = tz.length;
        while (tz[0] <= x0) tz.shift(), --m;
        while (tz[m - 1] > x1) tz.pop(), --m;

        var bins = new Array(m + 1),
            bin;

        // Initialize bins.
        for (i = 0; i <= m; ++i) {
          bin = bins[i] = [];
          bin.x0 = i > 0 ? tz[i - 1] : x0;
          bin.x1 = i < m ? tz[i] : x1;
        }

        // Assign data to bins by value, ignoring any outside the domain.
        for (i = 0; i < n; ++i) {
          x = values[i];
          if (x != null && x0 <= x && x <= x1) {
            bins[bisect(tz, x, 0, m)].push(data[i]);
          }
        }

        return bins;
      }

      histogram.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant$b(_), histogram) : value;
      };

      histogram.domain = function(_) {
        return arguments.length ? (domain = typeof _ === "function" ? _ : constant$b([_[0], _[1]]), histogram) : domain;
      };

      histogram.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$b(slice$6.call(_)) : constant$b(_), histogram) : threshold;
      };

      return histogram;
    }

    function max$6(values, valueof) {
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      }
      return max;
    }

    function min$5(values, valueof) {
      let min;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (min > value || (min === undefined && value >= value))) {
            min = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (min > value || (min === undefined && value >= value))) {
            min = value;
          }
        }
      }
      return min;
    }

    // Based on https://github.com/mourner/quickselect
    // ISC license, Copyright 2018 Vladimir Agafonkin.
    function quickselect(array, k, left = 0, right = array.length - 1, compare) {
      compare = compare === undefined ? ascendingDefined : compareDefined(compare);

      while (right > left) {
        if (right - left > 600) {
          const n = right - left + 1;
          const m = k - left + 1;
          const z = Math.log(n);
          const s = 0.5 * Math.exp(2 * z / 3);
          const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
          const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
          const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
          quickselect(array, k, newLeft, newRight, compare);
        }

        const t = array[k];
        let i = left;
        let j = right;

        swap$2(array, left, k);
        if (compare(array[right], t) > 0) swap$2(array, left, right);

        while (i < j) {
          swap$2(array, i, j), ++i, --j;
          while (compare(array[i], t) < 0) ++i;
          while (compare(array[j], t) > 0) --j;
        }

        if (compare(array[left], t) === 0) swap$2(array, left, j);
        else ++j, swap$2(array, j, right);

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
      }
      return array;
    }

    function swap$2(array, i, j) {
      const t = array[i];
      array[i] = array[j];
      array[j] = t;
    }

    function quantile$1(values, p, valueof) {
      values = Float64Array.from(numbers(values, valueof));
      if (!(n = values.length)) return;
      if ((p = +p) <= 0 || n < 2) return min$5(values);
      if (p >= 1) return max$6(values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = max$6(quickselect(values, i0).subarray(0, i0 + 1)),
          value1 = min$5(values.subarray(i0 + 1));
      return value0 + (value1 - value0) * (i - i0);
    }

    function quantileSorted(values, p, valueof = number$3) {
      if (!(n = values.length)) return;
      if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
      if (p >= 1) return +valueof(values[n - 1], n - 1, values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = +valueof(values[i0], i0, values),
          value1 = +valueof(values[i0 + 1], i0 + 1, values);
      return value0 + (value1 - value0) * (i - i0);
    }

    function thresholdFreedmanDiaconis(values, min, max) {
      return Math.ceil((max - min) / (2 * (quantile$1(values, 0.75) - quantile$1(values, 0.25)) * Math.pow(count$1(values), -1 / 3)));
    }

    function thresholdScott(values, min, max) {
      return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count$1(values), -1 / 3)));
    }

    function maxIndex(values, valueof) {
      let max;
      let maxIndex = -1;
      let index = -1;
      if (valueof === undefined) {
        for (const value of values) {
          ++index;
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value, maxIndex = index;
          }
        }
      } else {
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value, maxIndex = index;
          }
        }
      }
      return maxIndex;
    }

    function mean$2(values, valueof) {
      let count = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      }
      if (count) return sum / count;
    }

    function median(values, valueof) {
      return quantile$1(values, 0.5, valueof);
    }

    function* flatten$1(arrays) {
      for (const array of arrays) {
        yield* array;
      }
    }

    function merge(arrays) {
      return Array.from(flatten$1(arrays));
    }

    function minIndex(values, valueof) {
      let min;
      let minIndex = -1;
      let index = -1;
      if (valueof === undefined) {
        for (const value of values) {
          ++index;
          if (value != null
              && (min > value || (min === undefined && value >= value))) {
            min = value, minIndex = index;
          }
        }
      } else {
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (min > value || (min === undefined && value >= value))) {
            min = value, minIndex = index;
          }
        }
      }
      return minIndex;
    }

    function mode(values, valueof) {
      const counts = new InternMap();
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && value >= value) {
            counts.set(value, (counts.get(value) || 0) + 1);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && value >= value) {
            counts.set(value, (counts.get(value) || 0) + 1);
          }
        }
      }
      let modeValue;
      let modeCount = 0;
      for (const [value, count] of counts) {
        if (count > modeCount) {
          modeCount = count;
          modeValue = value;
        }
      }
      return modeValue;
    }

    function pairs(values, pairof = pair) {
      const pairs = [];
      let previous;
      let first = false;
      for (const value of values) {
        if (first) pairs.push(pairof(previous, value));
        previous = value;
        first = true;
      }
      return pairs;
    }

    function pair(a, b) {
      return [a, b];
    }

    function range$5(start, stop, step) {
      start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

      var i = -1,
          n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
          range = new Array(n);

      while (++i < n) {
        range[i] = start + i * step;
      }

      return range;
    }

    function rank(values, valueof = ascending$3) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      let V = Array.from(values);
      const R = new Float64Array(V.length);
      if (valueof.length !== 2) V = V.map(valueof), valueof = ascending$3;
      const compareIndex = (i, j) => valueof(V[i], V[j]);
      let k, r;
      Uint32Array
        .from(V, (_, i) => i)
        .sort(valueof === ascending$3 ? (i, j) => ascendingDefined(V[i], V[j]) : compareDefined(compareIndex))
        .forEach((j, i) => {
          const c = compareIndex(j, k === undefined ? j : k);
          if (c >= 0) {
            if (k === undefined || c > 0) k = j, r = i;
            R[j] = r;
          } else {
            R[j] = NaN;
          }
        });
      return R;
    }

    function least(values, compare = ascending$3) {
      let min;
      let defined = false;
      if (compare.length === 1) {
        let minValue;
        for (const element of values) {
          const value = compare(element);
          if (defined
              ? ascending$3(value, minValue) < 0
              : ascending$3(value, value) === 0) {
            min = element;
            minValue = value;
            defined = true;
          }
        }
      } else {
        for (const value of values) {
          if (defined
              ? compare(value, min) < 0
              : compare(value, value) === 0) {
            min = value;
            defined = true;
          }
        }
      }
      return min;
    }

    function leastIndex(values, compare = ascending$3) {
      if (compare.length === 1) return minIndex(values, compare);
      let minValue;
      let min = -1;
      let index = -1;
      for (const value of values) {
        ++index;
        if (min < 0
            ? compare(value, value) === 0
            : compare(value, minValue) < 0) {
          minValue = value;
          min = index;
        }
      }
      return min;
    }

    function greatest(values, compare = ascending$3) {
      let max;
      let defined = false;
      if (compare.length === 1) {
        let maxValue;
        for (const element of values) {
          const value = compare(element);
          if (defined
              ? ascending$3(value, maxValue) > 0
              : ascending$3(value, value) === 0) {
            max = element;
            maxValue = value;
            defined = true;
          }
        }
      } else {
        for (const value of values) {
          if (defined
              ? compare(value, max) > 0
              : compare(value, value) === 0) {
            max = value;
            defined = true;
          }
        }
      }
      return max;
    }

    function greatestIndex(values, compare = ascending$3) {
      if (compare.length === 1) return maxIndex(values, compare);
      let maxValue;
      let max = -1;
      let index = -1;
      for (const value of values) {
        ++index;
        if (max < 0
            ? compare(value, value) === 0
            : compare(value, maxValue) > 0) {
          maxValue = value;
          max = index;
        }
      }
      return max;
    }

    function scan(values, compare) {
      const index = leastIndex(values, compare);
      return index < 0 ? undefined : index;
    }

    var shuffle$2 = shuffler(Math.random);

    function shuffler(random) {
      return function shuffle(array, i0 = 0, i1 = array.length) {
        let m = i1 - (i0 = +i0);
        while (m) {
          const i = random() * m-- | 0, t = array[m + i0];
          array[m + i0] = array[i + i0];
          array[i + i0] = t;
        }
        return array;
      };
    }

    function sum$6(values, valueof) {
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            sum += value;
          }
        }
      }
      return sum;
    }

    function transpose$3(matrix) {
      if (!(n = matrix.length)) return [];
      for (var i = -1, m = min$5(matrix, length$2), transpose = new Array(m); ++i < m;) {
        for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
          row[j] = matrix[j][i];
        }
      }
      return transpose;
    }

    function length$2(d) {
      return d.length;
    }

    function zip() {
      return transpose$3(arguments);
    }

    function every(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      let index = -1;
      for (const value of values) {
        if (!test(value, ++index, values)) {
          return false;
        }
      }
      return true;
    }

    function some(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      let index = -1;
      for (const value of values) {
        if (test(value, ++index, values)) {
          return true;
        }
      }
      return false;
    }

    function filter$1(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      const array = [];
      let index = -1;
      for (const value of values) {
        if (test(value, ++index, values)) {
          array.push(value);
        }
      }
      return array;
    }

    function map$1(values, mapper) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      if (typeof mapper !== "function") throw new TypeError("mapper is not a function");
      return Array.from(values, (value, index) => mapper(value, index, values));
    }

    function reduce$1(values, reducer, value) {
      if (typeof reducer !== "function") throw new TypeError("reducer is not a function");
      const iterator = values[Symbol.iterator]();
      let done, next, index = -1;
      if (arguments.length < 3) {
        ({done, value} = iterator.next());
        if (done) return;
        ++index;
      }
      while (({done, value: next} = iterator.next()), !done) {
        value = reducer(value, next, ++index, values);
      }
      return value;
    }

    function reverse$4(values) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      return Array.from(values).reverse();
    }

    function difference(values, ...others) {
      values = new InternSet(values);
      for (const other of others) {
        for (const value of other) {
          values.delete(value);
        }
      }
      return values;
    }

    function disjoint(values, other) {
      const iterator = other[Symbol.iterator](), set = new InternSet();
      for (const v of values) {
        if (set.has(v)) return false;
        let value, done;
        while (({value, done} = iterator.next())) {
          if (done) break;
          if (Object.is(v, value)) return false;
          set.add(value);
        }
      }
      return true;
    }

    function intersection(values, ...others) {
      values = new InternSet(values);
      others = others.map(set$2);
      out: for (const value of values) {
        for (const other of others) {
          if (!other.has(value)) {
            values.delete(value);
            continue out;
          }
        }
      }
      return values;
    }

    function set$2(values) {
      return values instanceof InternSet ? values : new InternSet(values);
    }

    function superset(values, other) {
      const iterator = values[Symbol.iterator](), set = new Set();
      for (const o of other) {
        const io = intern(o);
        if (set.has(io)) continue;
        let value, done;
        while (({value, done} = iterator.next())) {
          if (done) return false;
          const ivalue = intern(value);
          set.add(ivalue);
          if (Object.is(io, ivalue)) break;
        }
      }
      return true;
    }

    function intern(value) {
      return value !== null && typeof value === "object" ? value.valueOf() : value;
    }

    function subset(values, other) {
      return superset(other, values);
    }

    function union(...others) {
      const set = new InternSet();
      for (const other of others) {
        for (const o of other) {
          set.add(o);
        }
      }
      return set;
    }

    function identity$a(x) {
      return x;
    }

    var top = 1,
        right = 2,
        bottom = 3,
        left = 4,
        epsilon$7 = 1e-6;

    function translateX(x) {
      return "translate(" + x + ",0)";
    }

    function translateY(y) {
      return "translate(0," + y + ")";
    }

    function number$2(scale) {
      return d => +scale(d);
    }

    function center$1(scale, offset) {
      offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
      if (scale.round()) offset = Math.round(offset);
      return d => +scale(d) + offset;
    }

    function entering() {
      return !this.__axis;
    }

    function axis(orient, scale) {
      var tickArguments = [],
          tickValues = null,
          tickFormat = null,
          tickSizeInner = 6,
          tickSizeOuter = 6,
          tickPadding = 3,
          offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5,
          k = orient === top || orient === left ? -1 : 1,
          x = orient === left || orient === right ? "x" : "y",
          transform = orient === top || orient === bottom ? translateX : translateY;

      function axis(context) {
        var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
            format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$a) : tickFormat,
            spacing = Math.max(tickSizeInner, 0) + tickPadding,
            range = scale.range(),
            range0 = +range[0] + offset,
            range1 = +range[range.length - 1] + offset,
            position = (scale.bandwidth ? center$1 : number$2)(scale.copy(), offset),
            selection = context.selection ? context.selection() : context,
            path = selection.selectAll(".domain").data([null]),
            tick = selection.selectAll(".tick").data(values, scale).order(),
            tickExit = tick.exit(),
            tickEnter = tick.enter().append("g").attr("class", "tick"),
            line = tick.select("line"),
            text = tick.select("text");

        path = path.merge(path.enter().insert("path", ".tick")
            .attr("class", "domain")
            .attr("stroke", "currentColor"));

        tick = tick.merge(tickEnter);

        line = line.merge(tickEnter.append("line")
            .attr("stroke", "currentColor")
            .attr(x + "2", k * tickSizeInner));

        text = text.merge(tickEnter.append("text")
            .attr("fill", "currentColor")
            .attr(x, k * spacing)
            .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

        if (context !== selection) {
          path = path.transition(context);
          tick = tick.transition(context);
          line = line.transition(context);
          text = text.transition(context);

          tickExit = tickExit.transition(context)
              .attr("opacity", epsilon$7)
              .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform"); });

          tickEnter
              .attr("opacity", epsilon$7)
              .attr("transform", function(d) { var p = this.parentNode.__axis; return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset); });
        }

        tickExit.remove();

        path
            .attr("d", orient === left || orient === right
                ? (tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1)
                : (tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1));

        tick
            .attr("opacity", 1)
            .attr("transform", function(d) { return transform(position(d) + offset); });

        line
            .attr(x + "2", k * tickSizeInner);

        text
            .attr(x, k * spacing)
            .text(format);

        selection.filter(entering)
            .attr("fill", "none")
            .attr("font-size", 10)
            .attr("font-family", "sans-serif")
            .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

        selection
            .each(function() { this.__axis = position; });
      }

      axis.scale = function(_) {
        return arguments.length ? (scale = _, axis) : scale;
      };

      axis.ticks = function() {
        return tickArguments = Array.from(arguments), axis;
      };

      axis.tickArguments = function(_) {
        return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();
      };

      axis.tickValues = function(_) {
        return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();
      };

      axis.tickFormat = function(_) {
        return arguments.length ? (tickFormat = _, axis) : tickFormat;
      };

      axis.tickSize = function(_) {
        return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
      };

      axis.tickSizeInner = function(_) {
        return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
      };

      axis.tickSizeOuter = function(_) {
        return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
      };

      axis.tickPadding = function(_) {
        return arguments.length ? (tickPadding = +_, axis) : tickPadding;
      };

      axis.offset = function(_) {
        return arguments.length ? (offset = +_, axis) : offset;
      };

      return axis;
    }

    function axisTop(scale) {
      return axis(top, scale);
    }

    function axisRight(scale) {
      return axis(right, scale);
    }

    function axisBottom(scale) {
      return axis(bottom, scale);
    }

    function axisLeft(scale) {
      return axis(left, scale);
    }

    var noop$3 = {value: () => {}};

    function dispatch() {
      for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
        if (!(t = arguments[i] + "") || (t in _) || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
        _[t] = [];
      }
      return new Dispatch(_);
    }

    function Dispatch(_) {
      this._ = _;
    }

    function parseTypenames$1(typenames, types) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
        return {type: t, name: name};
      });
    }

    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function(typename, callback) {
        var _ = this._,
            T = parseTypenames$1(typename + "", _),
            t,
            i = -1,
            n = T.length;

        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
          while (++i < n) if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name))) return t;
          return;
        }

        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while (++i < n) {
          if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);
          else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);
        }

        return this;
      },
      copy: function() {
        var copy = {}, _ = this._;
        for (var t in _) copy[t] = _[t].slice();
        return new Dispatch(copy);
      },
      call: function(type, that) {
        if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      },
      apply: function(type, that, args) {
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      }
    };

    function get$1(type, name) {
      for (var i = 0, n = type.length, c; i < n; ++i) {
        if ((c = type[i]).name === name) {
          return c.value;
        }
      }
    }

    function set$1(type, name, callback) {
      for (var i = 0, n = type.length; i < n; ++i) {
        if (type[i].name === name) {
          type[i] = noop$3, type = type.slice(0, i).concat(type.slice(i + 1));
          break;
        }
      }
      if (callback != null) type.push({name: name, value: callback});
      return type;
    }

    var xhtml = "http://www.w3.org/1999/xhtml";

    var namespaces = {
      svg: "http://www.w3.org/2000/svg",
      xhtml: xhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };

    function namespace(name) {
      var prefix = name += "", i = prefix.indexOf(":");
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
    }

    function creatorInherit(name) {
      return function() {
        var document = this.ownerDocument,
            uri = this.namespaceURI;
        return uri === xhtml && document.documentElement.namespaceURI === xhtml
            ? document.createElement(name)
            : document.createElementNS(uri, name);
      };
    }

    function creatorFixed(fullname) {
      return function() {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
      };
    }

    function creator(name) {
      var fullname = namespace(name);
      return (fullname.local
          ? creatorFixed
          : creatorInherit)(fullname);
    }

    function none$2() {}

    function selector(selector) {
      return selector == null ? none$2 : function() {
        return this.querySelector(selector);
      };
    }

    function selection_select(select) {
      if (typeof select !== "function") select = selector(select);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
          }
        }
      }

      return new Selection$1(subgroups, this._parents);
    }

    // Given something array like (or null), returns something that is strictly an
    // array. This is used to ensure that array-like objects passed to d3.selectAll
    // or selection.selectAll are converted into proper arrays when creating a
    // selection; we don’t ever want to create a selection backed by a live
    // HTMLCollection or NodeList. However, note that selection.selectAll will use a
    // static NodeList as a group, since it safely derived from querySelectorAll.
    function array$4(x) {
      return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
    }

    function empty$1() {
      return [];
    }

    function selectorAll(selector) {
      return selector == null ? empty$1 : function() {
        return this.querySelectorAll(selector);
      };
    }

    function arrayAll(select) {
      return function() {
        return array$4(select.apply(this, arguments));
      };
    }

    function selection_selectAll(select) {
      if (typeof select === "function") select = arrayAll(select);
      else select = selectorAll(select);

      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node);
          }
        }
      }

      return new Selection$1(subgroups, parents);
    }

    function matcher(selector) {
      return function() {
        return this.matches(selector);
      };
    }

    function childMatcher(selector) {
      return function(node) {
        return node.matches(selector);
      };
    }

    var find$1 = Array.prototype.find;

    function childFind(match) {
      return function() {
        return find$1.call(this.children, match);
      };
    }

    function childFirst() {
      return this.firstElementChild;
    }

    function selection_selectChild(match) {
      return this.select(match == null ? childFirst
          : childFind(typeof match === "function" ? match : childMatcher(match)));
    }

    var filter = Array.prototype.filter;

    function children() {
      return Array.from(this.children);
    }

    function childrenFilter(match) {
      return function() {
        return filter.call(this.children, match);
      };
    }

    function selection_selectChildren(match) {
      return this.selectAll(match == null ? children
          : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
    }

    function selection_filter(match) {
      if (typeof match !== "function") match = matcher(match);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
          }
        }
      }

      return new Selection$1(subgroups, this._parents);
    }

    function sparse$1(update) {
      return new Array(update.length);
    }

    function selection_enter() {
      return new Selection$1(this._enter || this._groups.map(sparse$1), this._parents);
    }

    function EnterNode(parent, datum) {
      this.ownerDocument = parent.ownerDocument;
      this.namespaceURI = parent.namespaceURI;
      this._next = null;
      this._parent = parent;
      this.__data__ = datum;
    }

    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
      insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
      querySelector: function(selector) { return this._parent.querySelector(selector); },
      querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
    };

    function constant$a(x) {
      return function() {
        return x;
      };
    }

    function bindIndex(parent, group, enter, update, exit, data) {
      var i = 0,
          node,
          groupLength = group.length,
          dataLength = data.length;

      // Put any non-null nodes that fit into update.
      // Put any null nodes into enter.
      // Put any remaining data into enter.
      for (; i < dataLength; ++i) {
        if (node = group[i]) {
          node.__data__ = data[i];
          update[i] = node;
        } else {
          enter[i] = new EnterNode(parent, data[i]);
        }
      }

      // Put any non-null nodes that don’t fit into exit.
      for (; i < groupLength; ++i) {
        if (node = group[i]) {
          exit[i] = node;
        }
      }
    }

    function bindKey(parent, group, enter, update, exit, data, key) {
      var i,
          node,
          nodeByKeyValue = new Map,
          groupLength = group.length,
          dataLength = data.length,
          keyValues = new Array(groupLength),
          keyValue;

      // Compute the key for each node.
      // If multiple nodes have the same key, the duplicates are added to exit.
      for (i = 0; i < groupLength; ++i) {
        if (node = group[i]) {
          keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
          if (nodeByKeyValue.has(keyValue)) {
            exit[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
        }
      }

      // Compute the key for each datum.
      // If there a node associated with this key, join and add it to update.
      // If there is not (or the key is a duplicate), add it to enter.
      for (i = 0; i < dataLength; ++i) {
        keyValue = key.call(parent, data[i], i, data) + "";
        if (node = nodeByKeyValue.get(keyValue)) {
          update[i] = node;
          node.__data__ = data[i];
          nodeByKeyValue.delete(keyValue);
        } else {
          enter[i] = new EnterNode(parent, data[i]);
        }
      }

      // Add any remaining nodes that were not bound to data to exit.
      for (i = 0; i < groupLength; ++i) {
        if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
          exit[i] = node;
        }
      }
    }

    function datum(node) {
      return node.__data__;
    }

    function selection_data(value, key) {
      if (!arguments.length) return Array.from(this, datum);

      var bind = key ? bindKey : bindIndex,
          parents = this._parents,
          groups = this._groups;

      if (typeof value !== "function") value = constant$a(value);

      for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
        var parent = parents[j],
            group = groups[j],
            groupLength = group.length,
            data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),
            dataLength = data.length,
            enterGroup = enter[j] = new Array(dataLength),
            updateGroup = update[j] = new Array(dataLength),
            exitGroup = exit[j] = new Array(groupLength);

        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
          if (previous = enterGroup[i0]) {
            if (i0 >= i1) i1 = i0 + 1;
            while (!(next = updateGroup[i1]) && ++i1 < dataLength);
            previous._next = next || null;
          }
        }
      }

      update = new Selection$1(update, parents);
      update._enter = enter;
      update._exit = exit;
      return update;
    }

    // Given some data, this returns an array-like view of it: an object that
    // exposes a length property and allows numeric indexing. Note that unlike
    // selectAll, this isn’t worried about “live” collections because the resulting
    // array will only be used briefly while data is being bound. (It is possible to
    // cause the data to change while iterating by using a key function, but please
    // don’t; we’d rather avoid a gratuitous copy.)
    function arraylike(data) {
      return typeof data === "object" && "length" in data
        ? data // Array, TypedArray, NodeList, array-like
        : Array.from(data); // Map, Set, iterable, string, or anything else
    }

    function selection_exit() {
      return new Selection$1(this._exit || this._groups.map(sparse$1), this._parents);
    }

    function selection_join(onenter, onupdate, onexit) {
      var enter = this.enter(), update = this, exit = this.exit();
      if (typeof onenter === "function") {
        enter = onenter(enter);
        if (enter) enter = enter.selection();
      } else {
        enter = enter.append(onenter + "");
      }
      if (onupdate != null) {
        update = onupdate(update);
        if (update) update = update.selection();
      }
      if (onexit == null) exit.remove(); else onexit(exit);
      return enter && update ? enter.merge(update).order() : update;
    }

    function selection_merge(context) {
      var selection = context.selection ? context.selection() : context;

      for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node;
          }
        }
      }

      for (; j < m0; ++j) {
        merges[j] = groups0[j];
      }

      return new Selection$1(merges, this._parents);
    }

    function selection_order() {

      for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
        for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
          if (node = group[i]) {
            if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
            next = node;
          }
        }
      }

      return this;
    }

    function selection_sort(compare) {
      if (!compare) compare = ascending$2;

      function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b;
      }

      for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            sortgroup[i] = node;
          }
        }
        sortgroup.sort(compareNode);
      }

      return new Selection$1(sortgroups, this._parents).order();
    }

    function ascending$2(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function selection_call() {
      var callback = arguments[0];
      arguments[0] = this;
      callback.apply(null, arguments);
      return this;
    }

    function selection_nodes() {
      return Array.from(this);
    }

    function selection_node() {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
          var node = group[i];
          if (node) return node;
        }
      }

      return null;
    }

    function selection_size() {
      let size = 0;
      for (const node of this) ++size; // eslint-disable-line no-unused-vars
      return size;
    }

    function selection_empty() {
      return !this.node();
    }

    function selection_each(callback) {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) callback.call(node, node.__data__, i, group);
        }
      }

      return this;
    }

    function attrRemove$1(name) {
      return function() {
        this.removeAttribute(name);
      };
    }

    function attrRemoveNS$1(fullname) {
      return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
      };
    }

    function attrConstant$1(name, value) {
      return function() {
        this.setAttribute(name, value);
      };
    }

    function attrConstantNS$1(fullname, value) {
      return function() {
        this.setAttributeNS(fullname.space, fullname.local, value);
      };
    }

    function attrFunction$1(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttribute(name);
        else this.setAttribute(name, v);
      };
    }

    function attrFunctionNS$1(fullname, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
        else this.setAttributeNS(fullname.space, fullname.local, v);
      };
    }

    function selection_attr(name, value) {
      var fullname = namespace(name);

      if (arguments.length < 2) {
        var node = this.node();
        return fullname.local
            ? node.getAttributeNS(fullname.space, fullname.local)
            : node.getAttribute(fullname);
      }

      return this.each((value == null
          ? (fullname.local ? attrRemoveNS$1 : attrRemove$1) : (typeof value === "function"
          ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)
          : (fullname.local ? attrConstantNS$1 : attrConstant$1)))(fullname, value));
    }

    function defaultView(node) {
      return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
          || (node.document && node) // node is a Window
          || node.defaultView; // node is a Document
    }

    function styleRemove$1(name) {
      return function() {
        this.style.removeProperty(name);
      };
    }

    function styleConstant$1(name, value, priority) {
      return function() {
        this.style.setProperty(name, value, priority);
      };
    }

    function styleFunction$1(name, value, priority) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.style.removeProperty(name);
        else this.style.setProperty(name, v, priority);
      };
    }

    function selection_style(name, value, priority) {
      return arguments.length > 1
          ? this.each((value == null
                ? styleRemove$1 : typeof value === "function"
                ? styleFunction$1
                : styleConstant$1)(name, value, priority == null ? "" : priority))
          : styleValue(this.node(), name);
    }

    function styleValue(node, name) {
      return node.style.getPropertyValue(name)
          || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
    }

    function propertyRemove(name) {
      return function() {
        delete this[name];
      };
    }

    function propertyConstant(name, value) {
      return function() {
        this[name] = value;
      };
    }

    function propertyFunction(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) delete this[name];
        else this[name] = v;
      };
    }

    function selection_property(name, value) {
      return arguments.length > 1
          ? this.each((value == null
              ? propertyRemove : typeof value === "function"
              ? propertyFunction
              : propertyConstant)(name, value))
          : this.node()[name];
    }

    function classArray(string) {
      return string.trim().split(/^|\s+/);
    }

    function classList(node) {
      return node.classList || new ClassList(node);
    }

    function ClassList(node) {
      this._node = node;
      this._names = classArray(node.getAttribute("class") || "");
    }

    ClassList.prototype = {
      add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };

    function classedAdd(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) list.add(names[i]);
    }

    function classedRemove(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) list.remove(names[i]);
    }

    function classedTrue(names) {
      return function() {
        classedAdd(this, names);
      };
    }

    function classedFalse(names) {
      return function() {
        classedRemove(this, names);
      };
    }

    function classedFunction(names, value) {
      return function() {
        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
      };
    }

    function selection_classed(name, value) {
      var names = classArray(name + "");

      if (arguments.length < 2) {
        var list = classList(this.node()), i = -1, n = names.length;
        while (++i < n) if (!list.contains(names[i])) return false;
        return true;
      }

      return this.each((typeof value === "function"
          ? classedFunction : value
          ? classedTrue
          : classedFalse)(names, value));
    }

    function textRemove() {
      this.textContent = "";
    }

    function textConstant$1(value) {
      return function() {
        this.textContent = value;
      };
    }

    function textFunction$1(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
      };
    }

    function selection_text(value) {
      return arguments.length
          ? this.each(value == null
              ? textRemove : (typeof value === "function"
              ? textFunction$1
              : textConstant$1)(value))
          : this.node().textContent;
    }

    function htmlRemove() {
      this.innerHTML = "";
    }

    function htmlConstant(value) {
      return function() {
        this.innerHTML = value;
      };
    }

    function htmlFunction(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
      };
    }

    function selection_html(value) {
      return arguments.length
          ? this.each(value == null
              ? htmlRemove : (typeof value === "function"
              ? htmlFunction
              : htmlConstant)(value))
          : this.node().innerHTML;
    }

    function raise() {
      if (this.nextSibling) this.parentNode.appendChild(this);
    }

    function selection_raise() {
      return this.each(raise);
    }

    function lower() {
      if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
    }

    function selection_lower() {
      return this.each(lower);
    }

    function selection_append(name) {
      var create = typeof name === "function" ? name : creator(name);
      return this.select(function() {
        return this.appendChild(create.apply(this, arguments));
      });
    }

    function constantNull() {
      return null;
    }

    function selection_insert(name, before) {
      var create = typeof name === "function" ? name : creator(name),
          select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
      return this.select(function() {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
      });
    }

    function remove() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    }

    function selection_remove() {
      return this.each(remove);
    }

    function selection_cloneShallow() {
      var clone = this.cloneNode(false), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_cloneDeep() {
      var clone = this.cloneNode(true), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_clone(deep) {
      return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
    }

    function selection_datum(value) {
      return arguments.length
          ? this.property("__data__", value)
          : this.node().__data__;
    }

    function contextListener(listener) {
      return function(event) {
        listener.call(this, event, this.__data__);
      };
    }

    function parseTypenames(typenames) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        return {type: t, name: name};
      });
    }

    function onRemove(typename) {
      return function() {
        var on = this.__on;
        if (!on) return;
        for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
          if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
          } else {
            on[++i] = o;
          }
        }
        if (++i) on.length = i;
        else delete this.__on;
      };
    }

    function onAdd(typename, value, options) {
      return function() {
        var on = this.__on, o, listener = contextListener(value);
        if (on) for (var j = 0, m = on.length; j < m; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options);
            o.value = value;
            return;
          }
        }
        this.addEventListener(typename.type, listener, options);
        o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
        if (!on) this.__on = [o];
        else on.push(o);
      };
    }

    function selection_on(typename, value, options) {
      var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

      if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
        return;
      }

      on = value ? onAdd : onRemove;
      for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
      return this;
    }

    function dispatchEvent(node, type, params) {
      var window = defaultView(node),
          event = window.CustomEvent;

      if (typeof event === "function") {
        event = new event(type, params);
      } else {
        event = window.document.createEvent("Event");
        if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else event.initEvent(type, false, false);
      }

      node.dispatchEvent(event);
    }

    function dispatchConstant(type, params) {
      return function() {
        return dispatchEvent(this, type, params);
      };
    }

    function dispatchFunction(type, params) {
      return function() {
        return dispatchEvent(this, type, params.apply(this, arguments));
      };
    }

    function selection_dispatch(type, params) {
      return this.each((typeof params === "function"
          ? dispatchFunction
          : dispatchConstant)(type, params));
    }

    function* selection_iterator() {
      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) yield node;
        }
      }
    }

    var root$1 = [null];

    function Selection$1(groups, parents) {
      this._groups = groups;
      this._parents = parents;
    }

    function selection() {
      return new Selection$1([[document.documentElement]], root$1);
    }

    function selection_selection() {
      return this;
    }

    Selection$1.prototype = selection.prototype = {
      constructor: Selection$1,
      select: selection_select,
      selectAll: selection_selectAll,
      selectChild: selection_selectChild,
      selectChildren: selection_selectChildren,
      filter: selection_filter,
      data: selection_data,
      enter: selection_enter,
      exit: selection_exit,
      join: selection_join,
      merge: selection_merge,
      selection: selection_selection,
      order: selection_order,
      sort: selection_sort,
      call: selection_call,
      nodes: selection_nodes,
      node: selection_node,
      size: selection_size,
      empty: selection_empty,
      each: selection_each,
      attr: selection_attr,
      style: selection_style,
      property: selection_property,
      classed: selection_classed,
      text: selection_text,
      html: selection_html,
      raise: selection_raise,
      lower: selection_lower,
      append: selection_append,
      insert: selection_insert,
      remove: selection_remove,
      clone: selection_clone,
      datum: selection_datum,
      on: selection_on,
      dispatch: selection_dispatch,
      [Symbol.iterator]: selection_iterator
    };

    function select$3(selector) {
      return typeof selector === "string"
          ? new Selection$1([[document.querySelector(selector)]], [document.documentElement])
          : new Selection$1([[selector]], root$1);
    }

    function create$1(name) {
      return select$3(creator(name).call(document.documentElement));
    }

    var nextId = 0;

    function local$1() {
      return new Local;
    }

    function Local() {
      this._ = "@" + (++nextId).toString(36);
    }

    Local.prototype = local$1.prototype = {
      constructor: Local,
      get: function(node) {
        var id = this._;
        while (!(id in node)) if (!(node = node.parentNode)) return;
        return node[id];
      },
      set: function(node, value) {
        return node[this._] = value;
      },
      remove: function(node) {
        return this._ in node && delete node[this._];
      },
      toString: function() {
        return this._;
      }
    };

    function sourceEvent(event) {
      let sourceEvent;
      while (sourceEvent = event.sourceEvent) event = sourceEvent;
      return event;
    }

    function pointer(event, node) {
      event = sourceEvent(event);
      if (node === undefined) node = event.currentTarget;
      if (node) {
        var svg = node.ownerSVGElement || node;
        if (svg.createSVGPoint) {
          var point = svg.createSVGPoint();
          point.x = event.clientX, point.y = event.clientY;
          point = point.matrixTransform(node.getScreenCTM().inverse());
          return [point.x, point.y];
        }
        if (node.getBoundingClientRect) {
          var rect = node.getBoundingClientRect();
          return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
        }
      }
      return [event.pageX, event.pageY];
    }

    function pointers(events, node) {
      if (events.target) { // i.e., instanceof Event, not TouchList or iterable
        events = sourceEvent(events);
        if (node === undefined) node = events.currentTarget;
        events = events.touches || [events];
      }
      return Array.from(events, event => pointer(event, node));
    }

    function selectAll(selector) {
      return typeof selector === "string"
          ? new Selection$1([document.querySelectorAll(selector)], [document.documentElement])
          : new Selection$1([array$4(selector)], root$1);
    }

    // These are typically used in conjunction with noevent to ensure that we can
    // preventDefault on the event.
    const nonpassive = {passive: false};
    const nonpassivecapture = {capture: true, passive: false};

    function nopropagation$2(event) {
      event.stopImmediatePropagation();
    }

    function noevent$2(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    function dragDisable(view) {
      var root = view.document.documentElement,
          selection = select$3(view).on("dragstart.drag", noevent$2, nonpassivecapture);
      if ("onselectstart" in root) {
        selection.on("selectstart.drag", noevent$2, nonpassivecapture);
      } else {
        root.__noselect = root.style.MozUserSelect;
        root.style.MozUserSelect = "none";
      }
    }

    function yesdrag(view, noclick) {
      var root = view.document.documentElement,
          selection = select$3(view).on("dragstart.drag", null);
      if (noclick) {
        selection.on("click.drag", noevent$2, nonpassivecapture);
        setTimeout(function() { selection.on("click.drag", null); }, 0);
      }
      if ("onselectstart" in root) {
        selection.on("selectstart.drag", null);
      } else {
        root.style.MozUserSelect = root.__noselect;
        delete root.__noselect;
      }
    }

    var constant$9 = x => () => x;

    function DragEvent(type, {
      sourceEvent,
      subject,
      target,
      identifier,
      active,
      x, y, dx, dy,
      dispatch
    }) {
      Object.defineProperties(this, {
        type: {value: type, enumerable: true, configurable: true},
        sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
        subject: {value: subject, enumerable: true, configurable: true},
        target: {value: target, enumerable: true, configurable: true},
        identifier: {value: identifier, enumerable: true, configurable: true},
        active: {value: active, enumerable: true, configurable: true},
        x: {value: x, enumerable: true, configurable: true},
        y: {value: y, enumerable: true, configurable: true},
        dx: {value: dx, enumerable: true, configurable: true},
        dy: {value: dy, enumerable: true, configurable: true},
        _: {value: dispatch}
      });
    }

    DragEvent.prototype.on = function() {
      var value = this._.on.apply(this._, arguments);
      return value === this._ ? this : value;
    };

    // Ignore right-click, since that should open the context menu.
    function defaultFilter$2(event) {
      return !event.ctrlKey && !event.button;
    }

    function defaultContainer() {
      return this.parentNode;
    }

    function defaultSubject(event, d) {
      return d == null ? {x: event.x, y: event.y} : d;
    }

    function defaultTouchable$2() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }

    function drag() {
      var filter = defaultFilter$2,
          container = defaultContainer,
          subject = defaultSubject,
          touchable = defaultTouchable$2,
          gestures = {},
          listeners = dispatch("start", "drag", "end"),
          active = 0,
          mousedownx,
          mousedowny,
          mousemoving,
          touchending,
          clickDistance2 = 0;

      function drag(selection) {
        selection
            .on("mousedown.drag", mousedowned)
          .filter(touchable)
            .on("touchstart.drag", touchstarted)
            .on("touchmove.drag", touchmoved, nonpassive)
            .on("touchend.drag touchcancel.drag", touchended)
            .style("touch-action", "none")
            .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      }

      function mousedowned(event, d) {
        if (touchending || !filter.call(this, event, d)) return;
        var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
        if (!gesture) return;
        select$3(event.view)
          .on("mousemove.drag", mousemoved, nonpassivecapture)
          .on("mouseup.drag", mouseupped, nonpassivecapture);
        dragDisable(event.view);
        nopropagation$2(event);
        mousemoving = false;
        mousedownx = event.clientX;
        mousedowny = event.clientY;
        gesture("start", event);
      }

      function mousemoved(event) {
        noevent$2(event);
        if (!mousemoving) {
          var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
          mousemoving = dx * dx + dy * dy > clickDistance2;
        }
        gestures.mouse("drag", event);
      }

      function mouseupped(event) {
        select$3(event.view).on("mousemove.drag mouseup.drag", null);
        yesdrag(event.view, mousemoving);
        noevent$2(event);
        gestures.mouse("end", event);
      }

      function touchstarted(event, d) {
        if (!filter.call(this, event, d)) return;
        var touches = event.changedTouches,
            c = container.call(this, event, d),
            n = touches.length, i, gesture;

        for (i = 0; i < n; ++i) {
          if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {
            nopropagation$2(event);
            gesture("start", event, touches[i]);
          }
        }
      }

      function touchmoved(event) {
        var touches = event.changedTouches,
            n = touches.length, i, gesture;

        for (i = 0; i < n; ++i) {
          if (gesture = gestures[touches[i].identifier]) {
            noevent$2(event);
            gesture("drag", event, touches[i]);
          }
        }
      }

      function touchended(event) {
        var touches = event.changedTouches,
            n = touches.length, i, gesture;

        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
        for (i = 0; i < n; ++i) {
          if (gesture = gestures[touches[i].identifier]) {
            nopropagation$2(event);
            gesture("end", event, touches[i]);
          }
        }
      }

      function beforestart(that, container, event, d, identifier, touch) {
        var dispatch = listeners.copy(),
            p = pointer(touch || event, container), dx, dy,
            s;

        if ((s = subject.call(that, new DragEvent("beforestart", {
            sourceEvent: event,
            target: drag,
            identifier,
            active,
            x: p[0],
            y: p[1],
            dx: 0,
            dy: 0,
            dispatch
          }), d)) == null) return;

        dx = s.x - p[0] || 0;
        dy = s.y - p[1] || 0;

        return function gesture(type, event, touch) {
          var p0 = p, n;
          switch (type) {
            case "start": gestures[identifier] = gesture, n = active++; break;
            case "end": delete gestures[identifier], --active; // falls through
            case "drag": p = pointer(touch || event, container), n = active; break;
          }
          dispatch.call(
            type,
            that,
            new DragEvent(type, {
              sourceEvent: event,
              subject: s,
              target: drag,
              identifier,
              active: n,
              x: p[0] + dx,
              y: p[1] + dy,
              dx: p[0] - p0[0],
              dy: p[1] - p0[1],
              dispatch
            }),
            d
          );
        };
      }

      drag.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : constant$9(!!_), drag) : filter;
      };

      drag.container = function(_) {
        return arguments.length ? (container = typeof _ === "function" ? _ : constant$9(_), drag) : container;
      };

      drag.subject = function(_) {
        return arguments.length ? (subject = typeof _ === "function" ? _ : constant$9(_), drag) : subject;
      };

      drag.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$9(!!_), drag) : touchable;
      };

      drag.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? drag : value;
      };

      drag.clickDistance = function(_) {
        return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
      };

      return drag;
    }

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });

    function color_formatHex() {
      return this.rgb().formatHex();
    }

    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }

    function color_formatRgb() {
      return this.rgb().formatRgb();
    }

    function color(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
          : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));

    function rgb_formatHex() {
      return "#" + hex(this.r) + hex(this.g) + hex(this.b);
    }

    function rgb_formatRgb() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }

    function hex(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl$2(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl$2, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(")
            + (this.h || 0) + ", "
            + (this.s || 0) * 100 + "%, "
            + (this.l || 0) * 100 + "%"
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    const radians$1 = Math.PI / 180;
    const degrees$2 = 180 / Math.PI;

    // https://observablehq.com/@mbostock/lab-and-rgb
    const K = 18,
        Xn = 0.96422,
        Yn = 1,
        Zn = 0.82521,
        t0$1 = 4 / 29,
        t1$1 = 6 / 29,
        t2 = 3 * t1$1 * t1$1,
        t3 = t1$1 * t1$1 * t1$1;

    function labConvert(o) {
      if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
      if (o instanceof Hcl) return hcl2lab(o);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = rgb2lrgb(o.r),
          g = rgb2lrgb(o.g),
          b = rgb2lrgb(o.b),
          y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
      if (r === g && g === b) x = z = y; else {
        x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
        z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
      }
      return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
    }

    function gray(l, opacity) {
      return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
    }

    function lab$1(l, a, b, opacity) {
      return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
    }

    function Lab(l, a, b, opacity) {
      this.l = +l;
      this.a = +a;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Lab, lab$1, extend(Color, {
      brighter: function(k) {
        return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      darker: function(k) {
        return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      rgb: function() {
        var y = (this.l + 16) / 116,
            x = isNaN(this.a) ? y : y + this.a / 500,
            z = isNaN(this.b) ? y : y - this.b / 200;
        x = Xn * lab2xyz(x);
        y = Yn * lab2xyz(y);
        z = Zn * lab2xyz(z);
        return new Rgb(
          lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
          lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
          lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
          this.opacity
        );
      }
    }));

    function xyz2lab(t) {
      return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0$1;
    }

    function lab2xyz(t) {
      return t > t1$1 ? t * t * t : t2 * (t - t0$1);
    }

    function lrgb2rgb(x) {
      return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
    }

    function rgb2lrgb(x) {
      return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
    }

    function hclConvert(o) {
      if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
      if (!(o instanceof Lab)) o = labConvert(o);
      if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
      var h = Math.atan2(o.b, o.a) * degrees$2;
      return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
    }

    function lch(l, c, h, opacity) {
      return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }

    function hcl$2(h, c, l, opacity) {
      return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }

    function Hcl(h, c, l, opacity) {
      this.h = +h;
      this.c = +c;
      this.l = +l;
      this.opacity = +opacity;
    }

    function hcl2lab(o) {
      if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
      var h = o.h * radians$1;
      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
    }

    define(Hcl, hcl$2, extend(Color, {
      brighter: function(k) {
        return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
      },
      darker: function(k) {
        return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
      },
      rgb: function() {
        return hcl2lab(this).rgb();
      }
    }));

    var A = -0.14861,
        B$1 = +1.78277,
        C = -0.29227,
        D$1 = -0.90649,
        E = +1.97294,
        ED = E * D$1,
        EB = E * B$1,
        BC_DA = B$1 * C - D$1 * A;

    function cubehelixConvert(o) {
      if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
          bl = b - l,
          k = (E * (g - l) - C * bl) / D$1,
          s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
          h = s ? Math.atan2(k, bl) * degrees$2 - 120 : NaN;
      return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
    }

    function cubehelix$3(h, s, l, opacity) {
      return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
    }

    function Cubehelix(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Cubehelix, cubehelix$3, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * radians$1,
            l = +this.l,
            a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
            cosh = Math.cos(h),
            sinh = Math.sin(h);
        return new Rgb(
          255 * (l + a * (A * cosh + B$1 * sinh)),
          255 * (l + a * (C * cosh + D$1 * sinh)),
          255 * (l + a * (E * cosh)),
          this.opacity
        );
      }
    }));

    function basis$1(t1, v0, v1, v2, v3) {
      var t2 = t1 * t1, t3 = t2 * t1;
      return ((1 - 3 * t1 + 3 * t2 - t3) * v0
          + (4 - 6 * t2 + 3 * t3) * v1
          + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
          + t3 * v3) / 6;
    }

    function basis$2(values) {
      var n = values.length - 1;
      return function(t) {
        var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
            v1 = values[i],
            v2 = values[i + 1],
            v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
            v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return basis$1((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    function basisClosed$1(values) {
      var n = values.length;
      return function(t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
            v0 = values[(i + n - 1) % n],
            v1 = values[i % n],
            v2 = values[(i + 1) % n],
            v3 = values[(i + 2) % n];
        return basis$1((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    var constant$8 = x => () => x;

    function linear$2(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential$1(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function hue$1(a, b) {
      var d = b - a;
      return d ? linear$2(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$8(isNaN(a) ? b : a);
    }

    function gamma$1(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential$1(a, b, y) : constant$8(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear$2(a, d) : constant$8(isNaN(a) ? b : a);
    }

    var interpolateRgb = (function rgbGamma(y) {
      var color = gamma$1(y);

      function rgb$1(start, end) {
        var r = color((start = rgb(start)).r, (end = rgb(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb$1.gamma = rgbGamma;

      return rgb$1;
    })(1);

    function rgbSpline(spline) {
      return function(colors) {
        var n = colors.length,
            r = new Array(n),
            g = new Array(n),
            b = new Array(n),
            i, color;
        for (i = 0; i < n; ++i) {
          color = rgb(colors[i]);
          r[i] = color.r || 0;
          g[i] = color.g || 0;
          b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
          color.r = r(t);
          color.g = g(t);
          color.b = b(t);
          return color + "";
        };
      };
    }

    var rgbBasis = rgbSpline(basis$2);
    var rgbBasisClosed = rgbSpline(basisClosed$1);

    function numberArray(a, b) {
      if (!b) b = [];
      var n = a ? Math.min(b.length, a.length) : 0,
          c = b.slice(),
          i;
      return function(t) {
        for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
      };
    }

    function isNumberArray(x) {
      return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function array$3(a, b) {
      return (isNumberArray(b) ? numberArray : genericArray)(a, b);
    }

    function genericArray(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = interpolate$2(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date$1(a, b) {
      var d = new Date;
      return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
      };
    }

    function interpolateNumber(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    function object$1(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = interpolate$2(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero(b) {
      return function() {
        return b;
      };
    }

    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function interpolateString(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: interpolateNumber(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one(q[0].x)
          : zero(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function interpolate$2(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant$8(b)
          : (t === "number" ? interpolateNumber
          : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
          : b instanceof color ? interpolateRgb
          : b instanceof Date ? date$1
          : isNumberArray(b) ? numberArray
          : Array.isArray(b) ? genericArray
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object$1
          : interpolateNumber)(a, b);
    }

    function discrete(range) {
      var n = range.length;
      return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
      };
    }

    function hue(a, b) {
      var i = hue$1(+a, +b);
      return function(t) {
        var x = i(t);
        return x - 360 * Math.floor(x / 360);
      };
    }

    function interpolateRound(a, b) {
      return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
      };
    }

    var degrees$1 = 180 / Math.PI;

    var identity$9 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };

    function decompose(a, b, c, d, e, f) {
      var scaleX, scaleY, skewX;
      if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
      if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
      if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
      if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
      return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees$1,
        skewX: Math.atan(skewX) * degrees$1,
        scaleX: scaleX,
        scaleY: scaleY
      };
    }

    var svgNode;

    /* eslint-disable no-undef */
    function parseCss(value) {
      const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
      return m.isIdentity ? identity$9 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
    }

    function parseSvg(value) {
      if (value == null) return identity$9;
      if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
      svgNode.setAttribute("transform", value);
      if (!(value = svgNode.transform.baseVal.consolidate())) return identity$9;
      value = value.matrix;
      return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
    }

    function interpolateTransform(parse, pxComma, pxParen, degParen) {

      function pop(s) {
        return s.length ? s.pop() + " " : "";
      }

      function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push("translate(", null, pxComma, null, pxParen);
          q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
        } else if (xb || yb) {
          s.push("translate(" + xb + pxComma + yb + pxParen);
        }
      }

      function rotate(a, b, s, q) {
        if (a !== b) {
          if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
          q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b)});
        } else if (b) {
          s.push(pop(s) + "rotate(" + b + degParen);
        }
      }

      function skewX(a, b, s, q) {
        if (a !== b) {
          q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b)});
        } else if (b) {
          s.push(pop(s) + "skewX(" + b + degParen);
        }
      }

      function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push(pop(s) + "scale(", null, ",", null, ")");
          q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
        } else if (xb !== 1 || yb !== 1) {
          s.push(pop(s) + "scale(" + xb + "," + yb + ")");
        }
      }

      return function(a, b) {
        var s = [], // string constants and placeholders
            q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
          var i = -1, n = q.length, o;
          while (++i < n) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        };
      };
    }

    var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

    var epsilon2$1 = 1e-12;

    function cosh$3(x) {
      return ((x = Math.exp(x)) + 1 / x) / 2;
    }

    function sinh$3(x) {
      return ((x = Math.exp(x)) - 1 / x) / 2;
    }

    function tanh$4(x) {
      return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }

    var interpolateZoom = (function zoomRho(rho, rho2, rho4) {

      // p0 = [ux0, uy0, w0]
      // p1 = [ux1, uy1, w1]
      function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
            ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
            dx = ux1 - ux0,
            dy = uy1 - uy0,
            d2 = dx * dx + dy * dy,
            i,
            S;

        // Special case for u0 ≅ u1.
        if (d2 < epsilon2$1) {
          S = Math.log(w1 / w0) / rho;
          i = function(t) {
            return [
              ux0 + t * dx,
              uy0 + t * dy,
              w0 * Math.exp(rho * t * S)
            ];
          };
        }

        // General case.
        else {
          var d1 = Math.sqrt(d2),
              b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
              b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
              r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
              r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
          S = (r1 - r0) / rho;
          i = function(t) {
            var s = t * S,
                coshr0 = cosh$3(r0),
                u = w0 / (rho2 * d1) * (coshr0 * tanh$4(rho * s + r0) - sinh$3(r0));
            return [
              ux0 + u * dx,
              uy0 + u * dy,
              w0 * coshr0 / cosh$3(rho * s + r0)
            ];
          };
        }

        i.duration = S * 1000 * rho / Math.SQRT2;

        return i;
      }

      zoom.rho = function(_) {
        var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
        return zoomRho(_1, _2, _4);
      };

      return zoom;
    })(Math.SQRT2, 2, 4);

    function hsl(hue) {
      return function(start, end) {
        var h = hue((start = hsl$2(start)).h, (end = hsl$2(end)).h),
            s = nogamma(start.s, end.s),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.s = s(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hsl$1 = hsl(hue$1);
    var hslLong = hsl(nogamma);

    function lab(start, end) {
      var l = nogamma((start = lab$1(start)).l, (end = lab$1(end)).l),
          a = nogamma(start.a, end.a),
          b = nogamma(start.b, end.b),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }

    function hcl(hue) {
      return function(start, end) {
        var h = hue((start = hcl$2(start)).h, (end = hcl$2(end)).h),
            c = nogamma(start.c, end.c),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.c = c(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hcl$1 = hcl(hue$1);
    var hclLong = hcl(nogamma);

    function cubehelix$1(hue) {
      return (function cubehelixGamma(y) {
        y = +y;

        function cubehelix(start, end) {
          var h = hue((start = cubehelix$3(start)).h, (end = cubehelix$3(end)).h),
              s = nogamma(start.s, end.s),
              l = nogamma(start.l, end.l),
              opacity = nogamma(start.opacity, end.opacity);
          return function(t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(Math.pow(t, y));
            start.opacity = opacity(t);
            return start + "";
          };
        }

        cubehelix.gamma = cubehelixGamma;

        return cubehelix;
      })(1);
    }

    var cubehelix$2 = cubehelix$1(hue$1);
    var cubehelixLong = cubehelix$1(nogamma);

    function piecewise(interpolate, values) {
      if (values === undefined) values = interpolate, interpolate = interpolate$2;
      var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
      while (i < n) I[i] = interpolate(v, v = values[++i]);
      return function(t) {
        var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
        return I[i](t - i);
      };
    }

    function quantize$1(interpolator, n) {
      var samples = new Array(n);
      for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
      return samples;
    }

    var frame$1 = 0, // is an animation frame pending?
        timeout$1 = 0, // is a timeout pending?
        interval$1 = 0, // are any timers active?
        pokeDelay = 1000, // how frequently we check for clock skew
        taskHead,
        taskTail,
        clockLast = 0,
        clockNow = 0,
        clockSkew = 0,
        clock = typeof performance === "object" && performance.now ? performance : Date,
        setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

    function now$1() {
      return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
    }

    function clearNow() {
      clockNow = 0;
    }

    function Timer() {
      this._call =
      this._time =
      this._next = null;
    }

    Timer.prototype = timer.prototype = {
      constructor: Timer,
      restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? now$1() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail) taskTail._next = this;
          else taskHead = this;
          taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
      },
      stop: function() {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep();
        }
      }
    };

    function timer(callback, delay, time) {
      var t = new Timer;
      t.restart(callback, delay, time);
      return t;
    }

    function timerFlush() {
      now$1(); // Get the current time, if not already set.
      ++frame$1; // Pretend we’ve set an alarm, if we haven’t already.
      var t = taskHead, e;
      while (t) {
        if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
        t = t._next;
      }
      --frame$1;
    }

    function wake() {
      clockNow = (clockLast = clock.now()) + clockSkew;
      frame$1 = timeout$1 = 0;
      try {
        timerFlush();
      } finally {
        frame$1 = 0;
        nap();
        clockNow = 0;
      }
    }

    function poke() {
      var now = clock.now(), delay = now - clockLast;
      if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
    }

    function nap() {
      var t0, t1 = taskHead, t2, time = Infinity;
      while (t1) {
        if (t1._call) {
          if (time > t1._time) time = t1._time;
          t0 = t1, t1 = t1._next;
        } else {
          t2 = t1._next, t1._next = null;
          t1 = t0 ? t0._next = t2 : taskHead = t2;
        }
      }
      taskTail = t0;
      sleep(time);
    }

    function sleep(time) {
      if (frame$1) return; // Soonest alarm already set, or will be.
      if (timeout$1) timeout$1 = clearTimeout(timeout$1);
      var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
      if (delay > 24) {
        if (time < Infinity) timeout$1 = setTimeout(wake, time - clock.now() - clockSkew);
        if (interval$1) interval$1 = clearInterval(interval$1);
      } else {
        if (!interval$1) clockLast = clock.now(), interval$1 = setInterval(poke, pokeDelay);
        frame$1 = 1, setFrame(wake);
      }
    }

    function timeout(callback, delay, time) {
      var t = new Timer;
      delay = delay == null ? 0 : +delay;
      t.restart(elapsed => {
        t.stop();
        callback(elapsed + delay);
      }, delay, time);
      return t;
    }

    function interval(callback, delay, time) {
      var t = new Timer, total = delay;
      if (delay == null) return t.restart(callback, delay, time), t;
      t._restart = t.restart;
      t.restart = function(callback, delay, time) {
        delay = +delay, time = time == null ? now$1() : +time;
        t._restart(function tick(elapsed) {
          elapsed += total;
          t._restart(tick, total += delay, time);
          callback(elapsed);
        }, delay, time);
      };
      t.restart(callback, delay, time);
      return t;
    }

    var emptyOn = dispatch("start", "end", "cancel", "interrupt");
    var emptyTween = [];

    var CREATED = 0;
    var SCHEDULED = 1;
    var STARTING = 2;
    var STARTED = 3;
    var RUNNING = 4;
    var ENDING = 5;
    var ENDED = 6;

    function schedule(node, name, id, index, group, timing) {
      var schedules = node.__transition;
      if (!schedules) node.__transition = {};
      else if (id in schedules) return;
      create(node, id, {
        name: name,
        index: index, // For context during callback.
        group: group, // For context during callback.
        on: emptyOn,
        tween: emptyTween,
        time: timing.time,
        delay: timing.delay,
        duration: timing.duration,
        ease: timing.ease,
        timer: null,
        state: CREATED
      });
    }

    function init(node, id) {
      var schedule = get(node, id);
      if (schedule.state > CREATED) throw new Error("too late; already scheduled");
      return schedule;
    }

    function set(node, id) {
      var schedule = get(node, id);
      if (schedule.state > STARTED) throw new Error("too late; already running");
      return schedule;
    }

    function get(node, id) {
      var schedule = node.__transition;
      if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
      return schedule;
    }

    function create(node, id, self) {
      var schedules = node.__transition,
          tween;

      // Initialize the self timer when the transition is created.
      // Note the actual delay is not known until the first callback!
      schedules[id] = self;
      self.timer = timer(schedule, 0, self.time);

      function schedule(elapsed) {
        self.state = SCHEDULED;
        self.timer.restart(start, self.delay, self.time);

        // If the elapsed delay is less than our first sleep, start immediately.
        if (self.delay <= elapsed) start(elapsed - self.delay);
      }

      function start(elapsed) {
        var i, j, n, o;

        // If the state is not SCHEDULED, then we previously errored on start.
        if (self.state !== SCHEDULED) return stop();

        for (i in schedules) {
          o = schedules[i];
          if (o.name !== self.name) continue;

          // While this element already has a starting transition during this frame,
          // defer starting an interrupting transition until that transition has a
          // chance to tick (and possibly end); see d3/d3-transition#54!
          if (o.state === STARTED) return timeout(start);

          // Interrupt the active transition, if any.
          if (o.state === RUNNING) {
            o.state = ENDED;
            o.timer.stop();
            o.on.call("interrupt", node, node.__data__, o.index, o.group);
            delete schedules[i];
          }

          // Cancel any pre-empted transitions.
          else if (+i < id) {
            o.state = ENDED;
            o.timer.stop();
            o.on.call("cancel", node, node.__data__, o.index, o.group);
            delete schedules[i];
          }
        }

        // Defer the first tick to end of the current frame; see d3/d3#1576.
        // Note the transition may be canceled after start and before the first tick!
        // Note this must be scheduled before the start event; see d3/d3-transition#16!
        // Assuming this is successful, subsequent callbacks go straight to tick.
        timeout(function() {
          if (self.state === STARTED) {
            self.state = RUNNING;
            self.timer.restart(tick, self.delay, self.time);
            tick(elapsed);
          }
        });

        // Dispatch the start event.
        // Note this must be done before the tween are initialized.
        self.state = STARTING;
        self.on.call("start", node, node.__data__, self.index, self.group);
        if (self.state !== STARTING) return; // interrupted
        self.state = STARTED;

        // Initialize the tween, deleting null tween.
        tween = new Array(n = self.tween.length);
        for (i = 0, j = -1; i < n; ++i) {
          if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
            tween[++j] = o;
          }
        }
        tween.length = j + 1;
      }

      function tick(elapsed) {
        var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
            i = -1,
            n = tween.length;

        while (++i < n) {
          tween[i].call(node, t);
        }

        // Dispatch the end event.
        if (self.state === ENDING) {
          self.on.call("end", node, node.__data__, self.index, self.group);
          stop();
        }
      }

      function stop() {
        self.state = ENDED;
        self.timer.stop();
        delete schedules[id];
        for (var i in schedules) return; // eslint-disable-line no-unused-vars
        delete node.__transition;
      }
    }

    function interrupt(node, name) {
      var schedules = node.__transition,
          schedule,
          active,
          empty = true,
          i;

      if (!schedules) return;

      name = name == null ? null : name + "";

      for (i in schedules) {
        if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
        active = schedule.state > STARTING && schedule.state < ENDING;
        schedule.state = ENDED;
        schedule.timer.stop();
        schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
        delete schedules[i];
      }

      if (empty) delete node.__transition;
    }

    function selection_interrupt(name) {
      return this.each(function() {
        interrupt(this, name);
      });
    }

    function tweenRemove(id, name) {
      var tween0, tween1;
      return function() {
        var schedule = set(this, id),
            tween = schedule.tween;

        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
          tween1 = tween0 = tween;
          for (var i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
              tween1 = tween1.slice();
              tween1.splice(i, 1);
              break;
            }
          }
        }

        schedule.tween = tween1;
      };
    }

    function tweenFunction(id, name, value) {
      var tween0, tween1;
      if (typeof value !== "function") throw new Error;
      return function() {
        var schedule = set(this, id),
            tween = schedule.tween;

        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
          tween1 = (tween0 = tween).slice();
          for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
              tween1[i] = t;
              break;
            }
          }
          if (i === n) tween1.push(t);
        }

        schedule.tween = tween1;
      };
    }

    function transition_tween(name, value) {
      var id = this._id;

      name += "";

      if (arguments.length < 2) {
        var tween = get(this.node(), id).tween;
        for (var i = 0, n = tween.length, t; i < n; ++i) {
          if ((t = tween[i]).name === name) {
            return t.value;
          }
        }
        return null;
      }

      return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
    }

    function tweenValue(transition, name, value) {
      var id = transition._id;

      transition.each(function() {
        var schedule = set(this, id);
        (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
      });

      return function(node) {
        return get(node, id).value[name];
      };
    }

    function interpolate$1(a, b) {
      var c;
      return (typeof b === "number" ? interpolateNumber
          : b instanceof color ? interpolateRgb
          : (c = color(b)) ? (b = c, interpolateRgb)
          : interpolateString)(a, b);
    }

    function attrRemove(name) {
      return function() {
        this.removeAttribute(name);
      };
    }

    function attrRemoveNS(fullname) {
      return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
      };
    }

    function attrConstant(name, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = this.getAttribute(name);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function attrConstantNS(fullname, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = this.getAttributeNS(fullname.space, fullname.local);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function attrFunction(name, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttribute(name);
        string0 = this.getAttribute(name);
        string1 = value1 + "";
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function attrFunctionNS(fullname, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
        string0 = this.getAttributeNS(fullname.space, fullname.local);
        string1 = value1 + "";
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function transition_attr(name, value) {
      var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate$1;
      return this.attrTween(name, typeof value === "function"
          ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))
          : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)
          : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
    }

    function attrInterpolate(name, i) {
      return function(t) {
        this.setAttribute(name, i.call(this, t));
      };
    }

    function attrInterpolateNS(fullname, i) {
      return function(t) {
        this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
      };
    }

    function attrTweenNS(fullname, value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function attrTween(name, value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function transition_attrTween(name, value) {
      var key = "attr." + name;
      if (arguments.length < 2) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      var fullname = namespace(name);
      return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
    }

    function delayFunction(id, value) {
      return function() {
        init(this, id).delay = +value.apply(this, arguments);
      };
    }

    function delayConstant(id, value) {
      return value = +value, function() {
        init(this, id).delay = value;
      };
    }

    function transition_delay(value) {
      var id = this._id;

      return arguments.length
          ? this.each((typeof value === "function"
              ? delayFunction
              : delayConstant)(id, value))
          : get(this.node(), id).delay;
    }

    function durationFunction(id, value) {
      return function() {
        set(this, id).duration = +value.apply(this, arguments);
      };
    }

    function durationConstant(id, value) {
      return value = +value, function() {
        set(this, id).duration = value;
      };
    }

    function transition_duration(value) {
      var id = this._id;

      return arguments.length
          ? this.each((typeof value === "function"
              ? durationFunction
              : durationConstant)(id, value))
          : get(this.node(), id).duration;
    }

    function easeConstant(id, value) {
      if (typeof value !== "function") throw new Error;
      return function() {
        set(this, id).ease = value;
      };
    }

    function transition_ease(value) {
      var id = this._id;

      return arguments.length
          ? this.each(easeConstant(id, value))
          : get(this.node(), id).ease;
    }

    function easeVarying(id, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (typeof v !== "function") throw new Error;
        set(this, id).ease = v;
      };
    }

    function transition_easeVarying(value) {
      if (typeof value !== "function") throw new Error;
      return this.each(easeVarying(this._id, value));
    }

    function transition_filter(match) {
      if (typeof match !== "function") match = matcher(match);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
          }
        }
      }

      return new Transition(subgroups, this._parents, this._name, this._id);
    }

    function transition_merge(transition) {
      if (transition._id !== this._id) throw new Error;

      for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node;
          }
        }
      }

      for (; j < m0; ++j) {
        merges[j] = groups0[j];
      }

      return new Transition(merges, this._parents, this._name, this._id);
    }

    function start(name) {
      return (name + "").trim().split(/^|\s+/).every(function(t) {
        var i = t.indexOf(".");
        if (i >= 0) t = t.slice(0, i);
        return !t || t === "start";
      });
    }

    function onFunction(id, name, listener) {
      var on0, on1, sit = start(name) ? init : set;
      return function() {
        var schedule = sit(this, id),
            on = schedule.on;

        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

        schedule.on = on1;
      };
    }

    function transition_on(name, listener) {
      var id = this._id;

      return arguments.length < 2
          ? get(this.node(), id).on.on(name)
          : this.each(onFunction(id, name, listener));
    }

    function removeFunction(id) {
      return function() {
        var parent = this.parentNode;
        for (var i in this.__transition) if (+i !== id) return;
        if (parent) parent.removeChild(this);
      };
    }

    function transition_remove() {
      return this.on("end.remove", removeFunction(this._id));
    }

    function transition_select(select) {
      var name = this._name,
          id = this._id;

      if (typeof select !== "function") select = selector(select);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
            schedule(subgroup[i], name, id, i, subgroup, get(node, id));
          }
        }
      }

      return new Transition(subgroups, this._parents, name, id);
    }

    function transition_selectAll(select) {
      var name = this._name,
          id = this._id;

      if (typeof select !== "function") select = selectorAll(select);

      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
              if (child = children[k]) {
                schedule(child, name, id, k, children, inherit);
              }
            }
            subgroups.push(children);
            parents.push(node);
          }
        }
      }

      return new Transition(subgroups, parents, name, id);
    }

    var Selection = selection.prototype.constructor;

    function transition_selection() {
      return new Selection(this._groups, this._parents);
    }

    function styleNull(name, interpolate) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0 = styleValue(this, name),
            string1 = (this.style.removeProperty(name), styleValue(this, name));
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, string10 = string1);
      };
    }

    function styleRemove(name) {
      return function() {
        this.style.removeProperty(name);
      };
    }

    function styleConstant(name, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = styleValue(this, name);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function styleFunction(name, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0 = styleValue(this, name),
            value1 = value(this),
            string1 = value1 + "";
        if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function styleMaybeRemove(id, name) {
      var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
      return function() {
        var schedule = set(this, id),
            on = schedule.on,
            listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;

        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);

        schedule.on = on1;
      };
    }

    function transition_style(name, value, priority) {
      var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$1;
      return value == null ? this
          .styleTween(name, styleNull(name, i))
          .on("end.style." + name, styleRemove(name))
        : typeof value === "function" ? this
          .styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value)))
          .each(styleMaybeRemove(this._id, name))
        : this
          .styleTween(name, styleConstant(name, i, value), priority)
          .on("end.style." + name, null);
    }

    function styleInterpolate(name, i, priority) {
      return function(t) {
        this.style.setProperty(name, i.call(this, t), priority);
      };
    }

    function styleTween(name, value, priority) {
      var t, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
        return t;
      }
      tween._value = value;
      return tween;
    }

    function transition_styleTween(name, value, priority) {
      var key = "style." + (name += "");
      if (arguments.length < 2) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
    }

    function textConstant(value) {
      return function() {
        this.textContent = value;
      };
    }

    function textFunction(value) {
      return function() {
        var value1 = value(this);
        this.textContent = value1 == null ? "" : value1;
      };
    }

    function transition_text(value) {
      return this.tween("text", typeof value === "function"
          ? textFunction(tweenValue(this, "text", value))
          : textConstant(value == null ? "" : value + ""));
    }

    function textInterpolate(i) {
      return function(t) {
        this.textContent = i.call(this, t);
      };
    }

    function textTween(value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function transition_textTween(value) {
      var key = "text";
      if (arguments.length < 1) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      return this.tween(key, textTween(value));
    }

    function transition_transition() {
      var name = this._name,
          id0 = this._id,
          id1 = newId();

      for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            var inherit = get(node, id0);
            schedule(node, name, id1, i, group, {
              time: inherit.time + inherit.delay + inherit.duration,
              delay: 0,
              duration: inherit.duration,
              ease: inherit.ease
            });
          }
        }
      }

      return new Transition(groups, this._parents, name, id1);
    }

    function transition_end() {
      var on0, on1, that = this, id = that._id, size = that.size();
      return new Promise(function(resolve, reject) {
        var cancel = {value: reject},
            end = {value: function() { if (--size === 0) resolve(); }};

        that.each(function() {
          var schedule = set(this, id),
              on = schedule.on;

          // If this node shared a dispatch with the previous node,
          // just assign the updated shared dispatch and we’re done!
          // Otherwise, copy-on-write.
          if (on !== on0) {
            on1 = (on0 = on).copy();
            on1._.cancel.push(cancel);
            on1._.interrupt.push(cancel);
            on1._.end.push(end);
          }

          schedule.on = on1;
        });

        // The selection was empty, resolve end immediately
        if (size === 0) resolve();
      });
    }

    var id = 0;

    function Transition(groups, parents, name, id) {
      this._groups = groups;
      this._parents = parents;
      this._name = name;
      this._id = id;
    }

    function transition(name) {
      return selection().transition(name);
    }

    function newId() {
      return ++id;
    }

    var selection_prototype = selection.prototype;

    Transition.prototype = transition.prototype = {
      constructor: Transition,
      select: transition_select,
      selectAll: transition_selectAll,
      selectChild: selection_prototype.selectChild,
      selectChildren: selection_prototype.selectChildren,
      filter: transition_filter,
      merge: transition_merge,
      selection: transition_selection,
      transition: transition_transition,
      call: selection_prototype.call,
      nodes: selection_prototype.nodes,
      node: selection_prototype.node,
      size: selection_prototype.size,
      empty: selection_prototype.empty,
      each: selection_prototype.each,
      on: transition_on,
      attr: transition_attr,
      attrTween: transition_attrTween,
      style: transition_style,
      styleTween: transition_styleTween,
      text: transition_text,
      textTween: transition_textTween,
      remove: transition_remove,
      tween: transition_tween,
      delay: transition_delay,
      duration: transition_duration,
      ease: transition_ease,
      easeVarying: transition_easeVarying,
      end: transition_end,
      [Symbol.iterator]: selection_prototype[Symbol.iterator]
    };

    const linear$1 = t => +t;

    function quadIn(t) {
      return t * t;
    }

    function quadOut(t) {
      return t * (2 - t);
    }

    function quadInOut(t) {
      return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
    }

    function cubicIn(t) {
      return t * t * t;
    }

    function cubicOut(t) {
      return --t * t * t + 1;
    }

    function cubicInOut(t) {
      return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
    }

    var exponent$2 = 3;

    var polyIn = (function custom(e) {
      e = +e;

      function polyIn(t) {
        return Math.pow(t, e);
      }

      polyIn.exponent = custom;

      return polyIn;
    })(exponent$2);

    var polyOut = (function custom(e) {
      e = +e;

      function polyOut(t) {
        return 1 - Math.pow(1 - t, e);
      }

      polyOut.exponent = custom;

      return polyOut;
    })(exponent$2);

    var polyInOut = (function custom(e) {
      e = +e;

      function polyInOut(t) {
        return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
      }

      polyInOut.exponent = custom;

      return polyInOut;
    })(exponent$2);

    var pi$4 = Math.PI,
        halfPi$3 = pi$4 / 2;

    function sinIn(t) {
      return (+t === 1) ? 1 : 1 - Math.cos(t * halfPi$3);
    }

    function sinOut(t) {
      return Math.sin(t * halfPi$3);
    }

    function sinInOut(t) {
      return (1 - Math.cos(pi$4 * t)) / 2;
    }

    // tpmt is two power minus ten times t scaled to [0,1]
    function tpmt(x) {
      return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;
    }

    function expIn(t) {
      return tpmt(1 - +t);
    }

    function expOut(t) {
      return 1 - tpmt(t);
    }

    function expInOut(t) {
      return ((t *= 2) <= 1 ? tpmt(1 - t) : 2 - tpmt(t - 1)) / 2;
    }

    function circleIn(t) {
      return 1 - Math.sqrt(1 - t * t);
    }

    function circleOut(t) {
      return Math.sqrt(1 - --t * t);
    }

    function circleInOut(t) {
      return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
    }

    var b1 = 4 / 11,
        b2 = 6 / 11,
        b3 = 8 / 11,
        b4 = 3 / 4,
        b5 = 9 / 11,
        b6 = 10 / 11,
        b7 = 15 / 16,
        b8 = 21 / 22,
        b9 = 63 / 64,
        b0 = 1 / b1 / b1;

    function bounceIn(t) {
      return 1 - bounceOut(1 - t);
    }

    function bounceOut(t) {
      return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
    }

    function bounceInOut(t) {
      return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
    }

    var overshoot = 1.70158;

    var backIn = (function custom(s) {
      s = +s;

      function backIn(t) {
        return (t = +t) * t * (s * (t - 1) + t);
      }

      backIn.overshoot = custom;

      return backIn;
    })(overshoot);

    var backOut = (function custom(s) {
      s = +s;

      function backOut(t) {
        return --t * t * ((t + 1) * s + t) + 1;
      }

      backOut.overshoot = custom;

      return backOut;
    })(overshoot);

    var backInOut = (function custom(s) {
      s = +s;

      function backInOut(t) {
        return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
      }

      backInOut.overshoot = custom;

      return backInOut;
    })(overshoot);

    var tau$5 = 2 * Math.PI,
        amplitude = 1,
        period = 0.3;

    var elasticIn = (function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$5);

      function elasticIn(t) {
        return a * tpmt(-(--t)) * Math.sin((s - t) / p);
      }

      elasticIn.amplitude = function(a) { return custom(a, p * tau$5); };
      elasticIn.period = function(p) { return custom(a, p); };

      return elasticIn;
    })(amplitude, period);

    var elasticOut = (function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$5);

      function elasticOut(t) {
        return 1 - a * tpmt(t = +t) * Math.sin((t + s) / p);
      }

      elasticOut.amplitude = function(a) { return custom(a, p * tau$5); };
      elasticOut.period = function(p) { return custom(a, p); };

      return elasticOut;
    })(amplitude, period);

    var elasticInOut = (function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$5);

      function elasticInOut(t) {
        return ((t = t * 2 - 1) < 0
            ? a * tpmt(-t) * Math.sin((s - t) / p)
            : 2 - a * tpmt(t) * Math.sin((s + t) / p)) / 2;
      }

      elasticInOut.amplitude = function(a) { return custom(a, p * tau$5); };
      elasticInOut.period = function(p) { return custom(a, p); };

      return elasticInOut;
    })(amplitude, period);

    var defaultTiming = {
      time: null, // Set on use.
      delay: 0,
      duration: 250,
      ease: cubicInOut
    };

    function inherit(node, id) {
      var timing;
      while (!(timing = node.__transition) || !(timing = timing[id])) {
        if (!(node = node.parentNode)) {
          throw new Error(`transition ${id} not found`);
        }
      }
      return timing;
    }

    function selection_transition(name) {
      var id,
          timing;

      if (name instanceof Transition) {
        id = name._id, name = name._name;
      } else {
        id = newId(), (timing = defaultTiming).time = now$1(), name = name == null ? null : name + "";
      }

      for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            schedule(node, name, id, i, group, timing || inherit(node, id));
          }
        }
      }

      return new Transition(groups, this._parents, name, id);
    }

    selection.prototype.interrupt = selection_interrupt;
    selection.prototype.transition = selection_transition;

    var root = [null];

    function active(node, name) {
      var schedules = node.__transition,
          schedule,
          i;

      if (schedules) {
        name = name == null ? null : name + "";
        for (i in schedules) {
          if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
            return new Transition([[node]], root, name, +i);
          }
        }
      }

      return null;
    }

    var constant$7 = x => () => x;

    function BrushEvent(type, {
      sourceEvent,
      target,
      selection,
      mode,
      dispatch
    }) {
      Object.defineProperties(this, {
        type: {value: type, enumerable: true, configurable: true},
        sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
        target: {value: target, enumerable: true, configurable: true},
        selection: {value: selection, enumerable: true, configurable: true},
        mode: {value: mode, enumerable: true, configurable: true},
        _: {value: dispatch}
      });
    }

    function nopropagation$1(event) {
      event.stopImmediatePropagation();
    }

    function noevent$1(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    var MODE_DRAG = {name: "drag"},
        MODE_SPACE = {name: "space"},
        MODE_HANDLE = {name: "handle"},
        MODE_CENTER = {name: "center"};

    const {abs: abs$6, max: max$5, min: min$4} = Math;

    function number1(e) {
      return [+e[0], +e[1]];
    }

    function number2(e) {
      return [number1(e[0]), number1(e[1])];
    }

    var X = {
      name: "x",
      handles: ["w", "e"].map(type),
      input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },
      output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
    };

    var Y = {
      name: "y",
      handles: ["n", "s"].map(type),
      input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },
      output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
    };

    var XY = {
      name: "xy",
      handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
      input: function(xy) { return xy == null ? null : number2(xy); },
      output: function(xy) { return xy; }
    };

    var cursors = {
      overlay: "crosshair",
      selection: "move",
      n: "ns-resize",
      e: "ew-resize",
      s: "ns-resize",
      w: "ew-resize",
      nw: "nwse-resize",
      ne: "nesw-resize",
      se: "nwse-resize",
      sw: "nesw-resize"
    };

    var flipX = {
      e: "w",
      w: "e",
      nw: "ne",
      ne: "nw",
      se: "sw",
      sw: "se"
    };

    var flipY = {
      n: "s",
      s: "n",
      nw: "sw",
      ne: "se",
      se: "ne",
      sw: "nw"
    };

    var signsX = {
      overlay: +1,
      selection: +1,
      n: null,
      e: +1,
      s: null,
      w: -1,
      nw: -1,
      ne: +1,
      se: +1,
      sw: -1
    };

    var signsY = {
      overlay: +1,
      selection: +1,
      n: -1,
      e: null,
      s: +1,
      w: null,
      nw: -1,
      ne: -1,
      se: +1,
      sw: +1
    };

    function type(t) {
      return {type: t};
    }

    // Ignore right-click, since that should open the context menu.
    function defaultFilter$1(event) {
      return !event.ctrlKey && !event.button;
    }

    function defaultExtent$1() {
      var svg = this.ownerSVGElement || this;
      if (svg.hasAttribute("viewBox")) {
        svg = svg.viewBox.baseVal;
        return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
      }
      return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
    }

    function defaultTouchable$1() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }

    // Like d3.local, but with the name “__brush” rather than auto-generated.
    function local(node) {
      while (!node.__brush) if (!(node = node.parentNode)) return;
      return node.__brush;
    }

    function empty(extent) {
      return extent[0][0] === extent[1][0]
          || extent[0][1] === extent[1][1];
    }

    function brushSelection(node) {
      var state = node.__brush;
      return state ? state.dim.output(state.selection) : null;
    }

    function brushX() {
      return brush$1(X);
    }

    function brushY() {
      return brush$1(Y);
    }

    function brush() {
      return brush$1(XY);
    }

    function brush$1(dim) {
      var extent = defaultExtent$1,
          filter = defaultFilter$1,
          touchable = defaultTouchable$1,
          keys = true,
          listeners = dispatch("start", "brush", "end"),
          handleSize = 6,
          touchending;

      function brush(group) {
        var overlay = group
            .property("__brush", initialize)
          .selectAll(".overlay")
          .data([type("overlay")]);

        overlay.enter().append("rect")
            .attr("class", "overlay")
            .attr("pointer-events", "all")
            .attr("cursor", cursors.overlay)
          .merge(overlay)
            .each(function() {
              var extent = local(this).extent;
              select$3(this)
                  .attr("x", extent[0][0])
                  .attr("y", extent[0][1])
                  .attr("width", extent[1][0] - extent[0][0])
                  .attr("height", extent[1][1] - extent[0][1]);
            });

        group.selectAll(".selection")
          .data([type("selection")])
          .enter().append("rect")
            .attr("class", "selection")
            .attr("cursor", cursors.selection)
            .attr("fill", "#777")
            .attr("fill-opacity", 0.3)
            .attr("stroke", "#fff")
            .attr("shape-rendering", "crispEdges");

        var handle = group.selectAll(".handle")
          .data(dim.handles, function(d) { return d.type; });

        handle.exit().remove();

        handle.enter().append("rect")
            .attr("class", function(d) { return "handle handle--" + d.type; })
            .attr("cursor", function(d) { return cursors[d.type]; });

        group
            .each(redraw)
            .attr("fill", "none")
            .attr("pointer-events", "all")
            .on("mousedown.brush", started)
          .filter(touchable)
            .on("touchstart.brush", started)
            .on("touchmove.brush", touchmoved)
            .on("touchend.brush touchcancel.brush", touchended)
            .style("touch-action", "none")
            .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      }

      brush.move = function(group, selection, event) {
        if (group.tween) {
          group
              .on("start.brush", function(event) { emitter(this, arguments).beforestart().start(event); })
              .on("interrupt.brush end.brush", function(event) { emitter(this, arguments).end(event); })
              .tween("brush", function() {
                var that = this,
                    state = that.__brush,
                    emit = emitter(that, arguments),
                    selection0 = state.selection,
                    selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
                    i = interpolate$2(selection0, selection1);

                function tween(t) {
                  state.selection = t === 1 && selection1 === null ? null : i(t);
                  redraw.call(that);
                  emit.brush();
                }

                return selection0 !== null && selection1 !== null ? tween : tween(1);
              });
        } else {
          group
              .each(function() {
                var that = this,
                    args = arguments,
                    state = that.__brush,
                    selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
                    emit = emitter(that, args).beforestart();

                interrupt(that);
                state.selection = selection1 === null ? null : selection1;
                redraw.call(that);
                emit.start(event).brush(event).end(event);
              });
        }
      };

      brush.clear = function(group, event) {
        brush.move(group, null, event);
      };

      function redraw() {
        var group = select$3(this),
            selection = local(this).selection;

        if (selection) {
          group.selectAll(".selection")
              .style("display", null)
              .attr("x", selection[0][0])
              .attr("y", selection[0][1])
              .attr("width", selection[1][0] - selection[0][0])
              .attr("height", selection[1][1] - selection[0][1]);

          group.selectAll(".handle")
              .style("display", null)
              .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })
              .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })
              .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })
              .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });
        }

        else {
          group.selectAll(".selection,.handle")
              .style("display", "none")
              .attr("x", null)
              .attr("y", null)
              .attr("width", null)
              .attr("height", null);
        }
      }

      function emitter(that, args, clean) {
        var emit = that.__brush.emitter;
        return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
      }

      function Emitter(that, args, clean) {
        this.that = that;
        this.args = args;
        this.state = that.__brush;
        this.active = 0;
        this.clean = clean;
      }

      Emitter.prototype = {
        beforestart: function() {
          if (++this.active === 1) this.state.emitter = this, this.starting = true;
          return this;
        },
        start: function(event, mode) {
          if (this.starting) this.starting = false, this.emit("start", event, mode);
          else this.emit("brush", event);
          return this;
        },
        brush: function(event, mode) {
          this.emit("brush", event, mode);
          return this;
        },
        end: function(event, mode) {
          if (--this.active === 0) delete this.state.emitter, this.emit("end", event, mode);
          return this;
        },
        emit: function(type, event, mode) {
          var d = select$3(this.that).datum();
          listeners.call(
            type,
            this.that,
            new BrushEvent(type, {
              sourceEvent: event,
              target: brush,
              selection: dim.output(this.state.selection),
              mode,
              dispatch: listeners
            }),
            d
          );
        }
      };

      function started(event) {
        if (touchending && !event.touches) return;
        if (!filter.apply(this, arguments)) return;

        var that = this,
            type = event.target.__data__.type,
            mode = (keys && event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),
            signX = dim === Y ? null : signsX[type],
            signY = dim === X ? null : signsY[type],
            state = local(that),
            extent = state.extent,
            selection = state.selection,
            W = extent[0][0], w0, w1,
            N = extent[0][1], n0, n1,
            E = extent[1][0], e0, e1,
            S = extent[1][1], s0, s1,
            dx = 0,
            dy = 0,
            moving,
            shifting = signX && signY && keys && event.shiftKey,
            lockX,
            lockY,
            points = Array.from(event.touches || [event], t => {
              const i = t.identifier;
              t = pointer(t, that);
              t.point0 = t.slice();
              t.identifier = i;
              return t;
            });

        interrupt(that);
        var emit = emitter(that, arguments, true).beforestart();

        if (type === "overlay") {
          if (selection) moving = true;
          const pts = [points[0], points[1] || points[0]];
          state.selection = selection = [[
              w0 = dim === Y ? W : min$4(pts[0][0], pts[1][0]),
              n0 = dim === X ? N : min$4(pts[0][1], pts[1][1])
            ], [
              e0 = dim === Y ? E : max$5(pts[0][0], pts[1][0]),
              s0 = dim === X ? S : max$5(pts[0][1], pts[1][1])
            ]];
          if (points.length > 1) move(event);
        } else {
          w0 = selection[0][0];
          n0 = selection[0][1];
          e0 = selection[1][0];
          s0 = selection[1][1];
        }

        w1 = w0;
        n1 = n0;
        e1 = e0;
        s1 = s0;

        var group = select$3(that)
            .attr("pointer-events", "none");

        var overlay = group.selectAll(".overlay")
            .attr("cursor", cursors[type]);

        if (event.touches) {
          emit.moved = moved;
          emit.ended = ended;
        } else {
          var view = select$3(event.view)
              .on("mousemove.brush", moved, true)
              .on("mouseup.brush", ended, true);
          if (keys) view
              .on("keydown.brush", keydowned, true)
              .on("keyup.brush", keyupped, true);

          dragDisable(event.view);
        }

        redraw.call(that);
        emit.start(event, mode.name);

        function moved(event) {
          for (const p of event.changedTouches || [event]) {
            for (const d of points)
              if (d.identifier === p.identifier) d.cur = pointer(p, that);
          }
          if (shifting && !lockX && !lockY && points.length === 1) {
            const point = points[0];
            if (abs$6(point.cur[0] - point[0]) > abs$6(point.cur[1] - point[1]))
              lockY = true;
            else
              lockX = true;
          }
          for (const point of points)
            if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];
          moving = true;
          noevent$1(event);
          move(event);
        }

        function move(event) {
          const point = points[0], point0 = point.point0;
          var t;

          dx = point[0] - point0[0];
          dy = point[1] - point0[1];

          switch (mode) {
            case MODE_SPACE:
            case MODE_DRAG: {
              if (signX) dx = max$5(W - w0, min$4(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
              if (signY) dy = max$5(N - n0, min$4(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
              break;
            }
            case MODE_HANDLE: {
              if (points[1]) {
                if (signX) w1 = max$5(W, min$4(E, points[0][0])), e1 = max$5(W, min$4(E, points[1][0])), signX = 1;
                if (signY) n1 = max$5(N, min$4(S, points[0][1])), s1 = max$5(N, min$4(S, points[1][1])), signY = 1;
              } else {
                if (signX < 0) dx = max$5(W - w0, min$4(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                else if (signX > 0) dx = max$5(W - e0, min$4(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                if (signY < 0) dy = max$5(N - n0, min$4(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                else if (signY > 0) dy = max$5(N - s0, min$4(S - s0, dy)), n1 = n0, s1 = s0 + dy;
              }
              break;
            }
            case MODE_CENTER: {
              if (signX) w1 = max$5(W, min$4(E, w0 - dx * signX)), e1 = max$5(W, min$4(E, e0 + dx * signX));
              if (signY) n1 = max$5(N, min$4(S, n0 - dy * signY)), s1 = max$5(N, min$4(S, s0 + dy * signY));
              break;
            }
          }

          if (e1 < w1) {
            signX *= -1;
            t = w0, w0 = e0, e0 = t;
            t = w1, w1 = e1, e1 = t;
            if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
          }

          if (s1 < n1) {
            signY *= -1;
            t = n0, n0 = s0, s0 = t;
            t = n1, n1 = s1, s1 = t;
            if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
          }

          if (state.selection) selection = state.selection; // May be set by brush.move!
          if (lockX) w1 = selection[0][0], e1 = selection[1][0];
          if (lockY) n1 = selection[0][1], s1 = selection[1][1];

          if (selection[0][0] !== w1
              || selection[0][1] !== n1
              || selection[1][0] !== e1
              || selection[1][1] !== s1) {
            state.selection = [[w1, n1], [e1, s1]];
            redraw.call(that);
            emit.brush(event, mode.name);
          }
        }

        function ended(event) {
          nopropagation$1(event);
          if (event.touches) {
            if (event.touches.length) return;
            if (touchending) clearTimeout(touchending);
            touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
          } else {
            yesdrag(event.view, moving);
            view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
          }
          group.attr("pointer-events", "all");
          overlay.attr("cursor", cursors.overlay);
          if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
          if (empty(selection)) state.selection = null, redraw.call(that);
          emit.end(event, mode.name);
        }

        function keydowned(event) {
          switch (event.keyCode) {
            case 16: { // SHIFT
              shifting = signX && signY;
              break;
            }
            case 18: { // ALT
              if (mode === MODE_HANDLE) {
                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                mode = MODE_CENTER;
                move(event);
              }
              break;
            }
            case 32: { // SPACE; takes priority over ALT
              if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
                if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
                mode = MODE_SPACE;
                overlay.attr("cursor", cursors.selection);
                move(event);
              }
              break;
            }
            default: return;
          }
          noevent$1(event);
        }

        function keyupped(event) {
          switch (event.keyCode) {
            case 16: { // SHIFT
              if (shifting) {
                lockX = lockY = shifting = false;
                move(event);
              }
              break;
            }
            case 18: { // ALT
              if (mode === MODE_CENTER) {
                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
                mode = MODE_HANDLE;
                move(event);
              }
              break;
            }
            case 32: { // SPACE
              if (mode === MODE_SPACE) {
                if (event.altKey) {
                  if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                  if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                  mode = MODE_CENTER;
                } else {
                  if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
                  if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
                  mode = MODE_HANDLE;
                }
                overlay.attr("cursor", cursors[type]);
                move(event);
              }
              break;
            }
            default: return;
          }
          noevent$1(event);
        }
      }

      function touchmoved(event) {
        emitter(this, arguments).moved(event);
      }

      function touchended(event) {
        emitter(this, arguments).ended(event);
      }

      function initialize() {
        var state = this.__brush || {selection: null};
        state.extent = number2(extent.apply(this, arguments));
        state.dim = dim;
        return state;
      }

      brush.extent = function(_) {
        return arguments.length ? (extent = typeof _ === "function" ? _ : constant$7(number2(_)), brush) : extent;
      };

      brush.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : constant$7(!!_), brush) : filter;
      };

      brush.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$7(!!_), brush) : touchable;
      };

      brush.handleSize = function(_) {
        return arguments.length ? (handleSize = +_, brush) : handleSize;
      };

      brush.keyModifiers = function(_) {
        return arguments.length ? (keys = !!_, brush) : keys;
      };

      brush.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? brush : value;
      };

      return brush;
    }

    var abs$5 = Math.abs;
    var cos$5 = Math.cos;
    var sin$5 = Math.sin;
    var pi$3 = Math.PI;
    var halfPi$2 = pi$3 / 2;
    var tau$4 = pi$3 * 2;
    var max$4 = Math.max;
    var epsilon$6 = 1e-12;

    function range$4(i, j) {
      return Array.from({length: j - i}, (_, k) => i + k);
    }

    function compareValue(compare) {
      return function(a, b) {
        return compare(
          a.source.value + a.target.value,
          b.source.value + b.target.value
        );
      };
    }

    function chord() {
      return chord$1(false, false);
    }

    function chordTranspose() {
      return chord$1(false, true);
    }

    function chordDirected() {
      return chord$1(true, false);
    }

    function chord$1(directed, transpose) {
      var padAngle = 0,
          sortGroups = null,
          sortSubgroups = null,
          sortChords = null;

      function chord(matrix) {
        var n = matrix.length,
            groupSums = new Array(n),
            groupIndex = range$4(0, n),
            chords = new Array(n * n),
            groups = new Array(n),
            k = 0, dx;

        matrix = Float64Array.from({length: n * n}, transpose
            ? (_, i) => matrix[i % n][i / n | 0]
            : (_, i) => matrix[i / n | 0][i % n]);

        // Compute the scaling factor from value to angle in [0, 2pi].
        for (let i = 0; i < n; ++i) {
          let x = 0;
          for (let j = 0; j < n; ++j) x += matrix[i * n + j] + directed * matrix[j * n + i];
          k += groupSums[i] = x;
        }
        k = max$4(0, tau$4 - padAngle * n) / k;
        dx = k ? padAngle : tau$4 / n;

        // Compute the angles for each group and constituent chord.
        {
          let x = 0;
          if (sortGroups) groupIndex.sort((a, b) => sortGroups(groupSums[a], groupSums[b]));
          for (const i of groupIndex) {
            const x0 = x;
            if (directed) {
              const subgroupIndex = range$4(~n + 1, n).filter(j => j < 0 ? matrix[~j * n + i] : matrix[i * n + j]);
              if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(a < 0 ? -matrix[~a * n + i] : matrix[i * n + a], b < 0 ? -matrix[~b * n + i] : matrix[i * n + b]));
              for (const j of subgroupIndex) {
                if (j < 0) {
                  const chord = chords[~j * n + i] || (chords[~j * n + i] = {source: null, target: null});
                  chord.target = {index: i, startAngle: x, endAngle: x += matrix[~j * n + i] * k, value: matrix[~j * n + i]};
                } else {
                  const chord = chords[i * n + j] || (chords[i * n + j] = {source: null, target: null});
                  chord.source = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};
                }
              }
              groups[i] = {index: i, startAngle: x0, endAngle: x, value: groupSums[i]};
            } else {
              const subgroupIndex = range$4(0, n).filter(j => matrix[i * n + j] || matrix[j * n + i]);
              if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(matrix[i * n + a], matrix[i * n + b]));
              for (const j of subgroupIndex) {
                let chord;
                if (i < j) {
                  chord = chords[i * n + j] || (chords[i * n + j] = {source: null, target: null});
                  chord.source = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};
                } else {
                  chord = chords[j * n + i] || (chords[j * n + i] = {source: null, target: null});
                  chord.target = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};
                  if (i === j) chord.source = chord.target;
                }
                if (chord.source && chord.target && chord.source.value < chord.target.value) {
                  const source = chord.source;
                  chord.source = chord.target;
                  chord.target = source;
                }
              }
              groups[i] = {index: i, startAngle: x0, endAngle: x, value: groupSums[i]};
            }
            x += dx;
          }
        }

        // Remove empty chords.
        chords = Object.values(chords);
        chords.groups = groups;
        return sortChords ? chords.sort(sortChords) : chords;
      }

      chord.padAngle = function(_) {
        return arguments.length ? (padAngle = max$4(0, _), chord) : padAngle;
      };

      chord.sortGroups = function(_) {
        return arguments.length ? (sortGroups = _, chord) : sortGroups;
      };

      chord.sortSubgroups = function(_) {
        return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
      };

      chord.sortChords = function(_) {
        return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
      };

      return chord;
    }

    const pi$2 = Math.PI,
        tau$3 = 2 * pi$2,
        epsilon$5 = 1e-6,
        tauEpsilon = tau$3 - epsilon$5;

    function Path$1() {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null; // end of current subpath
      this._ = "";
    }

    function path() {
      return new Path$1;
    }

    Path$1.prototype = path.prototype = {
      constructor: Path$1,
      moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1,
            y0 = this._y1,
            x21 = x2 - x1,
            y21 = y2 - y1,
            x01 = x0 - x1,
            y01 = y0 - y1,
            l01_2 = x01 * x01 + y01 * y01;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
        else if (!(l01_2 > epsilon$5));

        // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
        // Equivalently, is (x1,y1) coincident with (x2,y2)?
        // Or, is the radius zero? Line to (x1,y1).
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$5) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Otherwise, draw an arc!
        else {
          var x20 = x2 - x0,
              y20 = y2 - y0,
              l21_2 = x21 * x21 + y21 * y21,
              l20_2 = x20 * x20 + y20 * y20,
              l21 = Math.sqrt(l21_2),
              l01 = Math.sqrt(l01_2),
              l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
              t01 = l / l01,
              t21 = l / l21;

          // If the start tangent is not coincident with (x0,y0), line to.
          if (Math.abs(t01 - 1) > epsilon$5) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }

          this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0),
            dy = r * Math.sin(a0),
            x0 = x + dx,
            y0 = y + dy,
            cw = 1 ^ ccw,
            da = ccw ? a0 - a1 : a1 - a0;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        }

        // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
        else if (Math.abs(this._x1 - x0) > epsilon$5 || Math.abs(this._y1 - y0) > epsilon$5) {
          this._ += "L" + x0 + "," + y0;
        }

        // Is this arc empty? We’re done.
        if (!r) return;

        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau$3 + tau$3;

        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        }

        // Is this arc non-empty? Draw an arc!
        else if (da > epsilon$5) {
          this._ += "A" + r + "," + r + ",0," + (+(da >= pi$2)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
        }
      },
      rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
      },
      toString: function() {
        return this._;
      }
    };

    var slice$5 = Array.prototype.slice;

    function constant$6(x) {
      return function() {
        return x;
      };
    }

    function defaultSource$1(d) {
      return d.source;
    }

    function defaultTarget(d) {
      return d.target;
    }

    function defaultRadius$1(d) {
      return d.radius;
    }

    function defaultStartAngle(d) {
      return d.startAngle;
    }

    function defaultEndAngle(d) {
      return d.endAngle;
    }

    function defaultPadAngle() {
      return 0;
    }

    function defaultArrowheadRadius() {
      return 10;
    }

    function ribbon(headRadius) {
      var source = defaultSource$1,
          target = defaultTarget,
          sourceRadius = defaultRadius$1,
          targetRadius = defaultRadius$1,
          startAngle = defaultStartAngle,
          endAngle = defaultEndAngle,
          padAngle = defaultPadAngle,
          context = null;

      function ribbon() {
        var buffer,
            s = source.apply(this, arguments),
            t = target.apply(this, arguments),
            ap = padAngle.apply(this, arguments) / 2,
            argv = slice$5.call(arguments),
            sr = +sourceRadius.apply(this, (argv[0] = s, argv)),
            sa0 = startAngle.apply(this, argv) - halfPi$2,
            sa1 = endAngle.apply(this, argv) - halfPi$2,
            tr = +targetRadius.apply(this, (argv[0] = t, argv)),
            ta0 = startAngle.apply(this, argv) - halfPi$2,
            ta1 = endAngle.apply(this, argv) - halfPi$2;

        if (!context) context = buffer = path();

        if (ap > epsilon$6) {
          if (abs$5(sa1 - sa0) > ap * 2 + epsilon$6) sa1 > sa0 ? (sa0 += ap, sa1 -= ap) : (sa0 -= ap, sa1 += ap);
          else sa0 = sa1 = (sa0 + sa1) / 2;
          if (abs$5(ta1 - ta0) > ap * 2 + epsilon$6) ta1 > ta0 ? (ta0 += ap, ta1 -= ap) : (ta0 -= ap, ta1 += ap);
          else ta0 = ta1 = (ta0 + ta1) / 2;
        }

        context.moveTo(sr * cos$5(sa0), sr * sin$5(sa0));
        context.arc(0, 0, sr, sa0, sa1);
        if (sa0 !== ta0 || sa1 !== ta1) {
          if (headRadius) {
            var hr = +headRadius.apply(this, arguments), tr2 = tr - hr, ta2 = (ta0 + ta1) / 2;
            context.quadraticCurveTo(0, 0, tr2 * cos$5(ta0), tr2 * sin$5(ta0));
            context.lineTo(tr * cos$5(ta2), tr * sin$5(ta2));
            context.lineTo(tr2 * cos$5(ta1), tr2 * sin$5(ta1));
          } else {
            context.quadraticCurveTo(0, 0, tr * cos$5(ta0), tr * sin$5(ta0));
            context.arc(0, 0, tr, ta0, ta1);
          }
        }
        context.quadraticCurveTo(0, 0, sr * cos$5(sa0), sr * sin$5(sa0));
        context.closePath();

        if (buffer) return context = null, buffer + "" || null;
      }

      if (headRadius) ribbon.headRadius = function(_) {
        return arguments.length ? (headRadius = typeof _ === "function" ? _ : constant$6(+_), ribbon) : headRadius;
      };

      ribbon.radius = function(_) {
        return arguments.length ? (sourceRadius = targetRadius = typeof _ === "function" ? _ : constant$6(+_), ribbon) : sourceRadius;
      };

      ribbon.sourceRadius = function(_) {
        return arguments.length ? (sourceRadius = typeof _ === "function" ? _ : constant$6(+_), ribbon) : sourceRadius;
      };

      ribbon.targetRadius = function(_) {
        return arguments.length ? (targetRadius = typeof _ === "function" ? _ : constant$6(+_), ribbon) : targetRadius;
      };

      ribbon.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$6(+_), ribbon) : startAngle;
      };

      ribbon.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$6(+_), ribbon) : endAngle;
      };

      ribbon.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$6(+_), ribbon) : padAngle;
      };

      ribbon.source = function(_) {
        return arguments.length ? (source = _, ribbon) : source;
      };

      ribbon.target = function(_) {
        return arguments.length ? (target = _, ribbon) : target;
      };

      ribbon.context = function(_) {
        return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
      };

      return ribbon;
    }

    function ribbon$1() {
      return ribbon();
    }

    function ribbonArrow() {
      return ribbon(defaultArrowheadRadius);
    }

    var array$2 = Array.prototype;

    var slice$4 = array$2.slice;

    function ascending$1(a, b) {
      return a - b;
    }

    function area$3(ring) {
      var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
      while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
      return area;
    }

    var constant$5 = x => () => x;

    function contains$2(ring, hole) {
      var i = -1, n = hole.length, c;
      while (++i < n) if (c = ringContains(ring, hole[i])) return c;
      return 0;
    }

    function ringContains(ring, point) {
      var x = point[0], y = point[1], contains = -1;
      for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
        var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
        if (segmentContains(pi, pj, point)) return 0;
        if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;
      }
      return contains;
    }

    function segmentContains(a, b, c) {
      var i; return collinear$1(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
    }

    function collinear$1(a, b, c) {
      return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
    }

    function within(p, q, r) {
      return p <= q && q <= r || r <= q && q <= p;
    }

    function noop$2() {}

    var cases = [
      [],
      [[[1.0, 1.5], [0.5, 1.0]]],
      [[[1.5, 1.0], [1.0, 1.5]]],
      [[[1.5, 1.0], [0.5, 1.0]]],
      [[[1.0, 0.5], [1.5, 1.0]]],
      [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],
      [[[1.0, 0.5], [1.0, 1.5]]],
      [[[1.0, 0.5], [0.5, 1.0]]],
      [[[0.5, 1.0], [1.0, 0.5]]],
      [[[1.0, 1.5], [1.0, 0.5]]],
      [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],
      [[[1.5, 1.0], [1.0, 0.5]]],
      [[[0.5, 1.0], [1.5, 1.0]]],
      [[[1.0, 1.5], [1.5, 1.0]]],
      [[[0.5, 1.0], [1.0, 1.5]]],
      []
    ];

    function contours() {
      var dx = 1,
          dy = 1,
          threshold = thresholdSturges,
          smooth = smoothLinear;

      function contours(values) {
        var tz = threshold(values);

        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
          const e = extent$1(values), ts = tickStep(e[0], e[1], tz);
          tz = ticks(Math.floor(e[0] / ts) * ts, Math.floor(e[1] / ts - 1) * ts, tz);
        } else {
          tz = tz.slice().sort(ascending$1);
        }

        return tz.map(value => contour(values, value));
      }

      // Accumulate, smooth contour rings, assign holes to exterior rings.
      // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
      function contour(values, value) {
        var polygons = [],
            holes = [];

        isorings(values, value, function(ring) {
          smooth(ring, values, value);
          if (area$3(ring) > 0) polygons.push([ring]);
          else holes.push(ring);
        });

        holes.forEach(function(hole) {
          for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
            if (contains$2((polygon = polygons[i])[0], hole) !== -1) {
              polygon.push(hole);
              return;
            }
          }
        });

        return {
          type: "MultiPolygon",
          value: value,
          coordinates: polygons
        };
      }

      // Marching squares with isolines stitched into rings.
      // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
      function isorings(values, value, callback) {
        var fragmentByStart = new Array,
            fragmentByEnd = new Array,
            x, y, t0, t1, t2, t3;

        // Special case for the first row (y = -1, t2 = t3 = 0).
        x = y = -1;
        t1 = values[0] >= value;
        cases[t1 << 1].forEach(stitch);
        while (++x < dx - 1) {
          t0 = t1, t1 = values[x + 1] >= value;
          cases[t0 | t1 << 1].forEach(stitch);
        }
        cases[t1 << 0].forEach(stitch);

        // General case for the intermediate rows.
        while (++y < dy - 1) {
          x = -1;
          t1 = values[y * dx + dx] >= value;
          t2 = values[y * dx] >= value;
          cases[t1 << 1 | t2 << 2].forEach(stitch);
          while (++x < dx - 1) {
            t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
            t3 = t2, t2 = values[y * dx + x + 1] >= value;
            cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
          }
          cases[t1 | t2 << 3].forEach(stitch);
        }

        // Special case for the last row (y = dy - 1, t0 = t1 = 0).
        x = -1;
        t2 = values[y * dx] >= value;
        cases[t2 << 2].forEach(stitch);
        while (++x < dx - 1) {
          t3 = t2, t2 = values[y * dx + x + 1] >= value;
          cases[t2 << 2 | t3 << 3].forEach(stitch);
        }
        cases[t2 << 3].forEach(stitch);

        function stitch(line) {
          var start = [line[0][0] + x, line[0][1] + y],
              end = [line[1][0] + x, line[1][1] + y],
              startIndex = index(start),
              endIndex = index(end),
              f, g;
          if (f = fragmentByEnd[startIndex]) {
            if (g = fragmentByStart[endIndex]) {
              delete fragmentByEnd[f.end];
              delete fragmentByStart[g.start];
              if (f === g) {
                f.ring.push(end);
                callback(f.ring);
              } else {
                fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};
              }
            } else {
              delete fragmentByEnd[f.end];
              f.ring.push(end);
              fragmentByEnd[f.end = endIndex] = f;
            }
          } else if (f = fragmentByStart[endIndex]) {
            if (g = fragmentByEnd[startIndex]) {
              delete fragmentByStart[f.start];
              delete fragmentByEnd[g.end];
              if (f === g) {
                f.ring.push(end);
                callback(f.ring);
              } else {
                fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};
              }
            } else {
              delete fragmentByStart[f.start];
              f.ring.unshift(start);
              fragmentByStart[f.start = startIndex] = f;
            }
          } else {
            fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};
          }
        }
      }

      function index(point) {
        return point[0] * 2 + point[1] * (dx + 1) * 4;
      }

      function smoothLinear(ring, values, value) {
        ring.forEach(function(point) {
          var x = point[0],
              y = point[1],
              xt = x | 0,
              yt = y | 0,
              v0,
              v1 = values[yt * dx + xt];
          if (x > 0 && x < dx && xt === x) {
            v0 = values[yt * dx + xt - 1];
            point[0] = x + (value - v0) / (v1 - v0) - 0.5;
          }
          if (y > 0 && y < dy && yt === y) {
            v0 = values[(yt - 1) * dx + xt];
            point[1] = y + (value - v0) / (v1 - v0) - 0.5;
          }
        });
      }

      contours.contour = contour;

      contours.size = function(_) {
        if (!arguments.length) return [dx, dy];
        var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
        if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
        return dx = _0, dy = _1, contours;
      };

      contours.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$5(slice$4.call(_)) : constant$5(_), contours) : threshold;
      };

      contours.smooth = function(_) {
        return arguments.length ? (smooth = _ ? smoothLinear : noop$2, contours) : smooth === smoothLinear;
      };

      return contours;
    }

    // TODO Optimize edge cases.
    // TODO Optimize index calculation.
    // TODO Optimize arguments.
    function blurX(source, target, r) {
      var n = source.width,
          m = source.height,
          w = (r << 1) + 1;
      for (var j = 0; j < m; ++j) {
        for (var i = 0, sr = 0; i < n + r; ++i) {
          if (i < n) {
            sr += source.data[i + j * n];
          }
          if (i >= r) {
            if (i >= w) {
              sr -= source.data[i - w + j * n];
            }
            target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
          }
        }
      }
    }

    // TODO Optimize edge cases.
    // TODO Optimize index calculation.
    // TODO Optimize arguments.
    function blurY(source, target, r) {
      var n = source.width,
          m = source.height,
          w = (r << 1) + 1;
      for (var i = 0; i < n; ++i) {
        for (var j = 0, sr = 0; j < m + r; ++j) {
          if (j < m) {
            sr += source.data[i + j * n];
          }
          if (j >= r) {
            if (j >= w) {
              sr -= source.data[i + (j - w) * n];
            }
            target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
          }
        }
      }
    }

    function defaultX$1(d) {
      return d[0];
    }

    function defaultY$1(d) {
      return d[1];
    }

    function defaultWeight() {
      return 1;
    }

    function density() {
      var x = defaultX$1,
          y = defaultY$1,
          weight = defaultWeight,
          dx = 960,
          dy = 500,
          r = 20, // blur radius
          k = 2, // log2(grid cell size)
          o = r * 3, // grid offset, to pad for blur
          n = (dx + o * 2) >> k, // grid width
          m = (dy + o * 2) >> k, // grid height
          threshold = constant$5(20);

      function density(data) {
        var values0 = new Float32Array(n * m),
            values1 = new Float32Array(n * m),
            pow2k = Math.pow(2, -k);

        data.forEach(function(d, i, data) {
          var xi = (x(d, i, data) + o) * pow2k,
              yi = (y(d, i, data) + o) * pow2k,
              wi = +weight(d, i, data);
          if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
            var x0 = Math.floor(xi),
                y0 = Math.floor(yi),
                xt = xi - x0 - 0.5,
                yt = yi - y0 - 0.5;
            values0[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;
            values0[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;
            values0[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;
            values0[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;
          }
        });

        // TODO Optimize.
        blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
        blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
        blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
        blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
        blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
        blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);

        var tz = threshold(values0);

        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
          var stop = max$6(values0);
          tz = tickStep(0, stop, tz);
          tz = range$5(0, Math.floor(stop / tz) * tz, tz);
          tz.shift();
        }

        return contours()
            .thresholds(tz)
            .size([n, m])
          (values0)
            .map(transform);
      }

      function transform(geometry) {
        geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.
        geometry.coordinates.forEach(transformPolygon);
        return geometry;
      }

      function transformPolygon(coordinates) {
        coordinates.forEach(transformRing);
      }

      function transformRing(coordinates) {
        coordinates.forEach(transformPoint);
      }

      // TODO Optimize.
      function transformPoint(coordinates) {
        coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
        coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
      }

      function resize() {
        o = r * 3;
        n = (dx + o * 2) >> k;
        m = (dy + o * 2) >> k;
        return density;
      }

      density.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$5(+_), density) : x;
      };

      density.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$5(+_), density) : y;
      };

      density.weight = function(_) {
        return arguments.length ? (weight = typeof _ === "function" ? _ : constant$5(+_), density) : weight;
      };

      density.size = function(_) {
        if (!arguments.length) return [dx, dy];
        var _0 = +_[0], _1 = +_[1];
        if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
        return dx = _0, dy = _1, resize();
      };

      density.cellSize = function(_) {
        if (!arguments.length) return 1 << k;
        if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
        return k = Math.floor(Math.log(_) / Math.LN2), resize();
      };

      density.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$5(slice$4.call(_)) : constant$5(_), density) : threshold;
      };

      density.bandwidth = function(_) {
        if (!arguments.length) return Math.sqrt(r * (r + 1));
        if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
        return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
      };

      return density;
    }

    const epsilon$4 = 1.1102230246251565e-16;
    const splitter = 134217729;
    const resulterrbound = (3 + 8 * epsilon$4) * epsilon$4;

    // fast_expansion_sum_zeroelim routine from oritinal code
    function sum$5(elen, e, flen, f, h) {
        let Q, Qnew, hh, bvirt;
        let enow = e[0];
        let fnow = f[0];
        let eindex = 0;
        let findex = 0;
        if ((fnow > enow) === (fnow > -enow)) {
            Q = enow;
            enow = e[++eindex];
        } else {
            Q = fnow;
            fnow = f[++findex];
        }
        let hindex = 0;
        if (eindex < elen && findex < flen) {
            if ((fnow > enow) === (fnow > -enow)) {
                Qnew = enow + Q;
                hh = Q - (Qnew - enow);
                enow = e[++eindex];
            } else {
                Qnew = fnow + Q;
                hh = Q - (Qnew - fnow);
                fnow = f[++findex];
            }
            Q = Qnew;
            if (hh !== 0) {
                h[hindex++] = hh;
            }
            while (eindex < elen && findex < flen) {
                if ((fnow > enow) === (fnow > -enow)) {
                    Qnew = Q + enow;
                    bvirt = Qnew - Q;
                    hh = Q - (Qnew - bvirt) + (enow - bvirt);
                    enow = e[++eindex];
                } else {
                    Qnew = Q + fnow;
                    bvirt = Qnew - Q;
                    hh = Q - (Qnew - bvirt) + (fnow - bvirt);
                    fnow = f[++findex];
                }
                Q = Qnew;
                if (hh !== 0) {
                    h[hindex++] = hh;
                }
            }
        }
        while (eindex < elen) {
            Qnew = Q + enow;
            bvirt = Qnew - Q;
            hh = Q - (Qnew - bvirt) + (enow - bvirt);
            enow = e[++eindex];
            Q = Qnew;
            if (hh !== 0) {
                h[hindex++] = hh;
            }
        }
        while (findex < flen) {
            Qnew = Q + fnow;
            bvirt = Qnew - Q;
            hh = Q - (Qnew - bvirt) + (fnow - bvirt);
            fnow = f[++findex];
            Q = Qnew;
            if (hh !== 0) {
                h[hindex++] = hh;
            }
        }
        if (Q !== 0 || hindex === 0) {
            h[hindex++] = Q;
        }
        return hindex;
    }

    function estimate(elen, e) {
        let Q = e[0];
        for (let i = 1; i < elen; i++) Q += e[i];
        return Q;
    }

    function vec(n) {
        return new Float64Array(n);
    }

    const ccwerrboundA = (3 + 16 * epsilon$4) * epsilon$4;
    const ccwerrboundB = (2 + 12 * epsilon$4) * epsilon$4;
    const ccwerrboundC = (9 + 64 * epsilon$4) * epsilon$4 * epsilon$4;

    const B = vec(4);
    const C1 = vec(8);
    const C2 = vec(12);
    const D = vec(16);
    const u = vec(4);

    function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
        let acxtail, acytail, bcxtail, bcytail;
        let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;

        const acx = ax - cx;
        const bcx = bx - cx;
        const acy = ay - cy;
        const bcy = by - cy;

        s1 = acx * bcy;
        c = splitter * acx;
        ahi = c - (c - acx);
        alo = acx - ahi;
        c = splitter * bcy;
        bhi = c - (c - bcy);
        blo = bcy - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acy * bcx;
        c = splitter * acy;
        ahi = c - (c - acy);
        alo = acy - ahi;
        c = splitter * bcx;
        bhi = c - (c - bcx);
        blo = bcx - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        B[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        B[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        B[2] = _j - (u3 - bvirt) + (_i - bvirt);
        B[3] = u3;

        let det = estimate(4, B);
        let errbound = ccwerrboundB * detsum;
        if (det >= errbound || -det >= errbound) {
            return det;
        }

        bvirt = ax - acx;
        acxtail = ax - (acx + bvirt) + (bvirt - cx);
        bvirt = bx - bcx;
        bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
        bvirt = ay - acy;
        acytail = ay - (acy + bvirt) + (bvirt - cy);
        bvirt = by - bcy;
        bcytail = by - (bcy + bvirt) + (bvirt - cy);

        if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
            return det;
        }

        errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
        det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);
        if (det >= errbound || -det >= errbound) return det;

        s1 = acxtail * bcy;
        c = splitter * acxtail;
        ahi = c - (c - acxtail);
        alo = acxtail - ahi;
        c = splitter * bcy;
        bhi = c - (c - bcy);
        blo = bcy - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acytail * bcx;
        c = splitter * acytail;
        ahi = c - (c - acytail);
        alo = acytail - ahi;
        c = splitter * bcx;
        bhi = c - (c - bcx);
        blo = bcx - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        u[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        u[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        u[2] = _j - (u3 - bvirt) + (_i - bvirt);
        u[3] = u3;
        const C1len = sum$5(4, B, 4, u, C1);

        s1 = acx * bcytail;
        c = splitter * acx;
        ahi = c - (c - acx);
        alo = acx - ahi;
        c = splitter * bcytail;
        bhi = c - (c - bcytail);
        blo = bcytail - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acy * bcxtail;
        c = splitter * acy;
        ahi = c - (c - acy);
        alo = acy - ahi;
        c = splitter * bcxtail;
        bhi = c - (c - bcxtail);
        blo = bcxtail - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        u[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        u[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        u[2] = _j - (u3 - bvirt) + (_i - bvirt);
        u[3] = u3;
        const C2len = sum$5(C1len, C1, 4, u, C2);

        s1 = acxtail * bcytail;
        c = splitter * acxtail;
        ahi = c - (c - acxtail);
        alo = acxtail - ahi;
        c = splitter * bcytail;
        bhi = c - (c - bcytail);
        blo = bcytail - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acytail * bcxtail;
        c = splitter * acytail;
        ahi = c - (c - acytail);
        alo = acytail - ahi;
        c = splitter * bcxtail;
        bhi = c - (c - bcxtail);
        blo = bcxtail - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        u[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        u[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        u[2] = _j - (u3 - bvirt) + (_i - bvirt);
        u[3] = u3;
        const Dlen = sum$5(C2len, C2, 4, u, D);

        return D[Dlen - 1];
    }

    function orient2d(ax, ay, bx, by, cx, cy) {
        const detleft = (ay - cy) * (bx - cx);
        const detright = (ax - cx) * (by - cy);
        const det = detleft - detright;

        if (detleft === 0 || detright === 0 || (detleft > 0) !== (detright > 0)) return det;

        const detsum = Math.abs(detleft + detright);
        if (Math.abs(det) >= ccwerrboundA * detsum) return det;

        return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
    }

    const EPSILON = Math.pow(2, -52);
    const EDGE_STACK = new Uint32Array(512);

    class Delaunator {

        static from(points, getX = defaultGetX, getY = defaultGetY) {
            const n = points.length;
            const coords = new Float64Array(n * 2);

            for (let i = 0; i < n; i++) {
                const p = points[i];
                coords[2 * i] = getX(p);
                coords[2 * i + 1] = getY(p);
            }

            return new Delaunator(coords);
        }

        constructor(coords) {
            const n = coords.length >> 1;
            if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');

            this.coords = coords;

            // arrays that will store the triangulation graph
            const maxTriangles = Math.max(2 * n - 5, 0);
            this._triangles = new Uint32Array(maxTriangles * 3);
            this._halfedges = new Int32Array(maxTriangles * 3);

            // temporary arrays for tracking the edges of the advancing convex hull
            this._hashSize = Math.ceil(Math.sqrt(n));
            this._hullPrev = new Uint32Array(n); // edge to prev edge
            this._hullNext = new Uint32Array(n); // edge to next edge
            this._hullTri = new Uint32Array(n); // edge to adjacent triangle
            this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash

            // temporary arrays for sorting points
            this._ids = new Uint32Array(n);
            this._dists = new Float64Array(n);

            this.update();
        }

        update() {
            const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;
            const n = coords.length >> 1;

            // populate an array of point indices; calculate input data bbox
            let minX = Infinity;
            let minY = Infinity;
            let maxX = -Infinity;
            let maxY = -Infinity;

            for (let i = 0; i < n; i++) {
                const x = coords[2 * i];
                const y = coords[2 * i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
                this._ids[i] = i;
            }
            const cx = (minX + maxX) / 2;
            const cy = (minY + maxY) / 2;

            let minDist = Infinity;
            let i0, i1, i2;

            // pick a seed point close to the center
            for (let i = 0; i < n; i++) {
                const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist) {
                    i0 = i;
                    minDist = d;
                }
            }
            const i0x = coords[2 * i0];
            const i0y = coords[2 * i0 + 1];

            minDist = Infinity;

            // find the point closest to the seed
            for (let i = 0; i < n; i++) {
                if (i === i0) continue;
                const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist && d > 0) {
                    i1 = i;
                    minDist = d;
                }
            }
            let i1x = coords[2 * i1];
            let i1y = coords[2 * i1 + 1];

            let minRadius = Infinity;

            // find the third point which forms the smallest circumcircle with the first two
            for (let i = 0; i < n; i++) {
                if (i === i0 || i === i1) continue;
                const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
                if (r < minRadius) {
                    i2 = i;
                    minRadius = r;
                }
            }
            let i2x = coords[2 * i2];
            let i2y = coords[2 * i2 + 1];

            if (minRadius === Infinity) {
                // order collinear points by dx (or dy if all x are identical)
                // and return the list as a hull
                for (let i = 0; i < n; i++) {
                    this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);
                }
                quicksort(this._ids, this._dists, 0, n - 1);
                const hull = new Uint32Array(n);
                let j = 0;
                for (let i = 0, d0 = -Infinity; i < n; i++) {
                    const id = this._ids[i];
                    if (this._dists[id] > d0) {
                        hull[j++] = id;
                        d0 = this._dists[id];
                    }
                }
                this.hull = hull.subarray(0, j);
                this.triangles = new Uint32Array(0);
                this.halfedges = new Uint32Array(0);
                return;
            }

            // swap the order of the seed points for counter-clockwise orientation
            if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
                const i = i1;
                const x = i1x;
                const y = i1y;
                i1 = i2;
                i1x = i2x;
                i1y = i2y;
                i2 = i;
                i2x = x;
                i2y = y;
            }

            const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
            this._cx = center.x;
            this._cy = center.y;

            for (let i = 0; i < n; i++) {
                this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
            }

            // sort the points by distance from the seed triangle circumcenter
            quicksort(this._ids, this._dists, 0, n - 1);

            // set up the seed triangle as the starting hull
            this._hullStart = i0;
            let hullSize = 3;

            hullNext[i0] = hullPrev[i2] = i1;
            hullNext[i1] = hullPrev[i0] = i2;
            hullNext[i2] = hullPrev[i1] = i0;

            hullTri[i0] = 0;
            hullTri[i1] = 1;
            hullTri[i2] = 2;

            hullHash.fill(-1);
            hullHash[this._hashKey(i0x, i0y)] = i0;
            hullHash[this._hashKey(i1x, i1y)] = i1;
            hullHash[this._hashKey(i2x, i2y)] = i2;

            this.trianglesLen = 0;
            this._addTriangle(i0, i1, i2, -1, -1, -1);

            for (let k = 0, xp, yp; k < this._ids.length; k++) {
                const i = this._ids[k];
                const x = coords[2 * i];
                const y = coords[2 * i + 1];

                // skip near-duplicate points
                if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;
                xp = x;
                yp = y;

                // skip seed triangle points
                if (i === i0 || i === i1 || i === i2) continue;

                // find a visible edge on the convex hull using edge hash
                let start = 0;
                for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
                    start = hullHash[(key + j) % this._hashSize];
                    if (start !== -1 && start !== hullNext[start]) break;
                }

                start = hullPrev[start];
                let e = start, q;
                while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {
                    e = q;
                    if (e === start) {
                        e = -1;
                        break;
                    }
                }
                if (e === -1) continue; // likely a near-duplicate point; skip it

                // add the first triangle from the point
                let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);

                // recursively flip triangles from the point until they satisfy the Delaunay condition
                hullTri[i] = this._legalize(t + 2);
                hullTri[e] = t; // keep track of boundary triangles on the hull
                hullSize++;

                // walk forward through the hull, adding more triangles and flipping recursively
                let n = hullNext[e];
                while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {
                    t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
                    hullTri[i] = this._legalize(t + 2);
                    hullNext[n] = n; // mark as removed
                    hullSize--;
                    n = q;
                }

                // walk backward from the other side, adding more triangles and flipping
                if (e === start) {
                    while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {
                        t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
                        this._legalize(t + 2);
                        hullTri[q] = t;
                        hullNext[e] = e; // mark as removed
                        hullSize--;
                        e = q;
                    }
                }

                // update the hull indices
                this._hullStart = hullPrev[i] = e;
                hullNext[e] = hullPrev[n] = i;
                hullNext[i] = n;

                // save the two new edges in the hash table
                hullHash[this._hashKey(x, y)] = i;
                hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
            }

            this.hull = new Uint32Array(hullSize);
            for (let i = 0, e = this._hullStart; i < hullSize; i++) {
                this.hull[i] = e;
                e = hullNext[e];
            }

            // trim typed triangle mesh arrays
            this.triangles = this._triangles.subarray(0, this.trianglesLen);
            this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
        }

        _hashKey(x, y) {
            return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
        }

        _legalize(a) {
            const {_triangles: triangles, _halfedges: halfedges, coords} = this;

            let i = 0;
            let ar = 0;

            // recursion eliminated with a fixed-size stack
            while (true) {
                const b = halfedges[a];

                /* if the pair of triangles doesn't satisfy the Delaunay condition
                 * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
                 * then do the same check/flip recursively for the new pair of triangles
                 *
                 *           pl                    pl
                 *          /||\                  /  \
                 *       al/ || \bl            al/    \a
                 *        /  ||  \              /      \
                 *       /  a||b  \    flip    /___ar___\
                 *     p0\   ||   /p1   =>   p0\---bl---/p1
                 *        \  ||  /              \      /
                 *       ar\ || /br             b\    /br
                 *          \||/                  \  /
                 *           pr                    pr
                 */
                const a0 = a - a % 3;
                ar = a0 + (a + 2) % 3;

                if (b === -1) { // convex hull edge
                    if (i === 0) break;
                    a = EDGE_STACK[--i];
                    continue;
                }

                const b0 = b - b % 3;
                const al = a0 + (a + 1) % 3;
                const bl = b0 + (b + 2) % 3;

                const p0 = triangles[ar];
                const pr = triangles[a];
                const pl = triangles[al];
                const p1 = triangles[bl];

                const illegal = inCircle(
                    coords[2 * p0], coords[2 * p0 + 1],
                    coords[2 * pr], coords[2 * pr + 1],
                    coords[2 * pl], coords[2 * pl + 1],
                    coords[2 * p1], coords[2 * p1 + 1]);

                if (illegal) {
                    triangles[a] = p1;
                    triangles[b] = p0;

                    const hbl = halfedges[bl];

                    // edge swapped on the other side of the hull (rare); fix the halfedge reference
                    if (hbl === -1) {
                        let e = this._hullStart;
                        do {
                            if (this._hullTri[e] === bl) {
                                this._hullTri[e] = a;
                                break;
                            }
                            e = this._hullPrev[e];
                        } while (e !== this._hullStart);
                    }
                    this._link(a, hbl);
                    this._link(b, halfedges[ar]);
                    this._link(ar, bl);

                    const br = b0 + (b + 1) % 3;

                    // don't worry about hitting the cap: it can only happen on extremely degenerate input
                    if (i < EDGE_STACK.length) {
                        EDGE_STACK[i++] = br;
                    }
                } else {
                    if (i === 0) break;
                    a = EDGE_STACK[--i];
                }
            }

            return ar;
        }

        _link(a, b) {
            this._halfedges[a] = b;
            if (b !== -1) this._halfedges[b] = a;
        }

        // add a new triangle given vertex indices and adjacent half-edge ids
        _addTriangle(i0, i1, i2, a, b, c) {
            const t = this.trianglesLen;

            this._triangles[t] = i0;
            this._triangles[t + 1] = i1;
            this._triangles[t + 2] = i2;

            this._link(t, a);
            this._link(t + 1, b);
            this._link(t + 2, c);

            this.trianglesLen += 3;

            return t;
        }
    }

    // monotonically increases with real angle, but doesn't need expensive trigonometry
    function pseudoAngle(dx, dy) {
        const p = dx / (Math.abs(dx) + Math.abs(dy));
        return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
    }

    function dist(ax, ay, bx, by) {
        const dx = ax - bx;
        const dy = ay - by;
        return dx * dx + dy * dy;
    }

    function inCircle(ax, ay, bx, by, cx, cy, px, py) {
        const dx = ax - px;
        const dy = ay - py;
        const ex = bx - px;
        const ey = by - py;
        const fx = cx - px;
        const fy = cy - py;

        const ap = dx * dx + dy * dy;
        const bp = ex * ex + ey * ey;
        const cp = fx * fx + fy * fy;

        return dx * (ey * cp - bp * fy) -
               dy * (ex * cp - bp * fx) +
               ap * (ex * fy - ey * fx) < 0;
    }

    function circumradius(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = 0.5 / (dx * ey - dy * ex);

        const x = (ey * bl - dy * cl) * d;
        const y = (dx * cl - ex * bl) * d;

        return x * x + y * y;
    }

    function circumcenter(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = 0.5 / (dx * ey - dy * ex);

        const x = ax + (ey * bl - dy * cl) * d;
        const y = ay + (dx * cl - ex * bl) * d;

        return {x, y};
    }

    function quicksort(ids, dists, left, right) {
        if (right - left <= 20) {
            for (let i = left + 1; i <= right; i++) {
                const temp = ids[i];
                const tempDist = dists[temp];
                let j = i - 1;
                while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];
                ids[j + 1] = temp;
            }
        } else {
            const median = (left + right) >> 1;
            let i = left + 1;
            let j = right;
            swap$1(ids, median, i);
            if (dists[ids[left]] > dists[ids[right]]) swap$1(ids, left, right);
            if (dists[ids[i]] > dists[ids[right]]) swap$1(ids, i, right);
            if (dists[ids[left]] > dists[ids[i]]) swap$1(ids, left, i);

            const temp = ids[i];
            const tempDist = dists[temp];
            while (true) {
                do i++; while (dists[ids[i]] < tempDist);
                do j--; while (dists[ids[j]] > tempDist);
                if (j < i) break;
                swap$1(ids, i, j);
            }
            ids[left + 1] = ids[j];
            ids[j] = temp;

            if (right - i + 1 >= j - left) {
                quicksort(ids, dists, i, right);
                quicksort(ids, dists, left, j - 1);
            } else {
                quicksort(ids, dists, left, j - 1);
                quicksort(ids, dists, i, right);
            }
        }
    }

    function swap$1(arr, i, j) {
        const tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    function defaultGetX(p) {
        return p[0];
    }
    function defaultGetY(p) {
        return p[1];
    }

    const epsilon$3 = 1e-6;

    class Path {
      constructor() {
        this._x0 = this._y0 = // start of current subpath
        this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
      }
      moveTo(x, y) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
      }
      closePath() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      }
      lineTo(x, y) {
        this._ += `L${this._x1 = +x},${this._y1 = +y}`;
      }
      arc(x, y, r) {
        x = +x, y = +y, r = +r;
        const x0 = x + r;
        const y0 = y;
        if (r < 0) throw new Error("negative radius");
        if (this._x1 === null) this._ += `M${x0},${y0}`;
        else if (Math.abs(this._x1 - x0) > epsilon$3 || Math.abs(this._y1 - y0) > epsilon$3) this._ += "L" + x0 + "," + y0;
        if (!r) return;
        this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
      }
      rect(x, y, w, h) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
      }
      value() {
        return this._ || null;
      }
    }

    class Polygon {
      constructor() {
        this._ = [];
      }
      moveTo(x, y) {
        this._.push([x, y]);
      }
      closePath() {
        this._.push(this._[0].slice());
      }
      lineTo(x, y) {
        this._.push([x, y]);
      }
      value() {
        return this._.length ? this._ : null;
      }
    }

    class Voronoi {
      constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
        if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
        this.delaunay = delaunay;
        this._circumcenters = new Float64Array(delaunay.points.length * 2);
        this.vectors = new Float64Array(delaunay.points.length * 2);
        this.xmax = xmax, this.xmin = xmin;
        this.ymax = ymax, this.ymin = ymin;
        this._init();
      }
      update() {
        this.delaunay.update();
        this._init();
        return this;
      }
      _init() {
        const {delaunay: {points, hull, triangles}, vectors} = this;

        // Compute circumcenters.
        const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
        for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
          const t1 = triangles[i] * 2;
          const t2 = triangles[i + 1] * 2;
          const t3 = triangles[i + 2] * 2;
          const x1 = points[t1];
          const y1 = points[t1 + 1];
          const x2 = points[t2];
          const y2 = points[t2 + 1];
          const x3 = points[t3];
          const y3 = points[t3 + 1];

          const dx = x2 - x1;
          const dy = y2 - y1;
          const ex = x3 - x1;
          const ey = y3 - y1;
          const ab = (dx * ey - dy * ex) * 2;

          if (Math.abs(ab) < 1e-9) {
            // degenerate case (collinear diagram)
            // almost equal points (degenerate triangle)
            // the circumcenter is at the infinity, in a
            // direction that is:
            // 1. orthogonal to the halfedge.
            let a = 1e9;
            // 2. points away from the center; since the list of triangles starts
            // in the center, the first point of the first triangle
            // will be our reference
            const r = triangles[0] * 2;
            a *= Math.sign((points[r] - x1) * ey - (points[r + 1] - y1) * ex);
            x = (x1 + x3) / 2 - a * ey;
            y = (y1 + y3) / 2 + a * ex;
          } else {
            const d = 1 / ab;
            const bl = dx * dx + dy * dy;
            const cl = ex * ex + ey * ey;
            x = x1 + (ey * bl - dy * cl) * d;
            y = y1 + (dx * cl - ex * bl) * d;
          }
          circumcenters[j] = x;
          circumcenters[j + 1] = y;
        }

        // Compute exterior cell rays.
        let h = hull[hull.length - 1];
        let p0, p1 = h * 4;
        let x0, x1 = points[2 * h];
        let y0, y1 = points[2 * h + 1];
        vectors.fill(0);
        for (let i = 0; i < hull.length; ++i) {
          h = hull[i];
          p0 = p1, x0 = x1, y0 = y1;
          p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
          vectors[p0 + 2] = vectors[p1] = y0 - y1;
          vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
        }
      }
      render(context) {
        const buffer = context == null ? context = new Path : undefined;
        const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;
        if (hull.length <= 1) return null;
        for (let i = 0, n = halfedges.length; i < n; ++i) {
          const j = halfedges[i];
          if (j < i) continue;
          const ti = Math.floor(i / 3) * 2;
          const tj = Math.floor(j / 3) * 2;
          const xi = circumcenters[ti];
          const yi = circumcenters[ti + 1];
          const xj = circumcenters[tj];
          const yj = circumcenters[tj + 1];
          this._renderSegment(xi, yi, xj, yj, context);
        }
        let h0, h1 = hull[hull.length - 1];
        for (let i = 0; i < hull.length; ++i) {
          h0 = h1, h1 = hull[i];
          const t = Math.floor(inedges[h1] / 3) * 2;
          const x = circumcenters[t];
          const y = circumcenters[t + 1];
          const v = h0 * 4;
          const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
          if (p) this._renderSegment(x, y, p[0], p[1], context);
        }
        return buffer && buffer.value();
      }
      renderBounds(context) {
        const buffer = context == null ? context = new Path : undefined;
        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
        return buffer && buffer.value();
      }
      renderCell(i, context) {
        const buffer = context == null ? context = new Path : undefined;
        const points = this._clip(i);
        if (points === null || !points.length) return;
        context.moveTo(points[0], points[1]);
        let n = points.length;
        while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;
        for (let i = 2; i < n; i += 2) {
          if (points[i] !== points[i-2] || points[i+1] !== points[i-1])
            context.lineTo(points[i], points[i + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
      }
      *cellPolygons() {
        const {delaunay: {points}} = this;
        for (let i = 0, n = points.length / 2; i < n; ++i) {
          const cell = this.cellPolygon(i);
          if (cell) cell.index = i, yield cell;
        }
      }
      cellPolygon(i) {
        const polygon = new Polygon;
        this.renderCell(i, polygon);
        return polygon.value();
      }
      _renderSegment(x0, y0, x1, y1, context) {
        let S;
        const c0 = this._regioncode(x0, y0);
        const c1 = this._regioncode(x1, y1);
        if (c0 === 0 && c1 === 0) {
          context.moveTo(x0, y0);
          context.lineTo(x1, y1);
        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
          context.moveTo(S[0], S[1]);
          context.lineTo(S[2], S[3]);
        }
      }
      contains(i, x, y) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
        return this.delaunay._step(i, x, y) === i;
      }
      *neighbors(i) {
        const ci = this._clip(i);
        if (ci) for (const j of this.delaunay.neighbors(i)) {
          const cj = this._clip(j);
          // find the common edge
          if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
            for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
              if (ci[ai] == cj[aj]
              && ci[ai + 1] == cj[aj + 1]
              && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]
              && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]
              ) {
                yield j;
                break loop;
              }
            }
          }
        }
      }
      _cell(i) {
        const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;
        const e0 = inedges[i];
        if (e0 === -1) return null; // coincident point
        const points = [];
        let e = e0;
        do {
          const t = Math.floor(e / 3);
          points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) break; // bad triangulation
          e = halfedges[e];
        } while (e !== e0 && e !== -1);
        return points;
      }
      _clip(i) {
        // degenerate case (1 valid point: return the box)
        if (i === 0 && this.delaunay.hull.length === 1) {
          return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
        }
        const points = this._cell(i);
        if (points === null) return null;
        const {vectors: V} = this;
        const v = i * 4;
        return V[v] || V[v + 1]
            ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])
            : this._clipFinite(i, points);
      }
      _clipFinite(i, points) {
        const n = points.length;
        let P = null;
        let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
        let c0, c1 = this._regioncode(x1, y1);
        let e0, e1 = 0;
        for (let j = 0; j < n; j += 2) {
          x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
          c0 = c1, c1 = this._regioncode(x1, y1);
          if (c0 === 0 && c1 === 0) {
            e0 = e1, e1 = 0;
            if (P) P.push(x1, y1);
            else P = [x1, y1];
          } else {
            let S, sx0, sy0, sx1, sy1;
            if (c0 === 0) {
              if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
              [sx0, sy0, sx1, sy1] = S;
            } else {
              if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
              [sx1, sy1, sx0, sy0] = S;
              e0 = e1, e1 = this._edgecode(sx0, sy0);
              if (e0 && e1) this._edge(i, e0, e1, P, P.length);
              if (P) P.push(sx0, sy0);
              else P = [sx0, sy0];
            }
            e0 = e1, e1 = this._edgecode(sx1, sy1);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
            if (P) P.push(sx1, sy1);
            else P = [sx1, sy1];
          }
        }
        if (P) {
          e0 = e1, e1 = this._edgecode(P[0], P[1]);
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
          return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
        }
        return P;
      }
      _clipSegment(x0, y0, x1, y1, c0, c1) {
        while (true) {
          if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];
          if (c0 & c1) return null;
          let x, y, c = c0 || c1;
          if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
          else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
          else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
          else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
          if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
          else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
        }
      }
      _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
        let P = Array.from(points), p;
        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
        if (P = this._clipFinite(i, P)) {
          for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
            c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
            if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
          }
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
          P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
        }
        return P;
      }
      _edge(i, e0, e1, P, j) {
        while (e0 !== e1) {
          let x, y;
          switch (e0) {
            case 0b0101: e0 = 0b0100; continue; // top-left
            case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top
            case 0b0110: e0 = 0b0010; continue; // top-right
            case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right
            case 0b1010: e0 = 0b1000; continue; // bottom-right
            case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom
            case 0b1001: e0 = 0b0001; continue; // bottom-left
            case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left
          }
          // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are
          // undefined, the conditional statement will be executed.
          if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
            P.splice(j, 0, x, y), j += 2;
          }
        }
        if (P.length > 4) {
          for (let i = 0; i < P.length; i+= 2) {
            const j = (i + 2) % P.length, k = (i + 4) % P.length;
            if (P[i] === P[j] && P[j] === P[k]
            || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])
              P.splice(j, 2), i -= 2;
          }
        }
        return j;
      }
      _project(x0, y0, vx, vy) {
        let t = Infinity, c, x, y;
        if (vy < 0) { // top
          if (y0 <= this.ymin) return null;
          if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
        } else if (vy > 0) { // bottom
          if (y0 >= this.ymax) return null;
          if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
        }
        if (vx > 0) { // right
          if (x0 >= this.xmax) return null;
          if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
        } else if (vx < 0) { // left
          if (x0 <= this.xmin) return null;
          if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
        }
        return [x, y];
      }
      _edgecode(x, y) {
        return (x === this.xmin ? 0b0001
            : x === this.xmax ? 0b0010 : 0b0000)
            | (y === this.ymin ? 0b0100
            : y === this.ymax ? 0b1000 : 0b0000);
      }
      _regioncode(x, y) {
        return (x < this.xmin ? 0b0001
            : x > this.xmax ? 0b0010 : 0b0000)
            | (y < this.ymin ? 0b0100
            : y > this.ymax ? 0b1000 : 0b0000);
      }
    }

    const tau$2 = 2 * Math.PI, pow$5 = Math.pow;

    function pointX(p) {
      return p[0];
    }

    function pointY(p) {
      return p[1];
    }

    // A triangulation is collinear if all its triangles have a non-null area
    function collinear(d) {
      const {triangles, coords} = d;
      for (let i = 0; i < triangles.length; i += 3) {
        const a = 2 * triangles[i],
              b = 2 * triangles[i + 1],
              c = 2 * triangles[i + 2],
              cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])
                    - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
        if (cross > 1e-10) return false;
      }
      return true;
    }

    function jitter(x, y, r) {
      return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
    }

    class Delaunay {
      static from(points, fx = pointX, fy = pointY, that) {
        return new Delaunay("length" in points
            ? flatArray(points, fx, fy, that)
            : Float64Array.from(flatIterable(points, fx, fy, that)));
      }
      constructor(points) {
        this._delaunator = new Delaunator(points);
        this.inedges = new Int32Array(points.length / 2);
        this._hullIndex = new Int32Array(points.length / 2);
        this.points = this._delaunator.coords;
        this._init();
      }
      update() {
        this._delaunator.update();
        this._init();
        return this;
      }
      _init() {
        const d = this._delaunator, points = this.points;

        // check for collinear
        if (d.hull && d.hull.length > 2 && collinear(d)) {
          this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)
            .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors
          const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],
            bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],
            r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
          for (let i = 0, n = points.length / 2; i < n; ++i) {
            const p = jitter(points[2 * i], points[2 * i + 1], r);
            points[2 * i] = p[0];
            points[2 * i + 1] = p[1];
          }
          this._delaunator = new Delaunator(points);
        } else {
          delete this.collinear;
        }

        const halfedges = this.halfedges = this._delaunator.halfedges;
        const hull = this.hull = this._delaunator.hull;
        const triangles = this.triangles = this._delaunator.triangles;
        const inedges = this.inedges.fill(-1);
        const hullIndex = this._hullIndex.fill(-1);

        // Compute an index from each point to an (arbitrary) incoming halfedge
        // Used to give the first neighbor of each point; for this reason,
        // on the hull we give priority to exterior halfedges
        for (let e = 0, n = halfedges.length; e < n; ++e) {
          const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
          if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
        }
        for (let i = 0, n = hull.length; i < n; ++i) {
          hullIndex[hull[i]] = i;
        }

        // degenerate case: 1 or 2 (distinct) points
        if (hull.length <= 2 && hull.length > 0) {
          this.triangles = new Int32Array(3).fill(-1);
          this.halfedges = new Int32Array(3).fill(-1);
          this.triangles[0] = hull[0];
          inedges[hull[0]] = 1;
          if (hull.length === 2) {
            inedges[hull[1]] = 0;
            this.triangles[1] = hull[1];
            this.triangles[2] = hull[1];
          }
        }
      }
      voronoi(bounds) {
        return new Voronoi(this, bounds);
      }
      *neighbors(i) {
        const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;

        // degenerate case with several collinear points
        if (collinear) {
          const l = collinear.indexOf(i);
          if (l > 0) yield collinear[l - 1];
          if (l < collinear.length - 1) yield collinear[l + 1];
          return;
        }

        const e0 = inedges[i];
        if (e0 === -1) return; // coincident point
        let e = e0, p0 = -1;
        do {
          yield p0 = triangles[e];
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) return; // bad triangulation
          e = halfedges[e];
          if (e === -1) {
            const p = hull[(_hullIndex[i] + 1) % hull.length];
            if (p !== p0) yield p;
            return;
          }
        } while (e !== e0);
      }
      find(x, y, i = 0) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
        const i0 = i;
        let c;
        while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;
        return c;
      }
      _step(i, x, y) {
        const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;
        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
        let c = i;
        let dc = pow$5(x - points[i * 2], 2) + pow$5(y - points[i * 2 + 1], 2);
        const e0 = inedges[i];
        let e = e0;
        do {
          let t = triangles[e];
          const dt = pow$5(x - points[t * 2], 2) + pow$5(y - points[t * 2 + 1], 2);
          if (dt < dc) dc = dt, c = t;
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) break; // bad triangulation
          e = halfedges[e];
          if (e === -1) {
            e = hull[(_hullIndex[i] + 1) % hull.length];
            if (e !== t) {
              if (pow$5(x - points[e * 2], 2) + pow$5(y - points[e * 2 + 1], 2) < dc) return e;
            }
            break;
          }
        } while (e !== e0);
        return c;
      }
      render(context) {
        const buffer = context == null ? context = new Path : undefined;
        const {points, halfedges, triangles} = this;
        for (let i = 0, n = halfedges.length; i < n; ++i) {
          const j = halfedges[i];
          if (j < i) continue;
          const ti = triangles[i] * 2;
          const tj = triangles[j] * 2;
          context.moveTo(points[ti], points[ti + 1]);
          context.lineTo(points[tj], points[tj + 1]);
        }
        this.renderHull(context);
        return buffer && buffer.value();
      }
      renderPoints(context, r) {
        if (r === undefined && (!context || typeof context.moveTo !== "function")) r = context, context = null;
        r = r == undefined ? 2 : +r;
        const buffer = context == null ? context = new Path : undefined;
        const {points} = this;
        for (let i = 0, n = points.length; i < n; i += 2) {
          const x = points[i], y = points[i + 1];
          context.moveTo(x + r, y);
          context.arc(x, y, r, 0, tau$2);
        }
        return buffer && buffer.value();
      }
      renderHull(context) {
        const buffer = context == null ? context = new Path : undefined;
        const {hull, points} = this;
        const h = hull[0] * 2, n = hull.length;
        context.moveTo(points[h], points[h + 1]);
        for (let i = 1; i < n; ++i) {
          const h = 2 * hull[i];
          context.lineTo(points[h], points[h + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
      }
      hullPolygon() {
        const polygon = new Polygon;
        this.renderHull(polygon);
        return polygon.value();
      }
      renderTriangle(i, context) {
        const buffer = context == null ? context = new Path : undefined;
        const {points, triangles} = this;
        const t0 = triangles[i *= 3] * 2;
        const t1 = triangles[i + 1] * 2;
        const t2 = triangles[i + 2] * 2;
        context.moveTo(points[t0], points[t0 + 1]);
        context.lineTo(points[t1], points[t1 + 1]);
        context.lineTo(points[t2], points[t2 + 1]);
        context.closePath();
        return buffer && buffer.value();
      }
      *trianglePolygons() {
        const {triangles} = this;
        for (let i = 0, n = triangles.length / 3; i < n; ++i) {
          yield this.trianglePolygon(i);
        }
      }
      trianglePolygon(i) {
        const polygon = new Polygon;
        this.renderTriangle(i, polygon);
        return polygon.value();
      }
    }

    function flatArray(points, fx, fy, that) {
      const n = points.length;
      const array = new Float64Array(n * 2);
      for (let i = 0; i < n; ++i) {
        const p = points[i];
        array[i * 2] = fx.call(that, p, i, points);
        array[i * 2 + 1] = fy.call(that, p, i, points);
      }
      return array;
    }

    function* flatIterable(points, fx, fy, that) {
      let i = 0;
      for (const p of points) {
        yield fx.call(that, p, i, points);
        yield fy.call(that, p, i, points);
        ++i;
      }
    }

    var EOL = {},
        EOF = {},
        QUOTE = 34,
        NEWLINE = 10,
        RETURN = 13;

    function objectConverter(columns) {
      return new Function("d", "return {" + columns.map(function(name, i) {
        return JSON.stringify(name) + ": d[" + i + "] || \"\"";
      }).join(",") + "}");
    }

    function customConverter(columns, f) {
      var object = objectConverter(columns);
      return function(row, i) {
        return f(object(row), i, columns);
      };
    }

    // Compute unique columns in order of discovery.
    function inferColumns(rows) {
      var columnSet = Object.create(null),
          columns = [];

      rows.forEach(function(row) {
        for (var column in row) {
          if (!(column in columnSet)) {
            columns.push(columnSet[column] = column);
          }
        }
      });

      return columns;
    }

    function pad$2(value, width) {
      var s = value + "", length = s.length;
      return length < width ? new Array(width - length + 1).join(0) + s : s;
    }

    function formatYear$1(year) {
      return year < 0 ? "-" + pad$2(-year, 6)
        : year > 9999 ? "+" + pad$2(year, 6)
        : pad$2(year, 4);
    }

    function formatDate(date) {
      var hours = date.getUTCHours(),
          minutes = date.getUTCMinutes(),
          seconds = date.getUTCSeconds(),
          milliseconds = date.getUTCMilliseconds();
      return isNaN(date) ? "Invalid Date"
          : formatYear$1(date.getUTCFullYear()) + "-" + pad$2(date.getUTCMonth() + 1, 2) + "-" + pad$2(date.getUTCDate(), 2)
          + (milliseconds ? "T" + pad$2(hours, 2) + ":" + pad$2(minutes, 2) + ":" + pad$2(seconds, 2) + "." + pad$2(milliseconds, 3) + "Z"
          : seconds ? "T" + pad$2(hours, 2) + ":" + pad$2(minutes, 2) + ":" + pad$2(seconds, 2) + "Z"
          : minutes || hours ? "T" + pad$2(hours, 2) + ":" + pad$2(minutes, 2) + "Z"
          : "");
    }

    function dsvFormat(delimiter) {
      var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
          DELIMITER = delimiter.charCodeAt(0);

      function parse(text, f) {
        var convert, columns, rows = parseRows(text, function(row, i) {
          if (convert) return convert(row, i - 1);
          columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
        });
        rows.columns = columns || [];
        return rows;
      }

      function parseRows(text, f) {
        var rows = [], // output rows
            N = text.length,
            I = 0, // current character index
            n = 0, // current line number
            t, // current token
            eof = N <= 0, // current token followed by EOF?
            eol = false; // current token followed by EOL?

        // Strip the trailing newline.
        if (text.charCodeAt(N - 1) === NEWLINE) --N;
        if (text.charCodeAt(N - 1) === RETURN) --N;

        function token() {
          if (eof) return EOF;
          if (eol) return eol = false, EOL;

          // Unescape quotes.
          var i, j = I, c;
          if (text.charCodeAt(j) === QUOTE) {
            while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
            if ((i = I) >= N) eof = true;
            else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            return text.slice(j + 1, i - 1).replace(/""/g, "\"");
          }

          // Find next delimiter or newline.
          while (I < N) {
            if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            else if (c !== DELIMITER) continue;
            return text.slice(j, i);
          }

          // Return last token before EOF.
          return eof = true, text.slice(j, N);
        }

        while ((t = token()) !== EOF) {
          var row = [];
          while (t !== EOL && t !== EOF) row.push(t), t = token();
          if (f && (row = f(row, n++)) == null) continue;
          rows.push(row);
        }

        return rows;
      }

      function preformatBody(rows, columns) {
        return rows.map(function(row) {
          return columns.map(function(column) {
            return formatValue(row[column]);
          }).join(delimiter);
        });
      }

      function format(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
      }

      function formatBody(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return preformatBody(rows, columns).join("\n");
      }

      function formatRows(rows) {
        return rows.map(formatRow).join("\n");
      }

      function formatRow(row) {
        return row.map(formatValue).join(delimiter);
      }

      function formatValue(value) {
        return value == null ? ""
            : value instanceof Date ? formatDate(value)
            : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
            : value;
      }

      return {
        parse: parse,
        parseRows: parseRows,
        format: format,
        formatBody: formatBody,
        formatRows: formatRows,
        formatRow: formatRow,
        formatValue: formatValue
      };
    }

    var csv$1 = dsvFormat(",");

    var csvParse = csv$1.parse;
    var csvParseRows = csv$1.parseRows;
    var csvFormat = csv$1.format;
    var csvFormatBody = csv$1.formatBody;
    var csvFormatRows = csv$1.formatRows;
    var csvFormatRow = csv$1.formatRow;
    var csvFormatValue = csv$1.formatValue;

    var tsv$1 = dsvFormat("\t");

    var tsvParse = tsv$1.parse;
    var tsvParseRows = tsv$1.parseRows;
    var tsvFormat = tsv$1.format;
    var tsvFormatBody = tsv$1.formatBody;
    var tsvFormatRows = tsv$1.formatRows;
    var tsvFormatRow = tsv$1.formatRow;
    var tsvFormatValue = tsv$1.formatValue;

    function autoType(object) {
      for (var key in object) {
        var value = object[key].trim(), number, m;
        if (!value) value = null;
        else if (value === "true") value = true;
        else if (value === "false") value = false;
        else if (value === "NaN") value = NaN;
        else if (!isNaN(number = +value)) value = number;
        else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
          if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
          value = new Date(value);
        }
        else continue;
        object[key] = value;
      }
      return object;
    }

    // https://github.com/d3/d3-dsv/issues/45
    const fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();

    function responseBlob(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      return response.blob();
    }

    function blob(input, init) {
      return fetch(input, init).then(responseBlob);
    }

    function responseArrayBuffer(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      return response.arrayBuffer();
    }

    function buffer$1(input, init) {
      return fetch(input, init).then(responseArrayBuffer);
    }

    function responseText(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      return response.text();
    }

    function text(input, init) {
      return fetch(input, init).then(responseText);
    }

    function dsvParse(parse) {
      return function(input, init, row) {
        if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
        return text(input, init).then(function(response) {
          return parse(response, row);
        });
      };
    }

    function dsv(delimiter, input, init, row) {
      if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
      var format = dsvFormat(delimiter);
      return text(input, init).then(function(response) {
        return format.parse(response, row);
      });
    }

    var csv = dsvParse(csvParse);
    var tsv = dsvParse(tsvParse);

    function image$1(input, init) {
      return new Promise(function(resolve, reject) {
        var image = new Image;
        for (var key in init) image[key] = init[key];
        image.onerror = reject;
        image.onload = function() { resolve(image); };
        image.src = input;
      });
    }

    function responseJson(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      if (response.status === 204 || response.status === 205) return;
      return response.json();
    }

    function json(input, init) {
      return fetch(input, init).then(responseJson);
    }

    function parser(type) {
      return (input, init) => text(input, init)
        .then(text => (new DOMParser).parseFromString(text, type));
    }

    var xml = parser("application/xml");

    var html = parser("text/html");

    var svg$1 = parser("image/svg+xml");

    function center(x, y) {
      var nodes, strength = 1;

      if (x == null) x = 0;
      if (y == null) y = 0;

      function force() {
        var i,
            n = nodes.length,
            node,
            sx = 0,
            sy = 0;

        for (i = 0; i < n; ++i) {
          node = nodes[i], sx += node.x, sy += node.y;
        }

        for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {
          node = nodes[i], node.x -= sx, node.y -= sy;
        }
      }

      force.initialize = function(_) {
        nodes = _;
      };

      force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
      };

      force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
      };

      return force;
    }

    function tree_add(d) {
      const x = +this._x.call(null, d),
          y = +this._y.call(null, d);
      return add$3(this.cover(x, y), x, y, d);
    }

    function add$3(tree, x, y, d) {
      if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

      var parent,
          node = tree._root,
          leaf = {data: d},
          x0 = tree._x0,
          y0 = tree._y0,
          x1 = tree._x1,
          y1 = tree._y1,
          xm,
          ym,
          xp,
          yp,
          right,
          bottom,
          i,
          j;

      // If the tree is empty, initialize the root as a leaf.
      if (!node) return tree._root = leaf, tree;

      // Find the existing leaf for the new point, or add it.
      while (node.length) {
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
        if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
      }

      // Is the new point is exactly coincident with the existing point?
      xp = +tree._x.call(null, node.data);
      yp = +tree._y.call(null, node.data);
      if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

      // Otherwise, split the leaf node until the old and new point are separated.
      do {
        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
      return parent[j] = node, parent[i] = leaf, tree;
    }

    function addAll(data) {
      var d, i, n = data.length,
          x,
          y,
          xz = new Array(n),
          yz = new Array(n),
          x0 = Infinity,
          y0 = Infinity,
          x1 = -Infinity,
          y1 = -Infinity;

      // Compute the points and their extent.
      for (i = 0; i < n; ++i) {
        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
        xz[i] = x;
        yz[i] = y;
        if (x < x0) x0 = x;
        if (x > x1) x1 = x;
        if (y < y0) y0 = y;
        if (y > y1) y1 = y;
      }

      // If there were no (valid) points, abort.
      if (x0 > x1 || y0 > y1) return this;

      // Expand the tree to cover the new points.
      this.cover(x0, y0).cover(x1, y1);

      // Add the new points.
      for (i = 0; i < n; ++i) {
        add$3(this, xz[i], yz[i], data[i]);
      }

      return this;
    }

    function tree_cover(x, y) {
      if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

      var x0 = this._x0,
          y0 = this._y0,
          x1 = this._x1,
          y1 = this._y1;

      // If the quadtree has no extent, initialize them.
      // Integer extent are necessary so that if we later double the extent,
      // the existing quadrant boundaries don’t change due to floating point error!
      if (isNaN(x0)) {
        x1 = (x0 = Math.floor(x)) + 1;
        y1 = (y0 = Math.floor(y)) + 1;
      }

      // Otherwise, double repeatedly to cover.
      else {
        var z = x1 - x0 || 1,
            node = this._root,
            parent,
            i;

        while (x0 > x || x >= x1 || y0 > y || y >= y1) {
          i = (y < y0) << 1 | (x < x0);
          parent = new Array(4), parent[i] = node, node = parent, z *= 2;
          switch (i) {
            case 0: x1 = x0 + z, y1 = y0 + z; break;
            case 1: x0 = x1 - z, y1 = y0 + z; break;
            case 2: x1 = x0 + z, y0 = y1 - z; break;
            case 3: x0 = x1 - z, y0 = y1 - z; break;
          }
        }

        if (this._root && this._root.length) this._root = node;
      }

      this._x0 = x0;
      this._y0 = y0;
      this._x1 = x1;
      this._y1 = y1;
      return this;
    }

    function tree_data() {
      var data = [];
      this.visit(function(node) {
        if (!node.length) do data.push(node.data); while (node = node.next)
      });
      return data;
    }

    function tree_extent(_) {
      return arguments.length
          ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
          : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
    }

    function Quad(node, x0, y0, x1, y1) {
      this.node = node;
      this.x0 = x0;
      this.y0 = y0;
      this.x1 = x1;
      this.y1 = y1;
    }

    function tree_find(x, y, radius) {
      var data,
          x0 = this._x0,
          y0 = this._y0,
          x1,
          y1,
          x2,
          y2,
          x3 = this._x1,
          y3 = this._y1,
          quads = [],
          node = this._root,
          q,
          i;

      if (node) quads.push(new Quad(node, x0, y0, x3, y3));
      if (radius == null) radius = Infinity;
      else {
        x0 = x - radius, y0 = y - radius;
        x3 = x + radius, y3 = y + radius;
        radius *= radius;
      }

      while (q = quads.pop()) {

        // Stop searching if this quadrant can’t contain a closer node.
        if (!(node = q.node)
            || (x1 = q.x0) > x3
            || (y1 = q.y0) > y3
            || (x2 = q.x1) < x0
            || (y2 = q.y1) < y0) continue;

        // Bisect the current quadrant.
        if (node.length) {
          var xm = (x1 + x2) / 2,
              ym = (y1 + y2) / 2;

          quads.push(
            new Quad(node[3], xm, ym, x2, y2),
            new Quad(node[2], x1, ym, xm, y2),
            new Quad(node[1], xm, y1, x2, ym),
            new Quad(node[0], x1, y1, xm, ym)
          );

          // Visit the closest quadrant first.
          if (i = (y >= ym) << 1 | (x >= xm)) {
            q = quads[quads.length - 1];
            quads[quads.length - 1] = quads[quads.length - 1 - i];
            quads[quads.length - 1 - i] = q;
          }
        }

        // Visit this point. (Visiting coincident points isn’t necessary!)
        else {
          var dx = x - +this._x.call(null, node.data),
              dy = y - +this._y.call(null, node.data),
              d2 = dx * dx + dy * dy;
          if (d2 < radius) {
            var d = Math.sqrt(radius = d2);
            x0 = x - d, y0 = y - d;
            x3 = x + d, y3 = y + d;
            data = node.data;
          }
        }
      }

      return data;
    }

    function tree_remove(d) {
      if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

      var parent,
          node = this._root,
          retainer,
          previous,
          next,
          x0 = this._x0,
          y0 = this._y0,
          x1 = this._x1,
          y1 = this._y1,
          x,
          y,
          xm,
          ym,
          right,
          bottom,
          i,
          j;

      // If the tree is empty, initialize the root as a leaf.
      if (!node) return this;

      // Find the leaf node for the point.
      // While descending, also retain the deepest parent with a non-removed sibling.
      if (node.length) while (true) {
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
        if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
        if (!node.length) break;
        if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
      }

      // Find the point to remove.
      while (node.data !== d) if (!(previous = node, node = node.next)) return this;
      if (next = node.next) delete node.next;

      // If there are multiple coincident points, remove just the point.
      if (previous) return (next ? previous.next = next : delete previous.next), this;

      // If this is the root point, remove it.
      if (!parent) return this._root = next, this;

      // Remove this leaf.
      next ? parent[i] = next : delete parent[i];

      // If the parent now contains exactly one leaf, collapse superfluous parents.
      if ((node = parent[0] || parent[1] || parent[2] || parent[3])
          && node === (parent[3] || parent[2] || parent[1] || parent[0])
          && !node.length) {
        if (retainer) retainer[j] = node;
        else this._root = node;
      }

      return this;
    }

    function removeAll(data) {
      for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
      return this;
    }

    function tree_root() {
      return this._root;
    }

    function tree_size() {
      var size = 0;
      this.visit(function(node) {
        if (!node.length) do ++size; while (node = node.next)
      });
      return size;
    }

    function tree_visit(callback) {
      var quads = [], q, node = this._root, child, x0, y0, x1, y1;
      if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
      while (q = quads.pop()) {
        if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
          var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
          if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
          if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
          if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
          if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
        }
      }
      return this;
    }

    function tree_visitAfter(callback) {
      var quads = [], next = [], q;
      if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
      while (q = quads.pop()) {
        var node = q.node;
        if (node.length) {
          var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
          if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
          if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
          if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
          if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
        }
        next.push(q);
      }
      while (q = next.pop()) {
        callback(q.node, q.x0, q.y0, q.x1, q.y1);
      }
      return this;
    }

    function defaultX(d) {
      return d[0];
    }

    function tree_x(_) {
      return arguments.length ? (this._x = _, this) : this._x;
    }

    function defaultY(d) {
      return d[1];
    }

    function tree_y(_) {
      return arguments.length ? (this._y = _, this) : this._y;
    }

    function quadtree(nodes, x, y) {
      var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
      return nodes == null ? tree : tree.addAll(nodes);
    }

    function Quadtree(x, y, x0, y0, x1, y1) {
      this._x = x;
      this._y = y;
      this._x0 = x0;
      this._y0 = y0;
      this._x1 = x1;
      this._y1 = y1;
      this._root = undefined;
    }

    function leaf_copy(leaf) {
      var copy = {data: leaf.data}, next = copy;
      while (leaf = leaf.next) next = next.next = {data: leaf.data};
      return copy;
    }

    var treeProto = quadtree.prototype = Quadtree.prototype;

    treeProto.copy = function() {
      var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
          node = this._root,
          nodes,
          child;

      if (!node) return copy;

      if (!node.length) return copy._root = leaf_copy(node), copy;

      nodes = [{source: node, target: copy._root = new Array(4)}];
      while (node = nodes.pop()) {
        for (var i = 0; i < 4; ++i) {
          if (child = node.source[i]) {
            if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
            else node.target[i] = leaf_copy(child);
          }
        }
      }

      return copy;
    };

    treeProto.add = tree_add;
    treeProto.addAll = addAll;
    treeProto.cover = tree_cover;
    treeProto.data = tree_data;
    treeProto.extent = tree_extent;
    treeProto.find = tree_find;
    treeProto.remove = tree_remove;
    treeProto.removeAll = removeAll;
    treeProto.root = tree_root;
    treeProto.size = tree_size;
    treeProto.visit = tree_visit;
    treeProto.visitAfter = tree_visitAfter;
    treeProto.x = tree_x;
    treeProto.y = tree_y;

    function constant$4(x) {
      return function() {
        return x;
      };
    }

    function jiggle(random) {
      return (random() - 0.5) * 1e-6;
    }

    function x$4(d) {
      return d.x + d.vx;
    }

    function y$3(d) {
      return d.y + d.vy;
    }

    function collide(radius) {
      var nodes,
          radii,
          random,
          strength = 1,
          iterations = 1;

      if (typeof radius !== "function") radius = constant$4(radius == null ? 1 : +radius);

      function force() {
        var i, n = nodes.length,
            tree,
            node,
            xi,
            yi,
            ri,
            ri2;

        for (var k = 0; k < iterations; ++k) {
          tree = quadtree(nodes, x$4, y$3).visitAfter(prepare);
          for (i = 0; i < n; ++i) {
            node = nodes[i];
            ri = radii[node.index], ri2 = ri * ri;
            xi = node.x + node.vx;
            yi = node.y + node.vy;
            tree.visit(apply);
          }
        }

        function apply(quad, x0, y0, x1, y1) {
          var data = quad.data, rj = quad.r, r = ri + rj;
          if (data) {
            if (data.index > node.index) {
              var x = xi - data.x - data.vx,
                  y = yi - data.y - data.vy,
                  l = x * x + y * y;
              if (l < r * r) {
                if (x === 0) x = jiggle(random), l += x * x;
                if (y === 0) y = jiggle(random), l += y * y;
                l = (r - (l = Math.sqrt(l))) / l * strength;
                node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                node.vy += (y *= l) * r;
                data.vx -= x * (r = 1 - r);
                data.vy -= y * r;
              }
            }
            return;
          }
          return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
        }
      }

      function prepare(quad) {
        if (quad.data) return quad.r = radii[quad.data.index];
        for (var i = quad.r = 0; i < 4; ++i) {
          if (quad[i] && quad[i].r > quad.r) {
            quad.r = quad[i].r;
          }
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        radii = new Array(n);
        for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
      }

      force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
      };

      force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
      };

      force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : radius;
      };

      return force;
    }

    function index$3(d) {
      return d.index;
    }

    function find(nodeById, nodeId) {
      var node = nodeById.get(nodeId);
      if (!node) throw new Error("node not found: " + nodeId);
      return node;
    }

    function link$2(links) {
      var id = index$3,
          strength = defaultStrength,
          strengths,
          distance = constant$4(30),
          distances,
          nodes,
          count,
          bias,
          random,
          iterations = 1;

      if (links == null) links = [];

      function defaultStrength(link) {
        return 1 / Math.min(count[link.source.index], count[link.target.index]);
      }

      function force(alpha) {
        for (var k = 0, n = links.length; k < iterations; ++k) {
          for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
            link = links[i], source = link.source, target = link.target;
            x = target.x + target.vx - source.x - source.vx || jiggle(random);
            y = target.y + target.vy - source.y - source.vy || jiggle(random);
            l = Math.sqrt(x * x + y * y);
            l = (l - distances[i]) / l * alpha * strengths[i];
            x *= l, y *= l;
            target.vx -= x * (b = bias[i]);
            target.vy -= y * b;
            source.vx += x * (b = 1 - b);
            source.vy += y * b;
          }
        }
      }

      function initialize() {
        if (!nodes) return;

        var i,
            n = nodes.length,
            m = links.length,
            nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),
            link;

        for (i = 0, count = new Array(n); i < m; ++i) {
          link = links[i], link.index = i;
          if (typeof link.source !== "object") link.source = find(nodeById, link.source);
          if (typeof link.target !== "object") link.target = find(nodeById, link.target);
          count[link.source.index] = (count[link.source.index] || 0) + 1;
          count[link.target.index] = (count[link.target.index] || 0) + 1;
        }

        for (i = 0, bias = new Array(m); i < m; ++i) {
          link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
        }

        strengths = new Array(m), initializeStrength();
        distances = new Array(m), initializeDistance();
      }

      function initializeStrength() {
        if (!nodes) return;

        for (var i = 0, n = links.length; i < n; ++i) {
          strengths[i] = +strength(links[i], i, links);
        }
      }

      function initializeDistance() {
        if (!nodes) return;

        for (var i = 0, n = links.length; i < n; ++i) {
          distances[i] = +distance(links[i], i, links);
        }
      }

      force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
      };

      force.links = function(_) {
        return arguments.length ? (links = _, initialize(), force) : links;
      };

      force.id = function(_) {
        return arguments.length ? (id = _, force) : id;
      };

      force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initializeStrength(), force) : strength;
      };

      force.distance = function(_) {
        return arguments.length ? (distance = typeof _ === "function" ? _ : constant$4(+_), initializeDistance(), force) : distance;
      };

      return force;
    }

    // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
    const a$1 = 1664525;
    const c$3 = 1013904223;
    const m = 4294967296; // 2^32

    function lcg$1() {
      let s = 1;
      return () => (s = (a$1 * s + c$3) % m) / m;
    }

    function x$3(d) {
      return d.x;
    }

    function y$2(d) {
      return d.y;
    }

    var initialRadius = 10,
        initialAngle = Math.PI * (3 - Math.sqrt(5));

    function simulation(nodes) {
      var simulation,
          alpha = 1,
          alphaMin = 0.001,
          alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
          alphaTarget = 0,
          velocityDecay = 0.6,
          forces = new Map(),
          stepper = timer(step),
          event = dispatch("tick", "end"),
          random = lcg$1();

      if (nodes == null) nodes = [];

      function step() {
        tick();
        event.call("tick", simulation);
        if (alpha < alphaMin) {
          stepper.stop();
          event.call("end", simulation);
        }
      }

      function tick(iterations) {
        var i, n = nodes.length, node;

        if (iterations === undefined) iterations = 1;

        for (var k = 0; k < iterations; ++k) {
          alpha += (alphaTarget - alpha) * alphaDecay;

          forces.forEach(function(force) {
            force(alpha);
          });

          for (i = 0; i < n; ++i) {
            node = nodes[i];
            if (node.fx == null) node.x += node.vx *= velocityDecay;
            else node.x = node.fx, node.vx = 0;
            if (node.fy == null) node.y += node.vy *= velocityDecay;
            else node.y = node.fy, node.vy = 0;
          }
        }

        return simulation;
      }

      function initializeNodes() {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.index = i;
          if (node.fx != null) node.x = node.fx;
          if (node.fy != null) node.y = node.fy;
          if (isNaN(node.x) || isNaN(node.y)) {
            var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
            node.x = radius * Math.cos(angle);
            node.y = radius * Math.sin(angle);
          }
          if (isNaN(node.vx) || isNaN(node.vy)) {
            node.vx = node.vy = 0;
          }
        }
      }

      function initializeForce(force) {
        if (force.initialize) force.initialize(nodes, random);
        return force;
      }

      initializeNodes();

      return simulation = {
        tick: tick,

        restart: function() {
          return stepper.restart(step), simulation;
        },

        stop: function() {
          return stepper.stop(), simulation;
        },

        nodes: function(_) {
          return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
        },

        alpha: function(_) {
          return arguments.length ? (alpha = +_, simulation) : alpha;
        },

        alphaMin: function(_) {
          return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
        },

        alphaDecay: function(_) {
          return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
        },

        alphaTarget: function(_) {
          return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
        },

        velocityDecay: function(_) {
          return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
        },

        randomSource: function(_) {
          return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
        },

        force: function(name, _) {
          return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
        },

        find: function(x, y, radius) {
          var i = 0,
              n = nodes.length,
              dx,
              dy,
              d2,
              node,
              closest;

          if (radius == null) radius = Infinity;
          else radius *= radius;

          for (i = 0; i < n; ++i) {
            node = nodes[i];
            dx = x - node.x;
            dy = y - node.y;
            d2 = dx * dx + dy * dy;
            if (d2 < radius) closest = node, radius = d2;
          }

          return closest;
        },

        on: function(name, _) {
          return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
        }
      };
    }

    function manyBody() {
      var nodes,
          node,
          random,
          alpha,
          strength = constant$4(-30),
          strengths,
          distanceMin2 = 1,
          distanceMax2 = Infinity,
          theta2 = 0.81;

      function force(_) {
        var i, n = nodes.length, tree = quadtree(nodes, x$3, y$2).visitAfter(accumulate);
        for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        strengths = new Array(n);
        for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
      }

      function accumulate(quad) {
        var strength = 0, q, c, weight = 0, x, y, i;

        // For internal nodes, accumulate forces from child quadrants.
        if (quad.length) {
          for (x = y = i = 0; i < 4; ++i) {
            if ((q = quad[i]) && (c = Math.abs(q.value))) {
              strength += q.value, weight += c, x += c * q.x, y += c * q.y;
            }
          }
          quad.x = x / weight;
          quad.y = y / weight;
        }

        // For leaf nodes, accumulate forces from coincident quadrants.
        else {
          q = quad;
          q.x = q.data.x;
          q.y = q.data.y;
          do strength += strengths[q.data.index];
          while (q = q.next);
        }

        quad.value = strength;
      }

      function apply(quad, x1, _, x2) {
        if (!quad.value) return true;

        var x = quad.x - node.x,
            y = quad.y - node.y,
            w = x2 - x1,
            l = x * x + y * y;

        // Apply the Barnes-Hut approximation if possible.
        // Limit forces for very close nodes; randomize direction if coincident.
        if (w * w / theta2 < l) {
          if (l < distanceMax2) {
            if (x === 0) x = jiggle(random), l += x * x;
            if (y === 0) y = jiggle(random), l += y * y;
            if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
            node.vx += x * quad.value * alpha / l;
            node.vy += y * quad.value * alpha / l;
          }
          return true;
        }

        // Otherwise, process points directly.
        else if (quad.length || l >= distanceMax2) return;

        // Limit forces for very close nodes; randomize direction if coincident.
        if (quad.data !== node || quad.next) {
          if (x === 0) x = jiggle(random), l += x * x;
          if (y === 0) y = jiggle(random), l += y * y;
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        }

        do if (quad.data !== node) {
          w = strengths[quad.data.index] * alpha / l;
          node.vx += x * w;
          node.vy += y * w;
        } while (quad = quad.next);
      }

      force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
      };

      force.distanceMin = function(_) {
        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
      };

      force.distanceMax = function(_) {
        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
      };

      force.theta = function(_) {
        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
      };

      return force;
    }

    function radial$1(radius, x, y) {
      var nodes,
          strength = constant$4(0.1),
          strengths,
          radiuses;

      if (typeof radius !== "function") radius = constant$4(+radius);
      if (x == null) x = 0;
      if (y == null) y = 0;

      function force(alpha) {
        for (var i = 0, n = nodes.length; i < n; ++i) {
          var node = nodes[i],
              dx = node.x - x || 1e-6,
              dy = node.y - y || 1e-6,
              r = Math.sqrt(dx * dx + dy * dy),
              k = (radiuses[i] - r) * strengths[i] * alpha / r;
          node.vx += dx * k;
          node.vy += dy * k;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        radiuses = new Array(n);
        for (i = 0; i < n; ++i) {
          radiuses[i] = +radius(nodes[i], i, nodes);
          strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _, initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
      };

      force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : radius;
      };

      force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
      };

      force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
      };

      return force;
    }

    function x$2(x) {
      var strength = constant$4(0.1),
          nodes,
          strengths,
          xz;

      if (typeof x !== "function") x = constant$4(x == null ? 0 : +x);

      function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        xz = new Array(n);
        for (i = 0; i < n; ++i) {
          strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
      };

      force.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : x;
      };

      return force;
    }

    function y$1(y) {
      var strength = constant$4(0.1),
          nodes,
          strengths,
          yz;

      if (typeof y !== "function") y = constant$4(y == null ? 0 : +y);

      function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        yz = new Array(n);
        for (i = 0; i < n; ++i) {
          strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
      };

      force.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : y;
      };

      return force;
    }

    function formatDecimal(x) {
      return Math.abs(x = Math.round(x)) >= 1e21
          ? x.toLocaleString("en").replace(/,/g, "")
          : x.toString(10);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ["123", 0].
    function formatDecimalParts(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent$1(x) {
      return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }

    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
      this.align = specifier.align === undefined ? ">" : specifier.align + "";
      this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? "" : specifier.type + "";
    }

    FormatSpecifier.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width === undefined ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;

    function formatPrefixAuto(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
      "%": (x, p) => (x * 100).toFixed(p),
      "b": (x) => Math.round(x).toString(2),
      "c": (x) => x + "",
      "d": formatDecimal,
      "e": (x, p) => x.toExponential(p),
      "f": (x, p) => x.toFixed(p),
      "g": (x, p) => x.toPrecision(p),
      "o": (x) => Math.round(x).toString(8),
      "p": (x, p) => formatRounded(x * 100, p),
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": (x) => Math.round(x).toString(16).toUpperCase(),
      "x": (x) => Math.round(x).toString(16)
    };

    function identity$8(x) {
      return x;
    }

    var map = Array.prototype.map,
        prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale$1(locale) {
      var group = locale.grouping === undefined || locale.thousands === undefined ? identity$8 : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
          currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
          currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
          decimal = locale.decimal === undefined ? "." : locale.decimal + "",
          numerals = locale.numerals === undefined ? identity$8 : formatNumerals(map.call(locale.numerals, String)),
          percent = locale.percent === undefined ? "%" : locale.percent + "",
          minus = locale.minus === undefined ? "−" : locale.minus + "",
          nan = locale.nan === undefined ? "NaN" : locale.nan + "";

      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Determine the sign. -0 is not less than 0, but 1 / -0 is!
            var valueNegative = value < 0 || 1 / value < 0;

            // Perform the initial formatting.
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim(value);

            // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
            if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale$1;
    var format;
    var formatPrefix;

    defaultLocale$1({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });

    function defaultLocale$1(definition) {
      locale$1 = formatLocale$1(definition);
      format = locale$1.format;
      formatPrefix = locale$1.formatPrefix;
      return locale$1;
    }

    function precisionFixed(step) {
      return Math.max(0, -exponent$1(Math.abs(step)));
    }

    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
    }

    function precisionRound(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
    }

    var epsilon$2 = 1e-6;
    var epsilon2 = 1e-12;
    var pi$1 = Math.PI;
    var halfPi$1 = pi$1 / 2;
    var quarterPi = pi$1 / 4;
    var tau$1 = pi$1 * 2;

    var degrees = 180 / pi$1;
    var radians = pi$1 / 180;

    var abs$4 = Math.abs;
    var atan$3 = Math.atan;
    var atan2$4 = Math.atan2;
    var cos$4 = Math.cos;
    var ceil$3 = Math.ceil;
    var exp$3 = Math.exp;
    var hypot = Math.hypot;
    var log$5 = Math.log;
    var pow$4 = Math.pow;
    var sin$4 = Math.sin;
    var sign$4 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
    var sqrt$5 = Math.sqrt;
    var tan$3 = Math.tan;

    function acos$4(x) {
      return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);
    }

    function asin$4(x) {
      return x > 1 ? halfPi$1 : x < -1 ? -halfPi$1 : Math.asin(x);
    }

    function haversin(x) {
      return (x = sin$4(x / 2)) * x;
    }

    function noop$1() {}

    function streamGeometry(geometry, stream) {
      if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
        streamGeometryType[geometry.type](geometry, stream);
      }
    }

    var streamObjectType = {
      Feature: function(object, stream) {
        streamGeometry(object.geometry, stream);
      },
      FeatureCollection: function(object, stream) {
        var features = object.features, i = -1, n = features.length;
        while (++i < n) streamGeometry(features[i].geometry, stream);
      }
    };

    var streamGeometryType = {
      Sphere: function(object, stream) {
        stream.sphere();
      },
      Point: function(object, stream) {
        object = object.coordinates;
        stream.point(object[0], object[1], object[2]);
      },
      MultiPoint: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
      },
      LineString: function(object, stream) {
        streamLine(object.coordinates, stream, 0);
      },
      MultiLineString: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) streamLine(coordinates[i], stream, 0);
      },
      Polygon: function(object, stream) {
        streamPolygon(object.coordinates, stream);
      },
      MultiPolygon: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) streamPolygon(coordinates[i], stream);
      },
      GeometryCollection: function(object, stream) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while (++i < n) streamGeometry(geometries[i], stream);
      }
    };

    function streamLine(coordinates, stream, closed) {
      var i = -1, n = coordinates.length - closed, coordinate;
      stream.lineStart();
      while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
      stream.lineEnd();
    }

    function streamPolygon(coordinates, stream) {
      var i = -1, n = coordinates.length;
      stream.polygonStart();
      while (++i < n) streamLine(coordinates[i], stream, 1);
      stream.polygonEnd();
    }

    function geoStream(object, stream) {
      if (object && streamObjectType.hasOwnProperty(object.type)) {
        streamObjectType[object.type](object, stream);
      } else {
        streamGeometry(object, stream);
      }
    }

    var areaRingSum$1 = new Adder();

    // hello?

    var areaSum$1 = new Adder(),
        lambda00$2,
        phi00$2,
        lambda0$2,
        cosPhi0$1,
        sinPhi0$1;

    var areaStream$1 = {
      point: noop$1,
      lineStart: noop$1,
      lineEnd: noop$1,
      polygonStart: function() {
        areaRingSum$1 = new Adder();
        areaStream$1.lineStart = areaRingStart$1;
        areaStream$1.lineEnd = areaRingEnd$1;
      },
      polygonEnd: function() {
        var areaRing = +areaRingSum$1;
        areaSum$1.add(areaRing < 0 ? tau$1 + areaRing : areaRing);
        this.lineStart = this.lineEnd = this.point = noop$1;
      },
      sphere: function() {
        areaSum$1.add(tau$1);
      }
    };

    function areaRingStart$1() {
      areaStream$1.point = areaPointFirst$1;
    }

    function areaRingEnd$1() {
      areaPoint$1(lambda00$2, phi00$2);
    }

    function areaPointFirst$1(lambda, phi) {
      areaStream$1.point = areaPoint$1;
      lambda00$2 = lambda, phi00$2 = phi;
      lambda *= radians, phi *= radians;
      lambda0$2 = lambda, cosPhi0$1 = cos$4(phi = phi / 2 + quarterPi), sinPhi0$1 = sin$4(phi);
    }

    function areaPoint$1(lambda, phi) {
      lambda *= radians, phi *= radians;
      phi = phi / 2 + quarterPi; // half the angular distance from south pole

      // Spherical excess E for a spherical triangle with vertices: south pole,
      // previous point, current point.  Uses a formula derived from Cagnoli’s
      // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
      var dLambda = lambda - lambda0$2,
          sdLambda = dLambda >= 0 ? 1 : -1,
          adLambda = sdLambda * dLambda,
          cosPhi = cos$4(phi),
          sinPhi = sin$4(phi),
          k = sinPhi0$1 * sinPhi,
          u = cosPhi0$1 * cosPhi + k * cos$4(adLambda),
          v = k * sdLambda * sin$4(adLambda);
      areaRingSum$1.add(atan2$4(v, u));

      // Advance the previous points.
      lambda0$2 = lambda, cosPhi0$1 = cosPhi, sinPhi0$1 = sinPhi;
    }

    function area$2(object) {
      areaSum$1 = new Adder();
      geoStream(object, areaStream$1);
      return areaSum$1 * 2;
    }

    function spherical(cartesian) {
      return [atan2$4(cartesian[1], cartesian[0]), asin$4(cartesian[2])];
    }

    function cartesian(spherical) {
      var lambda = spherical[0], phi = spherical[1], cosPhi = cos$4(phi);
      return [cosPhi * cos$4(lambda), cosPhi * sin$4(lambda), sin$4(phi)];
    }

    function cartesianDot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }

    function cartesianCross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    }

    // TODO return a
    function cartesianAddInPlace(a, b) {
      a[0] += b[0], a[1] += b[1], a[2] += b[2];
    }

    function cartesianScale(vector, k) {
      return [vector[0] * k, vector[1] * k, vector[2] * k];
    }

    // TODO return d
    function cartesianNormalizeInPlace(d) {
      var l = sqrt$5(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
      d[0] /= l, d[1] /= l, d[2] /= l;
    }

    var lambda0$1, phi0, lambda1, phi1, // bounds
        lambda2, // previous lambda-coordinate
        lambda00$1, phi00$1, // first point
        p0, // previous 3D point
        deltaSum,
        ranges,
        range$3;

    var boundsStream$2 = {
      point: boundsPoint$1,
      lineStart: boundsLineStart,
      lineEnd: boundsLineEnd,
      polygonStart: function() {
        boundsStream$2.point = boundsRingPoint;
        boundsStream$2.lineStart = boundsRingStart;
        boundsStream$2.lineEnd = boundsRingEnd;
        deltaSum = new Adder();
        areaStream$1.polygonStart();
      },
      polygonEnd: function() {
        areaStream$1.polygonEnd();
        boundsStream$2.point = boundsPoint$1;
        boundsStream$2.lineStart = boundsLineStart;
        boundsStream$2.lineEnd = boundsLineEnd;
        if (areaRingSum$1 < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
        else if (deltaSum > epsilon$2) phi1 = 90;
        else if (deltaSum < -epsilon$2) phi0 = -90;
        range$3[0] = lambda0$1, range$3[1] = lambda1;
      },
      sphere: function() {
        lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
      }
    };

    function boundsPoint$1(lambda, phi) {
      ranges.push(range$3 = [lambda0$1 = lambda, lambda1 = lambda]);
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    function linePoint(lambda, phi) {
      var p = cartesian([lambda * radians, phi * radians]);
      if (p0) {
        var normal = cartesianCross(p0, p),
            equatorial = [normal[1], -normal[0], 0],
            inflection = cartesianCross(equatorial, normal);
        cartesianNormalizeInPlace(inflection);
        inflection = spherical(inflection);
        var delta = lambda - lambda2,
            sign = delta > 0 ? 1 : -1,
            lambdai = inflection[0] * degrees * sign,
            phii,
            antimeridian = abs$4(delta) > 180;
        if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
          phii = inflection[1] * degrees;
          if (phii > phi1) phi1 = phii;
        } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
          phii = -inflection[1] * degrees;
          if (phii < phi0) phi0 = phii;
        } else {
          if (phi < phi0) phi0 = phi;
          if (phi > phi1) phi1 = phi;
        }
        if (antimeridian) {
          if (lambda < lambda2) {
            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
          } else {
            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
          }
        } else {
          if (lambda1 >= lambda0$1) {
            if (lambda < lambda0$1) lambda0$1 = lambda;
            if (lambda > lambda1) lambda1 = lambda;
          } else {
            if (lambda > lambda2) {
              if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
            } else {
              if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
            }
          }
        }
      } else {
        ranges.push(range$3 = [lambda0$1 = lambda, lambda1 = lambda]);
      }
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
      p0 = p, lambda2 = lambda;
    }

    function boundsLineStart() {
      boundsStream$2.point = linePoint;
    }

    function boundsLineEnd() {
      range$3[0] = lambda0$1, range$3[1] = lambda1;
      boundsStream$2.point = boundsPoint$1;
      p0 = null;
    }

    function boundsRingPoint(lambda, phi) {
      if (p0) {
        var delta = lambda - lambda2;
        deltaSum.add(abs$4(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
      } else {
        lambda00$1 = lambda, phi00$1 = phi;
      }
      areaStream$1.point(lambda, phi);
      linePoint(lambda, phi);
    }

    function boundsRingStart() {
      areaStream$1.lineStart();
    }

    function boundsRingEnd() {
      boundsRingPoint(lambda00$1, phi00$1);
      areaStream$1.lineEnd();
      if (abs$4(deltaSum) > epsilon$2) lambda0$1 = -(lambda1 = 180);
      range$3[0] = lambda0$1, range$3[1] = lambda1;
      p0 = null;
    }

    // Finds the left-right distance between two longitudes.
    // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
    // the distance between ±180° to be 360°.
    function angle(lambda0, lambda1) {
      return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
    }

    function rangeCompare(a, b) {
      return a[0] - b[0];
    }

    function rangeContains(range, x) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }

    function bounds(feature) {
      var i, n, a, b, merged, deltaMax, delta;

      phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
      ranges = [];
      geoStream(feature, boundsStream$2);

      // First, sort ranges by their minimum longitudes.
      if (n = ranges.length) {
        ranges.sort(rangeCompare);

        // Then, merge any ranges that overlap.
        for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
          b = ranges[i];
          if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }

        // Finally, find the largest gap between the merged ranges.
        // The final bounding box will be the inverse of this gap.
        for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
          b = merged[i];
          if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
        }
      }

      ranges = range$3 = null;

      return lambda0$1 === Infinity || phi0 === Infinity
          ? [[NaN, NaN], [NaN, NaN]]
          : [[lambda0$1, phi0], [lambda1, phi1]];
    }

    var W0, W1,
        X0$1, Y0$1, Z0$1,
        X1$1, Y1$1, Z1$1,
        X2$1, Y2$1, Z2$1,
        lambda00, phi00, // first point
        x0$4, y0$4, z0; // previous point

    var centroidStream$1 = {
      sphere: noop$1,
      point: centroidPoint$1,
      lineStart: centroidLineStart$1,
      lineEnd: centroidLineEnd$1,
      polygonStart: function() {
        centroidStream$1.lineStart = centroidRingStart$1;
        centroidStream$1.lineEnd = centroidRingEnd$1;
      },
      polygonEnd: function() {
        centroidStream$1.lineStart = centroidLineStart$1;
        centroidStream$1.lineEnd = centroidLineEnd$1;
      }
    };

    // Arithmetic mean of Cartesian vectors.
    function centroidPoint$1(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$4(phi);
      centroidPointCartesian(cosPhi * cos$4(lambda), cosPhi * sin$4(lambda), sin$4(phi));
    }

    function centroidPointCartesian(x, y, z) {
      ++W0;
      X0$1 += (x - X0$1) / W0;
      Y0$1 += (y - Y0$1) / W0;
      Z0$1 += (z - Z0$1) / W0;
    }

    function centroidLineStart$1() {
      centroidStream$1.point = centroidLinePointFirst;
    }

    function centroidLinePointFirst(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$4(phi);
      x0$4 = cosPhi * cos$4(lambda);
      y0$4 = cosPhi * sin$4(lambda);
      z0 = sin$4(phi);
      centroidStream$1.point = centroidLinePoint;
      centroidPointCartesian(x0$4, y0$4, z0);
    }

    function centroidLinePoint(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$4(phi),
          x = cosPhi * cos$4(lambda),
          y = cosPhi * sin$4(lambda),
          z = sin$4(phi),
          w = atan2$4(sqrt$5((w = y0$4 * z - z0 * y) * w + (w = z0 * x - x0$4 * z) * w + (w = x0$4 * y - y0$4 * x) * w), x0$4 * x + y0$4 * y + z0 * z);
      W1 += w;
      X1$1 += w * (x0$4 + (x0$4 = x));
      Y1$1 += w * (y0$4 + (y0$4 = y));
      Z1$1 += w * (z0 + (z0 = z));
      centroidPointCartesian(x0$4, y0$4, z0);
    }

    function centroidLineEnd$1() {
      centroidStream$1.point = centroidPoint$1;
    }

    // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
    // J. Applied Mechanics 42, 239 (1975).
    function centroidRingStart$1() {
      centroidStream$1.point = centroidRingPointFirst;
    }

    function centroidRingEnd$1() {
      centroidRingPoint(lambda00, phi00);
      centroidStream$1.point = centroidPoint$1;
    }

    function centroidRingPointFirst(lambda, phi) {
      lambda00 = lambda, phi00 = phi;
      lambda *= radians, phi *= radians;
      centroidStream$1.point = centroidRingPoint;
      var cosPhi = cos$4(phi);
      x0$4 = cosPhi * cos$4(lambda);
      y0$4 = cosPhi * sin$4(lambda);
      z0 = sin$4(phi);
      centroidPointCartesian(x0$4, y0$4, z0);
    }

    function centroidRingPoint(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$4(phi),
          x = cosPhi * cos$4(lambda),
          y = cosPhi * sin$4(lambda),
          z = sin$4(phi),
          cx = y0$4 * z - z0 * y,
          cy = z0 * x - x0$4 * z,
          cz = x0$4 * y - y0$4 * x,
          m = hypot(cx, cy, cz),
          w = asin$4(m), // line weight = angle
          v = m && -w / m; // area weight multiplier
      X2$1.add(v * cx);
      Y2$1.add(v * cy);
      Z2$1.add(v * cz);
      W1 += w;
      X1$1 += w * (x0$4 + (x0$4 = x));
      Y1$1 += w * (y0$4 + (y0$4 = y));
      Z1$1 += w * (z0 + (z0 = z));
      centroidPointCartesian(x0$4, y0$4, z0);
    }

    function centroid$1(object) {
      W0 = W1 =
      X0$1 = Y0$1 = Z0$1 =
      X1$1 = Y1$1 = Z1$1 = 0;
      X2$1 = new Adder();
      Y2$1 = new Adder();
      Z2$1 = new Adder();
      geoStream(object, centroidStream$1);

      var x = +X2$1,
          y = +Y2$1,
          z = +Z2$1,
          m = hypot(x, y, z);

      // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
      if (m < epsilon2) {
        x = X1$1, y = Y1$1, z = Z1$1;
        // If the feature has zero length, fall back to arithmetic mean of point vectors.
        if (W1 < epsilon$2) x = X0$1, y = Y0$1, z = Z0$1;
        m = hypot(x, y, z);
        // If the feature still has an undefined ccentroid, then return.
        if (m < epsilon2) return [NaN, NaN];
      }

      return [atan2$4(y, x) * degrees, asin$4(z / m) * degrees];
    }

    function constant$3(x) {
      return function() {
        return x;
      };
    }

    function compose(a, b) {

      function compose(x, y) {
        return x = a(x, y), b(x[0], x[1]);
      }

      if (a.invert && b.invert) compose.invert = function(x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
      };

      return compose;
    }

    function rotationIdentity(lambda, phi) {
      return [abs$4(lambda) > pi$1 ? lambda + Math.round(-lambda / tau$1) * tau$1 : lambda, phi];
    }

    rotationIdentity.invert = rotationIdentity;

    function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
      return (deltaLambda %= tau$1) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
        : rotationLambda(deltaLambda))
        : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
        : rotationIdentity);
    }

    function forwardRotationLambda(deltaLambda) {
      return function(lambda, phi) {
        return lambda += deltaLambda, [lambda > pi$1 ? lambda - tau$1 : lambda < -pi$1 ? lambda + tau$1 : lambda, phi];
      };
    }

    function rotationLambda(deltaLambda) {
      var rotation = forwardRotationLambda(deltaLambda);
      rotation.invert = forwardRotationLambda(-deltaLambda);
      return rotation;
    }

    function rotationPhiGamma(deltaPhi, deltaGamma) {
      var cosDeltaPhi = cos$4(deltaPhi),
          sinDeltaPhi = sin$4(deltaPhi),
          cosDeltaGamma = cos$4(deltaGamma),
          sinDeltaGamma = sin$4(deltaGamma);

      function rotation(lambda, phi) {
        var cosPhi = cos$4(phi),
            x = cos$4(lambda) * cosPhi,
            y = sin$4(lambda) * cosPhi,
            z = sin$4(phi),
            k = z * cosDeltaPhi + x * sinDeltaPhi;
        return [
          atan2$4(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
          asin$4(k * cosDeltaGamma + y * sinDeltaGamma)
        ];
      }

      rotation.invert = function(lambda, phi) {
        var cosPhi = cos$4(phi),
            x = cos$4(lambda) * cosPhi,
            y = sin$4(lambda) * cosPhi,
            z = sin$4(phi),
            k = z * cosDeltaGamma - y * sinDeltaGamma;
        return [
          atan2$4(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
          asin$4(k * cosDeltaPhi - x * sinDeltaPhi)
        ];
      };

      return rotation;
    }

    function rotation(rotate) {
      rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

      function forward(coordinates) {
        coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
        return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
      }

      forward.invert = function(coordinates) {
        coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
        return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
      };

      return forward;
    }

    // Generates a circle centered at [0°, 0°], with a given radius and precision.
    function circleStream(stream, radius, delta, direction, t0, t1) {
      if (!delta) return;
      var cosRadius = cos$4(radius),
          sinRadius = sin$4(radius),
          step = direction * delta;
      if (t0 == null) {
        t0 = radius + direction * tau$1;
        t1 = radius - step / 2;
      } else {
        t0 = circleRadius(cosRadius, t0);
        t1 = circleRadius(cosRadius, t1);
        if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$1;
      }
      for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
        point = spherical([cosRadius, -sinRadius * cos$4(t), -sinRadius * sin$4(t)]);
        stream.point(point[0], point[1]);
      }
    }

    // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
    function circleRadius(cosRadius, point) {
      point = cartesian(point), point[0] -= cosRadius;
      cartesianNormalizeInPlace(point);
      var radius = acos$4(-point[1]);
      return ((-point[2] < 0 ? -radius : radius) + tau$1 - epsilon$2) % tau$1;
    }

    function circle$2() {
      var center = constant$3([0, 0]),
          radius = constant$3(90),
          precision = constant$3(6),
          ring,
          rotate,
          stream = {point: point};

      function point(x, y) {
        ring.push(x = rotate(x, y));
        x[0] *= degrees, x[1] *= degrees;
      }

      function circle() {
        var c = center.apply(this, arguments),
            r = radius.apply(this, arguments) * radians,
            p = precision.apply(this, arguments) * radians;
        ring = [];
        rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
        circleStream(stream, r, p, 1);
        c = {type: "Polygon", coordinates: [ring]};
        ring = rotate = null;
        return c;
      }

      circle.center = function(_) {
        return arguments.length ? (center = typeof _ === "function" ? _ : constant$3([+_[0], +_[1]]), circle) : center;
      };

      circle.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$3(+_), circle) : radius;
      };

      circle.precision = function(_) {
        return arguments.length ? (precision = typeof _ === "function" ? _ : constant$3(+_), circle) : precision;
      };

      return circle;
    }

    function clipBuffer() {
      var lines = [],
          line;
      return {
        point: function(x, y, m) {
          line.push([x, y, m]);
        },
        lineStart: function() {
          lines.push(line = []);
        },
        lineEnd: noop$1,
        rejoin: function() {
          if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
        },
        result: function() {
          var result = lines;
          lines = [];
          line = null;
          return result;
        }
      };
    }

    function pointEqual(a, b) {
      return abs$4(a[0] - b[0]) < epsilon$2 && abs$4(a[1] - b[1]) < epsilon$2;
    }

    function Intersection(point, points, other, entry) {
      this.x = point;
      this.z = points;
      this.o = other; // another intersection
      this.e = entry; // is an entry?
      this.v = false; // visited
      this.n = this.p = null; // next & previous
    }

    // A generalized polygon clipping algorithm: given a polygon that has been cut
    // into its visible line segments, and rejoins the segments by interpolating
    // along the clip edge.
    function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
      var subject = [],
          clip = [],
          i,
          n;

      segments.forEach(function(segment) {
        if ((n = segment.length - 1) <= 0) return;
        var n, p0 = segment[0], p1 = segment[n], x;

        if (pointEqual(p0, p1)) {
          if (!p0[2] && !p1[2]) {
            stream.lineStart();
            for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
            stream.lineEnd();
            return;
          }
          // handle degenerate cases by moving the point
          p1[0] += 2 * epsilon$2;
        }

        subject.push(x = new Intersection(p0, segment, null, true));
        clip.push(x.o = new Intersection(p0, null, x, false));
        subject.push(x = new Intersection(p1, segment, null, false));
        clip.push(x.o = new Intersection(p1, null, x, true));
      });

      if (!subject.length) return;

      clip.sort(compareIntersection);
      link$1(subject);
      link$1(clip);

      for (i = 0, n = clip.length; i < n; ++i) {
        clip[i].e = startInside = !startInside;
      }

      var start = subject[0],
          points,
          point;

      while (1) {
        // Find first unvisited intersection.
        var current = start,
            isSubject = true;
        while (current.v) if ((current = current.n) === start) return;
        points = current.z;
        stream.lineStart();
        do {
          current.v = current.o.v = true;
          if (current.e) {
            if (isSubject) {
              for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
            } else {
              interpolate(current.x, current.n.x, 1, stream);
            }
            current = current.n;
          } else {
            if (isSubject) {
              points = current.p.z;
              for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
            } else {
              interpolate(current.x, current.p.x, -1, stream);
            }
            current = current.p;
          }
          current = current.o;
          points = current.z;
          isSubject = !isSubject;
        } while (!current.v);
        stream.lineEnd();
      }
    }

    function link$1(array) {
      if (!(n = array.length)) return;
      var n,
          i = 0,
          a = array[0],
          b;
      while (++i < n) {
        a.n = b = array[i];
        b.p = a;
        a = b;
      }
      a.n = b = array[0];
      b.p = a;
    }

    function longitude(point) {
      return abs$4(point[0]) <= pi$1 ? point[0] : sign$4(point[0]) * ((abs$4(point[0]) + pi$1) % tau$1 - pi$1);
    }

    function polygonContains(polygon, point) {
      var lambda = longitude(point),
          phi = point[1],
          sinPhi = sin$4(phi),
          normal = [sin$4(lambda), -cos$4(lambda), 0],
          angle = 0,
          winding = 0;

      var sum = new Adder();

      if (sinPhi === 1) phi = halfPi$1 + epsilon$2;
      else if (sinPhi === -1) phi = -halfPi$1 - epsilon$2;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        if (!(m = (ring = polygon[i]).length)) continue;
        var ring,
            m,
            point0 = ring[m - 1],
            lambda0 = longitude(point0),
            phi0 = point0[1] / 2 + quarterPi,
            sinPhi0 = sin$4(phi0),
            cosPhi0 = cos$4(phi0);

        for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
          var point1 = ring[j],
              lambda1 = longitude(point1),
              phi1 = point1[1] / 2 + quarterPi,
              sinPhi1 = sin$4(phi1),
              cosPhi1 = cos$4(phi1),
              delta = lambda1 - lambda0,
              sign = delta >= 0 ? 1 : -1,
              absDelta = sign * delta,
              antimeridian = absDelta > pi$1,
              k = sinPhi0 * sinPhi1;

          sum.add(atan2$4(k * sign * sin$4(absDelta), cosPhi0 * cosPhi1 + k * cos$4(absDelta)));
          angle += antimeridian ? delta + sign * tau$1 : delta;

          // Are the longitudes either side of the point’s meridian (lambda),
          // and are the latitudes smaller than the parallel (phi)?
          if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
            var arc = cartesianCross(cartesian(point0), cartesian(point1));
            cartesianNormalizeInPlace(arc);
            var intersection = cartesianCross(normal, arc);
            cartesianNormalizeInPlace(intersection);
            var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$4(intersection[2]);
            if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
              winding += antimeridian ^ delta >= 0 ? 1 : -1;
            }
          }
        }
      }

      // First, determine whether the South pole is inside or outside:
      //
      // It is inside if:
      // * the polygon winds around it in a clockwise direction.
      // * the polygon does not (cumulatively) wind around it, but has a negative
      //   (counter-clockwise) area.
      //
      // Second, count the (signed) number of times a segment crosses a lambda
      // from the point to the South pole.  If it is zero, then the point is the
      // same side as the South pole.

      return (angle < -epsilon$2 || angle < epsilon$2 && sum < -epsilon2) ^ (winding & 1);
    }

    function clip(pointVisible, clipLine, interpolate, start) {
      return function(sink) {
        var line = clipLine(sink),
            ringBuffer = clipBuffer(),
            ringSink = clipLine(ringBuffer),
            polygonStarted = false,
            polygon,
            segments,
            ring;

        var clip = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function() {
            clip.point = pointRing;
            clip.lineStart = ringStart;
            clip.lineEnd = ringEnd;
            segments = [];
            polygon = [];
          },
          polygonEnd: function() {
            clip.point = point;
            clip.lineStart = lineStart;
            clip.lineEnd = lineEnd;
            segments = merge(segments);
            var startInside = polygonContains(polygon, start);
            if (segments.length) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
            } else if (startInside) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              sink.lineStart();
              interpolate(null, null, 1, sink);
              sink.lineEnd();
            }
            if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
            segments = polygon = null;
          },
          sphere: function() {
            sink.polygonStart();
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
            sink.polygonEnd();
          }
        };

        function point(lambda, phi) {
          if (pointVisible(lambda, phi)) sink.point(lambda, phi);
        }

        function pointLine(lambda, phi) {
          line.point(lambda, phi);
        }

        function lineStart() {
          clip.point = pointLine;
          line.lineStart();
        }

        function lineEnd() {
          clip.point = point;
          line.lineEnd();
        }

        function pointRing(lambda, phi) {
          ring.push([lambda, phi]);
          ringSink.point(lambda, phi);
        }

        function ringStart() {
          ringSink.lineStart();
          ring = [];
        }

        function ringEnd() {
          pointRing(ring[0][0], ring[0][1]);
          ringSink.lineEnd();

          var clean = ringSink.clean(),
              ringSegments = ringBuffer.result(),
              i, n = ringSegments.length, m,
              segment,
              point;

          ring.pop();
          polygon.push(ring);
          ring = null;

          if (!n) return;

          // No intersections.
          if (clean & 1) {
            segment = ringSegments[0];
            if ((m = segment.length - 1) > 0) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              sink.lineStart();
              for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
              sink.lineEnd();
            }
            return;
          }

          // Rejoin connected segments.
          // TODO reuse ringBuffer.rejoin()?
          if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

          segments.push(ringSegments.filter(validSegment));
        }

        return clip;
      };
    }

    function validSegment(segment) {
      return segment.length > 1;
    }

    // Intersections are sorted along the clip edge. For both antimeridian cutting
    // and circle clipping, the same comparison is used.
    function compareIntersection(a, b) {
      return ((a = a.x)[0] < 0 ? a[1] - halfPi$1 - epsilon$2 : halfPi$1 - a[1])
           - ((b = b.x)[0] < 0 ? b[1] - halfPi$1 - epsilon$2 : halfPi$1 - b[1]);
    }

    var clipAntimeridian = clip(
      function() { return true; },
      clipAntimeridianLine,
      clipAntimeridianInterpolate,
      [-pi$1, -halfPi$1]
    );

    // Takes a line and cuts into visible segments. Return values: 0 - there were
    // intersections or the line was empty; 1 - no intersections; 2 - there were
    // intersections, and the first and last segments should be rejoined.
    function clipAntimeridianLine(stream) {
      var lambda0 = NaN,
          phi0 = NaN,
          sign0 = NaN,
          clean; // no intersections

      return {
        lineStart: function() {
          stream.lineStart();
          clean = 1;
        },
        point: function(lambda1, phi1) {
          var sign1 = lambda1 > 0 ? pi$1 : -pi$1,
              delta = abs$4(lambda1 - lambda0);
          if (abs$4(delta - pi$1) < epsilon$2) { // line crosses a pole
            stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$1 : -halfPi$1);
            stream.point(sign0, phi0);
            stream.lineEnd();
            stream.lineStart();
            stream.point(sign1, phi0);
            stream.point(lambda1, phi0);
            clean = 0;
          } else if (sign0 !== sign1 && delta >= pi$1) { // line crosses antimeridian
            if (abs$4(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies
            if (abs$4(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;
            phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
            stream.point(sign0, phi0);
            stream.lineEnd();
            stream.lineStart();
            stream.point(sign1, phi0);
            clean = 0;
          }
          stream.point(lambda0 = lambda1, phi0 = phi1);
          sign0 = sign1;
        },
        lineEnd: function() {
          stream.lineEnd();
          lambda0 = phi0 = NaN;
        },
        clean: function() {
          return 2 - clean; // if intersections, rejoin first and last segments
        }
      };
    }

    function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
      var cosPhi0,
          cosPhi1,
          sinLambda0Lambda1 = sin$4(lambda0 - lambda1);
      return abs$4(sinLambda0Lambda1) > epsilon$2
          ? atan$3((sin$4(phi0) * (cosPhi1 = cos$4(phi1)) * sin$4(lambda1)
              - sin$4(phi1) * (cosPhi0 = cos$4(phi0)) * sin$4(lambda0))
              / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
          : (phi0 + phi1) / 2;
    }

    function clipAntimeridianInterpolate(from, to, direction, stream) {
      var phi;
      if (from == null) {
        phi = direction * halfPi$1;
        stream.point(-pi$1, phi);
        stream.point(0, phi);
        stream.point(pi$1, phi);
        stream.point(pi$1, 0);
        stream.point(pi$1, -phi);
        stream.point(0, -phi);
        stream.point(-pi$1, -phi);
        stream.point(-pi$1, 0);
        stream.point(-pi$1, phi);
      } else if (abs$4(from[0] - to[0]) > epsilon$2) {
        var lambda = from[0] < to[0] ? pi$1 : -pi$1;
        phi = direction * lambda / 2;
        stream.point(-lambda, phi);
        stream.point(0, phi);
        stream.point(lambda, phi);
      } else {
        stream.point(to[0], to[1]);
      }
    }

    function clipCircle(radius) {
      var cr = cos$4(radius),
          delta = 6 * radians,
          smallRadius = cr > 0,
          notHemisphere = abs$4(cr) > epsilon$2; // TODO optimise for this common case

      function interpolate(from, to, direction, stream) {
        circleStream(stream, radius, delta, direction, from, to);
      }

      function visible(lambda, phi) {
        return cos$4(lambda) * cos$4(phi) > cr;
      }

      // Takes a line and cuts into visible segments. Return values used for polygon
      // clipping: 0 - there were intersections or the line was empty; 1 - no
      // intersections 2 - there were intersections, and the first and last segments
      // should be rejoined.
      function clipLine(stream) {
        var point0, // previous point
            c0, // code for previous point
            v0, // visibility of previous point
            v00, // visibility of first point
            clean; // no intersections
        return {
          lineStart: function() {
            v00 = v0 = false;
            clean = 1;
          },
          point: function(lambda, phi) {
            var point1 = [lambda, phi],
                point2,
                v = visible(lambda, phi),
                c = smallRadius
                  ? v ? 0 : code(lambda, phi)
                  : v ? code(lambda + (lambda < 0 ? pi$1 : -pi$1), phi) : 0;
            if (!point0 && (v00 = v0 = v)) stream.lineStart();
            if (v !== v0) {
              point2 = intersect(point0, point1);
              if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))
                point1[2] = 1;
            }
            if (v !== v0) {
              clean = 0;
              if (v) {
                // outside going in
                stream.lineStart();
                point2 = intersect(point1, point0);
                stream.point(point2[0], point2[1]);
              } else {
                // inside going out
                point2 = intersect(point0, point1);
                stream.point(point2[0], point2[1], 2);
                stream.lineEnd();
              }
              point0 = point2;
            } else if (notHemisphere && point0 && smallRadius ^ v) {
              var t;
              // If the codes for two points are different, or are both zero,
              // and there this segment intersects with the small circle.
              if (!(c & c0) && (t = intersect(point1, point0, true))) {
                clean = 0;
                if (smallRadius) {
                  stream.lineStart();
                  stream.point(t[0][0], t[0][1]);
                  stream.point(t[1][0], t[1][1]);
                  stream.lineEnd();
                } else {
                  stream.point(t[1][0], t[1][1]);
                  stream.lineEnd();
                  stream.lineStart();
                  stream.point(t[0][0], t[0][1], 3);
                }
              }
            }
            if (v && (!point0 || !pointEqual(point0, point1))) {
              stream.point(point1[0], point1[1]);
            }
            point0 = point1, v0 = v, c0 = c;
          },
          lineEnd: function() {
            if (v0) stream.lineEnd();
            point0 = null;
          },
          // Rejoin first and last segments if there were intersections and the first
          // and last points were visible.
          clean: function() {
            return clean | ((v00 && v0) << 1);
          }
        };
      }

      // Intersects the great circle between a and b with the clip circle.
      function intersect(a, b, two) {
        var pa = cartesian(a),
            pb = cartesian(b);

        // We have two planes, n1.p = d1 and n2.p = d2.
        // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
        var n1 = [1, 0, 0], // normal
            n2 = cartesianCross(pa, pb),
            n2n2 = cartesianDot(n2, n2),
            n1n2 = n2[0], // cartesianDot(n1, n2),
            determinant = n2n2 - n1n2 * n1n2;

        // Two polar points.
        if (!determinant) return !two && a;

        var c1 =  cr * n2n2 / determinant,
            c2 = -cr * n1n2 / determinant,
            n1xn2 = cartesianCross(n1, n2),
            A = cartesianScale(n1, c1),
            B = cartesianScale(n2, c2);
        cartesianAddInPlace(A, B);

        // Solve |p(t)|^2 = 1.
        var u = n1xn2,
            w = cartesianDot(A, u),
            uu = cartesianDot(u, u),
            t2 = w * w - uu * (cartesianDot(A, A) - 1);

        if (t2 < 0) return;

        var t = sqrt$5(t2),
            q = cartesianScale(u, (-w - t) / uu);
        cartesianAddInPlace(q, A);
        q = spherical(q);

        if (!two) return q;

        // Two intersection points.
        var lambda0 = a[0],
            lambda1 = b[0],
            phi0 = a[1],
            phi1 = b[1],
            z;

        if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

        var delta = lambda1 - lambda0,
            polar = abs$4(delta - pi$1) < epsilon$2,
            meridian = polar || delta < epsilon$2;

        if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

        // Check that the first point is between a and b.
        if (meridian
            ? polar
              ? phi0 + phi1 > 0 ^ q[1] < (abs$4(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)
              : phi0 <= q[1] && q[1] <= phi1
            : delta > pi$1 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
          var q1 = cartesianScale(u, (-w + t) / uu);
          cartesianAddInPlace(q1, A);
          return [q, spherical(q1)];
        }
      }

      // Generates a 4-bit vector representing the location of a point relative to
      // the small circle's bounding box.
      function code(lambda, phi) {
        var r = smallRadius ? radius : pi$1 - radius,
            code = 0;
        if (lambda < -r) code |= 1; // left
        else if (lambda > r) code |= 2; // right
        if (phi < -r) code |= 4; // below
        else if (phi > r) code |= 8; // above
        return code;
      }

      return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$1, radius - pi$1]);
    }

    function clipLine(a, b, x0, y0, x1, y1) {
      var ax = a[0],
          ay = a[1],
          bx = b[0],
          by = b[1],
          t0 = 0,
          t1 = 1,
          dx = bx - ax,
          dy = by - ay,
          r;

      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }

      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }

      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }

      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }

      if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
      if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
      return true;
    }

    var clipMax = 1e9, clipMin = -clipMax;

    // TODO Use d3-polygon’s polygonContains here for the ring check?
    // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

    function clipRectangle(x0, y0, x1, y1) {

      function visible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }

      function interpolate(from, to, direction, stream) {
        var a = 0, a1 = 0;
        if (from == null
            || (a = corner(from, direction)) !== (a1 = corner(to, direction))
            || comparePoint(from, to) < 0 ^ direction > 0) {
          do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          stream.point(to[0], to[1]);
        }
      }

      function corner(p, direction) {
        return abs$4(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3
            : abs$4(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1
            : abs$4(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0
            : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
      }

      function compareIntersection(a, b) {
        return comparePoint(a.x, b.x);
      }

      function comparePoint(a, b) {
        var ca = corner(a, 1),
            cb = corner(b, 1);
        return ca !== cb ? ca - cb
            : ca === 0 ? b[1] - a[1]
            : ca === 1 ? a[0] - b[0]
            : ca === 2 ? a[1] - b[1]
            : b[0] - a[0];
      }

      return function(stream) {
        var activeStream = stream,
            bufferStream = clipBuffer(),
            segments,
            polygon,
            ring,
            x__, y__, v__, // first point
            x_, y_, v_, // previous point
            first,
            clean;

        var clipStream = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: polygonStart,
          polygonEnd: polygonEnd
        };

        function point(x, y) {
          if (visible(x, y)) activeStream.point(x, y);
        }

        function polygonInside() {
          var winding = 0;

          for (var i = 0, n = polygon.length; i < n; ++i) {
            for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
              a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
              if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
              else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
            }
          }

          return winding;
        }

        // Buffer geometry within a polygon and then clip it en masse.
        function polygonStart() {
          activeStream = bufferStream, segments = [], polygon = [], clean = true;
        }

        function polygonEnd() {
          var startInside = polygonInside(),
              cleanInside = clean && startInside,
              visible = (segments = merge(segments)).length;
          if (cleanInside || visible) {
            stream.polygonStart();
            if (cleanInside) {
              stream.lineStart();
              interpolate(null, null, 1, stream);
              stream.lineEnd();
            }
            if (visible) {
              clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
            }
            stream.polygonEnd();
          }
          activeStream = stream, segments = polygon = ring = null;
        }

        function lineStart() {
          clipStream.point = linePoint;
          if (polygon) polygon.push(ring = []);
          first = true;
          v_ = false;
          x_ = y_ = NaN;
        }

        // TODO rather than special-case polygons, simply handle them separately.
        // Ideally, coincident intersection points should be jittered to avoid
        // clipping issues.
        function lineEnd() {
          if (segments) {
            linePoint(x__, y__);
            if (v__ && v_) bufferStream.rejoin();
            segments.push(bufferStream.result());
          }
          clipStream.point = point;
          if (v_) activeStream.lineEnd();
        }

        function linePoint(x, y) {
          var v = visible(x, y);
          if (polygon) ring.push([x, y]);
          if (first) {
            x__ = x, y__ = y, v__ = v;
            first = false;
            if (v) {
              activeStream.lineStart();
              activeStream.point(x, y);
            }
          } else {
            if (v && v_) activeStream.point(x, y);
            else {
              var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                  b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
              if (clipLine(a, b, x0, y0, x1, y1)) {
                if (!v_) {
                  activeStream.lineStart();
                  activeStream.point(a[0], a[1]);
                }
                activeStream.point(b[0], b[1]);
                if (!v) activeStream.lineEnd();
                clean = false;
              } else if (v) {
                activeStream.lineStart();
                activeStream.point(x, y);
                clean = false;
              }
            }
          }
          x_ = x, y_ = y, v_ = v;
        }

        return clipStream;
      };
    }

    function extent() {
      var x0 = 0,
          y0 = 0,
          x1 = 960,
          y1 = 500,
          cache,
          cacheStream,
          clip;

      return clip = {
        stream: function(stream) {
          return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);
        },
        extent: function(_) {
          return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
        }
      };
    }

    var lengthSum$1,
        lambda0,
        sinPhi0,
        cosPhi0;

    var lengthStream$1 = {
      sphere: noop$1,
      point: noop$1,
      lineStart: lengthLineStart,
      lineEnd: noop$1,
      polygonStart: noop$1,
      polygonEnd: noop$1
    };

    function lengthLineStart() {
      lengthStream$1.point = lengthPointFirst$1;
      lengthStream$1.lineEnd = lengthLineEnd;
    }

    function lengthLineEnd() {
      lengthStream$1.point = lengthStream$1.lineEnd = noop$1;
    }

    function lengthPointFirst$1(lambda, phi) {
      lambda *= radians, phi *= radians;
      lambda0 = lambda, sinPhi0 = sin$4(phi), cosPhi0 = cos$4(phi);
      lengthStream$1.point = lengthPoint$1;
    }

    function lengthPoint$1(lambda, phi) {
      lambda *= radians, phi *= radians;
      var sinPhi = sin$4(phi),
          cosPhi = cos$4(phi),
          delta = abs$4(lambda - lambda0),
          cosDelta = cos$4(delta),
          sinDelta = sin$4(delta),
          x = cosPhi * sinDelta,
          y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
          z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
      lengthSum$1.add(atan2$4(sqrt$5(x * x + y * y), z));
      lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
    }

    function length$1(object) {
      lengthSum$1 = new Adder();
      geoStream(object, lengthStream$1);
      return +lengthSum$1;
    }

    var coordinates = [null, null],
        object = {type: "LineString", coordinates: coordinates};

    function distance(a, b) {
      coordinates[0] = a;
      coordinates[1] = b;
      return length$1(object);
    }

    var containsObjectType = {
      Feature: function(object, point) {
        return containsGeometry(object.geometry, point);
      },
      FeatureCollection: function(object, point) {
        var features = object.features, i = -1, n = features.length;
        while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
        return false;
      }
    };

    var containsGeometryType = {
      Sphere: function() {
        return true;
      },
      Point: function(object, point) {
        return containsPoint(object.coordinates, point);
      },
      MultiPoint: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) if (containsPoint(coordinates[i], point)) return true;
        return false;
      },
      LineString: function(object, point) {
        return containsLine(object.coordinates, point);
      },
      MultiLineString: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) if (containsLine(coordinates[i], point)) return true;
        return false;
      },
      Polygon: function(object, point) {
        return containsPolygon(object.coordinates, point);
      },
      MultiPolygon: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
        return false;
      },
      GeometryCollection: function(object, point) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while (++i < n) if (containsGeometry(geometries[i], point)) return true;
        return false;
      }
    };

    function containsGeometry(geometry, point) {
      return geometry && containsGeometryType.hasOwnProperty(geometry.type)
          ? containsGeometryType[geometry.type](geometry, point)
          : false;
    }

    function containsPoint(coordinates, point) {
      return distance(coordinates, point) === 0;
    }

    function containsLine(coordinates, point) {
      var ao, bo, ab;
      for (var i = 0, n = coordinates.length; i < n; i++) {
        bo = distance(coordinates[i], point);
        if (bo === 0) return true;
        if (i > 0) {
          ab = distance(coordinates[i], coordinates[i - 1]);
          if (
            ab > 0 &&
            ao <= ab &&
            bo <= ab &&
            (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab
          )
            return true;
        }
        ao = bo;
      }
      return false;
    }

    function containsPolygon(coordinates, point) {
      return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
    }

    function ringRadians(ring) {
      return ring = ring.map(pointRadians), ring.pop(), ring;
    }

    function pointRadians(point) {
      return [point[0] * radians, point[1] * radians];
    }

    function contains$1(object, point) {
      return (object && containsObjectType.hasOwnProperty(object.type)
          ? containsObjectType[object.type]
          : containsGeometry)(object, point);
    }

    function graticuleX(y0, y1, dy) {
      var y = range$5(y0, y1 - epsilon$2, dy).concat(y1);
      return function(x) { return y.map(function(y) { return [x, y]; }); };
    }

    function graticuleY(x0, x1, dx) {
      var x = range$5(x0, x1 - epsilon$2, dx).concat(x1);
      return function(y) { return x.map(function(x) { return [x, y]; }); };
    }

    function graticule() {
      var x1, x0, X1, X0,
          y1, y0, Y1, Y0,
          dx = 10, dy = dx, DX = 90, DY = 360,
          x, y, X, Y,
          precision = 2.5;

      function graticule() {
        return {type: "MultiLineString", coordinates: lines()};
      }

      function lines() {
        return range$5(ceil$3(X0 / DX) * DX, X1, DX).map(X)
            .concat(range$5(ceil$3(Y0 / DY) * DY, Y1, DY).map(Y))
            .concat(range$5(ceil$3(x0 / dx) * dx, x1, dx).filter(function(x) { return abs$4(x % DX) > epsilon$2; }).map(x))
            .concat(range$5(ceil$3(y0 / dy) * dy, y1, dy).filter(function(y) { return abs$4(y % DY) > epsilon$2; }).map(y));
      }

      graticule.lines = function() {
        return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
      };

      graticule.outline = function() {
        return {
          type: "Polygon",
          coordinates: [
            X(X0).concat(
            Y(Y1).slice(1),
            X(X1).reverse().slice(1),
            Y(Y0).reverse().slice(1))
          ]
        };
      };

      graticule.extent = function(_) {
        if (!arguments.length) return graticule.extentMinor();
        return graticule.extentMajor(_).extentMinor(_);
      };

      graticule.extentMajor = function(_) {
        if (!arguments.length) return [[X0, Y0], [X1, Y1]];
        X0 = +_[0][0], X1 = +_[1][0];
        Y0 = +_[0][1], Y1 = +_[1][1];
        if (X0 > X1) _ = X0, X0 = X1, X1 = _;
        if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
        return graticule.precision(precision);
      };

      graticule.extentMinor = function(_) {
        if (!arguments.length) return [[x0, y0], [x1, y1]];
        x0 = +_[0][0], x1 = +_[1][0];
        y0 = +_[0][1], y1 = +_[1][1];
        if (x0 > x1) _ = x0, x0 = x1, x1 = _;
        if (y0 > y1) _ = y0, y0 = y1, y1 = _;
        return graticule.precision(precision);
      };

      graticule.step = function(_) {
        if (!arguments.length) return graticule.stepMinor();
        return graticule.stepMajor(_).stepMinor(_);
      };

      graticule.stepMajor = function(_) {
        if (!arguments.length) return [DX, DY];
        DX = +_[0], DY = +_[1];
        return graticule;
      };

      graticule.stepMinor = function(_) {
        if (!arguments.length) return [dx, dy];
        dx = +_[0], dy = +_[1];
        return graticule;
      };

      graticule.precision = function(_) {
        if (!arguments.length) return precision;
        precision = +_;
        x = graticuleX(y0, y1, 90);
        y = graticuleY(x0, x1, precision);
        X = graticuleX(Y0, Y1, 90);
        Y = graticuleY(X0, X1, precision);
        return graticule;
      };

      return graticule
          .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])
          .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);
    }

    function graticule10() {
      return graticule()();
    }

    function interpolate(a, b) {
      var x0 = a[0] * radians,
          y0 = a[1] * radians,
          x1 = b[0] * radians,
          y1 = b[1] * radians,
          cy0 = cos$4(y0),
          sy0 = sin$4(y0),
          cy1 = cos$4(y1),
          sy1 = sin$4(y1),
          kx0 = cy0 * cos$4(x0),
          ky0 = cy0 * sin$4(x0),
          kx1 = cy1 * cos$4(x1),
          ky1 = cy1 * sin$4(x1),
          d = 2 * asin$4(sqrt$5(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
          k = sin$4(d);

      var interpolate = d ? function(t) {
        var B = sin$4(t *= d) / k,
            A = sin$4(d - t) / k,
            x = A * kx0 + B * kx1,
            y = A * ky0 + B * ky1,
            z = A * sy0 + B * sy1;
        return [
          atan2$4(y, x) * degrees,
          atan2$4(z, sqrt$5(x * x + y * y)) * degrees
        ];
      } : function() {
        return [x0 * degrees, y0 * degrees];
      };

      interpolate.distance = d;

      return interpolate;
    }

    var identity$7 = x => x;

    var areaSum = new Adder(),
        areaRingSum = new Adder(),
        x00$2,
        y00$2,
        x0$3,
        y0$3;

    var areaStream = {
      point: noop$1,
      lineStart: noop$1,
      lineEnd: noop$1,
      polygonStart: function() {
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
      },
      polygonEnd: function() {
        areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$1;
        areaSum.add(abs$4(areaRingSum));
        areaRingSum = new Adder();
      },
      result: function() {
        var area = areaSum / 2;
        areaSum = new Adder();
        return area;
      }
    };

    function areaRingStart() {
      areaStream.point = areaPointFirst;
    }

    function areaPointFirst(x, y) {
      areaStream.point = areaPoint;
      x00$2 = x0$3 = x, y00$2 = y0$3 = y;
    }

    function areaPoint(x, y) {
      areaRingSum.add(y0$3 * x - x0$3 * y);
      x0$3 = x, y0$3 = y;
    }

    function areaRingEnd() {
      areaPoint(x00$2, y00$2);
    }

    var pathArea = areaStream;

    var x0$2 = Infinity,
        y0$2 = x0$2,
        x1 = -x0$2,
        y1 = x1;

    var boundsStream = {
      point: boundsPoint,
      lineStart: noop$1,
      lineEnd: noop$1,
      polygonStart: noop$1,
      polygonEnd: noop$1,
      result: function() {
        var bounds = [[x0$2, y0$2], [x1, y1]];
        x1 = y1 = -(y0$2 = x0$2 = Infinity);
        return bounds;
      }
    };

    function boundsPoint(x, y) {
      if (x < x0$2) x0$2 = x;
      if (x > x1) x1 = x;
      if (y < y0$2) y0$2 = y;
      if (y > y1) y1 = y;
    }

    var boundsStream$1 = boundsStream;

    // TODO Enforce positive area for exterior, negative area for interior?

    var X0 = 0,
        Y0 = 0,
        Z0 = 0,
        X1 = 0,
        Y1 = 0,
        Z1 = 0,
        X2 = 0,
        Y2 = 0,
        Z2 = 0,
        x00$1,
        y00$1,
        x0$1,
        y0$1;

    var centroidStream = {
      point: centroidPoint,
      lineStart: centroidLineStart,
      lineEnd: centroidLineEnd,
      polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
      },
      polygonEnd: function() {
        centroidStream.point = centroidPoint;
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
      },
      result: function() {
        var centroid = Z2 ? [X2 / Z2, Y2 / Z2]
            : Z1 ? [X1 / Z1, Y1 / Z1]
            : Z0 ? [X0 / Z0, Y0 / Z0]
            : [NaN, NaN];
        X0 = Y0 = Z0 =
        X1 = Y1 = Z1 =
        X2 = Y2 = Z2 = 0;
        return centroid;
      }
    };

    function centroidPoint(x, y) {
      X0 += x;
      Y0 += y;
      ++Z0;
    }

    function centroidLineStart() {
      centroidStream.point = centroidPointFirstLine;
    }

    function centroidPointFirstLine(x, y) {
      centroidStream.point = centroidPointLine;
      centroidPoint(x0$1 = x, y0$1 = y);
    }

    function centroidPointLine(x, y) {
      var dx = x - x0$1, dy = y - y0$1, z = sqrt$5(dx * dx + dy * dy);
      X1 += z * (x0$1 + x) / 2;
      Y1 += z * (y0$1 + y) / 2;
      Z1 += z;
      centroidPoint(x0$1 = x, y0$1 = y);
    }

    function centroidLineEnd() {
      centroidStream.point = centroidPoint;
    }

    function centroidRingStart() {
      centroidStream.point = centroidPointFirstRing;
    }

    function centroidRingEnd() {
      centroidPointRing(x00$1, y00$1);
    }

    function centroidPointFirstRing(x, y) {
      centroidStream.point = centroidPointRing;
      centroidPoint(x00$1 = x0$1 = x, y00$1 = y0$1 = y);
    }

    function centroidPointRing(x, y) {
      var dx = x - x0$1,
          dy = y - y0$1,
          z = sqrt$5(dx * dx + dy * dy);

      X1 += z * (x0$1 + x) / 2;
      Y1 += z * (y0$1 + y) / 2;
      Z1 += z;

      z = y0$1 * x - x0$1 * y;
      X2 += z * (x0$1 + x);
      Y2 += z * (y0$1 + y);
      Z2 += z * 3;
      centroidPoint(x0$1 = x, y0$1 = y);
    }

    var pathCentroid = centroidStream;

    function PathContext(context) {
      this._context = context;
    }

    PathContext.prototype = {
      _radius: 4.5,
      pointRadius: function(_) {
        return this._radius = _, this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._context.closePath();
        this._point = NaN;
      },
      point: function(x, y) {
        switch (this._point) {
          case 0: {
            this._context.moveTo(x, y);
            this._point = 1;
            break;
          }
          case 1: {
            this._context.lineTo(x, y);
            break;
          }
          default: {
            this._context.moveTo(x + this._radius, y);
            this._context.arc(x, y, this._radius, 0, tau$1);
            break;
          }
        }
      },
      result: noop$1
    };

    var lengthSum = new Adder(),
        lengthRing,
        x00,
        y00,
        x0,
        y0;

    var lengthStream = {
      point: noop$1,
      lineStart: function() {
        lengthStream.point = lengthPointFirst;
      },
      lineEnd: function() {
        if (lengthRing) lengthPoint(x00, y00);
        lengthStream.point = noop$1;
      },
      polygonStart: function() {
        lengthRing = true;
      },
      polygonEnd: function() {
        lengthRing = null;
      },
      result: function() {
        var length = +lengthSum;
        lengthSum = new Adder();
        return length;
      }
    };

    function lengthPointFirst(x, y) {
      lengthStream.point = lengthPoint;
      x00 = x0 = x, y00 = y0 = y;
    }

    function lengthPoint(x, y) {
      x0 -= x, y0 -= y;
      lengthSum.add(sqrt$5(x0 * x0 + y0 * y0));
      x0 = x, y0 = y;
    }

    var pathMeasure = lengthStream;

    function PathString() {
      this._string = [];
    }

    PathString.prototype = {
      _radius: 4.5,
      _circle: circle$1(4.5),
      pointRadius: function(_) {
        if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
        return this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._string.push("Z");
        this._point = NaN;
      },
      point: function(x, y) {
        switch (this._point) {
          case 0: {
            this._string.push("M", x, ",", y);
            this._point = 1;
            break;
          }
          case 1: {
            this._string.push("L", x, ",", y);
            break;
          }
          default: {
            if (this._circle == null) this._circle = circle$1(this._radius);
            this._string.push("M", x, ",", y, this._circle);
            break;
          }
        }
      },
      result: function() {
        if (this._string.length) {
          var result = this._string.join("");
          this._string = [];
          return result;
        } else {
          return null;
        }
      }
    };

    function circle$1(radius) {
      return "m0," + radius
          + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
          + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
          + "z";
    }

    function index$2(projection, context) {
      var pointRadius = 4.5,
          projectionStream,
          contextStream;

      function path(object) {
        if (object) {
          if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
          geoStream(object, projectionStream(contextStream));
        }
        return contextStream.result();
      }

      path.area = function(object) {
        geoStream(object, projectionStream(pathArea));
        return pathArea.result();
      };

      path.measure = function(object) {
        geoStream(object, projectionStream(pathMeasure));
        return pathMeasure.result();
      };

      path.bounds = function(object) {
        geoStream(object, projectionStream(boundsStream$1));
        return boundsStream$1.result();
      };

      path.centroid = function(object) {
        geoStream(object, projectionStream(pathCentroid));
        return pathCentroid.result();
      };

      path.projection = function(_) {
        return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$7) : (projection = _).stream, path) : projection;
      };

      path.context = function(_) {
        if (!arguments.length) return context;
        contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
        if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
        return path;
      };

      path.pointRadius = function(_) {
        if (!arguments.length) return pointRadius;
        pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
        return path;
      };

      return path.projection(projection).context(context);
    }

    function transform$4(methods) {
      return {
        stream: transformer$3(methods)
      };
    }

    function transformer$3(methods) {
      return function(stream) {
        var s = new TransformStream;
        for (var key in methods) s[key] = methods[key];
        s.stream = stream;
        return s;
      };
    }

    function TransformStream() {}

    TransformStream.prototype = {
      constructor: TransformStream,
      point: function(x, y) { this.stream.point(x, y); },
      sphere: function() { this.stream.sphere(); },
      lineStart: function() { this.stream.lineStart(); },
      lineEnd: function() { this.stream.lineEnd(); },
      polygonStart: function() { this.stream.polygonStart(); },
      polygonEnd: function() { this.stream.polygonEnd(); }
    };

    function fit(projection, fitBounds, object) {
      var clip = projection.clipExtent && projection.clipExtent();
      projection.scale(150).translate([0, 0]);
      if (clip != null) projection.clipExtent(null);
      geoStream(object, projection.stream(boundsStream$1));
      fitBounds(boundsStream$1.result());
      if (clip != null) projection.clipExtent(clip);
      return projection;
    }

    function fitExtent(projection, extent, object) {
      return fit(projection, function(b) {
        var w = extent[1][0] - extent[0][0],
            h = extent[1][1] - extent[0][1],
            k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
            x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
            y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    function fitSize(projection, size, object) {
      return fitExtent(projection, [[0, 0], size], object);
    }

    function fitWidth(projection, width, object) {
      return fit(projection, function(b) {
        var w = +width,
            k = w / (b[1][0] - b[0][0]),
            x = (w - k * (b[1][0] + b[0][0])) / 2,
            y = -k * b[0][1];
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    function fitHeight(projection, height, object) {
      return fit(projection, function(b) {
        var h = +height,
            k = h / (b[1][1] - b[0][1]),
            x = -k * b[0][0],
            y = (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    var maxDepth = 16, // maximum depth of subdivision
        cosMinDistance = cos$4(30 * radians); // cos(minimum angular distance)

    function resample(project, delta2) {
      return +delta2 ? resample$1(project, delta2) : resampleNone(project);
    }

    function resampleNone(project) {
      return transformer$3({
        point: function(x, y) {
          x = project(x, y);
          this.stream.point(x[0], x[1]);
        }
      });
    }

    function resample$1(project, delta2) {

      function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
        var dx = x1 - x0,
            dy = y1 - y0,
            d2 = dx * dx + dy * dy;
        if (d2 > 4 * delta2 && depth--) {
          var a = a0 + a1,
              b = b0 + b1,
              c = c0 + c1,
              m = sqrt$5(a * a + b * b + c * c),
              phi2 = asin$4(c /= m),
              lambda2 = abs$4(abs$4(c) - 1) < epsilon$2 || abs$4(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2$4(b, a),
              p = project(lambda2, phi2),
              x2 = p[0],
              y2 = p[1],
              dx2 = x2 - x0,
              dy2 = y2 - y0,
              dz = dy * dx2 - dx * dy2;
          if (dz * dz / d2 > delta2 // perpendicular projected distance
              || abs$4((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
              || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
            stream.point(x2, y2);
            resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
          }
        }
      }
      return function(stream) {
        var lambda00, x00, y00, a00, b00, c00, // first point
            lambda0, x0, y0, a0, b0, c0; // previous point

        var resampleStream = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
          polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
        };

        function point(x, y) {
          x = project(x, y);
          stream.point(x[0], x[1]);
        }

        function lineStart() {
          x0 = NaN;
          resampleStream.point = linePoint;
          stream.lineStart();
        }

        function linePoint(lambda, phi) {
          var c = cartesian([lambda, phi]), p = project(lambda, phi);
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
          stream.point(x0, y0);
        }

        function lineEnd() {
          resampleStream.point = point;
          stream.lineEnd();
        }

        function ringStart() {
          lineStart();
          resampleStream.point = ringPoint;
          resampleStream.lineEnd = ringEnd;
        }

        function ringPoint(lambda, phi) {
          linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
          resampleStream.point = linePoint;
        }

        function ringEnd() {
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
          resampleStream.lineEnd = lineEnd;
          lineEnd();
        }

        return resampleStream;
      };
    }

    var transformRadians = transformer$3({
      point: function(x, y) {
        this.stream.point(x * radians, y * radians);
      }
    });

    function transformRotate(rotate) {
      return transformer$3({
        point: function(x, y) {
          var r = rotate(x, y);
          return this.stream.point(r[0], r[1]);
        }
      });
    }

    function scaleTranslate(k, dx, dy, sx, sy) {
      function transform(x, y) {
        x *= sx; y *= sy;
        return [dx + k * x, dy - k * y];
      }
      transform.invert = function(x, y) {
        return [(x - dx) / k * sx, (dy - y) / k * sy];
      };
      return transform;
    }

    function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
      if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
      var cosAlpha = cos$4(alpha),
          sinAlpha = sin$4(alpha),
          a = cosAlpha * k,
          b = sinAlpha * k,
          ai = cosAlpha / k,
          bi = sinAlpha / k,
          ci = (sinAlpha * dy - cosAlpha * dx) / k,
          fi = (sinAlpha * dx + cosAlpha * dy) / k;
      function transform(x, y) {
        x *= sx; y *= sy;
        return [a * x - b * y + dx, dy - b * x - a * y];
      }
      transform.invert = function(x, y) {
        return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
      };
      return transform;
    }

    function projection(project) {
      return projectionMutator(function() { return project; })();
    }

    function projectionMutator(projectAt) {
      var project,
          k = 150, // scale
          x = 480, y = 250, // translate
          lambda = 0, phi = 0, // center
          deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate
          alpha = 0, // post-rotate angle
          sx = 1, // reflectX
          sy = 1, // reflectX
          theta = null, preclip = clipAntimeridian, // pre-clip angle
          x0 = null, y0, x1, y1, postclip = identity$7, // post-clip extent
          delta2 = 0.5, // precision
          projectResample,
          projectTransform,
          projectRotateTransform,
          cache,
          cacheStream;

      function projection(point) {
        return projectRotateTransform(point[0] * radians, point[1] * radians);
      }

      function invert(point) {
        point = projectRotateTransform.invert(point[0], point[1]);
        return point && [point[0] * degrees, point[1] * degrees];
      }

      projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
      };

      projection.preclip = function(_) {
        return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
      };

      projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
      };

      projection.clipAngle = function(_) {
        return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
      };

      projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };

      projection.scale = function(_) {
        return arguments.length ? (k = +_, recenter()) : k;
      };

      projection.translate = function(_) {
        return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
      };

      projection.center = function(_) {
        return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
      };

      projection.rotate = function(_) {
        return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
      };

      projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
      };

      projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
      };

      projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
      };

      projection.precision = function(_) {
        return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$5(delta2);
      };

      projection.fitExtent = function(extent, object) {
        return fitExtent(projection, extent, object);
      };

      projection.fitSize = function(size, object) {
        return fitSize(projection, size, object);
      };

      projection.fitWidth = function(width, object) {
        return fitWidth(projection, width, object);
      };

      projection.fitHeight = function(height, object) {
        return fitHeight(projection, height, object);
      };

      function recenter() {
        var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
            transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
        rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
        projectTransform = compose(project, transform);
        projectRotateTransform = compose(rotate, projectTransform);
        projectResample = resample(projectTransform, delta2);
        return reset();
      }

      function reset() {
        cache = cacheStream = null;
        return projection;
      }

      return function() {
        project = projectAt.apply(this, arguments);
        projection.invert = project.invert && invert;
        return recenter();
      };
    }

    function conicProjection(projectAt) {
      var phi0 = 0,
          phi1 = pi$1 / 3,
          m = projectionMutator(projectAt),
          p = m(phi0, phi1);

      p.parallels = function(_) {
        return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
      };

      return p;
    }

    function cylindricalEqualAreaRaw(phi0) {
      var cosPhi0 = cos$4(phi0);

      function forward(lambda, phi) {
        return [lambda * cosPhi0, sin$4(phi) / cosPhi0];
      }

      forward.invert = function(x, y) {
        return [x / cosPhi0, asin$4(y * cosPhi0)];
      };

      return forward;
    }

    function conicEqualAreaRaw(y0, y1) {
      var sy0 = sin$4(y0), n = (sy0 + sin$4(y1)) / 2;

      // Are the parallels symmetrical around the Equator?
      if (abs$4(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);

      var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt$5(c) / n;

      function project(x, y) {
        var r = sqrt$5(c - 2 * n * sin$4(y)) / n;
        return [r * sin$4(x *= n), r0 - r * cos$4(x)];
      }

      project.invert = function(x, y) {
        var r0y = r0 - y,
            l = atan2$4(x, abs$4(r0y)) * sign$4(r0y);
        if (r0y * n < 0)
          l -= pi$1 * sign$4(x) * sign$4(r0y);
        return [l / n, asin$4((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
      };

      return project;
    }

    function conicEqualArea() {
      return conicProjection(conicEqualAreaRaw)
          .scale(155.424)
          .center([0, 33.6442]);
    }

    function albers() {
      return conicEqualArea()
          .parallels([29.5, 45.5])
          .scale(1070)
          .translate([480, 250])
          .rotate([96, 0])
          .center([-0.6, 38.7]);
    }

    // The projections must have mutually exclusive clip regions on the sphere,
    // as this will avoid emitting interleaving lines and polygons.
    function multiplex(streams) {
      var n = streams.length;
      return {
        point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
        sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
        lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
        lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
        polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
        polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
      };
    }

    // A composite projection for the United States, configured by default for
    // 960×500. The projection also works quite well at 960×600 if you change the
    // scale to 1285 and adjust the translate accordingly. The set of standard
    // parallels for each region comes from USGS, which is published here:
    // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
    function albersUsa() {
      var cache,
          cacheStream,
          lower48 = albers(), lower48Point,
          alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
          hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
          point, pointStream = {point: function(x, y) { point = [x, y]; }};

      function albersUsa(coordinates) {
        var x = coordinates[0], y = coordinates[1];
        return point = null,
            (lower48Point.point(x, y), point)
            || (alaskaPoint.point(x, y), point)
            || (hawaiiPoint.point(x, y), point);
      }

      albersUsa.invert = function(coordinates) {
        var k = lower48.scale(),
            t = lower48.translate(),
            x = (coordinates[0] - t[0]) / k,
            y = (coordinates[1] - t[1]) / k;
        return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
            : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
            : lower48).invert(coordinates);
      };

      albersUsa.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
      };

      albersUsa.precision = function(_) {
        if (!arguments.length) return lower48.precision();
        lower48.precision(_), alaska.precision(_), hawaii.precision(_);
        return reset();
      };

      albersUsa.scale = function(_) {
        if (!arguments.length) return lower48.scale();
        lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
        return albersUsa.translate(lower48.translate());
      };

      albersUsa.translate = function(_) {
        if (!arguments.length) return lower48.translate();
        var k = lower48.scale(), x = +_[0], y = +_[1];

        lower48Point = lower48
            .translate(_)
            .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
            .stream(pointStream);

        alaskaPoint = alaska
            .translate([x - 0.307 * k, y + 0.201 * k])
            .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
            .stream(pointStream);

        hawaiiPoint = hawaii
            .translate([x - 0.205 * k, y + 0.212 * k])
            .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
            .stream(pointStream);

        return reset();
      };

      albersUsa.fitExtent = function(extent, object) {
        return fitExtent(albersUsa, extent, object);
      };

      albersUsa.fitSize = function(size, object) {
        return fitSize(albersUsa, size, object);
      };

      albersUsa.fitWidth = function(width, object) {
        return fitWidth(albersUsa, width, object);
      };

      albersUsa.fitHeight = function(height, object) {
        return fitHeight(albersUsa, height, object);
      };

      function reset() {
        cache = cacheStream = null;
        return albersUsa;
      }

      return albersUsa.scale(1070);
    }

    function azimuthalRaw(scale) {
      return function(x, y) {
        var cx = cos$4(x),
            cy = cos$4(y),
            k = scale(cx * cy);
            if (k === Infinity) return [2, 0];
        return [
          k * cy * sin$4(x),
          k * sin$4(y)
        ];
      }
    }

    function azimuthalInvert(angle) {
      return function(x, y) {
        var z = sqrt$5(x * x + y * y),
            c = angle(z),
            sc = sin$4(c),
            cc = cos$4(c);
        return [
          atan2$4(x * sc, z * cc),
          asin$4(z && y * sc / z)
        ];
      }
    }

    var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
      return sqrt$5(2 / (1 + cxcy));
    });

    azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
      return 2 * asin$4(z / 2);
    });

    function azimuthalEqualArea() {
      return projection(azimuthalEqualAreaRaw)
          .scale(124.75)
          .clipAngle(180 - 1e-3);
    }

    var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
      return (c = acos$4(c)) && c / sin$4(c);
    });

    azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
      return z;
    });

    function azimuthalEquidistant() {
      return projection(azimuthalEquidistantRaw)
          .scale(79.4188)
          .clipAngle(180 - 1e-3);
    }

    function mercatorRaw(lambda, phi) {
      return [lambda, log$5(tan$3((halfPi$1 + phi) / 2))];
    }

    mercatorRaw.invert = function(x, y) {
      return [x, 2 * atan$3(exp$3(y)) - halfPi$1];
    };

    function mercator() {
      return mercatorProjection(mercatorRaw)
          .scale(961 / tau$1);
    }

    function mercatorProjection(project) {
      var m = projection(project),
          center = m.center,
          scale = m.scale,
          translate = m.translate,
          clipExtent = m.clipExtent,
          x0 = null, y0, x1, y1; // clip extent

      m.scale = function(_) {
        return arguments.length ? (scale(_), reclip()) : scale();
      };

      m.translate = function(_) {
        return arguments.length ? (translate(_), reclip()) : translate();
      };

      m.center = function(_) {
        return arguments.length ? (center(_), reclip()) : center();
      };

      m.clipExtent = function(_) {
        return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };

      function reclip() {
        var k = pi$1 * scale(),
            t = m(rotation(m.rotate()).invert([0, 0]));
        return clipExtent(x0 == null
            ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
            ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
            : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
      }

      return reclip();
    }

    function tany(y) {
      return tan$3((halfPi$1 + y) / 2);
    }

    function conicConformalRaw(y0, y1) {
      var cy0 = cos$4(y0),
          n = y0 === y1 ? sin$4(y0) : log$5(cy0 / cos$4(y1)) / log$5(tany(y1) / tany(y0)),
          f = cy0 * pow$4(tany(y0), n) / n;

      if (!n) return mercatorRaw;

      function project(x, y) {
        if (f > 0) { if (y < -halfPi$1 + epsilon$2) y = -halfPi$1 + epsilon$2; }
        else { if (y > halfPi$1 - epsilon$2) y = halfPi$1 - epsilon$2; }
        var r = f / pow$4(tany(y), n);
        return [r * sin$4(n * x), f - r * cos$4(n * x)];
      }

      project.invert = function(x, y) {
        var fy = f - y, r = sign$4(n) * sqrt$5(x * x + fy * fy),
          l = atan2$4(x, abs$4(fy)) * sign$4(fy);
        if (fy * n < 0)
          l -= pi$1 * sign$4(x) * sign$4(fy);
        return [l / n, 2 * atan$3(pow$4(f / r, 1 / n)) - halfPi$1];
      };

      return project;
    }

    function conicConformal() {
      return conicProjection(conicConformalRaw)
          .scale(109.5)
          .parallels([30, 30]);
    }

    function equirectangularRaw(lambda, phi) {
      return [lambda, phi];
    }

    equirectangularRaw.invert = equirectangularRaw;

    function equirectangular() {
      return projection(equirectangularRaw)
          .scale(152.63);
    }

    function conicEquidistantRaw(y0, y1) {
      var cy0 = cos$4(y0),
          n = y0 === y1 ? sin$4(y0) : (cy0 - cos$4(y1)) / (y1 - y0),
          g = cy0 / n + y0;

      if (abs$4(n) < epsilon$2) return equirectangularRaw;

      function project(x, y) {
        var gy = g - y, nx = n * x;
        return [gy * sin$4(nx), g - gy * cos$4(nx)];
      }

      project.invert = function(x, y) {
        var gy = g - y,
            l = atan2$4(x, abs$4(gy)) * sign$4(gy);
        if (gy * n < 0)
          l -= pi$1 * sign$4(x) * sign$4(gy);
        return [l / n, g - sign$4(n) * sqrt$5(x * x + gy * gy)];
      };

      return project;
    }

    function conicEquidistant() {
      return conicProjection(conicEquidistantRaw)
          .scale(131.154)
          .center([0, 13.9389]);
    }

    var A1 = 1.340264,
        A2 = -0.081106,
        A3 = 0.000893,
        A4 = 0.003796,
        M = sqrt$5(3) / 2,
        iterations = 12;

    function equalEarthRaw(lambda, phi) {
      var l = asin$4(M * sin$4(phi)), l2 = l * l, l6 = l2 * l2 * l2;
      return [
        lambda * cos$4(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
        l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
      ];
    }

    equalEarthRaw.invert = function(x, y) {
      var l = y, l2 = l * l, l6 = l2 * l2 * l2;
      for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
        fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
        fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
        l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
        if (abs$4(delta) < epsilon2) break;
      }
      return [
        M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos$4(l),
        asin$4(sin$4(l) / M)
      ];
    };

    function equalEarth() {
      return projection(equalEarthRaw)
          .scale(177.158);
    }

    function gnomonicRaw(x, y) {
      var cy = cos$4(y), k = cos$4(x) * cy;
      return [cy * sin$4(x) / k, sin$4(y) / k];
    }

    gnomonicRaw.invert = azimuthalInvert(atan$3);

    function gnomonic() {
      return projection(gnomonicRaw)
          .scale(144.049)
          .clipAngle(60);
    }

    function identity$6() {
      var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, // scale, translate and reflect
          alpha = 0, ca, sa, // angle
          x0 = null, y0, x1, y1, // clip extent
          kx = 1, ky = 1,
          transform = transformer$3({
            point: function(x, y) {
              var p = projection([x, y]);
              this.stream.point(p[0], p[1]);
            }
          }),
          postclip = identity$7,
          cache,
          cacheStream;

      function reset() {
        kx = k * sx;
        ky = k * sy;
        cache = cacheStream = null;
        return projection;
      }

      function projection (p) {
        var x = p[0] * kx, y = p[1] * ky;
        if (alpha) {
          var t = y * ca - x * sa;
          x = x * ca + y * sa;
          y = t;
        }    
        return [x + tx, y + ty];
      }
      projection.invert = function(p) {
        var x = p[0] - tx, y = p[1] - ty;
        if (alpha) {
          var t = y * ca + x * sa;
          x = x * ca - y * sa;
          y = t;
        }
        return [x / kx, y / ky];
      };
      projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
      };
      projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
      };
      projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };
      projection.scale = function(_) {
        return arguments.length ? (k = +_, reset()) : k;
      };
      projection.translate = function(_) {
        return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
      };
      projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * radians, sa = sin$4(alpha), ca = cos$4(alpha), reset()) : alpha * degrees;
      };
      projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
      };
      projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
      };
      projection.fitExtent = function(extent, object) {
        return fitExtent(projection, extent, object);
      };
      projection.fitSize = function(size, object) {
        return fitSize(projection, size, object);
      };
      projection.fitWidth = function(width, object) {
        return fitWidth(projection, width, object);
      };
      projection.fitHeight = function(height, object) {
        return fitHeight(projection, height, object);
      };

      return projection;
    }

    function naturalEarth1Raw(lambda, phi) {
      var phi2 = phi * phi, phi4 = phi2 * phi2;
      return [
        lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
        phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
      ];
    }

    naturalEarth1Raw.invert = function(x, y) {
      var phi = y, i = 25, delta;
      do {
        var phi2 = phi * phi, phi4 = phi2 * phi2;
        phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
            (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
      } while (abs$4(delta) > epsilon$2 && --i > 0);
      return [
        x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
        phi
      ];
    };

    function naturalEarth1() {
      return projection(naturalEarth1Raw)
          .scale(175.295);
    }

    function orthographicRaw(x, y) {
      return [cos$4(y) * sin$4(x), sin$4(y)];
    }

    orthographicRaw.invert = azimuthalInvert(asin$4);

    function orthographic() {
      return projection(orthographicRaw)
          .scale(249.5)
          .clipAngle(90 + epsilon$2);
    }

    function stereographicRaw(x, y) {
      var cy = cos$4(y), k = 1 + cos$4(x) * cy;
      return [cy * sin$4(x) / k, sin$4(y) / k];
    }

    stereographicRaw.invert = azimuthalInvert(function(z) {
      return 2 * atan$3(z);
    });

    function stereographic() {
      return projection(stereographicRaw)
          .scale(250)
          .clipAngle(142);
    }

    function transverseMercatorRaw(lambda, phi) {
      return [log$5(tan$3((halfPi$1 + phi) / 2)), -lambda];
    }

    transverseMercatorRaw.invert = function(x, y) {
      return [-y, 2 * atan$3(exp$3(x)) - halfPi$1];
    };

    function transverseMercator() {
      var m = mercatorProjection(transverseMercatorRaw),
          center = m.center,
          rotate = m.rotate;

      m.center = function(_) {
        return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
      };

      m.rotate = function(_) {
        return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
      };

      return rotate([0, 0, 90])
          .scale(159.155);
    }

    function defaultSeparation$1(a, b) {
      return a.parent === b.parent ? 1 : 2;
    }

    function meanX(children) {
      return children.reduce(meanXReduce, 0) / children.length;
    }

    function meanXReduce(x, c) {
      return x + c.x;
    }

    function maxY(children) {
      return 1 + children.reduce(maxYReduce, 0);
    }

    function maxYReduce(y, c) {
      return Math.max(y, c.y);
    }

    function leafLeft(node) {
      var children;
      while (children = node.children) node = children[0];
      return node;
    }

    function leafRight(node) {
      var children;
      while (children = node.children) node = children[children.length - 1];
      return node;
    }

    function cluster() {
      var separation = defaultSeparation$1,
          dx = 1,
          dy = 1,
          nodeSize = false;

      function cluster(root) {
        var previousNode,
            x = 0;

        // First walk, computing the initial x & y values.
        root.eachAfter(function(node) {
          var children = node.children;
          if (children) {
            node.x = meanX(children);
            node.y = maxY(children);
          } else {
            node.x = previousNode ? x += separation(node, previousNode) : 0;
            node.y = 0;
            previousNode = node;
          }
        });

        var left = leafLeft(root),
            right = leafRight(root),
            x0 = left.x - separation(left, right) / 2,
            x1 = right.x + separation(right, left) / 2;

        // Second walk, normalizing x & y to the desired size.
        return root.eachAfter(nodeSize ? function(node) {
          node.x = (node.x - root.x) * dx;
          node.y = (root.y - node.y) * dy;
        } : function(node) {
          node.x = (node.x - x0) / (x1 - x0) * dx;
          node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
        });
      }

      cluster.separation = function(x) {
        return arguments.length ? (separation = x, cluster) : separation;
      };

      cluster.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
      };

      cluster.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
      };

      return cluster;
    }

    function count(node) {
      var sum = 0,
          children = node.children,
          i = children && children.length;
      if (!i) sum = 1;
      else while (--i >= 0) sum += children[i].value;
      node.value = sum;
    }

    function node_count() {
      return this.eachAfter(count);
    }

    function node_each(callback, that) {
      let index = -1;
      for (const node of this) {
        callback.call(that, node, ++index, this);
      }
      return this;
    }

    function node_eachBefore(callback, that) {
      var node = this, nodes = [node], children, i, index = -1;
      while (node = nodes.pop()) {
        callback.call(that, node, ++index, this);
        if (children = node.children) {
          for (i = children.length - 1; i >= 0; --i) {
            nodes.push(children[i]);
          }
        }
      }
      return this;
    }

    function node_eachAfter(callback, that) {
      var node = this, nodes = [node], next = [], children, i, n, index = -1;
      while (node = nodes.pop()) {
        next.push(node);
        if (children = node.children) {
          for (i = 0, n = children.length; i < n; ++i) {
            nodes.push(children[i]);
          }
        }
      }
      while (node = next.pop()) {
        callback.call(that, node, ++index, this);
      }
      return this;
    }

    function node_find(callback, that) {
      let index = -1;
      for (const node of this) {
        if (callback.call(that, node, ++index, this)) {
          return node;
        }
      }
    }

    function node_sum(value) {
      return this.eachAfter(function(node) {
        var sum = +value(node.data) || 0,
            children = node.children,
            i = children && children.length;
        while (--i >= 0) sum += children[i].value;
        node.value = sum;
      });
    }

    function node_sort(compare) {
      return this.eachBefore(function(node) {
        if (node.children) {
          node.children.sort(compare);
        }
      });
    }

    function node_path(end) {
      var start = this,
          ancestor = leastCommonAncestor(start, end),
          nodes = [start];
      while (start !== ancestor) {
        start = start.parent;
        nodes.push(start);
      }
      var k = nodes.length;
      while (end !== ancestor) {
        nodes.splice(k, 0, end);
        end = end.parent;
      }
      return nodes;
    }

    function leastCommonAncestor(a, b) {
      if (a === b) return a;
      var aNodes = a.ancestors(),
          bNodes = b.ancestors(),
          c = null;
      a = aNodes.pop();
      b = bNodes.pop();
      while (a === b) {
        c = a;
        a = aNodes.pop();
        b = bNodes.pop();
      }
      return c;
    }

    function node_ancestors() {
      var node = this, nodes = [node];
      while (node = node.parent) {
        nodes.push(node);
      }
      return nodes;
    }

    function node_descendants() {
      return Array.from(this);
    }

    function node_leaves() {
      var leaves = [];
      this.eachBefore(function(node) {
        if (!node.children) {
          leaves.push(node);
        }
      });
      return leaves;
    }

    function node_links() {
      var root = this, links = [];
      root.each(function(node) {
        if (node !== root) { // Don’t include the root’s parent, if any.
          links.push({source: node.parent, target: node});
        }
      });
      return links;
    }

    function* node_iterator() {
      var node = this, current, next = [node], children, i, n;
      do {
        current = next.reverse(), next = [];
        while (node = current.pop()) {
          yield node;
          if (children = node.children) {
            for (i = 0, n = children.length; i < n; ++i) {
              next.push(children[i]);
            }
          }
        }
      } while (next.length);
    }

    function hierarchy(data, children) {
      if (data instanceof Map) {
        data = [undefined, data];
        if (children === undefined) children = mapChildren;
      } else if (children === undefined) {
        children = objectChildren;
      }

      var root = new Node$1(data),
          node,
          nodes = [root],
          child,
          childs,
          i,
          n;

      while (node = nodes.pop()) {
        if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
          node.children = childs;
          for (i = n - 1; i >= 0; --i) {
            nodes.push(child = childs[i] = new Node$1(childs[i]));
            child.parent = node;
            child.depth = node.depth + 1;
          }
        }
      }

      return root.eachBefore(computeHeight);
    }

    function node_copy() {
      return hierarchy(this).eachBefore(copyData);
    }

    function objectChildren(d) {
      return d.children;
    }

    function mapChildren(d) {
      return Array.isArray(d) ? d[1] : null;
    }

    function copyData(node) {
      if (node.data.value !== undefined) node.value = node.data.value;
      node.data = node.data.data;
    }

    function computeHeight(node) {
      var height = 0;
      do node.height = height;
      while ((node = node.parent) && (node.height < ++height));
    }

    function Node$1(data) {
      this.data = data;
      this.depth =
      this.height = 0;
      this.parent = null;
    }

    Node$1.prototype = hierarchy.prototype = {
      constructor: Node$1,
      count: node_count,
      each: node_each,
      eachAfter: node_eachAfter,
      eachBefore: node_eachBefore,
      find: node_find,
      sum: node_sum,
      sort: node_sort,
      path: node_path,
      ancestors: node_ancestors,
      descendants: node_descendants,
      leaves: node_leaves,
      links: node_links,
      copy: node_copy,
      [Symbol.iterator]: node_iterator
    };

    function array$1(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function shuffle$1(array) {
      var m = array.length,
          t,
          i;

      while (m) {
        i = Math.random() * m-- | 0;
        t = array[m];
        array[m] = array[i];
        array[i] = t;
      }

      return array;
    }

    function enclose(circles) {
      var i = 0, n = (circles = shuffle$1(Array.from(circles))).length, B = [], p, e;

      while (i < n) {
        p = circles[i];
        if (e && enclosesWeak(e, p)) ++i;
        else e = encloseBasis(B = extendBasis(B, p)), i = 0;
      }

      return e;
    }

    function extendBasis(B, p) {
      var i, j;

      if (enclosesWeakAll(p, B)) return [p];

      // If we get here then B must have at least one element.
      for (i = 0; i < B.length; ++i) {
        if (enclosesNot(p, B[i])
            && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
          return [B[i], p];
        }
      }

      // If we get here then B must have at least two elements.
      for (i = 0; i < B.length - 1; ++i) {
        for (j = i + 1; j < B.length; ++j) {
          if (enclosesNot(encloseBasis2(B[i], B[j]), p)
              && enclosesNot(encloseBasis2(B[i], p), B[j])
              && enclosesNot(encloseBasis2(B[j], p), B[i])
              && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
            return [B[i], B[j], p];
          }
        }
      }

      // If we get here then something is very wrong.
      throw new Error;
    }

    function enclosesNot(a, b) {
      var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
      return dr < 0 || dr * dr < dx * dx + dy * dy;
    }

    function enclosesWeak(a, b) {
      var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;
      return dr > 0 && dr * dr > dx * dx + dy * dy;
    }

    function enclosesWeakAll(a, B) {
      for (var i = 0; i < B.length; ++i) {
        if (!enclosesWeak(a, B[i])) {
          return false;
        }
      }
      return true;
    }

    function encloseBasis(B) {
      switch (B.length) {
        case 1: return encloseBasis1(B[0]);
        case 2: return encloseBasis2(B[0], B[1]);
        case 3: return encloseBasis3(B[0], B[1], B[2]);
      }
    }

    function encloseBasis1(a) {
      return {
        x: a.x,
        y: a.y,
        r: a.r
      };
    }

    function encloseBasis2(a, b) {
      var x1 = a.x, y1 = a.y, r1 = a.r,
          x2 = b.x, y2 = b.y, r2 = b.r,
          x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
          l = Math.sqrt(x21 * x21 + y21 * y21);
      return {
        x: (x1 + x2 + x21 / l * r21) / 2,
        y: (y1 + y2 + y21 / l * r21) / 2,
        r: (l + r1 + r2) / 2
      };
    }

    function encloseBasis3(a, b, c) {
      var x1 = a.x, y1 = a.y, r1 = a.r,
          x2 = b.x, y2 = b.y, r2 = b.r,
          x3 = c.x, y3 = c.y, r3 = c.r,
          a2 = x1 - x2,
          a3 = x1 - x3,
          b2 = y1 - y2,
          b3 = y1 - y3,
          c2 = r2 - r1,
          c3 = r3 - r1,
          d1 = x1 * x1 + y1 * y1 - r1 * r1,
          d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
          d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
          ab = a3 * b2 - a2 * b3,
          xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
          xb = (b3 * c2 - b2 * c3) / ab,
          ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
          yb = (a2 * c3 - a3 * c2) / ab,
          A = xb * xb + yb * yb - 1,
          B = 2 * (r1 + xa * xb + ya * yb),
          C = xa * xa + ya * ya - r1 * r1,
          r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
      return {
        x: x1 + xa + xb * r,
        y: y1 + ya + yb * r,
        r: r
      };
    }

    function place(b, a, c) {
      var dx = b.x - a.x, x, a2,
          dy = b.y - a.y, y, b2,
          d2 = dx * dx + dy * dy;
      if (d2) {
        a2 = a.r + c.r, a2 *= a2;
        b2 = b.r + c.r, b2 *= b2;
        if (a2 > b2) {
          x = (d2 + b2 - a2) / (2 * d2);
          y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
          c.x = b.x - x * dx - y * dy;
          c.y = b.y - x * dy + y * dx;
        } else {
          x = (d2 + a2 - b2) / (2 * d2);
          y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
          c.x = a.x + x * dx - y * dy;
          c.y = a.y + x * dy + y * dx;
        }
      } else {
        c.x = a.x + c.r;
        c.y = a.y;
      }
    }

    function intersects(a, b) {
      var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
      return dr > 0 && dr * dr > dx * dx + dy * dy;
    }

    function score(node) {
      var a = node._,
          b = node.next._,
          ab = a.r + b.r,
          dx = (a.x * b.r + b.x * a.r) / ab,
          dy = (a.y * b.r + b.y * a.r) / ab;
      return dx * dx + dy * dy;
    }

    function Node(circle) {
      this._ = circle;
      this.next = null;
      this.previous = null;
    }

    function packEnclose(circles) {
      if (!(n = (circles = array$1(circles)).length)) return 0;

      var a, b, c, n, aa, ca, i, j, k, sj, sk;

      // Place the first circle.
      a = circles[0], a.x = 0, a.y = 0;
      if (!(n > 1)) return a.r;

      // Place the second circle.
      b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
      if (!(n > 2)) return a.r + b.r;

      // Place the third circle.
      place(b, a, c = circles[2]);

      // Initialize the front-chain using the first three circles a, b and c.
      a = new Node(a), b = new Node(b), c = new Node(c);
      a.next = c.previous = b;
      b.next = a.previous = c;
      c.next = b.previous = a;

      // Attempt to place each remaining circle…
      pack: for (i = 3; i < n; ++i) {
        place(a._, b._, c = circles[i]), c = new Node(c);

        // Find the closest intersecting circle on the front-chain, if any.
        // “Closeness” is determined by linear distance along the front-chain.
        // “Ahead” or “behind” is likewise determined by linear distance.
        j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
        do {
          if (sj <= sk) {
            if (intersects(j._, c._)) {
              b = j, a.next = b, b.previous = a, --i;
              continue pack;
            }
            sj += j._.r, j = j.next;
          } else {
            if (intersects(k._, c._)) {
              a = k, a.next = b, b.previous = a, --i;
              continue pack;
            }
            sk += k._.r, k = k.previous;
          }
        } while (j !== k.next);

        // Success! Insert the new circle c between a and b.
        c.previous = a, c.next = b, a.next = b.previous = b = c;

        // Compute the new closest circle pair to the centroid.
        aa = score(a);
        while ((c = c.next) !== b) {
          if ((ca = score(c)) < aa) {
            a = c, aa = ca;
          }
        }
        b = a.next;
      }

      // Compute the enclosing circle of the front chain.
      a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

      // Translate the circles to put the enclosing circle around the origin.
      for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

      return c.r;
    }

    function siblings(circles) {
      packEnclose(circles);
      return circles;
    }

    function optional(f) {
      return f == null ? null : required(f);
    }

    function required(f) {
      if (typeof f !== "function") throw new Error;
      return f;
    }

    function constantZero() {
      return 0;
    }

    function constant$2(x) {
      return function() {
        return x;
      };
    }

    function defaultRadius(d) {
      return Math.sqrt(d.value);
    }

    function index$1() {
      var radius = null,
          dx = 1,
          dy = 1,
          padding = constantZero;

      function pack(root) {
        root.x = dx / 2, root.y = dy / 2;
        if (radius) {
          root.eachBefore(radiusLeaf(radius))
              .eachAfter(packChildren(padding, 0.5))
              .eachBefore(translateChild(1));
        } else {
          root.eachBefore(radiusLeaf(defaultRadius))
              .eachAfter(packChildren(constantZero, 1))
              .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
              .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
        }
        return root;
      }

      pack.radius = function(x) {
        return arguments.length ? (radius = optional(x), pack) : radius;
      };

      pack.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
      };

      pack.padding = function(x) {
        return arguments.length ? (padding = typeof x === "function" ? x : constant$2(+x), pack) : padding;
      };

      return pack;
    }

    function radiusLeaf(radius) {
      return function(node) {
        if (!node.children) {
          node.r = Math.max(0, +radius(node) || 0);
        }
      };
    }

    function packChildren(padding, k) {
      return function(node) {
        if (children = node.children) {
          var children,
              i,
              n = children.length,
              r = padding(node) * k || 0,
              e;

          if (r) for (i = 0; i < n; ++i) children[i].r += r;
          e = packEnclose(children);
          if (r) for (i = 0; i < n; ++i) children[i].r -= r;
          node.r = e + r;
        }
      };
    }

    function translateChild(k) {
      return function(node) {
        var parent = node.parent;
        node.r *= k;
        if (parent) {
          node.x = parent.x + k * node.x;
          node.y = parent.y + k * node.y;
        }
      };
    }

    function roundNode(node) {
      node.x0 = Math.round(node.x0);
      node.y0 = Math.round(node.y0);
      node.x1 = Math.round(node.x1);
      node.y1 = Math.round(node.y1);
    }

    function treemapDice(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          node,
          i = -1,
          n = nodes.length,
          k = parent.value && (x1 - x0) / parent.value;

      while (++i < n) {
        node = nodes[i], node.y0 = y0, node.y1 = y1;
        node.x0 = x0, node.x1 = x0 += node.value * k;
      }
    }

    function partition() {
      var dx = 1,
          dy = 1,
          padding = 0,
          round = false;

      function partition(root) {
        var n = root.height + 1;
        root.x0 =
        root.y0 = padding;
        root.x1 = dx;
        root.y1 = dy / n;
        root.eachBefore(positionNode(dy, n));
        if (round) root.eachBefore(roundNode);
        return root;
      }

      function positionNode(dy, n) {
        return function(node) {
          if (node.children) {
            treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
          }
          var x0 = node.x0,
              y0 = node.y0,
              x1 = node.x1 - padding,
              y1 = node.y1 - padding;
          if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
          if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
          node.x0 = x0;
          node.y0 = y0;
          node.x1 = x1;
          node.y1 = y1;
        };
      }

      partition.round = function(x) {
        return arguments.length ? (round = !!x, partition) : round;
      };

      partition.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
      };

      partition.padding = function(x) {
        return arguments.length ? (padding = +x, partition) : padding;
      };

      return partition;
    }

    var preroot = {depth: -1},
        ambiguous = {},
        imputed = {};

    function defaultId(d) {
      return d.id;
    }

    function defaultParentId(d) {
      return d.parentId;
    }

    function stratify() {
      var id = defaultId,
          parentId = defaultParentId,
          path;

      function stratify(data) {
        var nodes = Array.from(data),
            currentId = id,
            currentParentId = parentId,
            n,
            d,
            i,
            root,
            parent,
            node,
            nodeId,
            nodeKey,
            nodeByKey = new Map;

        if (path != null) {
          const I = nodes.map((d, i) => normalize$1(path(d, i, data)));
          const P = I.map(parentof);
          const S = new Set(I).add("");
          for (const i of P) {
            if (!S.has(i)) {
              S.add(i);
              I.push(i);
              P.push(parentof(i));
              nodes.push(imputed);
            }
          }
          currentId = (_, i) => I[i];
          currentParentId = (_, i) => P[i];
        }

        for (i = 0, n = nodes.length; i < n; ++i) {
          d = nodes[i], node = nodes[i] = new Node$1(d);
          if ((nodeId = currentId(d, i, data)) != null && (nodeId += "")) {
            nodeKey = node.id = nodeId;
            nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
          }
          if ((nodeId = currentParentId(d, i, data)) != null && (nodeId += "")) {
            node.parent = nodeId;
          }
        }

        for (i = 0; i < n; ++i) {
          node = nodes[i];
          if (nodeId = node.parent) {
            parent = nodeByKey.get(nodeId);
            if (!parent) throw new Error("missing: " + nodeId);
            if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
            if (parent.children) parent.children.push(node);
            else parent.children = [node];
            node.parent = parent;
          } else {
            if (root) throw new Error("multiple roots");
            root = node;
          }
        }

        if (!root) throw new Error("no root");

        // When imputing internal nodes, only introduce roots if needed.
        // Then replace the imputed marker data with null.
        if (path != null) {
          while (root.data === imputed && root.children.length === 1) {
            root = root.children[0], --n;
          }
          for (let i = nodes.length - 1; i >= 0; --i) {
            node = nodes[i];
            if (node.data !== imputed) break;
            node.data = null;
          }
        }

        root.parent = preroot;
        root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
        root.parent = null;
        if (n > 0) throw new Error("cycle");

        return root;
      }

      stratify.id = function(x) {
        return arguments.length ? (id = optional(x), stratify) : id;
      };

      stratify.parentId = function(x) {
        return arguments.length ? (parentId = optional(x), stratify) : parentId;
      };

      stratify.path = function(x) {
        return arguments.length ? (path = optional(x), stratify) : path;
      };

      return stratify;
    }

    // To normalize a path, we coerce to a string, strip the trailing slash if any
    // (as long as the trailing slash is not immediately preceded by another slash),
    // and add leading slash if missing.
    function normalize$1(path) {
      path = `${path}`;
      let i = path.length;
      if (slash(path, i - 1) && !slash(path, i - 2)) path = path.slice(0, -1);
      return path[0] === "/" ? path : `/${path}`;
    }

    // Walk backwards to find the first slash that is not the leading slash, e.g.:
    // "/foo/bar" ⇥ "/foo", "/foo" ⇥ "/", "/" ↦ "". (The root is special-cased
    // because the id of the root must be a truthy value.)
    function parentof(path) {
      let i = path.length;
      if (i < 2) return "";
      while (--i > 1) if (slash(path, i)) break;
      return path.slice(0, i);
    }

    // Slashes can be escaped; to determine whether a slash is a path delimiter, we
    // count the number of preceding backslashes escaping the forward slash: an odd
    // number indicates an escaped forward slash.
    function slash(path, i) {
      if (path[i] === "/") {
        let k = 0;
        while (i > 0 && path[--i] === "\\") ++k;
        if ((k & 1) === 0) return true;
      }
      return false;
    }

    function defaultSeparation(a, b) {
      return a.parent === b.parent ? 1 : 2;
    }

    // function radialSeparation(a, b) {
    //   return (a.parent === b.parent ? 1 : 2) / a.depth;
    // }

    // This function is used to traverse the left contour of a subtree (or
    // subforest). It returns the successor of v on this contour. This successor is
    // either given by the leftmost child of v or by the thread of v. The function
    // returns null if and only if v is on the highest level of its subtree.
    function nextLeft(v) {
      var children = v.children;
      return children ? children[0] : v.t;
    }

    // This function works analogously to nextLeft.
    function nextRight(v) {
      var children = v.children;
      return children ? children[children.length - 1] : v.t;
    }

    // Shifts the current subtree rooted at w+. This is done by increasing
    // prelim(w+) and mod(w+) by shift.
    function moveSubtree(wm, wp, shift) {
      var change = shift / (wp.i - wm.i);
      wp.c -= change;
      wp.s += shift;
      wm.c += change;
      wp.z += shift;
      wp.m += shift;
    }

    // All other shifts, applied to the smaller subtrees between w- and w+, are
    // performed by this function. To prepare the shifts, we have to adjust
    // change(w+), shift(w+), and change(w-).
    function executeShifts(v) {
      var shift = 0,
          change = 0,
          children = v.children,
          i = children.length,
          w;
      while (--i >= 0) {
        w = children[i];
        w.z += shift;
        w.m += shift;
        shift += w.s + (change += w.c);
      }
    }

    // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
    // returns the specified (default) ancestor.
    function nextAncestor(vim, v, ancestor) {
      return vim.a.parent === v.parent ? vim.a : ancestor;
    }

    function TreeNode(node, i) {
      this._ = node;
      this.parent = null;
      this.children = null;
      this.A = null; // default ancestor
      this.a = this; // ancestor
      this.z = 0; // prelim
      this.m = 0; // mod
      this.c = 0; // change
      this.s = 0; // shift
      this.t = null; // thread
      this.i = i; // number
    }

    TreeNode.prototype = Object.create(Node$1.prototype);

    function treeRoot(root) {
      var tree = new TreeNode(root, 0),
          node,
          nodes = [tree],
          child,
          children,
          i,
          n;

      while (node = nodes.pop()) {
        if (children = node._.children) {
          node.children = new Array(n = children.length);
          for (i = n - 1; i >= 0; --i) {
            nodes.push(child = node.children[i] = new TreeNode(children[i], i));
            child.parent = node;
          }
        }
      }

      (tree.parent = new TreeNode(null, 0)).children = [tree];
      return tree;
    }

    // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
    function tree() {
      var separation = defaultSeparation,
          dx = 1,
          dy = 1,
          nodeSize = null;

      function tree(root) {
        var t = treeRoot(root);

        // Compute the layout using Buchheim et al.’s algorithm.
        t.eachAfter(firstWalk), t.parent.m = -t.z;
        t.eachBefore(secondWalk);

        // If a fixed node size is specified, scale x and y.
        if (nodeSize) root.eachBefore(sizeNode);

        // If a fixed tree size is specified, scale x and y based on the extent.
        // Compute the left-most, right-most, and depth-most nodes for extents.
        else {
          var left = root,
              right = root,
              bottom = root;
          root.eachBefore(function(node) {
            if (node.x < left.x) left = node;
            if (node.x > right.x) right = node;
            if (node.depth > bottom.depth) bottom = node;
          });
          var s = left === right ? 1 : separation(left, right) / 2,
              tx = s - left.x,
              kx = dx / (right.x + s + tx),
              ky = dy / (bottom.depth || 1);
          root.eachBefore(function(node) {
            node.x = (node.x + tx) * kx;
            node.y = node.depth * ky;
          });
        }

        return root;
      }

      // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
      // applied recursively to the children of v, as well as the function
      // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
      // node v is placed to the midpoint of its outermost children.
      function firstWalk(v) {
        var children = v.children,
            siblings = v.parent.children,
            w = v.i ? siblings[v.i - 1] : null;
        if (children) {
          executeShifts(v);
          var midpoint = (children[0].z + children[children.length - 1].z) / 2;
          if (w) {
            v.z = w.z + separation(v._, w._);
            v.m = v.z - midpoint;
          } else {
            v.z = midpoint;
          }
        } else if (w) {
          v.z = w.z + separation(v._, w._);
        }
        v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
      }

      // Computes all real x-coordinates by summing up the modifiers recursively.
      function secondWalk(v) {
        v._.x = v.z + v.parent.m;
        v.m += v.parent.m;
      }

      // The core of the algorithm. Here, a new subtree is combined with the
      // previous subtrees. Threads are used to traverse the inside and outside
      // contours of the left and right subtree up to the highest common level. The
      // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
      // superscript o means outside and i means inside, the subscript - means left
      // subtree and + means right subtree. For summing up the modifiers along the
      // contour, we use respective variables si+, si-, so-, and so+. Whenever two
      // nodes of the inside contours conflict, we compute the left one of the
      // greatest uncommon ancestors using the function ANCESTOR and call MOVE
      // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
      // Finally, we add a new thread (if necessary).
      function apportion(v, w, ancestor) {
        if (w) {
          var vip = v,
              vop = v,
              vim = w,
              vom = vip.parent.children[0],
              sip = vip.m,
              sop = vop.m,
              sim = vim.m,
              som = vom.m,
              shift;
          while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
            vom = nextLeft(vom);
            vop = nextRight(vop);
            vop.a = v;
            shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
            if (shift > 0) {
              moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
              sip += shift;
              sop += shift;
            }
            sim += vim.m;
            sip += vip.m;
            som += vom.m;
            sop += vop.m;
          }
          if (vim && !nextRight(vop)) {
            vop.t = vim;
            vop.m += sim - sop;
          }
          if (vip && !nextLeft(vom)) {
            vom.t = vip;
            vom.m += sip - som;
            ancestor = v;
          }
        }
        return ancestor;
      }

      function sizeNode(node) {
        node.x *= dx;
        node.y = node.depth * dy;
      }

      tree.separation = function(x) {
        return arguments.length ? (separation = x, tree) : separation;
      };

      tree.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
      };

      tree.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
      };

      return tree;
    }

    function treemapSlice(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          node,
          i = -1,
          n = nodes.length,
          k = parent.value && (y1 - y0) / parent.value;

      while (++i < n) {
        node = nodes[i], node.x0 = x0, node.x1 = x1;
        node.y0 = y0, node.y1 = y0 += node.value * k;
      }
    }

    var phi = (1 + Math.sqrt(5)) / 2;

    function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
      var rows = [],
          nodes = parent.children,
          row,
          nodeValue,
          i0 = 0,
          i1 = 0,
          n = nodes.length,
          dx, dy,
          value = parent.value,
          sumValue,
          minValue,
          maxValue,
          newRatio,
          minRatio,
          alpha,
          beta;

      while (i0 < n) {
        dx = x1 - x0, dy = y1 - y0;

        // Find the next non-empty node.
        do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
        minValue = maxValue = sumValue;
        alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
        beta = sumValue * sumValue * alpha;
        minRatio = Math.max(maxValue / beta, beta / minValue);

        // Keep adding nodes while the aspect ratio maintains or improves.
        for (; i1 < n; ++i1) {
          sumValue += nodeValue = nodes[i1].value;
          if (nodeValue < minValue) minValue = nodeValue;
          if (nodeValue > maxValue) maxValue = nodeValue;
          beta = sumValue * sumValue * alpha;
          newRatio = Math.max(maxValue / beta, beta / minValue);
          if (newRatio > minRatio) { sumValue -= nodeValue; break; }
          minRatio = newRatio;
        }

        // Position and record the row orientation.
        rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
        if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
        else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
        value -= sumValue, i0 = i1;
      }

      return rows;
    }

    var squarify = (function custom(ratio) {

      function squarify(parent, x0, y0, x1, y1) {
        squarifyRatio(ratio, parent, x0, y0, x1, y1);
      }

      squarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
      };

      return squarify;
    })(phi);

    function index() {
      var tile = squarify,
          round = false,
          dx = 1,
          dy = 1,
          paddingStack = [0],
          paddingInner = constantZero,
          paddingTop = constantZero,
          paddingRight = constantZero,
          paddingBottom = constantZero,
          paddingLeft = constantZero;

      function treemap(root) {
        root.x0 =
        root.y0 = 0;
        root.x1 = dx;
        root.y1 = dy;
        root.eachBefore(positionNode);
        paddingStack = [0];
        if (round) root.eachBefore(roundNode);
        return root;
      }

      function positionNode(node) {
        var p = paddingStack[node.depth],
            x0 = node.x0 + p,
            y0 = node.y0 + p,
            x1 = node.x1 - p,
            y1 = node.y1 - p;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
        if (node.children) {
          p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
          x0 += paddingLeft(node) - p;
          y0 += paddingTop(node) - p;
          x1 -= paddingRight(node) - p;
          y1 -= paddingBottom(node) - p;
          if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
          if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
          tile(node, x0, y0, x1, y1);
        }
      }

      treemap.round = function(x) {
        return arguments.length ? (round = !!x, treemap) : round;
      };

      treemap.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
      };

      treemap.tile = function(x) {
        return arguments.length ? (tile = required(x), treemap) : tile;
      };

      treemap.padding = function(x) {
        return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
      };

      treemap.paddingInner = function(x) {
        return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$2(+x), treemap) : paddingInner;
      };

      treemap.paddingOuter = function(x) {
        return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
      };

      treemap.paddingTop = function(x) {
        return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$2(+x), treemap) : paddingTop;
      };

      treemap.paddingRight = function(x) {
        return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$2(+x), treemap) : paddingRight;
      };

      treemap.paddingBottom = function(x) {
        return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$2(+x), treemap) : paddingBottom;
      };

      treemap.paddingLeft = function(x) {
        return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$2(+x), treemap) : paddingLeft;
      };

      return treemap;
    }

    function binary(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          i, n = nodes.length,
          sum, sums = new Array(n + 1);

      for (sums[0] = sum = i = 0; i < n; ++i) {
        sums[i + 1] = sum += nodes[i].value;
      }

      partition(0, n, parent.value, x0, y0, x1, y1);

      function partition(i, j, value, x0, y0, x1, y1) {
        if (i >= j - 1) {
          var node = nodes[i];
          node.x0 = x0, node.y0 = y0;
          node.x1 = x1, node.y1 = y1;
          return;
        }

        var valueOffset = sums[i],
            valueTarget = (value / 2) + valueOffset,
            k = i + 1,
            hi = j - 1;

        while (k < hi) {
          var mid = k + hi >>> 1;
          if (sums[mid] < valueTarget) k = mid + 1;
          else hi = mid;
        }

        if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

        var valueLeft = sums[k] - valueOffset,
            valueRight = value - valueLeft;

        if ((x1 - x0) > (y1 - y0)) {
          var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;
          partition(i, k, valueLeft, x0, y0, xk, y1);
          partition(k, j, valueRight, xk, y0, x1, y1);
        } else {
          var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;
          partition(i, k, valueLeft, x0, y0, x1, yk);
          partition(k, j, valueRight, x0, yk, x1, y1);
        }
      }
    }

    function sliceDice(parent, x0, y0, x1, y1) {
      (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
    }

    var resquarify = (function custom(ratio) {

      function resquarify(parent, x0, y0, x1, y1) {
        if ((rows = parent._squarify) && (rows.ratio === ratio)) {
          var rows,
              row,
              nodes,
              i,
              j = -1,
              n,
              m = rows.length,
              value = parent.value;

          while (++j < m) {
            row = rows[j], nodes = row.children;
            for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
            if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);
            else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);
            value -= row.value;
          }
        } else {
          parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
          rows.ratio = ratio;
        }
      }

      resquarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
      };

      return resquarify;
    })(phi);

    function area$1(polygon) {
      var i = -1,
          n = polygon.length,
          a,
          b = polygon[n - 1],
          area = 0;

      while (++i < n) {
        a = b;
        b = polygon[i];
        area += a[1] * b[0] - a[0] * b[1];
      }

      return area / 2;
    }

    function centroid(polygon) {
      var i = -1,
          n = polygon.length,
          x = 0,
          y = 0,
          a,
          b = polygon[n - 1],
          c,
          k = 0;

      while (++i < n) {
        a = b;
        b = polygon[i];
        k += c = a[0] * b[1] - b[0] * a[1];
        x += (a[0] + b[0]) * c;
        y += (a[1] + b[1]) * c;
      }

      return k *= 3, [x / k, y / k];
    }

    // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
    // the 3D cross product in a quadrant I Cartesian coordinate system (+x is
    // right, +y is up). Returns a positive value if ABC is counter-clockwise,
    // negative if clockwise, and zero if the points are collinear.
    function cross$1(a, b, c) {
      return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
    }

    function lexicographicOrder(a, b) {
      return a[0] - b[0] || a[1] - b[1];
    }

    // Computes the upper convex hull per the monotone chain algorithm.
    // Assumes points.length >= 3, is sorted by x, unique in y.
    // Returns an array of indices into points in left-to-right order.
    function computeUpperHullIndexes(points) {
      const n = points.length,
          indexes = [0, 1];
      let size = 2, i;

      for (i = 2; i < n; ++i) {
        while (size > 1 && cross$1(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
        indexes[size++] = i;
      }

      return indexes.slice(0, size); // remove popped points
    }

    function hull(points) {
      if ((n = points.length) < 3) return null;

      var i,
          n,
          sortedPoints = new Array(n),
          flippedPoints = new Array(n);

      for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
      sortedPoints.sort(lexicographicOrder);
      for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

      var upperIndexes = computeUpperHullIndexes(sortedPoints),
          lowerIndexes = computeUpperHullIndexes(flippedPoints);

      // Construct the hull polygon, removing possible duplicate endpoints.
      var skipLeft = lowerIndexes[0] === upperIndexes[0],
          skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
          hull = [];

      // Add upper hull in right-to-l order.
      // Then add lower hull in left-to-right order.
      for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
      for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

      return hull;
    }

    function contains(polygon, point) {
      var n = polygon.length,
          p = polygon[n - 1],
          x = point[0], y = point[1],
          x0 = p[0], y0 = p[1],
          x1, y1,
          inside = false;

      for (var i = 0; i < n; ++i) {
        p = polygon[i], x1 = p[0], y1 = p[1];
        if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
        x0 = x1, y0 = y1;
      }

      return inside;
    }

    function length(polygon) {
      var i = -1,
          n = polygon.length,
          b = polygon[n - 1],
          xa,
          ya,
          xb = b[0],
          yb = b[1],
          perimeter = 0;

      while (++i < n) {
        xa = xb;
        ya = yb;
        b = polygon[i];
        xb = b[0];
        yb = b[1];
        xa -= xb;
        ya -= yb;
        perimeter += Math.hypot(xa, ya);
      }

      return perimeter;
    }

    var defaultSource = Math.random;

    var uniform = (function sourceRandomUniform(source) {
      function randomUniform(min, max) {
        min = min == null ? 0 : +min;
        max = max == null ? 1 : +max;
        if (arguments.length === 1) max = min, min = 0;
        else max -= min;
        return function() {
          return source() * max + min;
        };
      }

      randomUniform.source = sourceRandomUniform;

      return randomUniform;
    })(defaultSource);

    var int$1 = (function sourceRandomInt(source) {
      function randomInt(min, max) {
        if (arguments.length < 2) max = min, min = 0;
        min = Math.floor(min);
        max = Math.floor(max) - min;
        return function() {
          return Math.floor(source() * max + min);
        };
      }

      randomInt.source = sourceRandomInt;

      return randomInt;
    })(defaultSource);

    var normal = (function sourceRandomNormal(source) {
      function randomNormal(mu, sigma) {
        var x, r;
        mu = mu == null ? 0 : +mu;
        sigma = sigma == null ? 1 : +sigma;
        return function() {
          var y;

          // If available, use the second previously-generated uniform random.
          if (x != null) y = x, x = null;

          // Otherwise, generate a new x and y.
          else do {
            x = source() * 2 - 1;
            y = source() * 2 - 1;
            r = x * x + y * y;
          } while (!r || r > 1);

          return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
        };
      }

      randomNormal.source = sourceRandomNormal;

      return randomNormal;
    })(defaultSource);

    var logNormal = (function sourceRandomLogNormal(source) {
      var N = normal.source(source);

      function randomLogNormal() {
        var randomNormal = N.apply(this, arguments);
        return function() {
          return Math.exp(randomNormal());
        };
      }

      randomLogNormal.source = sourceRandomLogNormal;

      return randomLogNormal;
    })(defaultSource);

    var irwinHall = (function sourceRandomIrwinHall(source) {
      function randomIrwinHall(n) {
        if ((n = +n) <= 0) return () => 0;
        return function() {
          for (var sum = 0, i = n; i > 1; --i) sum += source();
          return sum + i * source();
        };
      }

      randomIrwinHall.source = sourceRandomIrwinHall;

      return randomIrwinHall;
    })(defaultSource);

    var bates = (function sourceRandomBates(source) {
      var I = irwinHall.source(source);

      function randomBates(n) {
        // use limiting distribution at n === 0
        if ((n = +n) === 0) return source;
        var randomIrwinHall = I(n);
        return function() {
          return randomIrwinHall() / n;
        };
      }

      randomBates.source = sourceRandomBates;

      return randomBates;
    })(defaultSource);

    var exponential = (function sourceRandomExponential(source) {
      function randomExponential(lambda) {
        return function() {
          return -Math.log1p(-source()) / lambda;
        };
      }

      randomExponential.source = sourceRandomExponential;

      return randomExponential;
    })(defaultSource);

    var pareto = (function sourceRandomPareto(source) {
      function randomPareto(alpha) {
        if ((alpha = +alpha) < 0) throw new RangeError("invalid alpha");
        alpha = 1 / -alpha;
        return function() {
          return Math.pow(1 - source(), alpha);
        };
      }

      randomPareto.source = sourceRandomPareto;

      return randomPareto;
    })(defaultSource);

    var bernoulli = (function sourceRandomBernoulli(source) {
      function randomBernoulli(p) {
        if ((p = +p) < 0 || p > 1) throw new RangeError("invalid p");
        return function() {
          return Math.floor(source() + p);
        };
      }

      randomBernoulli.source = sourceRandomBernoulli;

      return randomBernoulli;
    })(defaultSource);

    var geometric = (function sourceRandomGeometric(source) {
      function randomGeometric(p) {
        if ((p = +p) < 0 || p > 1) throw new RangeError("invalid p");
        if (p === 0) return () => Infinity;
        if (p === 1) return () => 1;
        p = Math.log1p(-p);
        return function() {
          return 1 + Math.floor(Math.log1p(-source()) / p);
        };
      }

      randomGeometric.source = sourceRandomGeometric;

      return randomGeometric;
    })(defaultSource);

    var gamma = (function sourceRandomGamma(source) {
      var randomNormal = normal.source(source)();

      function randomGamma(k, theta) {
        if ((k = +k) < 0) throw new RangeError("invalid k");
        // degenerate distribution if k === 0
        if (k === 0) return () => 0;
        theta = theta == null ? 1 : +theta;
        // exponential distribution if k === 1
        if (k === 1) return () => -Math.log1p(-source()) * theta;

        var d = (k < 1 ? k + 1 : k) - 1 / 3,
            c = 1 / (3 * Math.sqrt(d)),
            multiplier = k < 1 ? () => Math.pow(source(), 1 / k) : () => 1;
        return function() {
          do {
            do {
              var x = randomNormal(),
                  v = 1 + c * x;
            } while (v <= 0);
            v *= v * v;
            var u = 1 - source();
          } while (u >= 1 - 0.0331 * x * x * x * x && Math.log(u) >= 0.5 * x * x + d * (1 - v + Math.log(v)));
          return d * v * multiplier() * theta;
        };
      }

      randomGamma.source = sourceRandomGamma;

      return randomGamma;
    })(defaultSource);

    var beta = (function sourceRandomBeta(source) {
      var G = gamma.source(source);

      function randomBeta(alpha, beta) {
        var X = G(alpha),
            Y = G(beta);
        return function() {
          var x = X();
          return x === 0 ? 0 : x / (x + Y());
        };
      }

      randomBeta.source = sourceRandomBeta;

      return randomBeta;
    })(defaultSource);

    var binomial = (function sourceRandomBinomial(source) {
      var G = geometric.source(source),
          B = beta.source(source);

      function randomBinomial(n, p) {
        n = +n;
        if ((p = +p) >= 1) return () => n;
        if (p <= 0) return () => 0;
        return function() {
          var acc = 0, nn = n, pp = p;
          while (nn * pp > 16 && nn * (1 - pp) > 16) {
            var i = Math.floor((nn + 1) * pp),
                y = B(i, nn - i + 1)();
            if (y <= pp) {
              acc += i;
              nn -= i;
              pp = (pp - y) / (1 - y);
            } else {
              nn = i - 1;
              pp /= y;
            }
          }
          var sign = pp < 0.5,
              pFinal = sign ? pp : 1 - pp,
              g = G(pFinal);
          for (var s = g(), k = 0; s <= nn; ++k) s += g();
          return acc + (sign ? k : nn - k);
        };
      }

      randomBinomial.source = sourceRandomBinomial;

      return randomBinomial;
    })(defaultSource);

    var weibull = (function sourceRandomWeibull(source) {
      function randomWeibull(k, a, b) {
        var outerFunc;
        if ((k = +k) === 0) {
          outerFunc = x => -Math.log(x);
        } else {
          k = 1 / k;
          outerFunc = x => Math.pow(x, k);
        }
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
          return a + b * outerFunc(-Math.log1p(-source()));
        };
      }

      randomWeibull.source = sourceRandomWeibull;

      return randomWeibull;
    })(defaultSource);

    var cauchy = (function sourceRandomCauchy(source) {
      function randomCauchy(a, b) {
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
          return a + b * Math.tan(Math.PI * source());
        };
      }

      randomCauchy.source = sourceRandomCauchy;

      return randomCauchy;
    })(defaultSource);

    var logistic = (function sourceRandomLogistic(source) {
      function randomLogistic(a, b) {
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
          var u = source();
          return a + b * Math.log(u / (1 - u));
        };
      }

      randomLogistic.source = sourceRandomLogistic;

      return randomLogistic;
    })(defaultSource);

    var poisson = (function sourceRandomPoisson(source) {
      var G = gamma.source(source),
          B = binomial.source(source);

      function randomPoisson(lambda) {
        return function() {
          var acc = 0, l = lambda;
          while (l > 16) {
            var n = Math.floor(0.875 * l),
                t = G(n)();
            if (t > l) return acc + B(n - 1, l / t)();
            acc += n;
            l -= t;
          }
          for (var s = -Math.log1p(-source()), k = 0; s <= l; ++k) s -= Math.log1p(-source());
          return acc + k;
        };
      }

      randomPoisson.source = sourceRandomPoisson;

      return randomPoisson;
    })(defaultSource);

    // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
    const mul$1 = 0x19660D;
    const inc = 0x3C6EF35F;
    const eps = 1 / 0x100000000;

    function lcg(seed = Math.random()) {
      let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;
      return () => (state = mul$1 * state + inc | 0, eps * (state >>> 0));
    }

    function initRange(domain, range) {
      switch (arguments.length) {
        case 0: break;
        case 1: this.range(domain); break;
        default: this.range(range).domain(domain); break;
      }
      return this;
    }

    function initInterpolator(domain, interpolator) {
      switch (arguments.length) {
        case 0: break;
        case 1: {
          if (typeof domain === "function") this.interpolator(domain);
          else this.range(domain);
          break;
        }
        default: {
          this.domain(domain);
          if (typeof interpolator === "function") this.interpolator(interpolator);
          else this.range(interpolator);
          break;
        }
      }
      return this;
    }

    const implicit = Symbol("implicit");

    function ordinal() {
      var index = new InternMap(),
          domain = [],
          range = [],
          unknown = implicit;

      function scale(d) {
        let i = index.get(d);
        if (i === undefined) {
          if (unknown !== implicit) return unknown;
          index.set(d, i = domain.push(d) - 1);
        }
        return range[i % range.length];
      }

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = new InternMap();
        for (const value of _) {
          if (index.has(value)) continue;
          index.set(value, domain.push(value) - 1);
        }
        return scale;
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), scale) : range.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return ordinal(domain, range).unknown(unknown);
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function band() {
      var scale = ordinal().unknown(undefined),
          domain = scale.domain,
          ordinalRange = scale.range,
          r0 = 0,
          r1 = 1,
          step,
          bandwidth,
          round = false,
          paddingInner = 0,
          paddingOuter = 0,
          align = 0.5;

      delete scale.unknown;

      function rescale() {
        var n = domain().length,
            reverse = r1 < r0,
            start = reverse ? r1 : r0,
            stop = reverse ? r0 : r1;
        step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
        if (round) step = Math.floor(step);
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
        var values = range$5(n).map(function(i) { return start + step * i; });
        return ordinalRange(reverse ? values.reverse() : values);
      }

      scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
      };

      scale.range = function(_) {
        return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
      };

      scale.rangeRound = function(_) {
        return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
      };

      scale.bandwidth = function() {
        return bandwidth;
      };

      scale.step = function() {
        return step;
      };

      scale.round = function(_) {
        return arguments.length ? (round = !!_, rescale()) : round;
      };

      scale.padding = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
      };

      scale.paddingInner = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
      };

      scale.paddingOuter = function(_) {
        return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
      };

      scale.align = function(_) {
        return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
      };

      scale.copy = function() {
        return band(domain(), [r0, r1])
            .round(round)
            .paddingInner(paddingInner)
            .paddingOuter(paddingOuter)
            .align(align);
      };

      return initRange.apply(rescale(), arguments);
    }

    function pointish(scale) {
      var copy = scale.copy;

      scale.padding = scale.paddingOuter;
      delete scale.paddingInner;
      delete scale.paddingOuter;

      scale.copy = function() {
        return pointish(copy());
      };

      return scale;
    }

    function point$4() {
      return pointish(band.apply(null, arguments).paddingInner(1));
    }

    function constants(x) {
      return function() {
        return x;
      };
    }

    function number$1(x) {
      return +x;
    }

    var unit = [0, 1];

    function identity$5(x) {
      return x;
    }

    function normalize(a, b) {
      return (b -= (a = +a))
          ? function(x) { return (x - a) / b; }
          : constants(isNaN(b) ? NaN : 0.5);
    }

    function clamper(a, b) {
      var t;
      if (a > b) t = a, a = b, b = t;
      return function(x) { return Math.max(a, Math.min(b, x)); };
    }

    // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
    function bimap(domain, range, interpolate) {
      var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
      if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
      else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
      return function(x) { return r0(d0(x)); };
    }

    function polymap(domain, range, interpolate) {
      var j = Math.min(domain.length, range.length) - 1,
          d = new Array(j),
          r = new Array(j),
          i = -1;

      // Reverse descending domains.
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }

      while (++i < j) {
        d[i] = normalize(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
      }

      return function(x) {
        var i = bisect(domain, x, 1, j) - 1;
        return r[i](d[i](x));
      };
    }

    function copy$1(source, target) {
      return target
          .domain(source.domain())
          .range(source.range())
          .interpolate(source.interpolate())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function transformer$2() {
      var domain = unit,
          range = unit,
          interpolate = interpolate$2,
          transform,
          untransform,
          unknown,
          clamp = identity$5,
          piecewise,
          output,
          input;

      function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity$5) clamp = clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap : bimap;
        output = input = null;
        return scale;
      }

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
      }

      scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
      };

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate = interpolateRound, rescale();
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity$5, rescale()) : clamp !== identity$5;
      };

      scale.interpolate = function(_) {
        return arguments.length ? (interpolate = _, rescale()) : interpolate;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t, u) {
        transform = t, untransform = u;
        return rescale();
      };
    }

    function continuous() {
      return transformer$2()(identity$5, identity$5);
    }

    function tickFormat(start, stop, count, specifier) {
      var step = tickStep(start, stop, count),
          precision;
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format(specifier);
    }

    function linearish(scale) {
      var domain = scale.domain;

      scale.ticks = function(count) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
      };

      scale.tickFormat = function(count, specifier) {
        var d = domain();
        return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
      };

      scale.nice = function(count) {
        if (count == null) count = 10;

        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;

        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }
        
        while (maxIter-- > 0) {
          step = tickIncrement(start, stop, count);
          if (step === prestep) {
            d[i0] = start;
            d[i1] = stop;
            return domain(d);
          } else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
          } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
          } else {
            break;
          }
          prestep = step;
        }

        return scale;
      };

      return scale;
    }

    function linear() {
      var scale = continuous();

      scale.copy = function() {
        return copy$1(scale, linear());
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    function identity$4(domain) {
      var unknown;

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : x;
      }

      scale.invert = scale;

      scale.domain = scale.range = function(_) {
        return arguments.length ? (domain = Array.from(_, number$1), scale) : domain.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return identity$4(domain).unknown(unknown);
      };

      domain = arguments.length ? Array.from(domain, number$1) : [0, 1];

      return linearish(scale);
    }

    function nice(domain, interval) {
      domain = domain.slice();

      var i0 = 0,
          i1 = domain.length - 1,
          x0 = domain[i0],
          x1 = domain[i1],
          t;

      if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
      }

      domain[i0] = interval.floor(x0);
      domain[i1] = interval.ceil(x1);
      return domain;
    }

    function transformLog(x) {
      return Math.log(x);
    }

    function transformExp(x) {
      return Math.exp(x);
    }

    function transformLogn(x) {
      return -Math.log(-x);
    }

    function transformExpn(x) {
      return -Math.exp(-x);
    }

    function pow10(x) {
      return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
    }

    function powp(base) {
      return base === 10 ? pow10
          : base === Math.E ? Math.exp
          : x => Math.pow(base, x);
    }

    function logp(base) {
      return base === Math.E ? Math.log
          : base === 10 && Math.log10
          || base === 2 && Math.log2
          || (base = Math.log(base), x => Math.log(x) / base);
    }

    function reflect(f) {
      return (x, k) => -f(-x, k);
    }

    function loggish(transform) {
      const scale = transform(transformLog, transformExp);
      const domain = scale.domain;
      let base = 10;
      let logs;
      let pows;

      function rescale() {
        logs = logp(base), pows = powp(base);
        if (domain()[0] < 0) {
          logs = reflect(logs), pows = reflect(pows);
          transform(transformLogn, transformExpn);
        } else {
          transform(transformLog, transformExp);
        }
        return scale;
      }

      scale.base = function(_) {
        return arguments.length ? (base = +_, rescale()) : base;
      };

      scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
      };

      scale.ticks = count => {
        const d = domain();
        let u = d[0];
        let v = d[d.length - 1];
        const r = v < u;

        if (r) ([u, v] = [v, u]);

        let i = logs(u);
        let j = logs(v);
        let k;
        let t;
        const n = count == null ? 10 : +count;
        let z = [];

        if (!(base % 1) && j - i < n) {
          i = Math.floor(i), j = Math.ceil(j);
          if (u > 0) for (; i <= j; ++i) {
            for (k = 1; k < base; ++k) {
              t = i < 0 ? k / pows(-i) : k * pows(i);
              if (t < u) continue;
              if (t > v) break;
              z.push(t);
            }
          } else for (; i <= j; ++i) {
            for (k = base - 1; k >= 1; --k) {
              t = i > 0 ? k / pows(-i) : k * pows(i);
              if (t < u) continue;
              if (t > v) break;
              z.push(t);
            }
          }
          if (z.length * 2 < n) z = ticks(u, v, n);
        } else {
          z = ticks(i, j, Math.min(j - i, n)).map(pows);
        }
        return r ? z.reverse() : z;
      };

      scale.tickFormat = (count, specifier) => {
        if (count == null) count = 10;
        if (specifier == null) specifier = base === 10 ? "s" : ",";
        if (typeof specifier !== "function") {
          if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
          specifier = format(specifier);
        }
        if (count === Infinity) return specifier;
        const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
        return d => {
          let i = d / pows(Math.round(logs(d)));
          if (i * base < base - 0.5) i *= base;
          return i <= k ? specifier(d) : "";
        };
      };

      scale.nice = () => {
        return domain(nice(domain(), {
          floor: x => pows(Math.floor(logs(x))),
          ceil: x => pows(Math.ceil(logs(x)))
        }));
      };

      return scale;
    }

    function log$4() {
      const scale = loggish(transformer$2()).domain([1, 10]);
      scale.copy = () => copy$1(scale, log$4()).base(scale.base());
      initRange.apply(scale, arguments);
      return scale;
    }

    function transformSymlog(c) {
      return function(x) {
        return Math.sign(x) * Math.log1p(Math.abs(x / c));
      };
    }

    function transformSymexp(c) {
      return function(x) {
        return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
      };
    }

    function symlogish(transform) {
      var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

      scale.constant = function(_) {
        return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
      };

      return linearish(scale);
    }

    function symlog() {
      var scale = symlogish(transformer$2());

      scale.copy = function() {
        return copy$1(scale, symlog()).constant(scale.constant());
      };

      return initRange.apply(scale, arguments);
    }

    function transformPow(exponent) {
      return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
      };
    }

    function transformSqrt(x) {
      return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
    }

    function transformSquare(x) {
      return x < 0 ? -x * x : x * x;
    }

    function powish(transform) {
      var scale = transform(identity$5, identity$5),
          exponent = 1;

      function rescale() {
        return exponent === 1 ? transform(identity$5, identity$5)
            : exponent === 0.5 ? transform(transformSqrt, transformSquare)
            : transform(transformPow(exponent), transformPow(1 / exponent));
      }

      scale.exponent = function(_) {
        return arguments.length ? (exponent = +_, rescale()) : exponent;
      };

      return linearish(scale);
    }

    function pow$3() {
      var scale = powish(transformer$2());

      scale.copy = function() {
        return copy$1(scale, pow$3()).exponent(scale.exponent());
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function sqrt$4() {
      return pow$3.apply(null, arguments).exponent(0.5);
    }

    function square$3(x) {
      return Math.sign(x) * x * x;
    }

    function unsquare(x) {
      return Math.sign(x) * Math.sqrt(Math.abs(x));
    }

    function radial() {
      var squared = continuous(),
          range = [0, 1],
          round = false,
          unknown;

      function scale(x) {
        var y = unsquare(squared(x));
        return isNaN(y) ? unknown : round ? Math.round(y) : y;
      }

      scale.invert = function(y) {
        return squared.invert(square$3(y));
      };

      scale.domain = function(_) {
        return arguments.length ? (squared.domain(_), scale) : squared.domain();
      };

      scale.range = function(_) {
        return arguments.length ? (squared.range((range = Array.from(_, number$1)).map(square$3)), scale) : range.slice();
      };

      scale.rangeRound = function(_) {
        return scale.range(_).round(true);
      };

      scale.round = function(_) {
        return arguments.length ? (round = !!_, scale) : round;
      };

      scale.clamp = function(_) {
        return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return radial(squared.domain(), range)
            .round(round)
            .clamp(squared.clamp())
            .unknown(unknown);
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    function quantile() {
      var domain = [],
          range = [],
          thresholds = [],
          unknown;

      function rescale() {
        var i = 0, n = Math.max(1, range.length);
        thresholds = new Array(n - 1);
        while (++i < n) thresholds[i - 1] = quantileSorted(domain, i / n);
        return scale;
      }

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : range[bisect(thresholds, x)];
      }

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [NaN, NaN] : [
          i > 0 ? thresholds[i - 1] : domain[0],
          i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
        ];
      };

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(ascending$3);
        return rescale();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.quantiles = function() {
        return thresholds.slice();
      };

      scale.copy = function() {
        return quantile()
            .domain(domain)
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(scale, arguments);
    }

    function quantize() {
      var x0 = 0,
          x1 = 1,
          n = 1,
          domain = [0.5],
          range = [0, 1],
          unknown;

      function scale(x) {
        return x != null && x <= x ? range[bisect(domain, x, 0, n)] : unknown;
      }

      function rescale() {
        var i = -1;
        domain = new Array(n);
        while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
        return scale;
      }

      scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
      };

      scale.range = function(_) {
        return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
      };

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [NaN, NaN]
            : i < 1 ? [x0, domain[0]]
            : i >= n ? [domain[n - 1], x1]
            : [domain[i - 1], domain[i]];
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : scale;
      };

      scale.thresholds = function() {
        return domain.slice();
      };

      scale.copy = function() {
        return quantize()
            .domain([x0, x1])
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(linearish(scale), arguments);
    }

    function threshold$2() {
      var domain = [0.5],
          range = [0, 1],
          unknown,
          n = 1;

      function scale(x) {
        return x != null && x <= x ? range[bisect(domain, x, 0, n)] : unknown;
      }

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
      };

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return [domain[i - 1], domain[i]];
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return threshold$2()
            .domain(domain)
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(scale, arguments);
    }

    var t0 = new Date,
        t1 = new Date;

    function newInterval(floori, offseti, count, field) {

      function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
      }

      interval.floor = function(date) {
        return floori(date = new Date(+date)), date;
      };

      interval.ceil = function(date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
      };

      interval.round = function(date) {
        var d0 = interval(date),
            d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
      };

      interval.offset = function(date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
      };

      interval.range = function(start, stop, step) {
        var range = [], previous;
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
      };

      interval.filter = function(test) {
        return newInterval(function(date) {
          if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
        }, function(date, step) {
          if (date >= date) {
            if (step < 0) while (++step <= 0) {
              while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
            } else while (--step >= 0) {
              while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
            }
          }
        });
      };

      if (count) {
        interval.count = function(start, end) {
          t0.setTime(+start), t1.setTime(+end);
          floori(t0), floori(t1);
          return Math.floor(count(t0, t1));
        };

        interval.every = function(step) {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null
              : !(step > 1) ? interval
              : interval.filter(field
                  ? function(d) { return field(d) % step === 0; }
                  : function(d) { return interval.count(0, d) % step === 0; });
        };
      }

      return interval;
    }

    var millisecond = newInterval(function() {
      // noop
    }, function(date, step) {
      date.setTime(+date + step);
    }, function(start, end) {
      return end - start;
    });

    // An optimized implementation for this simple case.
    millisecond.every = function(k) {
      k = Math.floor(k);
      if (!isFinite(k) || !(k > 0)) return null;
      if (!(k > 1)) return millisecond;
      return newInterval(function(date) {
        date.setTime(Math.floor(date / k) * k);
      }, function(date, step) {
        date.setTime(+date + step * k);
      }, function(start, end) {
        return (end - start) / k;
      });
    };

    var millisecond$1 = millisecond;
    var milliseconds = millisecond.range;

    const durationSecond = 1000;
    const durationMinute = durationSecond * 60;
    const durationHour = durationMinute * 60;
    const durationDay = durationHour * 24;
    const durationWeek = durationDay * 7;
    const durationMonth = durationDay * 30;
    const durationYear = durationDay * 365;

    var second = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds());
    }, function(date, step) {
      date.setTime(+date + step * durationSecond);
    }, function(start, end) {
      return (end - start) / durationSecond;
    }, function(date) {
      return date.getUTCSeconds();
    });

    var utcSecond = second;
    var seconds = second.range;

    var minute = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getMinutes();
    });

    var timeMinute = minute;
    var minutes = minute.range;

    var hour = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getHours();
    });

    var timeHour = hour;
    var hours = hour.range;

    var day = newInterval(
      date => date.setHours(0, 0, 0, 0),
      (date, step) => date.setDate(date.getDate() + step),
      (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
      date => date.getDate() - 1
    );

    var timeDay = day;
    var days = day.range;

    function weekday(i) {
      return newInterval(function(date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setDate(date.getDate() + step * 7);
      }, function(start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
      });
    }

    var sunday = weekday(0);
    var monday = weekday(1);
    var tuesday = weekday(2);
    var wednesday = weekday(3);
    var thursday = weekday(4);
    var friday = weekday(5);
    var saturday = weekday(6);

    var sundays = sunday.range;
    var mondays = monday.range;
    var tuesdays = tuesday.range;
    var wednesdays = wednesday.range;
    var thursdays = thursday.range;
    var fridays = friday.range;
    var saturdays = saturday.range;

    var month = newInterval(function(date) {
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setMonth(date.getMonth() + step);
    }, function(start, end) {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, function(date) {
      return date.getMonth();
    });

    var timeMonth = month;
    var months = month.range;

    var year = newInterval(function(date) {
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setFullYear(date.getFullYear() + step);
    }, function(start, end) {
      return end.getFullYear() - start.getFullYear();
    }, function(date) {
      return date.getFullYear();
    });

    // An optimized implementation for this simple case.
    year.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setFullYear(date.getFullYear() + step * k);
      });
    };

    var timeYear = year;
    var years = year.range;

    var utcMinute = newInterval(function(date) {
      date.setUTCSeconds(0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getUTCMinutes();
    });

    var utcMinute$1 = utcMinute;
    var utcMinutes = utcMinute.range;

    var utcHour = newInterval(function(date) {
      date.setUTCMinutes(0, 0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getUTCHours();
    });

    var utcHour$1 = utcHour;
    var utcHours = utcHour.range;

    var utcDay = newInterval(function(date) {
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCDate(date.getUTCDate() + step);
    }, function(start, end) {
      return (end - start) / durationDay;
    }, function(date) {
      return date.getUTCDate() - 1;
    });

    var utcDay$1 = utcDay;
    var utcDays = utcDay.range;

    function utcWeekday(i) {
      return newInterval(function(date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7);
      }, function(start, end) {
        return (end - start) / durationWeek;
      });
    }

    var utcSunday = utcWeekday(0);
    var utcMonday = utcWeekday(1);
    var utcTuesday = utcWeekday(2);
    var utcWednesday = utcWeekday(3);
    var utcThursday = utcWeekday(4);
    var utcFriday = utcWeekday(5);
    var utcSaturday = utcWeekday(6);

    var utcSundays = utcSunday.range;
    var utcMondays = utcMonday.range;
    var utcTuesdays = utcTuesday.range;
    var utcWednesdays = utcWednesday.range;
    var utcThursdays = utcThursday.range;
    var utcFridays = utcFriday.range;
    var utcSaturdays = utcSaturday.range;

    var utcMonth = newInterval(function(date) {
      date.setUTCDate(1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCMonth(date.getUTCMonth() + step);
    }, function(start, end) {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, function(date) {
      return date.getUTCMonth();
    });

    var utcMonth$1 = utcMonth;
    var utcMonths = utcMonth.range;

    var utcYear = newInterval(function(date) {
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step);
    }, function(start, end) {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, function(date) {
      return date.getUTCFullYear();
    });

    // An optimized implementation for this simple case.
    utcYear.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
      });
    };

    var utcYear$1 = utcYear;
    var utcYears = utcYear.range;

    function ticker(year, month, week, day, hour, minute) {

      const tickIntervals = [
        [utcSecond,  1,      durationSecond],
        [utcSecond,  5,  5 * durationSecond],
        [utcSecond, 15, 15 * durationSecond],
        [utcSecond, 30, 30 * durationSecond],
        [minute,  1,      durationMinute],
        [minute,  5,  5 * durationMinute],
        [minute, 15, 15 * durationMinute],
        [minute, 30, 30 * durationMinute],
        [  hour,  1,      durationHour  ],
        [  hour,  3,  3 * durationHour  ],
        [  hour,  6,  6 * durationHour  ],
        [  hour, 12, 12 * durationHour  ],
        [   day,  1,      durationDay   ],
        [   day,  2,  2 * durationDay   ],
        [  week,  1,      durationWeek  ],
        [ month,  1,      durationMonth ],
        [ month,  3,  3 * durationMonth ],
        [  year,  1,      durationYear  ]
      ];

      function ticks(start, stop, count) {
        const reverse = stop < start;
        if (reverse) [start, stop] = [stop, start];
        const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
        const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop
        return reverse ? ticks.reverse() : ticks;
      }

      function tickInterval(start, stop, count) {
        const target = Math.abs(stop - start) / count;
        const i = bisector(([,, step]) => step).right(tickIntervals, target);
        if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));
        if (i === 0) return millisecond$1.every(Math.max(tickStep(start, stop, count), 1));
        const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        return t.every(step);
      }

      return [ticks, tickInterval];
    }

    const [utcTicks, utcTickInterval] = ticker(utcYear$1, utcMonth$1, utcSunday, utcDay$1, utcHour$1, utcMinute$1);
    const [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, sunday, timeDay, timeHour, timeMinute);

    function localDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
      }
      return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
    }

    function utcDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
      }
      return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    }

    function newDate(y, m, d) {
      return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
    }

    function formatLocale(locale) {
      var locale_dateTime = locale.dateTime,
          locale_date = locale.date,
          locale_time = locale.time,
          locale_periods = locale.periods,
          locale_weekdays = locale.days,
          locale_shortWeekdays = locale.shortDays,
          locale_months = locale.months,
          locale_shortMonths = locale.shortMonths;

      var periodRe = formatRe(locale_periods),
          periodLookup = formatLookup(locale_periods),
          weekdayRe = formatRe(locale_weekdays),
          weekdayLookup = formatLookup(locale_weekdays),
          shortWeekdayRe = formatRe(locale_shortWeekdays),
          shortWeekdayLookup = formatLookup(locale_shortWeekdays),
          monthRe = formatRe(locale_months),
          monthLookup = formatLookup(locale_months),
          shortMonthRe = formatRe(locale_shortMonths),
          shortMonthLookup = formatLookup(locale_shortMonths);

      var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
      };

      var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
      };

      var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
      };

      // These recursive directive definitions must be deferred.
      formats.x = newFormat(locale_date, formats);
      formats.X = newFormat(locale_time, formats);
      formats.c = newFormat(locale_dateTime, formats);
      utcFormats.x = newFormat(locale_date, utcFormats);
      utcFormats.X = newFormat(locale_time, utcFormats);
      utcFormats.c = newFormat(locale_dateTime, utcFormats);

      function newFormat(specifier, formats) {
        return function(date) {
          var string = [],
              i = -1,
              j = 0,
              n = specifier.length,
              c,
              pad,
              format;

          if (!(date instanceof Date)) date = new Date(+date);

          while (++i < n) {
            if (specifier.charCodeAt(i) === 37) {
              string.push(specifier.slice(j, i));
              if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
              else pad = c === "e" ? " " : "0";
              if (format = formats[c]) c = format(date, pad);
              string.push(c);
              j = i + 1;
            }
          }

          string.push(specifier.slice(j, i));
          return string.join("");
        };
      }

      function newParse(specifier, Z) {
        return function(string) {
          var d = newDate(1900, undefined, 1),
              i = parseSpecifier(d, specifier, string += "", 0),
              week, day;
          if (i != string.length) return null;

          // If a UNIX timestamp is specified, return it.
          if ("Q" in d) return new Date(d.Q);
          if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

          // If this is utcParse, never use the local timezone.
          if (Z && !("Z" in d)) d.Z = 0;

          // The am-pm flag is 0 for AM, and 1 for PM.
          if ("p" in d) d.H = d.H % 12 + d.p * 12;

          // If the month was not specified, inherit from the quarter.
          if (d.m === undefined) d.m = "q" in d ? d.q : 0;

          // Convert day-of-week and week-of-year to day-of-year.
          if ("V" in d) {
            if (d.V < 1 || d.V > 53) return null;
            if (!("w" in d)) d.w = 1;
            if ("Z" in d) {
              week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
              week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
              week = utcDay$1.offset(week, (d.V - 1) * 7);
              d.y = week.getUTCFullYear();
              d.m = week.getUTCMonth();
              d.d = week.getUTCDate() + (d.w + 6) % 7;
            } else {
              week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
              week = day > 4 || day === 0 ? monday.ceil(week) : monday(week);
              week = timeDay.offset(week, (d.V - 1) * 7);
              d.y = week.getFullYear();
              d.m = week.getMonth();
              d.d = week.getDate() + (d.w + 6) % 7;
            }
          } else if ("W" in d || "U" in d) {
            if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
            day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
            d.m = 0;
            d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
          }

          // If a time zone is specified, all fields are interpreted as UTC and then
          // offset according to the specified time zone.
          if ("Z" in d) {
            d.H += d.Z / 100 | 0;
            d.M += d.Z % 100;
            return utcDate(d);
          }

          // Otherwise, all fields are in local time.
          return localDate(d);
        };
      }

      function parseSpecifier(d, specifier, string, j) {
        var i = 0,
            n = specifier.length,
            m = string.length,
            c,
            parse;

        while (i < n) {
          if (j >= m) return -1;
          c = specifier.charCodeAt(i++);
          if (c === 37) {
            c = specifier.charAt(i++);
            parse = parses[c in pads ? specifier.charAt(i++) : c];
            if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
          } else if (c != string.charCodeAt(j++)) {
            return -1;
          }
        }

        return j;
      }

      function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
      }

      function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
      }

      function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
      }

      function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
      }

      function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
      }

      function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
      }

      function formatMonth(d) {
        return locale_months[d.getMonth()];
      }

      function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
      }

      function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
      }

      function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
      }

      function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
      }

      function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
      }

      function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
      }

      function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
      }

      function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
      }

      return {
        format: function(specifier) {
          var f = newFormat(specifier += "", formats);
          f.toString = function() { return specifier; };
          return f;
        },
        parse: function(specifier) {
          var p = newParse(specifier += "", false);
          p.toString = function() { return specifier; };
          return p;
        },
        utcFormat: function(specifier) {
          var f = newFormat(specifier += "", utcFormats);
          f.toString = function() { return specifier; };
          return f;
        },
        utcParse: function(specifier) {
          var p = newParse(specifier += "", true);
          p.toString = function() { return specifier; };
          return p;
        }
      };
    }

    var pads = {"-": "", "_": " ", "0": "0"},
        numberRe = /^\s*\d+/, // note: ignores next directive
        percentRe = /^%/,
        requoteRe = /[\\^$*+?|[\]().{}]/g;

    function pad$1(value, fill, width) {
      var sign = value < 0 ? "-" : "",
          string = (sign ? -value : value) + "",
          length = string.length;
      return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }

    function requote(s) {
      return s.replace(requoteRe, "\\$&");
    }

    function formatRe(names) {
      return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }

    function formatLookup(names) {
      return new Map(names.map((name, i) => [name.toLowerCase(), i]));
    }

    function parseWeekdayNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.w = +n[0], i + n[0].length) : -1;
    }

    function parseWeekdayNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.u = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.U = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberISO(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.V = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.W = +n[0], i + n[0].length) : -1;
    }

    function parseFullYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 4));
      return n ? (d.y = +n[0], i + n[0].length) : -1;
    }

    function parseYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
    }

    function parseZone(d, string, i) {
      var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
      return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
    }

    function parseQuarter(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
    }

    function parseMonthNumber(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
    }

    function parseDayOfMonth(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.d = +n[0], i + n[0].length) : -1;
    }

    function parseDayOfYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
    }

    function parseHour24(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.H = +n[0], i + n[0].length) : -1;
    }

    function parseMinutes(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.M = +n[0], i + n[0].length) : -1;
    }

    function parseSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.S = +n[0], i + n[0].length) : -1;
    }

    function parseMilliseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.L = +n[0], i + n[0].length) : -1;
    }

    function parseMicroseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 6));
      return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
    }

    function parseLiteralPercent(d, string, i) {
      var n = percentRe.exec(string.slice(i, i + 1));
      return n ? i + n[0].length : -1;
    }

    function parseUnixTimestamp(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.Q = +n[0], i + n[0].length) : -1;
    }

    function parseUnixTimestampSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.s = +n[0], i + n[0].length) : -1;
    }

    function formatDayOfMonth(d, p) {
      return pad$1(d.getDate(), p, 2);
    }

    function formatHour24(d, p) {
      return pad$1(d.getHours(), p, 2);
    }

    function formatHour12(d, p) {
      return pad$1(d.getHours() % 12 || 12, p, 2);
    }

    function formatDayOfYear(d, p) {
      return pad$1(1 + timeDay.count(timeYear(d), d), p, 3);
    }

    function formatMilliseconds(d, p) {
      return pad$1(d.getMilliseconds(), p, 3);
    }

    function formatMicroseconds(d, p) {
      return formatMilliseconds(d, p) + "000";
    }

    function formatMonthNumber(d, p) {
      return pad$1(d.getMonth() + 1, p, 2);
    }

    function formatMinutes(d, p) {
      return pad$1(d.getMinutes(), p, 2);
    }

    function formatSeconds(d, p) {
      return pad$1(d.getSeconds(), p, 2);
    }

    function formatWeekdayNumberMonday(d) {
      var day = d.getDay();
      return day === 0 ? 7 : day;
    }

    function formatWeekNumberSunday(d, p) {
      return pad$1(sunday.count(timeYear(d) - 1, d), p, 2);
    }

    function dISO(d) {
      var day = d.getDay();
      return (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
    }

    function formatWeekNumberISO(d, p) {
      d = dISO(d);
      return pad$1(thursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
    }

    function formatWeekdayNumberSunday(d) {
      return d.getDay();
    }

    function formatWeekNumberMonday(d, p) {
      return pad$1(monday.count(timeYear(d) - 1, d), p, 2);
    }

    function formatYear(d, p) {
      return pad$1(d.getFullYear() % 100, p, 2);
    }

    function formatYearISO(d, p) {
      d = dISO(d);
      return pad$1(d.getFullYear() % 100, p, 2);
    }

    function formatFullYear(d, p) {
      return pad$1(d.getFullYear() % 10000, p, 4);
    }

    function formatFullYearISO(d, p) {
      var day = d.getDay();
      d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
      return pad$1(d.getFullYear() % 10000, p, 4);
    }

    function formatZone(d) {
      var z = d.getTimezoneOffset();
      return (z > 0 ? "-" : (z *= -1, "+"))
          + pad$1(z / 60 | 0, "0", 2)
          + pad$1(z % 60, "0", 2);
    }

    function formatUTCDayOfMonth(d, p) {
      return pad$1(d.getUTCDate(), p, 2);
    }

    function formatUTCHour24(d, p) {
      return pad$1(d.getUTCHours(), p, 2);
    }

    function formatUTCHour12(d, p) {
      return pad$1(d.getUTCHours() % 12 || 12, p, 2);
    }

    function formatUTCDayOfYear(d, p) {
      return pad$1(1 + utcDay$1.count(utcYear$1(d), d), p, 3);
    }

    function formatUTCMilliseconds(d, p) {
      return pad$1(d.getUTCMilliseconds(), p, 3);
    }

    function formatUTCMicroseconds(d, p) {
      return formatUTCMilliseconds(d, p) + "000";
    }

    function formatUTCMonthNumber(d, p) {
      return pad$1(d.getUTCMonth() + 1, p, 2);
    }

    function formatUTCMinutes(d, p) {
      return pad$1(d.getUTCMinutes(), p, 2);
    }

    function formatUTCSeconds(d, p) {
      return pad$1(d.getUTCSeconds(), p, 2);
    }

    function formatUTCWeekdayNumberMonday(d) {
      var dow = d.getUTCDay();
      return dow === 0 ? 7 : dow;
    }

    function formatUTCWeekNumberSunday(d, p) {
      return pad$1(utcSunday.count(utcYear$1(d) - 1, d), p, 2);
    }

    function UTCdISO(d) {
      var day = d.getUTCDay();
      return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
    }

    function formatUTCWeekNumberISO(d, p) {
      d = UTCdISO(d);
      return pad$1(utcThursday.count(utcYear$1(d), d) + (utcYear$1(d).getUTCDay() === 4), p, 2);
    }

    function formatUTCWeekdayNumberSunday(d) {
      return d.getUTCDay();
    }

    function formatUTCWeekNumberMonday(d, p) {
      return pad$1(utcMonday.count(utcYear$1(d) - 1, d), p, 2);
    }

    function formatUTCYear(d, p) {
      return pad$1(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCYearISO(d, p) {
      d = UTCdISO(d);
      return pad$1(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCFullYear(d, p) {
      return pad$1(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCFullYearISO(d, p) {
      var day = d.getUTCDay();
      d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
      return pad$1(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCZone() {
      return "+0000";
    }

    function formatLiteralPercent() {
      return "%";
    }

    function formatUnixTimestamp(d) {
      return +d;
    }

    function formatUnixTimestampSeconds(d) {
      return Math.floor(+d / 1000);
    }

    var locale;
    var timeFormat;
    var timeParse;
    var utcFormat;
    var utcParse;

    defaultLocale({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });

    function defaultLocale(definition) {
      locale = formatLocale(definition);
      timeFormat = locale.format;
      timeParse = locale.parse;
      utcFormat = locale.utcFormat;
      utcParse = locale.utcParse;
      return locale;
    }

    var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

    function formatIsoNative(date) {
      return date.toISOString();
    }

    var formatIso = Date.prototype.toISOString
        ? formatIsoNative
        : utcFormat(isoSpecifier);

    var formatIso$1 = formatIso;

    function parseIsoNative(string) {
      var date = new Date(string);
      return isNaN(date) ? null : date;
    }

    var parseIso = +new Date("2000-01-01T00:00:00.000Z")
        ? parseIsoNative
        : utcParse(isoSpecifier);

    var parseIso$1 = parseIso;

    function date(t) {
      return new Date(t);
    }

    function number(t) {
      return t instanceof Date ? +t : +new Date(+t);
    }

    function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
      var scale = continuous(),
          invert = scale.invert,
          domain = scale.domain;

      var formatMillisecond = format(".%L"),
          formatSecond = format(":%S"),
          formatMinute = format("%I:%M"),
          formatHour = format("%I %p"),
          formatDay = format("%a %d"),
          formatWeek = format("%b %d"),
          formatMonth = format("%B"),
          formatYear = format("%Y");

      function tickFormat(date) {
        return (second(date) < date ? formatMillisecond
            : minute(date) < date ? formatSecond
            : hour(date) < date ? formatMinute
            : day(date) < date ? formatHour
            : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
            : year(date) < date ? formatMonth
            : formatYear)(date);
      }

      scale.invert = function(y) {
        return new Date(invert(y));
      };

      scale.domain = function(_) {
        return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
      };

      scale.ticks = function(interval) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
      };

      scale.tickFormat = function(count, specifier) {
        return specifier == null ? tickFormat : format(specifier);
      };

      scale.nice = function(interval) {
        var d = domain();
        if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
        return interval ? domain(nice(d, interval)) : scale;
      };

      scale.copy = function() {
        return copy$1(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
      };

      return scale;
    }

    function time$1() {
      return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, sunday, timeDay, timeHour, timeMinute, utcSecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
    }

    function utcTime() {
      return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear$1, utcMonth$1, utcSunday, utcDay$1, utcHour$1, utcMinute$1, utcSecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
    }

    function transformer$1() {
      var x0 = 0,
          x1 = 1,
          t0,
          t1,
          k10,
          transform,
          interpolator = identity$5,
          clamp = false,
          unknown;

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
      }

      scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      function range(interpolate) {
        return function(_) {
          var r0, r1;
          return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
        };
      }

      scale.range = range(interpolate$2);

      scale.rangeRound = range(interpolateRound);

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
        return scale;
      };
    }

    function copy(source, target) {
      return target
          .domain(source.domain())
          .interpolator(source.interpolator())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function sequential() {
      var scale = linearish(transformer$1()(identity$5));

      scale.copy = function() {
        return copy(scale, sequential());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialLog() {
      var scale = loggish(transformer$1()).domain([1, 10]);

      scale.copy = function() {
        return copy(scale, sequentialLog()).base(scale.base());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialSymlog() {
      var scale = symlogish(transformer$1());

      scale.copy = function() {
        return copy(scale, sequentialSymlog()).constant(scale.constant());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialPow() {
      var scale = powish(transformer$1());

      scale.copy = function() {
        return copy(scale, sequentialPow()).exponent(scale.exponent());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialSqrt() {
      return sequentialPow.apply(null, arguments).exponent(0.5);
    }

    function sequentialQuantile() {
      var domain = [],
          interpolator = identity$5;

      function scale(x) {
        if (x != null && !isNaN(x = +x)) return interpolator((bisect(domain, x, 1) - 1) / (domain.length - 1));
      }

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(ascending$3);
        return scale;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      scale.range = function() {
        return domain.map((d, i) => interpolator(i / (domain.length - 1)));
      };

      scale.quantiles = function(n) {
        return Array.from({length: n + 1}, (_, i) => quantile$1(domain, i / n));
      };

      scale.copy = function() {
        return sequentialQuantile(interpolator).domain(domain);
      };

      return initInterpolator.apply(scale, arguments);
    }

    function transformer() {
      var x0 = 0,
          x1 = 0.5,
          x2 = 1,
          s = 1,
          t0,
          t1,
          t2,
          k10,
          k21,
          interpolator = identity$5,
          transform,
          clamp = false,
          unknown;

      function scale(x) {
        return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
      }

      scale.domain = function(_) {
        return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      function range(interpolate) {
        return function(_) {
          var r0, r1, r2;
          return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
        };
      }

      scale.range = range(interpolate$2);

      scale.rangeRound = range(interpolateRound);

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
        return scale;
      };
    }

    function diverging$1() {
      var scale = linearish(transformer()(identity$5));

      scale.copy = function() {
        return copy(scale, diverging$1());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingLog() {
      var scale = loggish(transformer()).domain([0.1, 1, 10]);

      scale.copy = function() {
        return copy(scale, divergingLog()).base(scale.base());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingSymlog() {
      var scale = symlogish(transformer());

      scale.copy = function() {
        return copy(scale, divergingSymlog()).constant(scale.constant());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingPow() {
      var scale = powish(transformer());

      scale.copy = function() {
        return copy(scale, divergingPow()).exponent(scale.exponent());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingSqrt() {
      return divergingPow.apply(null, arguments).exponent(0.5);
    }

    function colors(specifier) {
      var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
      while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
      return colors;
    }

    var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

    var Accent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

    var Dark2 = colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

    var Paired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

    var Pastel1 = colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

    var Pastel2 = colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

    var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

    var Set2 = colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

    var Set3 = colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

    var Tableau10 = colors("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

    var ramp$1 = scheme => rgbBasis(scheme[scheme.length - 1]);

    var scheme$q = new Array(3).concat(
      "d8b365f5f5f55ab4ac",
      "a6611adfc27d80cdc1018571",
      "a6611adfc27df5f5f580cdc1018571",
      "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
      "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
      "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
      "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
      "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
      "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
    ).map(colors);

    var BrBG = ramp$1(scheme$q);

    var scheme$p = new Array(3).concat(
      "af8dc3f7f7f77fbf7b",
      "7b3294c2a5cfa6dba0008837",
      "7b3294c2a5cff7f7f7a6dba0008837",
      "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
      "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
      "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
      "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
      "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
      "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
    ).map(colors);

    var PRGn = ramp$1(scheme$p);

    var scheme$o = new Array(3).concat(
      "e9a3c9f7f7f7a1d76a",
      "d01c8bf1b6dab8e1864dac26",
      "d01c8bf1b6daf7f7f7b8e1864dac26",
      "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
      "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
      "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
      "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
      "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
      "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
    ).map(colors);

    var PiYG = ramp$1(scheme$o);

    var scheme$n = new Array(3).concat(
      "998ec3f7f7f7f1a340",
      "5e3c99b2abd2fdb863e66101",
      "5e3c99b2abd2f7f7f7fdb863e66101",
      "542788998ec3d8daebfee0b6f1a340b35806",
      "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
      "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
      "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
      "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
      "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
    ).map(colors);

    var PuOr = ramp$1(scheme$n);

    var scheme$m = new Array(3).concat(
      "ef8a62f7f7f767a9cf",
      "ca0020f4a58292c5de0571b0",
      "ca0020f4a582f7f7f792c5de0571b0",
      "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
      "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
      "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
      "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
      "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
      "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
    ).map(colors);

    var RdBu = ramp$1(scheme$m);

    var scheme$l = new Array(3).concat(
      "ef8a62ffffff999999",
      "ca0020f4a582bababa404040",
      "ca0020f4a582ffffffbababa404040",
      "b2182bef8a62fddbc7e0e0e09999994d4d4d",
      "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
      "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
      "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
      "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
      "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
    ).map(colors);

    var RdGy = ramp$1(scheme$l);

    var scheme$k = new Array(3).concat(
      "fc8d59ffffbf91bfdb",
      "d7191cfdae61abd9e92c7bb6",
      "d7191cfdae61ffffbfabd9e92c7bb6",
      "d73027fc8d59fee090e0f3f891bfdb4575b4",
      "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
      "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
      "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
      "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
      "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
    ).map(colors);

    var RdYlBu = ramp$1(scheme$k);

    var scheme$j = new Array(3).concat(
      "fc8d59ffffbf91cf60",
      "d7191cfdae61a6d96a1a9641",
      "d7191cfdae61ffffbfa6d96a1a9641",
      "d73027fc8d59fee08bd9ef8b91cf601a9850",
      "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
      "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
      "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
      "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
      "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
    ).map(colors);

    var RdYlGn = ramp$1(scheme$j);

    var scheme$i = new Array(3).concat(
      "fc8d59ffffbf99d594",
      "d7191cfdae61abdda42b83ba",
      "d7191cfdae61ffffbfabdda42b83ba",
      "d53e4ffc8d59fee08be6f59899d5943288bd",
      "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
      "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
      "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
      "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
      "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
    ).map(colors);

    var Spectral = ramp$1(scheme$i);

    var scheme$h = new Array(3).concat(
      "e5f5f999d8c92ca25f",
      "edf8fbb2e2e266c2a4238b45",
      "edf8fbb2e2e266c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
    ).map(colors);

    var BuGn = ramp$1(scheme$h);

    var scheme$g = new Array(3).concat(
      "e0ecf49ebcda8856a7",
      "edf8fbb3cde38c96c688419d",
      "edf8fbb3cde38c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
    ).map(colors);

    var BuPu = ramp$1(scheme$g);

    var scheme$f = new Array(3).concat(
      "e0f3dba8ddb543a2ca",
      "f0f9e8bae4bc7bccc42b8cbe",
      "f0f9e8bae4bc7bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
    ).map(colors);

    var GnBu = ramp$1(scheme$f);

    var scheme$e = new Array(3).concat(
      "fee8c8fdbb84e34a33",
      "fef0d9fdcc8afc8d59d7301f",
      "fef0d9fdcc8afc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
    ).map(colors);

    var OrRd = ramp$1(scheme$e);

    var scheme$d = new Array(3).concat(
      "ece2f0a6bddb1c9099",
      "f6eff7bdc9e167a9cf02818a",
      "f6eff7bdc9e167a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
    ).map(colors);

    var PuBuGn = ramp$1(scheme$d);

    var scheme$c = new Array(3).concat(
      "ece7f2a6bddb2b8cbe",
      "f1eef6bdc9e174a9cf0570b0",
      "f1eef6bdc9e174a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
    ).map(colors);

    var PuBu = ramp$1(scheme$c);

    var scheme$b = new Array(3).concat(
      "e7e1efc994c7dd1c77",
      "f1eef6d7b5d8df65b0ce1256",
      "f1eef6d7b5d8df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
    ).map(colors);

    var PuRd = ramp$1(scheme$b);

    var scheme$a = new Array(3).concat(
      "fde0ddfa9fb5c51b8a",
      "feebe2fbb4b9f768a1ae017e",
      "feebe2fbb4b9f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
    ).map(colors);

    var RdPu = ramp$1(scheme$a);

    var scheme$9 = new Array(3).concat(
      "edf8b17fcdbb2c7fb8",
      "ffffcca1dab441b6c4225ea8",
      "ffffcca1dab441b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
    ).map(colors);

    var YlGnBu = ramp$1(scheme$9);

    var scheme$8 = new Array(3).concat(
      "f7fcb9addd8e31a354",
      "ffffccc2e69978c679238443",
      "ffffccc2e69978c67931a354006837",
      "ffffccd9f0a3addd8e78c67931a354006837",
      "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
    ).map(colors);

    var YlGn = ramp$1(scheme$8);

    var scheme$7 = new Array(3).concat(
      "fff7bcfec44fd95f0e",
      "ffffd4fed98efe9929cc4c02",
      "ffffd4fed98efe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
    ).map(colors);

    var YlOrBr = ramp$1(scheme$7);

    var scheme$6 = new Array(3).concat(
      "ffeda0feb24cf03b20",
      "ffffb2fecc5cfd8d3ce31a1c",
      "ffffb2fecc5cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
    ).map(colors);

    var YlOrRd = ramp$1(scheme$6);

    var scheme$5 = new Array(3).concat(
      "deebf79ecae13182bd",
      "eff3ffbdd7e76baed62171b5",
      "eff3ffbdd7e76baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
    ).map(colors);

    var Blues = ramp$1(scheme$5);

    var scheme$4 = new Array(3).concat(
      "e5f5e0a1d99b31a354",
      "edf8e9bae4b374c476238b45",
      "edf8e9bae4b374c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
    ).map(colors);

    var Greens = ramp$1(scheme$4);

    var scheme$3 = new Array(3).concat(
      "f0f0f0bdbdbd636363",
      "f7f7f7cccccc969696525252",
      "f7f7f7cccccc969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
    ).map(colors);

    var Greys = ramp$1(scheme$3);

    var scheme$2 = new Array(3).concat(
      "efedf5bcbddc756bb1",
      "f2f0f7cbc9e29e9ac86a51a3",
      "f2f0f7cbc9e29e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
    ).map(colors);

    var Purples = ramp$1(scheme$2);

    var scheme$1 = new Array(3).concat(
      "fee0d2fc9272de2d26",
      "fee5d9fcae91fb6a4acb181d",
      "fee5d9fcae91fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
    ).map(colors);

    var Reds = ramp$1(scheme$1);

    var scheme = new Array(3).concat(
      "fee6cefdae6be6550d",
      "feeddefdbe85fd8d3cd94701",
      "feeddefdbe85fd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
    ).map(colors);

    var Oranges = ramp$1(scheme);

    function cividis(t) {
      t = Math.max(0, Math.min(1, t));
      return "rgb("
          + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))
          + ")";
    }

    var cubehelix = cubehelixLong(cubehelix$3(300, 0.5, 0.0), cubehelix$3(-240, 0.5, 1.0));

    var warm = cubehelixLong(cubehelix$3(-100, 0.75, 0.35), cubehelix$3(80, 1.50, 0.8));

    var cool = cubehelixLong(cubehelix$3(260, 0.75, 0.35), cubehelix$3(80, 1.50, 0.8));

    var c$2 = cubehelix$3();

    function rainbow(t) {
      if (t < 0 || t > 1) t -= Math.floor(t);
      var ts = Math.abs(t - 0.5);
      c$2.h = 360 * t - 100;
      c$2.s = 1.5 - 1.5 * ts;
      c$2.l = 0.8 - 0.9 * ts;
      return c$2 + "";
    }

    var c$1 = rgb(),
        pi_1_3 = Math.PI / 3,
        pi_2_3 = Math.PI * 2 / 3;

    function sinebow(t) {
      var x;
      t = (0.5 - t) * Math.PI;
      c$1.r = 255 * (x = Math.sin(t)) * x;
      c$1.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
      c$1.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
      return c$1 + "";
    }

    function turbo(t) {
      t = Math.max(0, Math.min(1, t));
      return "rgb("
          + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))
          + ")";
    }

    function ramp(range) {
      var n = range.length;
      return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
      };
    }

    var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

    var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

    var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

    var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

    function constant$1(x) {
      return function constant() {
        return x;
      };
    }

    const abs$3 = Math.abs;
    const atan2$3 = Math.atan2;
    const cos$3 = Math.cos;
    const max$3 = Math.max;
    const min$3 = Math.min;
    const sin$3 = Math.sin;
    const sqrt$3 = Math.sqrt;

    const epsilon$1 = 1e-12;
    const pi = Math.PI;
    const halfPi = pi / 2;
    const tau = 2 * pi;

    function acos$3(x) {
      return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
    }

    function asin$3(x) {
      return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
    }

    function arcInnerRadius(d) {
      return d.innerRadius;
    }

    function arcOuterRadius(d) {
      return d.outerRadius;
    }

    function arcStartAngle(d) {
      return d.startAngle;
    }

    function arcEndAngle(d) {
      return d.endAngle;
    }

    function arcPadAngle(d) {
      return d && d.padAngle; // Note: optional!
    }

    function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
      var x10 = x1 - x0, y10 = y1 - y0,
          x32 = x3 - x2, y32 = y3 - y2,
          t = y32 * x10 - x32 * y10;
      if (t * t < epsilon$1) return;
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
      return [x0 + t * x10, y0 + t * y10];
    }

    // Compute perpendicular offset line of length rc.
    // http://mathworld.wolfram.com/Circle-LineIntersection.html
    function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
      var x01 = x0 - x1,
          y01 = y0 - y1,
          lo = (cw ? rc : -rc) / sqrt$3(x01 * x01 + y01 * y01),
          ox = lo * y01,
          oy = -lo * x01,
          x11 = x0 + ox,
          y11 = y0 + oy,
          x10 = x1 + ox,
          y10 = y1 + oy,
          x00 = (x11 + x10) / 2,
          y00 = (y11 + y10) / 2,
          dx = x10 - x11,
          dy = y10 - y11,
          d2 = dx * dx + dy * dy,
          r = r1 - rc,
          D = x11 * y10 - x10 * y11,
          d = (dy < 0 ? -1 : 1) * sqrt$3(max$3(0, r * r * d2 - D * D)),
          cx0 = (D * dy - dx * d) / d2,
          cy0 = (-D * dx - dy * d) / d2,
          cx1 = (D * dy + dx * d) / d2,
          cy1 = (-D * dx + dy * d) / d2,
          dx0 = cx0 - x00,
          dy0 = cy0 - y00,
          dx1 = cx1 - x00,
          dy1 = cy1 - y00;

      // Pick the closer of the two intersection points.
      // TODO Is there a faster way to determine which intersection to use?
      if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

      return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
      };
    }

    function arc() {
      var innerRadius = arcInnerRadius,
          outerRadius = arcOuterRadius,
          cornerRadius = constant$1(0),
          padRadius = null,
          startAngle = arcStartAngle,
          endAngle = arcEndAngle,
          padAngle = arcPadAngle,
          context = null;

      function arc() {
        var buffer,
            r,
            r0 = +innerRadius.apply(this, arguments),
            r1 = +outerRadius.apply(this, arguments),
            a0 = startAngle.apply(this, arguments) - halfPi,
            a1 = endAngle.apply(this, arguments) - halfPi,
            da = abs$3(a1 - a0),
            cw = a1 > a0;

        if (!context) context = buffer = path();

        // Ensure that the outer radius is always larger than the inner radius.
        if (r1 < r0) r = r1, r1 = r0, r0 = r;

        // Is it a point?
        if (!(r1 > epsilon$1)) context.moveTo(0, 0);

        // Or is it a circle or annulus?
        else if (da > tau - epsilon$1) {
          context.moveTo(r1 * cos$3(a0), r1 * sin$3(a0));
          context.arc(0, 0, r1, a0, a1, !cw);
          if (r0 > epsilon$1) {
            context.moveTo(r0 * cos$3(a1), r0 * sin$3(a1));
            context.arc(0, 0, r0, a1, a0, cw);
          }
        }

        // Or is it a circular or annular sector?
        else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : sqrt$3(r0 * r0 + r1 * r1)),
              rc = min$3(abs$3(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1;

          // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
          if (rp > epsilon$1) {
            var p0 = asin$3(rp / r0 * sin$3(ap)),
                p1 = asin$3(rp / r1 * sin$3(ap));
            if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
            else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
            else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * cos$3(a01),
              y01 = r1 * sin$3(a01),
              x10 = r0 * cos$3(a10),
              y10 = r0 * sin$3(a10);

          // Apply rounded corners?
          if (rc > epsilon$1) {
            var x11 = r1 * cos$3(a11),
                y11 = r1 * sin$3(a11),
                x00 = r0 * cos$3(a00),
                y00 = r0 * sin$3(a00),
                oc;

            // Restrict the corner radius according to the sector angle.
            if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / sin$3(acos$3((ax * bx + ay * by) / (sqrt$3(ax * ax + ay * ay) * sqrt$3(bx * bx + by * by))) / 2),
                  lc = sqrt$3(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = min$3(rc, (r0 - lc) / (kc - 1));
              rc1 = min$3(rc, (r1 - lc) / (kc + 1));
            }
          }

          // Is the sector collapsed to a line?
          if (!(da1 > epsilon$1)) context.moveTo(x01, y01);

          // Does the sector’s outer ring have rounded corners?
          else if (rc1 > epsilon$1) {
            t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
            t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

            context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$3(t0.y01, t0.x01), atan2$3(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc1, atan2$3(t0.y01, t0.x01), atan2$3(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r1, atan2$3(t0.cy + t0.y11, t0.cx + t0.x11), atan2$3(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
              context.arc(t1.cx, t1.cy, rc1, atan2$3(t1.y11, t1.x11), atan2$3(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the outer ring just a circular arc?
          else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

          // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?
          if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);

          // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > epsilon$1) {
            t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
            t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

            context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$3(t0.y01, t0.x01), atan2$3(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc0, atan2$3(t0.y01, t0.x01), atan2$3(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r0, atan2$3(t0.cy + t0.y11, t0.cx + t0.x11), atan2$3(t1.cy + t1.y11, t1.cx + t1.x11), cw);
              context.arc(t1.cx, t1.cy, rc0, atan2$3(t1.y11, t1.x11), atan2$3(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the inner ring just a circular arc?
          else context.arc(0, 0, r0, a10, a00, cw);
        }

        context.closePath();

        if (buffer) return context = null, buffer + "" || null;
      }

      arc.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
            a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
        return [cos$3(a) * r, sin$3(a) * r];
      };

      arc.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : innerRadius;
      };

      arc.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : outerRadius;
      };

      arc.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : cornerRadius;
      };

      arc.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), arc) : padRadius;
      };

      arc.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : startAngle;
      };

      arc.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : endAngle;
      };

      arc.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : padAngle;
      };

      arc.context = function(_) {
        return arguments.length ? ((context = _ == null ? null : _), arc) : context;
      };

      return arc;
    }

    var slice$3 = Array.prototype.slice;

    function array(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function Linear(context) {
      this._context = context;
    }

    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // falls through
          default: this._context.lineTo(x, y); break;
        }
      }
    };

    function curveLinear(context) {
      return new Linear(context);
    }

    function x$1(p) {
      return p[0];
    }

    function y(p) {
      return p[1];
    }

    function line(x, y$1) {
      var defined = constant$1(true),
          context = null,
          curve = curveLinear,
          output = null;

      x = typeof x === "function" ? x : (x === undefined) ? x$1 : constant$1(x);
      y$1 = typeof y$1 === "function" ? y$1 : (y$1 === undefined) ? y : constant$1(y$1);

      function line(data) {
        var i,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer;

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) output.lineStart();
            else output.lineEnd();
          }
          if (defined0) output.point(+x(d, i, data), +y$1(d, i, data));
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      line.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$1(+_), line) : x;
      };

      line.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$1(+_), line) : y$1;
      };

      line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), line) : defined;
      };

      line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
      };

      line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
      };

      return line;
    }

    function area(x0, y0, y1) {
      var x1 = null,
          defined = constant$1(true),
          context = null,
          curve = curveLinear,
          output = null;

      x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? x$1 : constant$1(+x0);
      y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? constant$1(0) : constant$1(+y0);
      y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? y : constant$1(+y1);

      function area(data) {
        var i,
            j,
            k,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer,
            x0z = new Array(n),
            y0z = new Array(n);

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) {
              j = i;
              output.areaStart();
              output.lineStart();
            } else {
              output.lineEnd();
              output.lineStart();
              for (k = i - 1; k >= j; --k) {
                output.point(x0z[k], y0z[k]);
              }
              output.lineEnd();
              output.areaEnd();
            }
          }
          if (defined0) {
            x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
            output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
          }
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      function arealine() {
        return line().defined(defined).curve(curve).context(context);
      }

      area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), x1 = null, area) : x0;
      };

      area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), area) : x0;
      };

      area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : x1;
      };

      area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), y1 = null, area) : y0;
      };

      area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), area) : y0;
      };

      area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : y1;
      };

      area.lineX0 =
      area.lineY0 = function() {
        return arealine().x(x0).y(y0);
      };

      area.lineY1 = function() {
        return arealine().x(x0).y(y1);
      };

      area.lineX1 = function() {
        return arealine().x(x1).y(y0);
      };

      area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), area) : defined;
      };

      area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
      };

      area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
      };

      return area;
    }

    function descending$1(a, b) {
      return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }

    function identity$3(d) {
      return d;
    }

    function pie() {
      var value = identity$3,
          sortValues = descending$1,
          sort = null,
          startAngle = constant$1(0),
          endAngle = constant$1(tau),
          padAngle = constant$1(0);

      function pie(data) {
        var i,
            n = (data = array(data)).length,
            j,
            k,
            sum = 0,
            index = new Array(n),
            arcs = new Array(n),
            a0 = +startAngle.apply(this, arguments),
            da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
            a1,
            p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
            pa = p * (da < 0 ? -1 : 1),
            v;

        for (i = 0; i < n; ++i) {
          if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
            sum += v;
          }
        }

        // Optionally sort the arcs by previously-computed values or by data.
        if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
        else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

        // Compute the arcs! They are stored in the original data's order.
        for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
          j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
            data: data[j],
            index: i,
            value: v,
            startAngle: a0,
            endAngle: a1,
            padAngle: p
          };
        }

        return arcs;
      }

      pie.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(+_), pie) : value;
      };

      pie.sortValues = function(_) {
        return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
      };

      pie.sort = function(_) {
        return arguments.length ? (sort = _, sortValues = null, pie) : sort;
      };

      pie.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : startAngle;
      };

      pie.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : endAngle;
      };

      pie.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : padAngle;
      };

      return pie;
    }

    var curveRadialLinear = curveRadial(curveLinear);

    function Radial(curve) {
      this._curve = curve;
    }

    Radial.prototype = {
      areaStart: function() {
        this._curve.areaStart();
      },
      areaEnd: function() {
        this._curve.areaEnd();
      },
      lineStart: function() {
        this._curve.lineStart();
      },
      lineEnd: function() {
        this._curve.lineEnd();
      },
      point: function(a, r) {
        this._curve.point(r * Math.sin(a), r * -Math.cos(a));
      }
    };

    function curveRadial(curve) {

      function radial(context) {
        return new Radial(curve(context));
      }

      radial._curve = curve;

      return radial;
    }

    function lineRadial(l) {
      var c = l.curve;

      l.angle = l.x, delete l.x;
      l.radius = l.y, delete l.y;

      l.curve = function(_) {
        return arguments.length ? c(curveRadial(_)) : c()._curve;
      };

      return l;
    }

    function lineRadial$1() {
      return lineRadial(line().curve(curveRadialLinear));
    }

    function areaRadial() {
      var a = area().curve(curveRadialLinear),
          c = a.curve,
          x0 = a.lineX0,
          x1 = a.lineX1,
          y0 = a.lineY0,
          y1 = a.lineY1;

      a.angle = a.x, delete a.x;
      a.startAngle = a.x0, delete a.x0;
      a.endAngle = a.x1, delete a.x1;
      a.radius = a.y, delete a.y;
      a.innerRadius = a.y0, delete a.y0;
      a.outerRadius = a.y1, delete a.y1;
      a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
      a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
      a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
      a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

      a.curve = function(_) {
        return arguments.length ? c(curveRadial(_)) : c()._curve;
      };

      return a;
    }

    function pointRadial(x, y) {
      return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
    }

    class Bump {
      constructor(context, x) {
        this._context = context;
        this._x = x;
      }
      areaStart() {
        this._line = 0;
      }
      areaEnd() {
        this._line = NaN;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      }
      point(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: {
            this._point = 1;
            if (this._line) this._context.lineTo(x, y);
            else this._context.moveTo(x, y);
            break;
          }
          case 1: this._point = 2; // falls through
          default: {
            if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);
            else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);
            break;
          }
        }
        this._x0 = x, this._y0 = y;
      }
    }

    class BumpRadial {
      constructor(context) {
        this._context = context;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {}
      point(x, y) {
        x = +x, y = +y;
        if (this._point++ === 0) {
          this._x0 = x, this._y0 = y;
        } else {
          const p0 = pointRadial(this._x0, this._y0);
          const p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);
          const p2 = pointRadial(x, this._y0);
          const p3 = pointRadial(x, y);
          this._context.moveTo(...p0);
          this._context.bezierCurveTo(...p1, ...p2, ...p3);
        }
      }
    }

    function bumpX(context) {
      return new Bump(context, true);
    }

    function bumpY(context) {
      return new Bump(context, false);
    }

    function bumpRadial(context) {
      return new BumpRadial(context);
    }

    function linkSource(d) {
      return d.source;
    }

    function linkTarget(d) {
      return d.target;
    }

    function link(curve) {
      let source = linkSource;
      let target = linkTarget;
      let x = x$1;
      let y$1 = y;
      let context = null;
      let output = null;

      function link() {
        let buffer;
        const argv = slice$3.call(arguments);
        const s = source.apply(this, argv);
        const t = target.apply(this, argv);
        if (context == null) output = curve(buffer = path());
        output.lineStart();
        argv[0] = s, output.point(+x.apply(this, argv), +y$1.apply(this, argv));
        argv[0] = t, output.point(+x.apply(this, argv), +y$1.apply(this, argv));
        output.lineEnd();
        if (buffer) return output = null, buffer + "" || null;
      }

      link.source = function(_) {
        return arguments.length ? (source = _, link) : source;
      };

      link.target = function(_) {
        return arguments.length ? (target = _, link) : target;
      };

      link.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$1(+_), link) : x;
      };

      link.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$1(+_), link) : y$1;
      };

      link.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link) : context;
      };

      return link;
    }

    function linkHorizontal() {
      return link(bumpX);
    }

    function linkVertical() {
      return link(bumpY);
    }

    function linkRadial() {
      const l = link(bumpRadial);
      l.angle = l.x, delete l.x;
      l.radius = l.y, delete l.y;
      return l;
    }

    const sqrt3$2 = sqrt$3(3);

    var asterisk = {
      draw(context, size) {
        const r = sqrt$3(size + min$3(size / 28, 0.75)) * 0.59436;
        const t = r / 2;
        const u = t * sqrt3$2;
        context.moveTo(0, r);
        context.lineTo(0, -r);
        context.moveTo(-u, -t);
        context.lineTo(u, t);
        context.moveTo(-u, t);
        context.lineTo(u, -t);
      }
    };

    var circle = {
      draw(context, size) {
        const r = sqrt$3(size / pi);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau);
      }
    };

    var cross = {
      draw(context, size) {
        const r = sqrt$3(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
      }
    };

    const tan30 = sqrt$3(1 / 3);
    const tan30_2 = tan30 * 2;

    var diamond = {
      draw(context, size) {
        const y = sqrt$3(size / tan30_2);
        const x = y * tan30;
        context.moveTo(0, -y);
        context.lineTo(x, 0);
        context.lineTo(0, y);
        context.lineTo(-x, 0);
        context.closePath();
      }
    };

    var diamond2 = {
      draw(context, size) {
        const r = sqrt$3(size) * 0.62625;
        context.moveTo(0, -r);
        context.lineTo(r, 0);
        context.lineTo(0, r);
        context.lineTo(-r, 0);
        context.closePath();
      }
    };

    var plus = {
      draw(context, size) {
        const r = sqrt$3(size - min$3(size / 7, 2)) * 0.87559;
        context.moveTo(-r, 0);
        context.lineTo(r, 0);
        context.moveTo(0, r);
        context.lineTo(0, -r);
      }
    };

    var square$2 = {
      draw(context, size) {
        const w = sqrt$3(size);
        const x = -w / 2;
        context.rect(x, x, w, w);
      }
    };

    var square2 = {
      draw(context, size) {
        const r = sqrt$3(size) * 0.4431;
        context.moveTo(r, r);
        context.lineTo(r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, r);
        context.closePath();
      }
    };

    const ka = 0.89081309152928522810;
    const kr = sin$3(pi / 10) / sin$3(7 * pi / 10);
    const kx = sin$3(tau / 10) * kr;
    const ky = -cos$3(tau / 10) * kr;

    var star = {
      draw(context, size) {
        const r = sqrt$3(size * ka);
        const x = kx * r;
        const y = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x, y);
        for (let i = 1; i < 5; ++i) {
          const a = tau * i / 5;
          const c = cos$3(a);
          const s = sin$3(a);
          context.lineTo(s * r, -c * r);
          context.lineTo(c * x - s * y, s * x + c * y);
        }
        context.closePath();
      }
    };

    const sqrt3$1 = sqrt$3(3);

    var triangle = {
      draw(context, size) {
        const y = -sqrt$3(size / (sqrt3$1 * 3));
        context.moveTo(0, y * 2);
        context.lineTo(-sqrt3$1 * y, -y);
        context.lineTo(sqrt3$1 * y, -y);
        context.closePath();
      }
    };

    const sqrt3 = sqrt$3(3);

    var triangle2 = {
      draw(context, size) {
        const s = sqrt$3(size) * 0.6824;
        const t = s  / 2;
        const u = (s * sqrt3) / 2; // cos(Math.PI / 6)
        context.moveTo(0, -s);
        context.lineTo(u, t);
        context.lineTo(-u, t);
        context.closePath();
      }
    };

    const c = -0.5;
    const s = sqrt$3(3) / 2;
    const k = 1 / sqrt$3(12);
    const a = (k / 2 + 1) * 3;

    var wye = {
      draw(context, size) {
        const r = sqrt$3(size / a);
        const x0 = r / 2, y0 = r * k;
        const x1 = x0, y1 = r * k + r;
        const x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
      }
    };

    var x = {
      draw(context, size) {
        const r = sqrt$3(size - min$3(size / 6, 1.7)) * 0.6189;
        context.moveTo(-r, -r);
        context.lineTo(r, r);
        context.moveTo(-r, r);
        context.lineTo(r, -r);
      }
    };

    // These symbols are designed to be filled.
    const symbolsFill = [
      circle,
      cross,
      diamond,
      square$2,
      star,
      triangle,
      wye
    ];

    // These symbols are designed to be stroked (with a width of 1.5px and round caps).
    const symbolsStroke = [
      circle,
      plus,
      x,
      triangle2,
      asterisk,
      square2,
      diamond2
    ];

    function Symbol$1(type, size) {
      let context = null;

      type = typeof type === "function" ? type : constant$1(type || circle);
      size = typeof size === "function" ? size : constant$1(size === undefined ? 64 : +size);

      function symbol() {
        let buffer;
        if (!context) context = buffer = path();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer) return context = null, buffer + "" || null;
      }

      symbol.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : constant$1(_), symbol) : type;
      };

      symbol.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : constant$1(+_), symbol) : size;
      };

      symbol.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
      };

      return symbol;
    }

    function noop() {}

    function point$3(that, x, y) {
      that._context.bezierCurveTo(
        (2 * that._x0 + that._x1) / 3,
        (2 * that._y0 + that._y1) / 3,
        (that._x0 + 2 * that._x1) / 3,
        (that._y0 + 2 * that._y1) / 3,
        (that._x0 + 4 * that._x1 + x) / 6,
        (that._y0 + 4 * that._y1 + y) / 6
      );
    }

    function Basis(context) {
      this._context = context;
    }

    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3: point$3(this, this._x1, this._y1); // falls through
          case 2: this._context.lineTo(this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // falls through
          default: point$3(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function basis(context) {
      return new Basis(context);
    }

    function BasisClosed(context) {
      this._context = context;
    }

    BasisClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
          case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
          case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
          default: point$3(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function basisClosed(context) {
      return new BasisClosed(context);
    }

    function BasisOpen(context) {
      this._context = context;
    }

    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
          case 3: this._point = 4; // falls through
          default: point$3(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function basisOpen(context) {
      return new BasisOpen(context);
    }

    function Bundle(context, beta) {
      this._basis = new Basis(context);
      this._beta = beta;
    }

    Bundle.prototype = {
      lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
      },
      lineEnd: function() {
        var x = this._x,
            y = this._y,
            j = x.length - 1;

        if (j > 0) {
          var x0 = x[0],
              y0 = y[0],
              dx = x[j] - x0,
              dy = y[j] - y0,
              i = -1,
              t;

          while (++i <= j) {
            t = i / j;
            this._basis.point(
              this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
              this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
            );
          }
        }

        this._x = this._y = null;
        this._basis.lineEnd();
      },
      point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
      }
    };

    var bundle = (function custom(beta) {

      function bundle(context) {
        return beta === 1 ? new Basis(context) : new Bundle(context, beta);
      }

      bundle.beta = function(beta) {
        return custom(+beta);
      };

      return bundle;
    })(0.85);

    function point$2(that, x, y) {
      that._context.bezierCurveTo(
        that._x1 + that._k * (that._x2 - that._x0),
        that._y1 + that._k * (that._y2 - that._y0),
        that._x2 + that._k * (that._x1 - x),
        that._y2 + that._k * (that._y1 - y),
        that._x2,
        that._y2
      );
    }

    function Cardinal(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x2, this._y2); break;
          case 3: point$2(this, this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
          case 2: this._point = 3; // falls through
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var cardinal = (function custom(tension) {

      function cardinal(context) {
        return new Cardinal(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function CardinalClosed(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    CardinalClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
          case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
          case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var cardinalClosed = (function custom(tension) {

      function cardinal(context) {
        return new CardinalClosed(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function CardinalOpen(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    CardinalOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
          case 3: this._point = 4; // falls through
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var cardinalOpen = (function custom(tension) {

      function cardinal(context) {
        return new CardinalOpen(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function point$1(that, x, y) {
      var x1 = that._x1,
          y1 = that._y1,
          x2 = that._x2,
          y2 = that._y2;

      if (that._l01_a > epsilon$1) {
        var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
            n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
      }

      if (that._l23_a > epsilon$1) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
            m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
        y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
      }

      that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
    }

    function CatmullRom(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRom.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x2, this._y2); break;
          case 3: this.point(this._x2, this._y2); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; // falls through
          default: point$1(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var catmullRom = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function CatmullRomClosed(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRomClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
          case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
          case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
          default: point$1(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var catmullRomClosed = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function CatmullRomOpen(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRomOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
          case 3: this._point = 4; // falls through
          default: point$1(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var catmullRomOpen = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function LinearClosed(context) {
      this._context = context;
    }

    LinearClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point) this._context.closePath();
      },
      point: function(x, y) {
        x = +x, y = +y;
        if (this._point) this._context.lineTo(x, y);
        else this._point = 1, this._context.moveTo(x, y);
      }
    };

    function linearClosed(context) {
      return new LinearClosed(context);
    }

    function sign$3(x) {
      return x < 0 ? -1 : 1;
    }

    // Calculate the slopes of the tangents (Hermite-type interpolation) based on
    // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
    // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
    // NOV(II), P. 443, 1990.
    function slope3(that, x2, y2) {
      var h0 = that._x1 - that._x0,
          h1 = x2 - that._x1,
          s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
          s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
          p = (s0 * h1 + s1 * h0) / (h0 + h1);
      return (sign$3(s0) + sign$3(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
    }

    // Calculate a one-sided slope.
    function slope2(that, t) {
      var h = that._x1 - that._x0;
      return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }

    // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
    // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
    // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
    function point(that, t0, t1) {
      var x0 = that._x0,
          y0 = that._y0,
          x1 = that._x1,
          y1 = that._y1,
          dx = (x1 - x0) / 3;
      that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
    }

    function MonotoneX(context) {
      this._context = context;
    }

    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 =
        this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x1, this._y1); break;
          case 3: point(this, this._t0, slope2(this, this._t0)); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        var t1 = NaN;

        x = +x, y = +y;
        if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
          default: point(this, this._t0, t1 = slope3(this, x, y)); break;
        }

        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1;
      }
    };

    function MonotoneY(context) {
      this._context = new ReflectContext(context);
    }

    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
      MonotoneX.prototype.point.call(this, y, x);
    };

    function ReflectContext(context) {
      this._context = context;
    }

    ReflectContext.prototype = {
      moveTo: function(x, y) { this._context.moveTo(y, x); },
      closePath: function() { this._context.closePath(); },
      lineTo: function(x, y) { this._context.lineTo(y, x); },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
    };

    function monotoneX(context) {
      return new MonotoneX(context);
    }

    function monotoneY(context) {
      return new MonotoneY(context);
    }

    function Natural(context) {
      this._context = context;
    }

    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x = this._x,
            y = this._y,
            n = x.length;

        if (n) {
          this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
          if (n === 2) {
            this._context.lineTo(x[1], y[1]);
          } else {
            var px = controlPoints(x),
                py = controlPoints(y);
            for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
            }
          }
        }

        if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
      }
    };

    // See https://www.particleincell.com/2012/bezier-splines/ for derivation.
    function controlPoints(x) {
      var i,
          n = x.length - 1,
          m,
          a = new Array(n),
          b = new Array(n),
          r = new Array(n);
      a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
      for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
      a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
      for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
      a[n - 1] = r[n - 1] / b[n - 1];
      for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
      b[n - 1] = (x[n] + a[n - 1]) / 2;
      for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
      return [a, b];
    }

    function natural(context) {
      return new Natural(context);
    }

    function Step$1(context, t) {
      this._context = context;
      this._t = t;
    }

    Step$1.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // falls through
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y);
              this._context.lineTo(x, y);
            } else {
              var x1 = this._x * (1 - this._t) + x * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y);
            }
            break;
          }
        }
        this._x = x, this._y = y;
      }
    };

    function step$3(context) {
      return new Step$1(context, 0.5);
    }

    function stepBefore(context) {
      return new Step$1(context, 0);
    }

    function stepAfter(context) {
      return new Step$1(context, 1);
    }

    function none$1(series, order) {
      if (!((n = series.length) > 1)) return;
      for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
        s0 = s1, s1 = series[order[i]];
        for (j = 0; j < m; ++j) {
          s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
        }
      }
    }

    function none(series) {
      var n = series.length, o = new Array(n);
      while (--n >= 0) o[n] = n;
      return o;
    }

    function stackValue(d, key) {
      return d[key];
    }

    function stackSeries(key) {
      const series = [];
      series.key = key;
      return series;
    }

    function stack$1() {
      var keys = constant$1([]),
          order = none,
          offset = none$1,
          value = stackValue;

      function stack(data) {
        var sz = Array.from(keys.apply(this, arguments), stackSeries),
            i, n = sz.length, j = -1,
            oz;

        for (const d of data) {
          for (i = 0, ++j; i < n; ++i) {
            (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
          }
        }

        for (i = 0, oz = array(order(sz)); i < n; ++i) {
          sz[oz[i]].index = i;
        }

        offset(sz, oz);
        return sz;
      }

      stack.keys = function(_) {
        return arguments.length ? (keys = typeof _ === "function" ? _ : constant$1(Array.from(_)), stack) : keys;
      };

      stack.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(+_), stack) : value;
      };

      stack.order = function(_) {
        return arguments.length ? (order = _ == null ? none : typeof _ === "function" ? _ : constant$1(Array.from(_)), stack) : order;
      };

      stack.offset = function(_) {
        return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
      };

      return stack;
    }

    function expand(series, order) {
      if (!((n = series.length) > 0)) return;
      for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
        for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
        if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
      }
      none$1(series, order);
    }

    function diverging(series, order) {
      if (!((n = series.length) > 0)) return;
      for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
        for (yp = yn = 0, i = 0; i < n; ++i) {
          if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
            d[0] = yp, d[1] = yp += dy;
          } else if (dy < 0) {
            d[1] = yn, d[0] = yn += dy;
          } else {
            d[0] = 0, d[1] = dy;
          }
        }
      }
    }

    function silhouette(series, order) {
      if (!((n = series.length) > 0)) return;
      for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
        for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
        s0[j][1] += s0[j][0] = -y / 2;
      }
      none$1(series, order);
    }

    function wiggle(series, order) {
      if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
      for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
        for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
          var si = series[order[i]],
              sij0 = si[j][1] || 0,
              sij1 = si[j - 1][1] || 0,
              s3 = (sij0 - sij1) / 2;
          for (var k = 0; k < i; ++k) {
            var sk = series[order[k]],
                skj0 = sk[j][1] || 0,
                skj1 = sk[j - 1][1] || 0;
            s3 += skj0 - skj1;
          }
          s1 += sij0, s2 += s3 * sij0;
        }
        s0[j - 1][1] += s0[j - 1][0] = y;
        if (s1) y -= s2 / s1;
      }
      s0[j - 1][1] += s0[j - 1][0] = y;
      none$1(series, order);
    }

    function appearance(series) {
      var peaks = series.map(peak);
      return none(series).sort(function(a, b) { return peaks[a] - peaks[b]; });
    }

    function peak(series) {
      var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
      while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
      return j;
    }

    function ascending(series) {
      var sums = series.map(sum$4);
      return none(series).sort(function(a, b) { return sums[a] - sums[b]; });
    }

    function sum$4(series) {
      var s = 0, i = -1, n = series.length, v;
      while (++i < n) if (v = +series[i][1]) s += v;
      return s;
    }

    function descending(series) {
      return ascending(series).reverse();
    }

    function insideOut(series) {
      var n = series.length,
          i,
          j,
          sums = series.map(sum$4),
          order = appearance(series),
          top = 0,
          bottom = 0,
          tops = [],
          bottoms = [];

      for (i = 0; i < n; ++i) {
        j = order[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }

      return bottoms.reverse().concat(tops);
    }

    function reverse$3(series) {
      return none(series).reverse();
    }

    var constant = x => () => x;

    function ZoomEvent(type, {
      sourceEvent,
      target,
      transform,
      dispatch
    }) {
      Object.defineProperties(this, {
        type: {value: type, enumerable: true, configurable: true},
        sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
        target: {value: target, enumerable: true, configurable: true},
        transform: {value: transform, enumerable: true, configurable: true},
        _: {value: dispatch}
      });
    }

    function Transform$1(k, x, y) {
      this.k = k;
      this.x = x;
      this.y = y;
    }

    Transform$1.prototype = {
      constructor: Transform$1,
      scale: function(k) {
        return k === 1 ? this : new Transform$1(this.k * k, this.x, this.y);
      },
      translate: function(x, y) {
        return x === 0 & y === 0 ? this : new Transform$1(this.k, this.x + this.k * x, this.y + this.k * y);
      },
      apply: function(point) {
        return [point[0] * this.k + this.x, point[1] * this.k + this.y];
      },
      applyX: function(x) {
        return x * this.k + this.x;
      },
      applyY: function(y) {
        return y * this.k + this.y;
      },
      invert: function(location) {
        return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
      },
      invertX: function(x) {
        return (x - this.x) / this.k;
      },
      invertY: function(y) {
        return (y - this.y) / this.k;
      },
      rescaleX: function(x) {
        return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
      },
      rescaleY: function(y) {
        return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
      },
      toString: function() {
        return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
      }
    };

    var identity$2 = new Transform$1(1, 0, 0);

    transform$3.prototype = Transform$1.prototype;

    function transform$3(node) {
      while (!node.__zoom) if (!(node = node.parentNode)) return identity$2;
      return node.__zoom;
    }

    function nopropagation(event) {
      event.stopImmediatePropagation();
    }

    function noevent(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    // Ignore right-click, since that should open the context menu.
    // except for pinch-to-zoom, which is sent as a wheel+ctrlKey event
    function defaultFilter(event) {
      return (!event.ctrlKey || event.type === 'wheel') && !event.button;
    }

    function defaultExtent() {
      var e = this;
      if (e instanceof SVGElement) {
        e = e.ownerSVGElement || e;
        if (e.hasAttribute("viewBox")) {
          e = e.viewBox.baseVal;
          return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
        }
        return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
      }
      return [[0, 0], [e.clientWidth, e.clientHeight]];
    }

    function defaultTransform() {
      return this.__zoom || identity$2;
    }

    function defaultWheelDelta(event) {
      return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);
    }

    function defaultTouchable() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }

    function defaultConstrain(transform, extent, translateExtent) {
      var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
          dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
          dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
          dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
      return transform.translate(
        dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
        dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
      );
    }

    function zoom() {
      var filter = defaultFilter,
          extent = defaultExtent,
          constrain = defaultConstrain,
          wheelDelta = defaultWheelDelta,
          touchable = defaultTouchable,
          scaleExtent = [0, Infinity],
          translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
          duration = 250,
          interpolate = interpolateZoom,
          listeners = dispatch("start", "zoom", "end"),
          touchstarting,
          touchfirst,
          touchending,
          touchDelay = 500,
          wheelDelay = 150,
          clickDistance2 = 0,
          tapDistance = 10;

      function zoom(selection) {
        selection
            .property("__zoom", defaultTransform)
            .on("wheel.zoom", wheeled, {passive: false})
            .on("mousedown.zoom", mousedowned)
            .on("dblclick.zoom", dblclicked)
          .filter(touchable)
            .on("touchstart.zoom", touchstarted)
            .on("touchmove.zoom", touchmoved)
            .on("touchend.zoom touchcancel.zoom", touchended)
            .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      }

      zoom.transform = function(collection, transform, point, event) {
        var selection = collection.selection ? collection.selection() : collection;
        selection.property("__zoom", defaultTransform);
        if (collection !== selection) {
          schedule(collection, transform, point, event);
        } else {
          selection.interrupt().each(function() {
            gesture(this, arguments)
              .event(event)
              .start()
              .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
              .end();
          });
        }
      };

      zoom.scaleBy = function(selection, k, p, event) {
        zoom.scaleTo(selection, function() {
          var k0 = this.__zoom.k,
              k1 = typeof k === "function" ? k.apply(this, arguments) : k;
          return k0 * k1;
        }, p, event);
      };

      zoom.scaleTo = function(selection, k, p, event) {
        zoom.transform(selection, function() {
          var e = extent.apply(this, arguments),
              t0 = this.__zoom,
              p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
              p1 = t0.invert(p0),
              k1 = typeof k === "function" ? k.apply(this, arguments) : k;
          return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
        }, p, event);
      };

      zoom.translateBy = function(selection, x, y, event) {
        zoom.transform(selection, function() {
          return constrain(this.__zoom.translate(
            typeof x === "function" ? x.apply(this, arguments) : x,
            typeof y === "function" ? y.apply(this, arguments) : y
          ), extent.apply(this, arguments), translateExtent);
        }, null, event);
      };

      zoom.translateTo = function(selection, x, y, p, event) {
        zoom.transform(selection, function() {
          var e = extent.apply(this, arguments),
              t = this.__zoom,
              p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
          return constrain(identity$2.translate(p0[0], p0[1]).scale(t.k).translate(
            typeof x === "function" ? -x.apply(this, arguments) : -x,
            typeof y === "function" ? -y.apply(this, arguments) : -y
          ), e, translateExtent);
        }, p, event);
      };

      function scale(transform, k) {
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
        return k === transform.k ? transform : new Transform$1(k, transform.x, transform.y);
      }

      function translate(transform, p0, p1) {
        var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
        return x === transform.x && y === transform.y ? transform : new Transform$1(transform.k, x, y);
      }

      function centroid(extent) {
        return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
      }

      function schedule(transition, transform, point, event) {
        transition
            .on("start.zoom", function() { gesture(this, arguments).event(event).start(); })
            .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).event(event).end(); })
            .tween("zoom", function() {
              var that = this,
                  args = arguments,
                  g = gesture(that, args).event(event),
                  e = extent.apply(that, args),
                  p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
                  w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
                  a = that.__zoom,
                  b = typeof transform === "function" ? transform.apply(that, args) : transform,
                  i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
              return function(t) {
                if (t === 1) t = b; // Avoid rounding error on end.
                else { var l = i(t), k = w / l[2]; t = new Transform$1(k, p[0] - l[0] * k, p[1] - l[1] * k); }
                g.zoom(null, t);
              };
            });
      }

      function gesture(that, args, clean) {
        return (!clean && that.__zooming) || new Gesture(that, args);
      }

      function Gesture(that, args) {
        this.that = that;
        this.args = args;
        this.active = 0;
        this.sourceEvent = null;
        this.extent = extent.apply(that, args);
        this.taps = 0;
      }

      Gesture.prototype = {
        event: function(event) {
          if (event) this.sourceEvent = event;
          return this;
        },
        start: function() {
          if (++this.active === 1) {
            this.that.__zooming = this;
            this.emit("start");
          }
          return this;
        },
        zoom: function(key, transform) {
          if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
          if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
          if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
          this.that.__zoom = transform;
          this.emit("zoom");
          return this;
        },
        end: function() {
          if (--this.active === 0) {
            delete this.that.__zooming;
            this.emit("end");
          }
          return this;
        },
        emit: function(type) {
          var d = select$3(this.that).datum();
          listeners.call(
            type,
            this.that,
            new ZoomEvent(type, {
              sourceEvent: this.sourceEvent,
              target: zoom,
              type,
              transform: this.that.__zoom,
              dispatch: listeners
            }),
            d
          );
        }
      };

      function wheeled(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var g = gesture(this, args).event(event),
            t = this.__zoom,
            k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
            p = pointer(event);

        // If the mouse is in the same location as before, reuse it.
        // If there were recent wheel events, reset the wheel idle timeout.
        if (g.wheel) {
          if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
            g.mouse[1] = t.invert(g.mouse[0] = p);
          }
          clearTimeout(g.wheel);
        }

        // If this wheel event won’t trigger a transform change, ignore it.
        else if (t.k === k) return;

        // Otherwise, capture the mouse point and location at the start.
        else {
          g.mouse = [p, t.invert(p)];
          interrupt(this);
          g.start();
        }

        noevent(event);
        g.wheel = setTimeout(wheelidled, wheelDelay);
        g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

        function wheelidled() {
          g.wheel = null;
          g.end();
        }
      }

      function mousedowned(event, ...args) {
        if (touchending || !filter.apply(this, arguments)) return;
        var currentTarget = event.currentTarget,
            g = gesture(this, args, true).event(event),
            v = select$3(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
            p = pointer(event, currentTarget),
            x0 = event.clientX,
            y0 = event.clientY;

        dragDisable(event.view);
        nopropagation(event);
        g.mouse = [p, this.__zoom.invert(p)];
        interrupt(this);
        g.start();

        function mousemoved(event) {
          noevent(event);
          if (!g.moved) {
            var dx = event.clientX - x0, dy = event.clientY - y0;
            g.moved = dx * dx + dy * dy > clickDistance2;
          }
          g.event(event)
           .zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));
        }

        function mouseupped(event) {
          v.on("mousemove.zoom mouseup.zoom", null);
          yesdrag(event.view, g.moved);
          noevent(event);
          g.event(event).end();
        }
      }

      function dblclicked(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var t0 = this.__zoom,
            p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),
            p1 = t0.invert(p0),
            k1 = t0.k * (event.shiftKey ? 0.5 : 2),
            t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);

        noevent(event);
        if (duration > 0) select$3(this).transition().duration(duration).call(schedule, t1, p0, event);
        else select$3(this).call(zoom.transform, t1, p0, event);
      }

      function touchstarted(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var touches = event.touches,
            n = touches.length,
            g = gesture(this, args, event.changedTouches.length === n).event(event),
            started, i, t, p;

        nopropagation(event);
        for (i = 0; i < n; ++i) {
          t = touches[i], p = pointer(t, this);
          p = [p, this.__zoom.invert(p), t.identifier];
          if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
          else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
        }

        if (touchstarting) touchstarting = clearTimeout(touchstarting);

        if (started) {
          if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
          interrupt(this);
          g.start();
        }
      }

      function touchmoved(event, ...args) {
        if (!this.__zooming) return;
        var g = gesture(this, args).event(event),
            touches = event.changedTouches,
            n = touches.length, i, t, p, l;

        noevent(event);
        for (i = 0; i < n; ++i) {
          t = touches[i], p = pointer(t, this);
          if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
          else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
        }
        t = g.that.__zoom;
        if (g.touch1) {
          var p0 = g.touch0[0], l0 = g.touch0[1],
              p1 = g.touch1[0], l1 = g.touch1[1],
              dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
              dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
          t = scale(t, Math.sqrt(dp / dl));
          p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
          l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
        }
        else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
        else return;

        g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
      }

      function touchended(event, ...args) {
        if (!this.__zooming) return;
        var g = gesture(this, args).event(event),
            touches = event.changedTouches,
            n = touches.length, i, t;

        nopropagation(event);
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, touchDelay);
        for (i = 0; i < n; ++i) {
          t = touches[i];
          if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
          else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
        }
        if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
        if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
        else {
          g.end();
          // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
          if (g.taps === 2) {
            t = pointer(t, this);
            if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
              var p = select$3(this).on("dblclick.zoom");
              if (p) p.apply(this, arguments);
            }
          }
        }
      }

      zoom.wheelDelta = function(_) {
        return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;
      };

      zoom.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;
      };

      zoom.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;
      };

      zoom.extent = function(_) {
        return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
      };

      zoom.scaleExtent = function(_) {
        return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
      };

      zoom.translateExtent = function(_) {
        return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
      };

      zoom.constrain = function(_) {
        return arguments.length ? (constrain = _, zoom) : constrain;
      };

      zoom.duration = function(_) {
        return arguments.length ? (duration = +_, zoom) : duration;
      };

      zoom.interpolate = function(_) {
        return arguments.length ? (interpolate = _, zoom) : interpolate;
      };

      zoom.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? zoom : value;
      };

      zoom.clickDistance = function(_) {
        return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
      };

      zoom.tapDistance = function(_) {
        return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
      };

      return zoom;
    }

    var d3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        bisect: bisect,
        bisectRight: bisectRight,
        bisectLeft: bisectLeft,
        bisectCenter: bisectCenter,
        ascending: ascending$3,
        bisector: bisector,
        count: count$1,
        cross: cross$2,
        cumsum: cumsum$3,
        descending: descending$2,
        deviation: deviation,
        extent: extent$1,
        Adder: Adder,
        fsum: fsum,
        fcumsum: fcumsum,
        group: group,
        flatGroup: flatGroup,
        flatRollup: flatRollup,
        groups: groups,
        index: index$4,
        indexes: indexes,
        rollup: rollup,
        rollups: rollups,
        groupSort: groupSort,
        bin: bin,
        histogram: bin,
        thresholdFreedmanDiaconis: thresholdFreedmanDiaconis,
        thresholdScott: thresholdScott,
        thresholdSturges: thresholdSturges,
        max: max$6,
        maxIndex: maxIndex,
        mean: mean$2,
        median: median,
        merge: merge,
        min: min$5,
        minIndex: minIndex,
        mode: mode,
        nice: nice$1,
        pairs: pairs,
        permute: permute,
        quantile: quantile$1,
        quantileSorted: quantileSorted,
        quickselect: quickselect,
        range: range$5,
        rank: rank,
        least: least,
        leastIndex: leastIndex,
        greatest: greatest,
        greatestIndex: greatestIndex,
        scan: scan,
        shuffle: shuffle$2,
        shuffler: shuffler,
        sum: sum$6,
        ticks: ticks,
        tickIncrement: tickIncrement,
        tickStep: tickStep,
        transpose: transpose$3,
        variance: variance,
        zip: zip,
        every: every,
        some: some,
        filter: filter$1,
        map: map$1,
        reduce: reduce$1,
        reverse: reverse$4,
        sort: sort,
        difference: difference,
        disjoint: disjoint,
        intersection: intersection,
        subset: subset,
        superset: superset,
        union: union,
        InternMap: InternMap,
        InternSet: InternSet,
        axisTop: axisTop,
        axisRight: axisRight,
        axisBottom: axisBottom,
        axisLeft: axisLeft,
        brush: brush,
        brushX: brushX,
        brushY: brushY,
        brushSelection: brushSelection,
        chord: chord,
        chordTranspose: chordTranspose,
        chordDirected: chordDirected,
        ribbon: ribbon$1,
        ribbonArrow: ribbonArrow,
        color: color,
        rgb: rgb,
        hsl: hsl$2,
        lab: lab$1,
        hcl: hcl$2,
        lch: lch,
        gray: gray,
        cubehelix: cubehelix$3,
        contours: contours,
        contourDensity: density,
        Delaunay: Delaunay,
        Voronoi: Voronoi,
        dispatch: dispatch,
        drag: drag,
        dragDisable: dragDisable,
        dragEnable: yesdrag,
        dsvFormat: dsvFormat,
        csvParse: csvParse,
        csvParseRows: csvParseRows,
        csvFormat: csvFormat,
        csvFormatBody: csvFormatBody,
        csvFormatRows: csvFormatRows,
        csvFormatRow: csvFormatRow,
        csvFormatValue: csvFormatValue,
        tsvParse: tsvParse,
        tsvParseRows: tsvParseRows,
        tsvFormat: tsvFormat,
        tsvFormatBody: tsvFormatBody,
        tsvFormatRows: tsvFormatRows,
        tsvFormatRow: tsvFormatRow,
        tsvFormatValue: tsvFormatValue,
        autoType: autoType,
        easeLinear: linear$1,
        easeQuad: quadInOut,
        easeQuadIn: quadIn,
        easeQuadOut: quadOut,
        easeQuadInOut: quadInOut,
        easeCubic: cubicInOut,
        easeCubicIn: cubicIn,
        easeCubicOut: cubicOut,
        easeCubicInOut: cubicInOut,
        easePoly: polyInOut,
        easePolyIn: polyIn,
        easePolyOut: polyOut,
        easePolyInOut: polyInOut,
        easeSin: sinInOut,
        easeSinIn: sinIn,
        easeSinOut: sinOut,
        easeSinInOut: sinInOut,
        easeExp: expInOut,
        easeExpIn: expIn,
        easeExpOut: expOut,
        easeExpInOut: expInOut,
        easeCircle: circleInOut,
        easeCircleIn: circleIn,
        easeCircleOut: circleOut,
        easeCircleInOut: circleInOut,
        easeBounce: bounceOut,
        easeBounceIn: bounceIn,
        easeBounceOut: bounceOut,
        easeBounceInOut: bounceInOut,
        easeBack: backInOut,
        easeBackIn: backIn,
        easeBackOut: backOut,
        easeBackInOut: backInOut,
        easeElastic: elasticOut,
        easeElasticIn: elasticIn,
        easeElasticOut: elasticOut,
        easeElasticInOut: elasticInOut,
        blob: blob,
        buffer: buffer$1,
        dsv: dsv,
        csv: csv,
        tsv: tsv,
        image: image$1,
        json: json,
        text: text,
        xml: xml,
        html: html,
        svg: svg$1,
        forceCenter: center,
        forceCollide: collide,
        forceLink: link$2,
        forceManyBody: manyBody,
        forceRadial: radial$1,
        forceSimulation: simulation,
        forceX: x$2,
        forceY: y$1,
        formatDefaultLocale: defaultLocale$1,
        get format () { return format; },
        get formatPrefix () { return formatPrefix; },
        formatLocale: formatLocale$1,
        formatSpecifier: formatSpecifier,
        FormatSpecifier: FormatSpecifier,
        precisionFixed: precisionFixed,
        precisionPrefix: precisionPrefix,
        precisionRound: precisionRound,
        geoArea: area$2,
        geoBounds: bounds,
        geoCentroid: centroid$1,
        geoCircle: circle$2,
        geoClipAntimeridian: clipAntimeridian,
        geoClipCircle: clipCircle,
        geoClipExtent: extent,
        geoClipRectangle: clipRectangle,
        geoContains: contains$1,
        geoDistance: distance,
        geoGraticule: graticule,
        geoGraticule10: graticule10,
        geoInterpolate: interpolate,
        geoLength: length$1,
        geoPath: index$2,
        geoAlbers: albers,
        geoAlbersUsa: albersUsa,
        geoAzimuthalEqualArea: azimuthalEqualArea,
        geoAzimuthalEqualAreaRaw: azimuthalEqualAreaRaw,
        geoAzimuthalEquidistant: azimuthalEquidistant,
        geoAzimuthalEquidistantRaw: azimuthalEquidistantRaw,
        geoConicConformal: conicConformal,
        geoConicConformalRaw: conicConformalRaw,
        geoConicEqualArea: conicEqualArea,
        geoConicEqualAreaRaw: conicEqualAreaRaw,
        geoConicEquidistant: conicEquidistant,
        geoConicEquidistantRaw: conicEquidistantRaw,
        geoEqualEarth: equalEarth,
        geoEqualEarthRaw: equalEarthRaw,
        geoEquirectangular: equirectangular,
        geoEquirectangularRaw: equirectangularRaw,
        geoGnomonic: gnomonic,
        geoGnomonicRaw: gnomonicRaw,
        geoIdentity: identity$6,
        geoProjection: projection,
        geoProjectionMutator: projectionMutator,
        geoMercator: mercator,
        geoMercatorRaw: mercatorRaw,
        geoNaturalEarth1: naturalEarth1,
        geoNaturalEarth1Raw: naturalEarth1Raw,
        geoOrthographic: orthographic,
        geoOrthographicRaw: orthographicRaw,
        geoStereographic: stereographic,
        geoStereographicRaw: stereographicRaw,
        geoTransverseMercator: transverseMercator,
        geoTransverseMercatorRaw: transverseMercatorRaw,
        geoRotation: rotation,
        geoStream: geoStream,
        geoTransform: transform$4,
        cluster: cluster,
        hierarchy: hierarchy,
        Node: Node$1,
        pack: index$1,
        packSiblings: siblings,
        packEnclose: enclose,
        partition: partition,
        stratify: stratify,
        tree: tree,
        treemap: index,
        treemapBinary: binary,
        treemapDice: treemapDice,
        treemapSlice: treemapSlice,
        treemapSliceDice: sliceDice,
        treemapSquarify: squarify,
        treemapResquarify: resquarify,
        interpolate: interpolate$2,
        interpolateArray: array$3,
        interpolateBasis: basis$2,
        interpolateBasisClosed: basisClosed$1,
        interpolateDate: date$1,
        interpolateDiscrete: discrete,
        interpolateHue: hue,
        interpolateNumber: interpolateNumber,
        interpolateNumberArray: numberArray,
        interpolateObject: object$1,
        interpolateRound: interpolateRound,
        interpolateString: interpolateString,
        interpolateTransformCss: interpolateTransformCss,
        interpolateTransformSvg: interpolateTransformSvg,
        interpolateZoom: interpolateZoom,
        interpolateRgb: interpolateRgb,
        interpolateRgbBasis: rgbBasis,
        interpolateRgbBasisClosed: rgbBasisClosed,
        interpolateHsl: hsl$1,
        interpolateHslLong: hslLong,
        interpolateLab: lab,
        interpolateHcl: hcl$1,
        interpolateHclLong: hclLong,
        interpolateCubehelix: cubehelix$2,
        interpolateCubehelixLong: cubehelixLong,
        piecewise: piecewise,
        quantize: quantize$1,
        path: path,
        polygonArea: area$1,
        polygonCentroid: centroid,
        polygonHull: hull,
        polygonContains: contains,
        polygonLength: length,
        quadtree: quadtree,
        randomUniform: uniform,
        randomInt: int$1,
        randomNormal: normal,
        randomLogNormal: logNormal,
        randomBates: bates,
        randomIrwinHall: irwinHall,
        randomExponential: exponential,
        randomPareto: pareto,
        randomBernoulli: bernoulli,
        randomGeometric: geometric,
        randomBinomial: binomial,
        randomGamma: gamma,
        randomBeta: beta,
        randomWeibull: weibull,
        randomCauchy: cauchy,
        randomLogistic: logistic,
        randomPoisson: poisson,
        randomLcg: lcg,
        scaleBand: band,
        scalePoint: point$4,
        scaleIdentity: identity$4,
        scaleLinear: linear,
        scaleLog: log$4,
        scaleSymlog: symlog,
        scaleOrdinal: ordinal,
        scaleImplicit: implicit,
        scalePow: pow$3,
        scaleSqrt: sqrt$4,
        scaleRadial: radial,
        scaleQuantile: quantile,
        scaleQuantize: quantize,
        scaleThreshold: threshold$2,
        scaleTime: time$1,
        scaleUtc: utcTime,
        scaleSequential: sequential,
        scaleSequentialLog: sequentialLog,
        scaleSequentialPow: sequentialPow,
        scaleSequentialSqrt: sequentialSqrt,
        scaleSequentialSymlog: sequentialSymlog,
        scaleSequentialQuantile: sequentialQuantile,
        scaleDiverging: diverging$1,
        scaleDivergingLog: divergingLog,
        scaleDivergingPow: divergingPow,
        scaleDivergingSqrt: divergingSqrt,
        scaleDivergingSymlog: divergingSymlog,
        tickFormat: tickFormat,
        schemeCategory10: category10,
        schemeAccent: Accent,
        schemeDark2: Dark2,
        schemePaired: Paired,
        schemePastel1: Pastel1,
        schemePastel2: Pastel2,
        schemeSet1: Set1,
        schemeSet2: Set2,
        schemeSet3: Set3,
        schemeTableau10: Tableau10,
        interpolateBrBG: BrBG,
        schemeBrBG: scheme$q,
        interpolatePRGn: PRGn,
        schemePRGn: scheme$p,
        interpolatePiYG: PiYG,
        schemePiYG: scheme$o,
        interpolatePuOr: PuOr,
        schemePuOr: scheme$n,
        interpolateRdBu: RdBu,
        schemeRdBu: scheme$m,
        interpolateRdGy: RdGy,
        schemeRdGy: scheme$l,
        interpolateRdYlBu: RdYlBu,
        schemeRdYlBu: scheme$k,
        interpolateRdYlGn: RdYlGn,
        schemeRdYlGn: scheme$j,
        interpolateSpectral: Spectral,
        schemeSpectral: scheme$i,
        interpolateBuGn: BuGn,
        schemeBuGn: scheme$h,
        interpolateBuPu: BuPu,
        schemeBuPu: scheme$g,
        interpolateGnBu: GnBu,
        schemeGnBu: scheme$f,
        interpolateOrRd: OrRd,
        schemeOrRd: scheme$e,
        interpolatePuBuGn: PuBuGn,
        schemePuBuGn: scheme$d,
        interpolatePuBu: PuBu,
        schemePuBu: scheme$c,
        interpolatePuRd: PuRd,
        schemePuRd: scheme$b,
        interpolateRdPu: RdPu,
        schemeRdPu: scheme$a,
        interpolateYlGnBu: YlGnBu,
        schemeYlGnBu: scheme$9,
        interpolateYlGn: YlGn,
        schemeYlGn: scheme$8,
        interpolateYlOrBr: YlOrBr,
        schemeYlOrBr: scheme$7,
        interpolateYlOrRd: YlOrRd,
        schemeYlOrRd: scheme$6,
        interpolateBlues: Blues,
        schemeBlues: scheme$5,
        interpolateGreens: Greens,
        schemeGreens: scheme$4,
        interpolateGreys: Greys,
        schemeGreys: scheme$3,
        interpolatePurples: Purples,
        schemePurples: scheme$2,
        interpolateReds: Reds,
        schemeReds: scheme$1,
        interpolateOranges: Oranges,
        schemeOranges: scheme,
        interpolateCividis: cividis,
        interpolateCubehelixDefault: cubehelix,
        interpolateRainbow: rainbow,
        interpolateWarm: warm,
        interpolateCool: cool,
        interpolateSinebow: sinebow,
        interpolateTurbo: turbo,
        interpolateViridis: viridis,
        interpolateMagma: magma,
        interpolateInferno: inferno,
        interpolatePlasma: plasma,
        create: create$1,
        creator: creator,
        local: local$1,
        matcher: matcher,
        namespace: namespace,
        namespaces: namespaces,
        pointer: pointer,
        pointers: pointers,
        select: select$3,
        selectAll: selectAll,
        selection: selection,
        selector: selector,
        selectorAll: selectorAll,
        style: styleValue,
        window: defaultView,
        arc: arc,
        area: area,
        line: line,
        pie: pie,
        areaRadial: areaRadial,
        radialArea: areaRadial,
        lineRadial: lineRadial$1,
        radialLine: lineRadial$1,
        pointRadial: pointRadial,
        link: link,
        linkHorizontal: linkHorizontal,
        linkVertical: linkVertical,
        linkRadial: linkRadial,
        symbol: Symbol$1,
        symbolsStroke: symbolsStroke,
        symbolsFill: symbolsFill,
        symbols: symbolsFill,
        symbolAsterisk: asterisk,
        symbolCircle: circle,
        symbolCross: cross,
        symbolDiamond: diamond,
        symbolDiamond2: diamond2,
        symbolPlus: plus,
        symbolSquare: square$2,
        symbolSquare2: square2,
        symbolStar: star,
        symbolTriangle: triangle,
        symbolTriangle2: triangle2,
        symbolWye: wye,
        symbolX: x,
        curveBasisClosed: basisClosed,
        curveBasisOpen: basisOpen,
        curveBasis: basis,
        curveBumpX: bumpX,
        curveBumpY: bumpY,
        curveBundle: bundle,
        curveCardinalClosed: cardinalClosed,
        curveCardinalOpen: cardinalOpen,
        curveCardinal: cardinal,
        curveCatmullRomClosed: catmullRomClosed,
        curveCatmullRomOpen: catmullRomOpen,
        curveCatmullRom: catmullRom,
        curveLinearClosed: linearClosed,
        curveLinear: curveLinear,
        curveMonotoneX: monotoneX,
        curveMonotoneY: monotoneY,
        curveNatural: natural,
        curveStep: step$3,
        curveStepAfter: stepAfter,
        curveStepBefore: stepBefore,
        stack: stack$1,
        stackOffsetExpand: expand,
        stackOffsetDiverging: diverging,
        stackOffsetNone: none$1,
        stackOffsetSilhouette: silhouette,
        stackOffsetWiggle: wiggle,
        stackOrderAppearance: appearance,
        stackOrderAscending: ascending,
        stackOrderDescending: descending,
        stackOrderInsideOut: insideOut,
        stackOrderNone: none,
        stackOrderReverse: reverse$3,
        timeInterval: newInterval,
        timeMillisecond: millisecond$1,
        timeMilliseconds: milliseconds,
        utcMillisecond: millisecond$1,
        utcMilliseconds: milliseconds,
        timeSecond: utcSecond,
        timeSeconds: seconds,
        utcSecond: utcSecond,
        utcSeconds: seconds,
        timeMinute: timeMinute,
        timeMinutes: minutes,
        timeHour: timeHour,
        timeHours: hours,
        timeDay: timeDay,
        timeDays: days,
        timeWeek: sunday,
        timeWeeks: sundays,
        timeSunday: sunday,
        timeSundays: sundays,
        timeMonday: monday,
        timeMondays: mondays,
        timeTuesday: tuesday,
        timeTuesdays: tuesdays,
        timeWednesday: wednesday,
        timeWednesdays: wednesdays,
        timeThursday: thursday,
        timeThursdays: thursdays,
        timeFriday: friday,
        timeFridays: fridays,
        timeSaturday: saturday,
        timeSaturdays: saturdays,
        timeMonth: timeMonth,
        timeMonths: months,
        timeYear: timeYear,
        timeYears: years,
        utcMinute: utcMinute$1,
        utcMinutes: utcMinutes,
        utcHour: utcHour$1,
        utcHours: utcHours,
        utcDay: utcDay$1,
        utcDays: utcDays,
        utcWeek: utcSunday,
        utcWeeks: utcSundays,
        utcSunday: utcSunday,
        utcSundays: utcSundays,
        utcMonday: utcMonday,
        utcMondays: utcMondays,
        utcTuesday: utcTuesday,
        utcTuesdays: utcTuesdays,
        utcWednesday: utcWednesday,
        utcWednesdays: utcWednesdays,
        utcThursday: utcThursday,
        utcThursdays: utcThursdays,
        utcFriday: utcFriday,
        utcFridays: utcFridays,
        utcSaturday: utcSaturday,
        utcSaturdays: utcSaturdays,
        utcMonth: utcMonth$1,
        utcMonths: utcMonths,
        utcYear: utcYear$1,
        utcYears: utcYears,
        utcTicks: utcTicks,
        utcTickInterval: utcTickInterval,
        timeTicks: timeTicks,
        timeTickInterval: timeTickInterval,
        timeFormatDefaultLocale: defaultLocale,
        get timeFormat () { return timeFormat; },
        get timeParse () { return timeParse; },
        get utcFormat () { return utcFormat; },
        get utcParse () { return utcParse; },
        timeFormatLocale: formatLocale,
        isoFormat: formatIso$1,
        isoParse: parseIso$1,
        now: now$1,
        timer: timer,
        timerFlush: timerFlush,
        timeout: timeout,
        interval: interval,
        transition: transition,
        active: active,
        interrupt: interrupt,
        zoom: zoom,
        zoomTransform: transform$3,
        zoomIdentity: identity$2,
        ZoomTransform: Transform$1
    });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const EPSILON_FLOAT32$1 = 1e-7;
    const EPSILON_FLOAT16$1 = 1e-4;
    /** Convenient class for storing tensor-related data. */
    class DataStorage {
        constructor(backend, dataMover) {
            this.backend = backend;
            this.dataMover = dataMover;
            this.data = new WeakMap();
            this.dataIdsCount = 0;
        }
        get(dataId) {
            if (!this.data.has(dataId)) {
                this.dataMover.moveData(this.backend, dataId);
            }
            return this.data.get(dataId);
        }
        set(dataId, value) {
            this.dataIdsCount++;
            this.data.set(dataId, value);
        }
        has(dataId) {
            return this.data.has(dataId);
        }
        delete(dataId) {
            this.dataIdsCount--;
            return this.data.delete(dataId);
        }
        numDataIds() {
            return this.dataIdsCount;
        }
    }
    /**
     * The interface that defines the kernels that should be implemented when
     * adding a new backend. New backends don't need to implement every one of the
     * methods, this can be done gradually (throw an error for unimplemented
     * methods).
     */
    class KernelBackend {
        refCount(dataId) {
            return notYetImplemented('refCount');
        }
        incRef(dataId) {
            return notYetImplemented('incRef');
        }
        timerAvailable() {
            return true;
        }
        time(f) {
            return notYetImplemented('time');
        }
        read(dataId) {
            return notYetImplemented('read');
        }
        readSync(dataId) {
            return notYetImplemented('readSync');
        }
        readToGPU(dataId, options) {
            return notYetImplemented('readToGPU');
        }
        numDataIds() {
            return notYetImplemented('numDataIds');
        }
        disposeData(dataId, force) {
            return notYetImplemented('disposeData');
        }
        write(values, shape, dtype) {
            return notYetImplemented('write');
        }
        move(dataId, values, shape, dtype, refCount) {
            return notYetImplemented('move');
        }
        memory() {
            return notYetImplemented('memory');
        }
        /** Returns the highest precision for floats in bits (e.g. 16 or 32) */
        floatPrecision() {
            return notYetImplemented('floatPrecision');
        }
        /** Returns the smallest representable number.  */
        epsilon() {
            return this.floatPrecision() === 32 ? EPSILON_FLOAT32$1 : EPSILON_FLOAT16$1;
        }
        dispose() {
            return notYetImplemented('dispose');
        }
    }
    function notYetImplemented(kernelName) {
        throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +
            `This kernel may not be supported by the tfjs backend you have chosen`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Shuffles the array in-place using Fisher-Yates algorithm.
     *
     * ```js
     * const a = [1, 2, 3, 4, 5];
     * tf.util.shuffle(a);
     * console.log(a);
     * ```
     *
     * @param array The array to shuffle in-place.
     *
     * @doc {heading: 'Util', namespace: 'util'}
     */
    // tslint:disable-next-line:no-any
    function shuffle(array) {
        let counter = array.length;
        let index = 0;
        // While there are elements in the array
        while (counter > 0) {
            // Pick a random index
            index = (Math.random() * counter) | 0;
            // Decrease counter by 1
            counter--;
            // And swap the last element with it
            swap(array, counter, index);
        }
    }
    /**
     * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.
     *
     * ```js
     * const a = [1,2,3,4,5];
     * const b = [11,22,33,44,55];
     * tf.util.shuffleCombo(a, b);
     * console.log(a, b);
     * ```
     *
     * @param array The first array to shuffle in-place.
     * @param array2 The second array to shuffle in-place with the same permutation
     *     as the first array.
     *
     * @doc {heading: 'Util', namespace: 'util'}
     */
    function shuffleCombo(
    // tslint:disable-next-line:no-any
    array, 
    // tslint:disable-next-line:no-any
    array2) {
        if (array.length !== array2.length) {
            throw new Error(`Array sizes must match to be shuffled together ` +
                `First array length was ${array.length}` +
                `Second array length was ${array2.length}`);
        }
        let counter = array.length;
        let index = 0;
        // While there are elements in the array
        while (counter > 0) {
            // Pick a random index
            index = (Math.random() * counter) | 0;
            // Decrease counter by 1
            counter--;
            // And swap the last element of each array with it
            swap(array, counter, index);
            swap(array2, counter, index);
        }
    }
    /** Clamps a value to a specified range. */
    function clamp(min, x, max) {
        return Math.max(min, Math.min(x, max));
    }
    function nearestLargerEven(val) {
        return val % 2 === 0 ? val : val + 1;
    }
    function swap(object, left, right) {
        const temp = object[left];
        object[left] = object[right];
        object[right] = temp;
    }
    function sum$3(arr) {
        let sum = 0;
        for (let i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        return sum;
    }
    /**
     * Returns a sample from a uniform [a, b) distribution.
     *
     * @param a The minimum support (inclusive).
     * @param b The maximum support (exclusive).
     * @return A pseudorandom number on the half-open interval [a,b).
     */
    function randUniform(a, b) {
        const r = Math.random();
        return (b * r) + (1 - r) * a;
    }
    /** Returns the squared Euclidean distance between two vectors. */
    function distSquared(a, b) {
        let result = 0;
        for (let i = 0; i < a.length; i++) {
            const diff = Number(a[i]) - Number(b[i]);
            result += diff * diff;
        }
        return result;
    }
    /**
     * Asserts that the expression is true. Otherwise throws an error with the
     * provided message.
     *
     * ```js
     * const x = 2;
     * tf.util.assert(x === 2, 'x is not 2');
     * ```
     *
     * @param expr The expression to assert (as a boolean).
     * @param msg A function that returns the message to report when throwing an
     *     error. We use a function for performance reasons.
     *
     * @doc {heading: 'Util', namespace: 'util'}
     */
    function assert(expr, msg) {
        if (!expr) {
            throw new Error(typeof msg === 'string' ? msg : msg());
        }
    }
    function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {
        assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
    }
    function assertNonNull(a) {
        assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);
    }
    // NOTE: We explicitly type out what T extends instead of any so that
    // util.flatten on a nested array of number doesn't try to infer T as a
    // number[][], causing us to explicitly type util.flatten<number>().
    /**
     *  Flattens an arbitrarily nested array.
     *
     * ```js
     * const a = [[1, 2], [3, 4], [5, [6, [7]]]];
     * const flat = tf.util.flatten(a);
     * console.log(flat);
     * ```
     *
     *  @param arr The nested array to flatten.
     *  @param result The destination array which holds the elements.
     *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults
     *      to false.
     *
     * @doc {heading: 'Util', namespace: 'util'}
     */
    function flatten(arr, result = [], skipTypedArray = false) {
        if (result == null) {
            result = [];
        }
        if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {
            for (let i = 0; i < arr.length; ++i) {
                flatten(arr[i], result, skipTypedArray);
            }
        }
        else {
            result.push(arr);
        }
        return result;
    }
    /**
     * Returns the size (number of elements) of the tensor given its shape.
     *
     * ```js
     * const shape = [3, 4, 2];
     * const size = tf.util.sizeFromShape(shape);
     * console.log(size);
     * ```
     *
     * @doc {heading: 'Util', namespace: 'util'}
     */
    function sizeFromShape(shape) {
        if (shape.length === 0) {
            // Scalar.
            return 1;
        }
        let size = shape[0];
        for (let i = 1; i < shape.length; i++) {
            size *= shape[i];
        }
        return size;
    }
    function isScalarShape(shape) {
        return shape.length === 0;
    }
    function arraysEqual(n1, n2) {
        if (n1 === n2) {
            return true;
        }
        if (n1 == null || n2 == null) {
            return false;
        }
        if (n1.length !== n2.length) {
            return false;
        }
        for (let i = 0; i < n1.length; i++) {
            if (n1[i] !== n2[i]) {
                return false;
            }
        }
        return true;
    }
    function isInt(a) {
        return a % 1 === 0;
    }
    function tanh$3(x) {
        // tslint:disable-next-line:no-any
        if (Math.tanh != null) {
            // tslint:disable-next-line:no-any
            return Math.tanh(x);
        }
        if (x === Infinity) {
            return 1;
        }
        else if (x === -Infinity) {
            return -1;
        }
        else {
            const e2x = Math.exp(2 * x);
            return (e2x - 1) / (e2x + 1);
        }
    }
    function sizeToSquarishShape(size) {
        const width = Math.ceil(Math.sqrt(size));
        return [width, Math.ceil(size / width)];
    }
    /**
     * Creates a new array with randomized indicies to a given quantity.
     *
     * ```js
     * const randomTen = tf.util.createShuffledIndices(10);
     * console.log(randomTen);
     * ```
     *
     * @param number Quantity of how many shuffled indicies to create.
     *
     * @doc {heading: 'Util', namespace: 'util'}
     */
    function createShuffledIndices(n) {
        const shuffledIndices = new Uint32Array(n);
        for (let i = 0; i < n; ++i) {
            shuffledIndices[i] = i;
        }
        shuffle(shuffledIndices);
        return shuffledIndices;
    }
    function rightPad(a, size) {
        if (size <= a.length) {
            return a;
        }
        return a + ' '.repeat(size - a.length);
    }
    function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter) {
        return new Promise((resolve, reject) => {
            let tryCount = 0;
            const tryFn = () => {
                if (checkFn()) {
                    resolve();
                    return;
                }
                tryCount++;
                const nextBackoff = delayFn(tryCount);
                if (maxCounter != null && tryCount >= maxCounter) {
                    reject();
                    return;
                }
                setTimeout(tryFn, nextBackoff);
            };
            tryFn();
        });
    }
    /**
     * Given the full size of the array and a shape that may contain -1 as the
     * implicit dimension, returns the inferred shape where -1 is replaced.
     * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].
     *
     * @param shape The shape, which may contain -1 in some dimension.
     * @param size The full size (number of elements) of the array.
     * @return The inferred shape where -1 is replaced with the inferred size.
     */
    function inferFromImplicitShape(shape, size) {
        let shapeProd = 1;
        let implicitIdx = -1;
        for (let i = 0; i < shape.length; ++i) {
            if (shape[i] >= 0) {
                shapeProd *= shape[i];
            }
            else if (shape[i] === -1) {
                if (implicitIdx !== -1) {
                    throw Error(`Shapes can only have 1 implicit size. ` +
                        `Found -1 at dim ${implicitIdx} and dim ${i}`);
                }
                implicitIdx = i;
            }
            else if (shape[i] < 0) {
                throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);
            }
        }
        if (implicitIdx === -1) {
            if (size > 0 && size !== shapeProd) {
                throw Error(`Size(${size}) must match the product of shape ${shape}`);
            }
            return shape;
        }
        if (shapeProd === 0) {
            throw Error(`Cannot infer the missing size in [${shape}] when ` +
                `there are 0 elements`);
        }
        if (size % shapeProd !== 0) {
            throw Error(`The implicit shape can't be a fractional number. ` +
                `Got ${size} / ${shapeProd}`);
        }
        const newShape = shape.slice();
        newShape[implicitIdx] = size / shapeProd;
        return newShape;
    }
    function parseAxisParam(axis, shape) {
        const rank = shape.length;
        // Normalize input
        axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);
        // Check for valid range
        assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +
            `got axis ${axis}`);
        // Check for only integers
        assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +
            `got axis ${axis}`);
        // Handle negative axis.
        return axis.map(a => a < 0 ? rank + a : a);
    }
    /** Reduces the shape by removing all dimensions of shape 1. */
    function squeezeShape(shape, axis) {
        const newShape = [];
        const keptDims = [];
        const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;
        const axes = (axis == null || isEmptyArray) ?
            null :
            parseAxisParam(axis, shape).sort();
        let j = 0;
        for (let i = 0; i < shape.length; ++i) {
            if (axes != null) {
                if (axes[j] === i && shape[i] !== 1) {
                    throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);
                }
                if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {
                    newShape.push(shape[i]);
                    keptDims.push(i);
                }
                if (axes[j] <= i) {
                    j++;
                }
            }
            if (shape[i] !== 1) {
                newShape.push(shape[i]);
                keptDims.push(i);
            }
        }
        return { newShape, keptDims };
    }
    function getTypedArrayFromDType(dtype, size) {
        let values = null;
        if (dtype == null || dtype === 'float32') {
            values = new Float32Array(size);
        }
        else if (dtype === 'int32') {
            values = new Int32Array(size);
        }
        else if (dtype === 'bool') {
            values = new Uint8Array(size);
        }
        else {
            throw new Error(`Unknown data type ${dtype}`);
        }
        return values;
    }
    function getArrayFromDType(dtype, size) {
        let values = null;
        if (dtype == null || dtype === 'float32') {
            values = new Float32Array(size);
        }
        else if (dtype === 'int32') {
            values = new Int32Array(size);
        }
        else if (dtype === 'bool') {
            values = new Uint8Array(size);
        }
        else if (dtype === 'string') {
            values = new Array(size);
        }
        else {
            throw new Error(`Unknown data type ${dtype}`);
        }
        return values;
    }
    function checkConversionForErrors(vals, dtype) {
        for (let i = 0; i < vals.length; i++) {
            const num = vals[i];
            if (isNaN(num) || !isFinite(num)) {
                throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);
            }
        }
    }
    /** Returns true if the dtype is valid. */
    function isValidDtype(dtype) {
        return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||
            dtype === 'int32' || dtype === 'string';
    }
    /**
     * Returns true if the new type can't encode the old type without loss of
     * precision.
     */
    function hasEncodingLoss(oldType, newType) {
        if (newType === 'complex64') {
            return false;
        }
        if (newType === 'float32' && oldType !== 'complex64') {
            return false;
        }
        if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {
            return false;
        }
        if (newType === 'bool' && oldType === 'bool') {
            return false;
        }
        return true;
    }
    function isTypedArray(a) {
        return a instanceof Float32Array || a instanceof Int32Array ||
            a instanceof Uint8Array || a instanceof Uint8ClampedArray;
    }
    function bytesPerElement(dtype) {
        if (dtype === 'float32' || dtype === 'int32') {
            return 4;
        }
        else if (dtype === 'complex64') {
            return 8;
        }
        else if (dtype === 'bool') {
            return 1;
        }
        else {
            throw new Error(`Unknown dtype ${dtype}`);
        }
    }
    /**
     * Returns the approximate number of bytes allocated in the string array - 2
     * bytes per character. Computing the exact bytes for a native string in JS is
     * not possible since it depends on the encoding of the html page that serves
     * the website.
     */
    function bytesFromStringArray(arr) {
        if (arr == null) {
            return 0;
        }
        let bytes = 0;
        arr.forEach(x => bytes += x.length);
        return bytes;
    }
    /** Returns true if the value is a string. */
    function isString(value) {
        return typeof value === 'string' || value instanceof String;
    }
    function isBoolean(value) {
        return typeof value === 'boolean';
    }
    function isNumber(value) {
        return typeof value === 'number';
    }
    function inferDtype(values) {
        if (Array.isArray(values)) {
            return inferDtype(values[0]);
        }
        if (values instanceof Float32Array) {
            return 'float32';
        }
        else if (values instanceof Int32Array
            || values instanceof Uint8Array
            || values instanceof Uint8ClampedArray) {
            return 'int32';
        }
        else if (isNumber(values)) {
            return 'float32';
        }
        else if (isString(values)) {
            return 'string';
        }
        else if (isBoolean(values)) {
            return 'bool';
        }
        return 'float32';
    }
    function isFunction(f) {
        return !!(f && f.constructor && f.call && f.apply);
    }
    function nearestDivisor(size, start) {
        for (let i = start; i < size; ++i) {
            if (size % i === 0) {
                return i;
            }
        }
        return size;
    }
    function computeStrides(shape) {
        const rank = shape.length;
        if (rank < 2) {
            return [];
        }
        // Last dimension has implicit stride of 1, thus having D-1 (instead of D)
        // strides.
        const strides = new Array(rank - 1);
        strides[rank - 2] = shape[rank - 1];
        for (let i = rank - 3; i >= 0; --i) {
            strides[i] = strides[i + 1] * shape[i + 1];
        }
        return strides;
    }
    function createNestedArray(offset, shape, a, isComplex = false) {
        const ret = new Array();
        if (shape.length === 1) {
            const d = shape[0] * (isComplex ? 2 : 1);
            for (let i = 0; i < d; i++) {
                ret[i] = a[offset + i];
            }
        }
        else {
            const d = shape[0];
            const rest = shape.slice(1);
            const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);
            for (let i = 0; i < d; i++) {
                ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);
            }
        }
        return ret;
    }
    // Provide a nested array of TypedArray in given shape.
    function toNestedArray(shape, a, isComplex = false) {
        if (shape.length === 0) {
            // Scalar type should return a single number.
            return a[0];
        }
        const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);
        if (size === 0) {
            // A tensor with shape zero should be turned into empty list.
            return [];
        }
        if (size !== a.length) {
            throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? ' for a complex tensor' : ''}.`);
        }
        return createNestedArray(0, shape, a, isComplex);
    }
    function makeOnesTypedArray(size, dtype) {
        const array = makeZerosTypedArray(size, dtype);
        for (let i = 0; i < array.length; i++) {
            array[i] = 1;
        }
        return array;
    }
    function makeZerosTypedArray(size, dtype) {
        if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
            return new Float32Array(size);
        }
        else if (dtype === 'int32') {
            return new Int32Array(size);
        }
        else if (dtype === 'bool') {
            return new Uint8Array(size);
        }
        else {
            throw new Error(`Unknown data type ${dtype}`);
        }
    }
    /**
     * Make nested `TypedArray` filled with zeros.
     * @param shape The shape information for the nested array.
     * @param dtype dtype of the array element.
     */
    function makeZerosNestedTypedArray(shape, dtype) {
        const size = shape.reduce((prev, curr) => prev * curr, 1);
        if (dtype == null || dtype === 'float32') {
            return toNestedArray(shape, new Float32Array(size));
        }
        else if (dtype === 'int32') {
            return toNestedArray(shape, new Int32Array(size));
        }
        else if (dtype === 'bool') {
            return toNestedArray(shape, new Uint8Array(size));
        }
        else {
            throw new Error(`Unknown data type ${dtype}`);
        }
    }
    function assertNonNegativeIntegerDimensions(shape) {
        shape.forEach(dimSize => {
            assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +
                `shape [${shape}].`);
        });
    }
    /**
     * Computes flat index for a given location (multidimentionsal index) in a
     * Tensor/multidimensional array.
     *
     * @param locs Location in the tensor.
     * @param rank Rank of the tensor.
     * @param strides Tensor strides.
     */
    function locToIndex(locs, rank, strides) {
        if (rank === 0) {
            return 0;
        }
        else if (rank === 1) {
            return locs[0];
        }
        let index = locs[locs.length - 1];
        for (let i = 0; i < locs.length - 1; ++i) {
            index += strides[i] * locs[i];
        }
        return index;
    }
    /**
     * Computes the location (multidimensional index) in a tensor/multidimentional
     * array for a given flat index.
     *
     * @param index Index in flat array.
     * @param rank Rank of tensor.
     * @param strides Strides of tensor.
     */
    function indexToLoc(index, rank, strides) {
        if (rank === 0) {
            return [];
        }
        else if (rank === 1) {
            return [index];
        }
        const locs = new Array(rank);
        for (let i = 0; i < locs.length - 1; ++i) {
            locs[i] = Math.floor(index / strides[i]);
            index -= locs[i] * strides[i];
        }
        locs[locs.length - 1] = index;
        return locs;
    }
    /**
     * This method asserts whether an object is a Promise instance.
     * @param object
     */
    // tslint:disable-next-line: no-any
    function isPromise(object) {
        //  We chose to not use 'obj instanceOf Promise' for two reasons:
        //  1. It only reliably works for es6 Promise, not other Promise
        //  implementations.
        //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch
        //  the async calls, so it is possible the obj (patched) is comparing to a
        //  pre-patched Promise.
        return object && object.then && typeof object.then === 'function';
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.
    const TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';
    /**
     * The environment contains evaluated flags as well as the registered platform.
     * This is always used as a global singleton and can be retrieved with
     * `tf.env()`.
     *
     * @doc {heading: 'Environment'}
     */
    class Environment {
        // tslint:disable-next-line: no-any
        constructor(global) {
            this.global = global;
            this.flags = {};
            this.flagRegistry = {};
            this.urlFlags = {};
            // Jasmine spies on this in 'environment_test.ts'
            this.getQueryParams = getQueryParams;
            this.populateURLFlags();
        }
        setPlatform(platformName, platform) {
            if (this.platform != null) {
                if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {
                    console.warn(`Platform ${this.platformName} has already been set. ` +
                        `Overwriting the platform with ${platform}.`);
                }
            }
            this.platformName = platformName;
            this.platform = platform;
        }
        registerFlag(flagName, evaluationFn, setHook) {
            this.flagRegistry[flagName] = { evaluationFn, setHook };
            // Override the flag value from the URL. This has to happen here because
            // the environment is initialized before flags get registered.
            if (this.urlFlags[flagName] != null) {
                const flagValue = this.urlFlags[flagName];
                if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {
                    console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);
                }
                this.set(flagName, flagValue);
            }
        }
        async getAsync(flagName) {
            if (flagName in this.flags) {
                return this.flags[flagName];
            }
            this.flags[flagName] = await this.evaluateFlag(flagName);
            return this.flags[flagName];
        }
        get(flagName) {
            if (flagName in this.flags) {
                return this.flags[flagName];
            }
            const flagValue = this.evaluateFlag(flagName);
            if (isPromise(flagValue)) {
                throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +
                    `Please use getAsync() instead.`);
            }
            this.flags[flagName] = flagValue;
            return this.flags[flagName];
        }
        getNumber(flagName) {
            return this.get(flagName);
        }
        getBool(flagName) {
            return this.get(flagName);
        }
        getFlags() {
            return this.flags;
        }
        // For backwards compatibility.
        get features() {
            return this.flags;
        }
        set(flagName, value) {
            if (this.flagRegistry[flagName] == null) {
                throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);
            }
            this.flags[flagName] = value;
            if (this.flagRegistry[flagName].setHook != null) {
                this.flagRegistry[flagName].setHook(value);
            }
        }
        evaluateFlag(flagName) {
            if (this.flagRegistry[flagName] == null) {
                throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);
            }
            return this.flagRegistry[flagName].evaluationFn();
        }
        setFlags(flags) {
            this.flags = Object.assign({}, flags);
        }
        reset() {
            this.flags = {};
            this.urlFlags = {};
            this.populateURLFlags();
        }
        populateURLFlags() {
            if (typeof this.global === 'undefined' ||
                typeof this.global.location === 'undefined' ||
                typeof this.global.location.search === 'undefined') {
                return;
            }
            const urlParams = this.getQueryParams(this.global.location.search);
            if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
                const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');
                keyValues.forEach(keyValue => {
                    const [key, value] = keyValue.split(':');
                    this.urlFlags[key] = parseValue(key, value);
                });
            }
        }
    }
    function getQueryParams(queryString) {
        const params = {};
        queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {
            decodeParam(params, t[0], t[1]);
            return t.join('=');
        });
        return params;
    }
    function decodeParam(params, name, value) {
        params[decodeURIComponent(name)] = decodeURIComponent(value || '');
    }
    function parseValue(flagName, value) {
        value = value.toLowerCase();
        if (value === 'true' || value === 'false') {
            return value === 'true';
        }
        else if (`${+value}` === value) {
            return +value;
        }
        throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);
    }
    /**
     * Returns the current environment (a global singleton).
     *
     * The environment object contains the evaluated feature values as well as the
     * active platform.
     *
     * @doc {heading: 'Environment'}
     */
    function env() {
        return ENV$2;
    }
    let ENV$2 = null;
    function setEnvironmentGlobal(environment) {
        ENV$2 = environment;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Note that the identifier globalNameSpace is scoped to this module, but will
    // always resolve to the same global object regardless of how the module is
    // resolved.
    // tslint:disable-next-line:no-any
    let globalNameSpace;
    // tslint:disable-next-line:no-any
    function getGlobalNamespace() {
        if (globalNameSpace == null) {
            // tslint:disable-next-line:no-any
            let ns;
            if (typeof (window) !== 'undefined') {
                ns = window;
            }
            else if (typeof (global) !== 'undefined') {
                ns = global;
            }
            else if (typeof (process) !== 'undefined') {
                ns = process;
            }
            else if (typeof (self) !== 'undefined') {
                ns = self;
            }
            else {
                throw new Error('Could not find a global object');
            }
            globalNameSpace = ns;
        }
        return globalNameSpace;
    }
    // tslint:disable-next-line:no-any
    function getGlobalMap() {
        const ns = getGlobalNamespace();
        if (ns._tfGlobals == null) {
            ns._tfGlobals = new Map();
        }
        return ns._tfGlobals;
    }
    /**
     * Returns a globally accessible 'singleton' object.
     *
     * @param key the name of the object
     * @param init a function to initialize to initialize this object
     *             the first time it is fetched.
     */
    function getGlobal(key, init) {
        const globalMap = getGlobalMap();
        if (globalMap.has(key)) {
            return globalMap.get(key);
        }
        else {
            const singleton = init();
            globalMap.set(key, singleton);
            return globalMap.get(key);
        }
    }

    const Abs = 'Abs';
    const Acos = 'Acos';
    const Acosh = 'Acosh';
    const Add = 'Add';
    const AddN = 'AddN';
    const All = 'All';
    const Any = 'Any';
    const ArgMax = 'ArgMax';
    const ArgMin = 'ArgMin';
    const Asin = 'Asin';
    const Asinh = 'Asinh';
    const Atan = 'Atan';
    const Atanh = 'Atanh';
    const Atan2 = 'Atan2';
    const AvgPool = 'AvgPool';
    const AvgPoolGrad = 'AvgPoolGrad';
    const AvgPool3D = 'AvgPool3D';
    const AvgPool3DGrad = 'AvgPool3DGrad';
    const BatchMatMul = 'BatchMatMul';
    const BatchToSpaceND = 'BatchToSpaceND';
    const Bincount = 'Bincount';
    const BroadcastTo = 'BroadcastTo';
    const BroadcastArgs = 'BroadcastArgs';
    const Cast = 'Cast';
    const Ceil = 'Ceil';
    const ClipByValue = 'ClipByValue';
    const Complex = 'Complex';
    const ComplexAbs = 'ComplexAbs';
    const Concat = 'Concat';
    const Conv2D = 'Conv2D';
    const Conv2DBackpropFilter = 'Conv2DBackpropFilter';
    const Conv2DBackpropInput = 'Conv2DBackpropInput';
    const Conv3D = 'Conv3D';
    const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';
    const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';
    const Cos = 'Cos';
    const Cosh = 'Cosh';
    const Cumsum = 'Cumsum';
    const CropAndResize = 'CropAndResize';
    const DenseBincount = 'DenseBincount';
    const DepthToSpace = 'DepthToSpace';
    const DepthwiseConv2dNative = 'DepthwiseConv2dNative';
    const DepthwiseConv2dNativeBackpropFilter = 'DepthwiseConv2dNativeBackpropFilter';
    const DepthwiseConv2dNativeBackpropInput = 'DepthwiseConv2dNativeBackpropInput';
    const Diag = 'Diag';
    const Dilation2D = 'Dilation2D';
    const Dilation2DBackpropInput = 'Dilation2DBackpropInput';
    const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';
    const RealDiv = 'RealDiv';
    const Einsum = 'Einsum';
    const Elu = 'Elu';
    const EluGrad = 'EluGrad';
    const Erf = 'Erf';
    const Equal = 'Equal';
    const Exp = 'Exp';
    const ExpandDims = 'ExpandDims';
    const Expm1 = 'Expm1';
    const FFT = 'FFT';
    const Fill = 'Fill';
    const FlipLeftRight = 'FlipLeftRight';
    const Floor = 'Floor';
    const FloorDiv = 'FloorDiv';
    const FusedBatchNorm = 'FusedBatchNorm';
    const GatherV2 = 'GatherV2';
    const GatherNd = 'GatherNd';
    const Greater = 'Greater';
    const GreaterEqual = 'GreaterEqual';
    const Identity = 'Identity';
    const IFFT = 'IFFT';
    const Imag = 'Imag';
    const IsFinite = 'IsFinite';
    const IsInf = 'IsInf';
    const IsNan = 'IsNan';
    const LeakyRelu = 'LeakyRelu';
    const Less = 'Less';
    const LessEqual = 'LessEqual';
    const LinSpace = 'LinSpace';
    const Log = 'Log';
    const Log1p = 'Log1p';
    const LogicalAnd = 'LogicalAnd';
    const LogicalNot = 'LogicalNot';
    const LogicalOr = 'LogicalOr';
    const LogSoftmax = 'LogSoftmax';
    const LRN = 'LRN';
    const LRNGrad = 'LRNGrad';
    const Max = 'Max';
    const Maximum = 'Maximum';
    const MaxPool = 'MaxPool';
    const MaxPoolGrad = 'MaxPoolGrad';
    const MaxPool3D = 'MaxPool3D';
    const MaxPool3DGrad = 'MaxPool3DGrad';
    const MaxPoolWithArgmax = 'MaxPoolWithArgmax';
    const Mean = 'Mean';
    const Min = 'Min';
    const Minimum = 'Minimum';
    const MirrorPad = 'MirrorPad';
    const Mod = 'Mod';
    const Multinomial = 'Multinomial';
    const Multiply = 'Multiply';
    const Neg = 'Neg';
    const NotEqual = 'NotEqual';
    const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';
    const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';
    const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';
    const OnesLike = 'OnesLike';
    const OneHot = 'OneHot';
    const Pack = 'Pack';
    const PadV2 = 'PadV2';
    const Pool = 'Pool';
    const Pow = 'Pow';
    const Prelu = 'Prelu';
    const Prod = 'Prod';
    const Range = 'Range';
    const Real = 'Real';
    const Reciprocal = 'Reciprocal';
    const Relu = 'Relu';
    const Reshape = 'Reshape';
    const ResizeNearestNeighbor = 'ResizeNearestNeighbor';
    const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';
    const ResizeBilinear = 'ResizeBilinear';
    const ResizeBilinearGrad = 'ResizeBilinearGrad';
    const Relu6 = 'Relu6';
    const Reverse = 'Reverse';
    const Round = 'Round';
    const Rsqrt = 'Rsqrt';
    const ScatterNd = 'ScatterNd';
    const Select = 'Select';
    const Selu = 'Selu';
    const Slice = 'Slice';
    const Sin = 'Sin';
    const Sinh = 'Sinh';
    const Sign = 'Sign';
    const Sigmoid = 'Sigmoid';
    const Softplus = 'Softplus';
    const Sqrt = 'Sqrt';
    const Sum = 'Sum';
    const SpaceToBatchND = 'SpaceToBatchND';
    const SplitV = 'SplitV';
    const Softmax = 'Softmax';
    const SparseFillEmptyRows = 'SparseFillEmptyRows';
    const SparseReshape = 'SparseReshape';
    const SparseSegmentMean = 'SparseSegmentMean';
    const SparseSegmentSum = 'SparseSegmentSum';
    const SparseToDense = 'SparseToDense';
    const SquaredDifference = 'SquaredDifference';
    const Square = 'Square';
    const StridedSlice = 'StridedSlice';
    const StringNGrams = 'StringNGrams';
    const StringSplit = 'StringSplit';
    const StringToHashBucketFast = 'StringToHashBucketFast';
    const Sub = 'Sub';
    const Tan = 'Tan';
    const Tanh = 'Tanh';
    const Tile = 'Tile';
    const TopK = 'TopK';
    const Transform = 'Transform';
    const Transpose = 'Transpose';
    const Unique = 'Unique';
    const Unpack = 'Unpack';
    const UnsortedSegmentSum = 'UnsortedSegmentSum';
    const ZerosLike = 'ZerosLike';
    /**
     * TensorFlow.js-only kernels
     */
    const Step = 'Step';
    const FromPixels = 'FromPixels';
    const RotateWithOffset = 'RotateWithOffset';
    const _FusedMatMul = '_FusedMatMul';
    const FusedConv2D = 'FusedConv2D';
    const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function warn(...msg) {
        if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {
            console.warn(...msg);
        }
    }
    function log$3(...msg) {
        if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {
            console.log(...msg);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const kernelRegistry = getGlobal('kernelRegistry', () => new Map());
    const gradRegistry = getGlobal('gradRegistry', () => new Map());
    /**
     * Returns the kernel function (code) associated with the provided names.
     *
     * @param kernelName The official name of the kernel.
     * @param backendName The official name of the backend.
     */
    function getKernel(kernelName, backendName) {
        const key = makeKey(kernelName, backendName);
        return kernelRegistry.get(key);
    }
    /**
     * Returns the registered gradient info associated with the provided kernel.
     * @param kernelName The official TF kernel name.
     */
    function getGradient(kernelName) {
        return gradRegistry.get(kernelName);
    }
    function getKernelsForBackend(backendName) {
        const it = kernelRegistry.entries();
        const result = [];
        while (true) {
            const { done, value } = it.next();
            if (done) {
                break;
            }
            const [key, config] = value;
            const [backend,] = key.split('_');
            if (backend === backendName) {
                result.push(config);
            }
        }
        return result;
    }
    /**
     * Registers the function (forward pass) for the kernel in a global registry.
     *
     * @param config A config object with the following properties:
     * - `kernelName` The official name of the kernel.
     * - `backendName` The official name of the backend.
     * - `kernelFunc` The function to run during the forward pass of the kernel.
     * - `setupFunc` Optional. Gets called once, after the backend initializes.
     * - `disposeFunc` Optional. Gets called once, right before the backend is
     * disposed.
     */
    function registerKernel(config) {
        const { kernelName, backendName } = config;
        const key = makeKey(kernelName, backendName);
        if (kernelRegistry.has(key)) {
            warn(`The kernel '${kernelName}' for backend ` +
                `'${backendName}' is already registered`);
        }
        kernelRegistry.set(key, config);
    }
    /**
     * Registers a gradient function for a given kernel in the global registry,
     * to be used during the back-propagation of that kernel.
     *
     * @param config An object with the following properties:
     * - `kernelName` The name of the kernel that the gradient function is for.
     * - `gradFunc` The function to run during back-propagation.
     */
    function registerGradient(config) {
        const { kernelName } = config;
        if (gradRegistry.has(kernelName)) {
            // TODO (yassogba) after 3.0 assess whether we need to keep this gated
            // to debug mode.
            if (env().getBool('DEBUG')) {
                warn(`Overriding the gradient for '${kernelName}'`);
            }
        }
        gradRegistry.set(kernelName, config);
    }
    /**
     * Removes the kernel function from the registry.
     *
     * @param kernelName The official name of the kernel.
     * @param backendName The official name of the backend.
     *
     */
    function unregisterKernel(kernelName, backendName) {
        const key = makeKey(kernelName, backendName);
        if (!kernelRegistry.has(key)) {
            throw new Error(`The kernel '${kernelName}' for backend ` +
                `'${backendName}' is not registered`);
        }
        kernelRegistry.delete(key);
    }
    /** Removes the registered gradient from the global registry. */
    function unregisterGradient(kernelName) {
        if (!gradRegistry.has(kernelName)) {
            throw new Error(`The gradient '${kernelName}' for backend is not registered`);
        }
        gradRegistry.delete(kernelName);
    }
    /**
     * Finds kernels that have already been registered to a backend and re-registers
     * them for a new backend. Useful for registering custom backends.
     * @param registeredBackendName Already registered backend.
     * @param newBackendName New backend.
     */
    function copyRegisteredKernels(registeredBackendName, newBackendName) {
        const kernels = getKernelsForBackend(registeredBackendName);
        kernels.forEach(kernelConfig => {
            const newKernelConfig = Object.assign({}, kernelConfig, { backendName: newBackendName });
            registerKernel(newKernelConfig);
        });
    }
    function makeKey(kernelName, backendName) {
        return `${backendName}_${kernelName}`;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var long = Long$1;

    /**
     * wasm optimizations, to do native i64 multiplication and divide
     */
    var wasm = null;

    try {
      wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
      ])), {}).exports;
    } catch (e) {
      // no wasm support :(
    }

    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
     *  See the from* functions below for more convenient ways of constructing Longs.
     * @exports Long
     * @class A Long class for representing a 64 bit two's-complement integer value.
     * @param {number} low The low (signed) 32 bits of the long
     * @param {number} high The high (signed) 32 bits of the long
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @constructor
     */
    function Long$1(low, high, unsigned) {

        /**
         * The low 32 bits as a signed value.
         * @type {number}
         */
        this.low = low | 0;

        /**
         * The high 32 bits as a signed value.
         * @type {number}
         */
        this.high = high | 0;

        /**
         * Whether unsigned or not.
         * @type {boolean}
         */
        this.unsigned = !!unsigned;
    }

    // The internal representation of a long is the two given signed, 32-bit values.
    // We use 32-bit pieces because these are the size of integers on which
    // Javascript performs bit-operations.  For operations like addition and
    // multiplication, we split each number into 16 bit pieces, which can easily be
    // multiplied within Javascript's floating-point representation without overflow
    // or change in sign.
    //
    // In the algorithms below, we frequently reduce the negative case to the
    // positive case by negating the input(s) and then post-processing the result.
    // Note that we must ALWAYS check specially whether those values are MIN_VALUE
    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
    // a positive number, it overflows back into a negative).  Not handling this
    // case would often result in infinite recursion.
    //
    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
    // methods on which they depend.

    /**
     * An indicator used to reliably determine if an object is a Long or not.
     * @type {boolean}
     * @const
     * @private
     */
    Long$1.prototype.__isLong__;

    Object.defineProperty(Long$1.prototype, "__isLong__", { value: true });

    /**
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     * @inner
     */
    function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
    }

    /**
     * Tests if the specified object is a Long.
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     */
    Long$1.isLong = isLong;

    /**
     * A cache of the Long representations of small integer values.
     * @type {!Object}
     * @inner
     */
    var INT_CACHE = {};

    /**
     * A cache of the Long representations of small unsigned integer values.
     * @type {!Object}
     * @inner
     */
    var UINT_CACHE = {};

    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromInt(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
            value >>>= 0;
            if (cache = (0 <= value && value < 256)) {
                cachedObj = UINT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
            if (cache)
                UINT_CACHE[value] = obj;
            return obj;
        } else {
            value |= 0;
            if (cache = (-128 <= value && value < 128)) {
                cachedObj = INT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = fromBits(value, value < 0 ? -1 : 0, false);
            if (cache)
                INT_CACHE[value] = obj;
            return obj;
        }
    }

    /**
     * Returns a Long representing the given 32 bit integer value.
     * @function
     * @param {number} value The 32 bit integer in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long} The corresponding Long value
     */
    Long$1.fromInt = fromInt;

    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromNumber(value, unsigned) {
        if (isNaN(value))
            return unsigned ? UZERO : ZERO;
        if (unsigned) {
            if (value < 0)
                return UZERO;
            if (value >= TWO_PWR_64_DBL)
                return MAX_UNSIGNED_VALUE;
        } else {
            if (value <= -TWO_PWR_63_DBL)
                return MIN_VALUE;
            if (value + 1 >= TWO_PWR_63_DBL)
                return MAX_VALUE;
        }
        if (value < 0)
            return fromNumber(-value, unsigned).neg();
        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
    }

    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @function
     * @param {number} value The number in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long} The corresponding Long value
     */
    Long$1.fromNumber = fromNumber;

    /**
     * @param {number} lowBits
     * @param {number} highBits
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromBits(lowBits, highBits, unsigned) {
        return new Long$1(lowBits, highBits, unsigned);
    }

    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
     *  assumed to use 32 bits.
     * @function
     * @param {number} lowBits The low 32 bits
     * @param {number} highBits The high 32 bits
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long} The corresponding Long value
     */
    Long$1.fromBits = fromBits;

    /**
     * @function
     * @param {number} base
     * @param {number} exponent
     * @returns {number}
     * @inner
     */
    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

    /**
     * @param {string} str
     * @param {(boolean|number)=} unsigned
     * @param {number=} radix
     * @returns {!Long}
     * @inner
     */
    function fromString(str, unsigned, radix) {
        if (str.length === 0)
            throw Error('empty string');
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
            return ZERO;
        if (typeof unsigned === 'number') {
            // For goog.math.long compatibility
            radix = unsigned,
            unsigned = false;
        } else {
            unsigned = !! unsigned;
        }
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');

        var p;
        if ((p = str.indexOf('-')) > 0)
            throw Error('interior hyphen');
        else if (p === 0) {
            return fromString(str.substring(1), unsigned, radix).neg();
        }

        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(pow_dbl(radix, 8));

        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i),
                value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = fromNumber(pow_dbl(radix, size));
                result = result.mul(power).add(fromNumber(value));
            } else {
                result = result.mul(radixToPower);
                result = result.add(fromNumber(value));
            }
        }
        result.unsigned = unsigned;
        return result;
    }

    /**
     * Returns a Long representation of the given string, written using the specified radix.
     * @function
     * @param {string} str The textual representation of the Long
     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
     * @returns {!Long} The corresponding Long value
     */
    Long$1.fromString = fromString;

    /**
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromValue(val, unsigned) {
        if (typeof val === 'number')
            return fromNumber(val, unsigned);
        if (typeof val === 'string')
            return fromString(val, unsigned);
        // Throws for non-objects, converts non-instanceof Long:
        return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
    }

    /**
     * Converts the specified value to a Long using the appropriate from* function for its type.
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long}
     */
    Long$1.fromValue = fromValue;

    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
    // no runtime penalty for these.

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_16_DBL = 1 << 16;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_24_DBL = 1 << 24;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

    /**
     * @type {!Long}
     * @const
     * @inner
     */
    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

    /**
     * @type {!Long}
     * @inner
     */
    var ZERO = fromInt(0);

    /**
     * Signed zero.
     * @type {!Long}
     */
    Long$1.ZERO = ZERO;

    /**
     * @type {!Long}
     * @inner
     */
    var UZERO = fromInt(0, true);

    /**
     * Unsigned zero.
     * @type {!Long}
     */
    Long$1.UZERO = UZERO;

    /**
     * @type {!Long}
     * @inner
     */
    var ONE = fromInt(1);

    /**
     * Signed one.
     * @type {!Long}
     */
    Long$1.ONE = ONE;

    /**
     * @type {!Long}
     * @inner
     */
    var UONE = fromInt(1, true);

    /**
     * Unsigned one.
     * @type {!Long}
     */
    Long$1.UONE = UONE;

    /**
     * @type {!Long}
     * @inner
     */
    var NEG_ONE = fromInt(-1);

    /**
     * Signed negative one.
     * @type {!Long}
     */
    Long$1.NEG_ONE = NEG_ONE;

    /**
     * @type {!Long}
     * @inner
     */
    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

    /**
     * Maximum signed value.
     * @type {!Long}
     */
    Long$1.MAX_VALUE = MAX_VALUE;

    /**
     * @type {!Long}
     * @inner
     */
    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

    /**
     * Maximum unsigned value.
     * @type {!Long}
     */
    Long$1.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

    /**
     * @type {!Long}
     * @inner
     */
    var MIN_VALUE = fromBits(0, 0x80000000|0, false);

    /**
     * Minimum signed value.
     * @type {!Long}
     */
    Long$1.MIN_VALUE = MIN_VALUE;

    /**
     * @alias Long.prototype
     * @inner
     */
    var LongPrototype = Long$1.prototype;

    /**
     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
     * @returns {number}
     */
    LongPrototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
    };

    /**
     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
     * @returns {number}
     */
    LongPrototype.toNumber = function toNumber() {
        if (this.unsigned)
            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };

    /**
     * Converts the Long to a string written in the specified radix.
     * @param {number=} radix Radix (2-36), defaults to 10
     * @returns {string}
     * @override
     * @throws {RangeError} If `radix` is out of range
     */
    LongPrototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');
        if (this.isZero())
            return '0';
        if (this.isNegative()) { // Unsigned Longs are never negative
            if (this.eq(MIN_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = fromNumber(radix),
                    div = this.div(radixLong),
                    rem1 = div.mul(radixLong).sub(this);
                return div.toString(radix) + rem1.toInt().toString(radix);
            } else
                return '-' + this.neg().toString(radix);
        }

        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
            rem = this;
        var result = '';
        while (true) {
            var remDiv = rem.div(radixToPower),
                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
                digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero())
                return digits + result;
            else {
                while (digits.length < 6)
                    digits = '0' + digits;
                result = '' + digits + result;
            }
        }
    };

    /**
     * Gets the high 32 bits as a signed integer.
     * @returns {number} Signed high bits
     */
    LongPrototype.getHighBits = function getHighBits() {
        return this.high;
    };

    /**
     * Gets the high 32 bits as an unsigned integer.
     * @returns {number} Unsigned high bits
     */
    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
    };

    /**
     * Gets the low 32 bits as a signed integer.
     * @returns {number} Signed low bits
     */
    LongPrototype.getLowBits = function getLowBits() {
        return this.low;
    };

    /**
     * Gets the low 32 bits as an unsigned integer.
     * @returns {number} Unsigned low bits
     */
    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
    };

    /**
     * Gets the number of bits needed to represent the absolute value of this Long.
     * @returns {number}
     */
    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative()) // Unsigned Longs are never negative
            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for (var bit = 31; bit > 0; bit--)
            if ((val & (1 << bit)) != 0)
                break;
        return this.high != 0 ? bit + 33 : bit + 1;
    };

    /**
     * Tests if this Long's value equals zero.
     * @returns {boolean}
     */
    LongPrototype.isZero = function isZero() {
        return this.high === 0 && this.low === 0;
    };

    /**
     * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
     * @returns {boolean}
     */
    LongPrototype.eqz = LongPrototype.isZero;

    /**
     * Tests if this Long's value is negative.
     * @returns {boolean}
     */
    LongPrototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
    };

    /**
     * Tests if this Long's value is positive.
     * @returns {boolean}
     */
    LongPrototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
    };

    /**
     * Tests if this Long's value is odd.
     * @returns {boolean}
     */
    LongPrototype.isOdd = function isOdd() {
        return (this.low & 1) === 1;
    };

    /**
     * Tests if this Long's value is even.
     * @returns {boolean}
     */
    LongPrototype.isEven = function isEven() {
        return (this.low & 1) === 0;
    };

    /**
     * Tests if this Long's value equals the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.equals = function equals(other) {
        if (!isLong(other))
            other = fromValue(other);
        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
            return false;
        return this.high === other.high && this.low === other.low;
    };

    /**
     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.eq = LongPrototype.equals;

    /**
     * Tests if this Long's value differs from the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.notEquals = function notEquals(other) {
        return !this.eq(/* validates */ other);
    };

    /**
     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.neq = LongPrototype.notEquals;

    /**
     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.ne = LongPrototype.notEquals;

    /**
     * Tests if this Long's value is less than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lessThan = function lessThan(other) {
        return this.comp(/* validates */ other) < 0;
    };

    /**
     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lt = LongPrototype.lessThan;

    /**
     * Tests if this Long's value is less than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.comp(/* validates */ other) <= 0;
    };

    /**
     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lte = LongPrototype.lessThanOrEqual;

    /**
     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.le = LongPrototype.lessThanOrEqual;

    /**
     * Tests if this Long's value is greater than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.greaterThan = function greaterThan(other) {
        return this.comp(/* validates */ other) > 0;
    };

    /**
     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.gt = LongPrototype.greaterThan;

    /**
     * Tests if this Long's value is greater than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.comp(/* validates */ other) >= 0;
    };

    /**
     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.gte = LongPrototype.greaterThanOrEqual;

    /**
     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.ge = LongPrototype.greaterThanOrEqual;

    /**
     * Compares this Long's value with the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */
    LongPrototype.compare = function compare(other) {
        if (!isLong(other))
            other = fromValue(other);
        if (this.eq(other))
            return 0;
        var thisNeg = this.isNegative(),
            otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
            return -1;
        if (!thisNeg && otherNeg)
            return 1;
        // At this point the sign bits are the same
        if (!this.unsigned)
            return this.sub(other).isNegative() ? -1 : 1;
        // Both are positive if at least one is unsigned
        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
    };

    /**
     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */
    LongPrototype.comp = LongPrototype.compare;

    /**
     * Negates this Long's value.
     * @returns {!Long} Negated Long
     */
    LongPrototype.negate = function negate() {
        if (!this.unsigned && this.eq(MIN_VALUE))
            return MIN_VALUE;
        return this.not().add(ONE);
    };

    /**
     * Negates this Long's value. This is an alias of {@link Long#negate}.
     * @function
     * @returns {!Long} Negated Long
     */
    LongPrototype.neg = LongPrototype.negate;

    /**
     * Returns the sum of this and the specified Long.
     * @param {!Long|number|string} addend Addend
     * @returns {!Long} Sum
     */
    LongPrototype.add = function add(addend) {
        if (!isLong(addend))
            addend = fromValue(addend);

        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = addend.high >>> 16;
        var b32 = addend.high & 0xFFFF;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 + b48;
        c48 &= 0xFFFF;
        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns the difference of this and the specified Long.
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */
    LongPrototype.subtract = function subtract(subtrahend) {
        if (!isLong(subtrahend))
            subtrahend = fromValue(subtrahend);
        return this.add(subtrahend.neg());
    };

    /**
     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
     * @function
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */
    LongPrototype.sub = LongPrototype.subtract;

    /**
     * Returns the product of this and the specified Long.
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */
    LongPrototype.multiply = function multiply(multiplier) {
        if (this.isZero())
            return ZERO;
        if (!isLong(multiplier))
            multiplier = fromValue(multiplier);

        // use wasm support if present
        if (wasm) {
            var low = wasm.mul(this.low,
                               this.high,
                               multiplier.low,
                               multiplier.high);
            return fromBits(low, wasm.get_high(), this.unsigned);
        }

        if (multiplier.isZero())
            return ZERO;
        if (this.eq(MIN_VALUE))
            return multiplier.isOdd() ? MIN_VALUE : ZERO;
        if (multiplier.eq(MIN_VALUE))
            return this.isOdd() ? MIN_VALUE : ZERO;

        if (this.isNegative()) {
            if (multiplier.isNegative())
                return this.neg().mul(multiplier.neg());
            else
                return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative())
            return this.mul(multiplier.neg()).neg();

        // If both longs are small, use float multiplication
        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.

        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 0xFFFF;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 0xFFFF;
        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
     * @function
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */
    LongPrototype.mul = LongPrototype.multiply;

    /**
     * Returns this Long divided by the specified. The result is signed if this Long is signed or
     *  unsigned if this Long is unsigned.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */
    LongPrototype.divide = function divide(divisor) {
        if (!isLong(divisor))
            divisor = fromValue(divisor);
        if (divisor.isZero())
            throw Error('division by zero');

        // use wasm support if present
        if (wasm) {
            // guard against signed division overflow: the largest
            // negative number / -1 would be 1 larger than the largest
            // positive number, due to two's complement.
            if (!this.unsigned &&
                this.high === -0x80000000 &&
                divisor.low === -1 && divisor.high === -1) {
                // be consistent with non-wasm code path
                return this;
            }
            var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
                this.low,
                this.high,
                divisor.low,
                divisor.high
            );
            return fromBits(low, wasm.get_high(), this.unsigned);
        }

        if (this.isZero())
            return this.unsigned ? UZERO : ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
            // This section is only relevant for signed longs and is derived from the
            // closure library as a whole.
            if (this.eq(MIN_VALUE)) {
                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
                else if (divisor.eq(MIN_VALUE))
                    return ONE;
                else {
                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                    var halfThis = this.shr(1);
                    approx = halfThis.div(divisor).shl(1);
                    if (approx.eq(ZERO)) {
                        return divisor.isNegative() ? ONE : NEG_ONE;
                    } else {
                        rem = this.sub(divisor.mul(approx));
                        res = approx.add(rem.div(divisor));
                        return res;
                    }
                }
            } else if (divisor.eq(MIN_VALUE))
                return this.unsigned ? UZERO : ZERO;
            if (this.isNegative()) {
                if (divisor.isNegative())
                    return this.neg().div(divisor.neg());
                return this.neg().div(divisor).neg();
            } else if (divisor.isNegative())
                return this.div(divisor.neg()).neg();
            res = ZERO;
        } else {
            // The algorithm below has not been made for unsigned longs. It's therefore
            // required to take special care of the MSB prior to running it.
            if (!divisor.unsigned)
                divisor = divisor.toUnsigned();
            if (divisor.gt(this))
                return UZERO;
            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
                return UONE;
            res = UZERO;
        }

        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        rem = this;
        while (rem.gte(divisor)) {
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2),
                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

            // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
                approxRes = fromNumber(approx),
                approxRem = approxRes.mul(divisor);
            while (approxRem.isNegative() || approxRem.gt(rem)) {
                approx -= delta;
                approxRes = fromNumber(approx, this.unsigned);
                approxRem = approxRes.mul(divisor);
            }

            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero())
                approxRes = ONE;

            res = res.add(approxRes);
            rem = rem.sub(approxRem);
        }
        return res;
    };

    /**
     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */
    LongPrototype.div = LongPrototype.divide;

    /**
     * Returns this Long modulo the specified.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.modulo = function modulo(divisor) {
        if (!isLong(divisor))
            divisor = fromValue(divisor);

        // use wasm support if present
        if (wasm) {
            var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
                this.low,
                this.high,
                divisor.low,
                divisor.high
            );
            return fromBits(low, wasm.get_high(), this.unsigned);
        }

        return this.sub(this.div(divisor).mul(divisor));
    };

    /**
     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.mod = LongPrototype.modulo;

    /**
     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.rem = LongPrototype.modulo;

    /**
     * Returns the bitwise NOT of this Long.
     * @returns {!Long}
     */
    LongPrototype.not = function not() {
        return fromBits(~this.low, ~this.high, this.unsigned);
    };

    /**
     * Returns the bitwise AND of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.and = function and(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };

    /**
     * Returns the bitwise OR of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.or = function or(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };

    /**
     * Returns the bitwise XOR of this Long and the given one.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.xor = function xor(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };

    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftLeft = function shiftLeft(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
        else
            return fromBits(0, this.low << (numBits - 32), this.unsigned);
    };

    /**
     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shl = LongPrototype.shiftLeft;

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftRight = function shiftRight(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
        else
            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
    };

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shr = LongPrototype.shiftRight;

    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0)
            return this;
        else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
            } else if (numBits === 32)
                return fromBits(high, 0, this.unsigned);
            else
                return fromBits(high >>> (numBits - 32), 0, this.unsigned);
        }
    };

    /**
     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shru = LongPrototype.shiftRightUnsigned;

    /**
     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

    /**
     * Converts this Long to signed.
     * @returns {!Long} Signed long
     */
    LongPrototype.toSigned = function toSigned() {
        if (!this.unsigned)
            return this;
        return fromBits(this.low, this.high, false);
    };

    /**
     * Converts this Long to unsigned.
     * @returns {!Long} Unsigned long
     */
    LongPrototype.toUnsigned = function toUnsigned() {
        if (this.unsigned)
            return this;
        return fromBits(this.low, this.high, true);
    };

    /**
     * Converts this Long to its byte representation.
     * @param {boolean=} le Whether little or big endian, defaults to big endian
     * @returns {!Array.<number>} Byte representation
     */
    LongPrototype.toBytes = function toBytes(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
    };

    /**
     * Converts this Long to its little endian byte representation.
     * @returns {!Array.<number>} Little endian byte representation
     */
    LongPrototype.toBytesLE = function toBytesLE() {
        var hi = this.high,
            lo = this.low;
        return [
            lo        & 0xff,
            lo >>>  8 & 0xff,
            lo >>> 16 & 0xff,
            lo >>> 24       ,
            hi        & 0xff,
            hi >>>  8 & 0xff,
            hi >>> 16 & 0xff,
            hi >>> 24
        ];
    };

    /**
     * Converts this Long to its big endian byte representation.
     * @returns {!Array.<number>} Big endian byte representation
     */
    LongPrototype.toBytesBE = function toBytesBE() {
        var hi = this.high,
            lo = this.low;
        return [
            hi >>> 24       ,
            hi >>> 16 & 0xff,
            hi >>>  8 & 0xff,
            hi        & 0xff,
            lo >>> 24       ,
            lo >>> 16 & 0xff,
            lo >>>  8 & 0xff,
            lo        & 0xff
        ];
    };

    /**
     * Creates a Long from its byte representation.
     * @param {!Array.<number>} bytes Byte representation
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @param {boolean=} le Whether little or big endian, defaults to big endian
     * @returns {Long} The corresponding Long value
     */
    Long$1.fromBytes = function fromBytes(bytes, unsigned, le) {
        return le ? Long$1.fromBytesLE(bytes, unsigned) : Long$1.fromBytesBE(bytes, unsigned);
    };

    /**
     * Creates a Long from its little endian byte representation.
     * @param {!Array.<number>} bytes Little endian byte representation
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {Long} The corresponding Long value
     */
    Long$1.fromBytesLE = function fromBytesLE(bytes, unsigned) {
        return new Long$1(
            bytes[0]       |
            bytes[1] <<  8 |
            bytes[2] << 16 |
            bytes[3] << 24,
            bytes[4]       |
            bytes[5] <<  8 |
            bytes[6] << 16 |
            bytes[7] << 24,
            unsigned
        );
    };

    /**
     * Creates a Long from its big endian byte representation.
     * @param {!Array.<number>} bytes Big endian byte representation
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {Long} The corresponding Long value
     */
    Long$1.fromBytesBE = function fromBytesBE(bytes, unsigned) {
        return new Long$1(
            bytes[4] << 24 |
            bytes[5] << 16 |
            bytes[6] <<  8 |
            bytes[7],
            bytes[0] << 24 |
            bytes[1] << 16 |
            bytes[2] <<  8 |
            bytes[3],
            unsigned
        );
    };

    var LongExports = /*#__PURE__*/Object.freeze(/*#__PURE__*/_mergeNamespaces({
        __proto__: null,
        'default': long
    }, [long]));

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // tslint:disable-next-line
    const Long = 
    // tslint:disable-next-line
    long || LongExports;
    function hexToLong(hex) {
        return Long.fromString(hex, true, 16);
    }
    // Some primes between 2^63 and 2^64 for various uses.
    // Hex 0xc3a5c85c97cb3127
    const k0 = hexToLong('c3a5c85c97cb3127');
    // Hex 0xb492b66fbe98f273
    const k1 = hexToLong('b492b66fbe98f273');
    // Hex 0x9ae16a3b2f90404f
    const k2 = hexToLong('9ae16a3b2f90404f');
    function shiftMix(val) {
        return val.xor(val.shru(47));
    }
    function fetch$2(s, offset, numBytes) {
        const bytes = s.slice(offset, offset + numBytes);
        return Long.fromBytes(Array.from(bytes), true, true);
    }
    function fetch64(s, offset) {
        return fetch$2(s, offset, 8);
    }
    function fetch32(s, offset) {
        return fetch$2(s, offset, 4);
    }
    function rotate64(val, shift) {
        // Avoid shifting by 64: doing so yields an undefined result.
        return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));
    }
    function hashLen16(u, v, mul = hexToLong('9ddfea08eb382d69')) {
        // Murmur-inspired hashing.
        let a = u.xor(v).mul(mul);
        a = a.xor(a.shru(47));
        let b = v.xor(a).mul(mul);
        b = b.xor(b.shru(47));
        b = b.mul(mul);
        return b;
    }
    // Return a 16-byte hash for 48 bytes.  Quick and dirty.
    // Callers do best to use "random-looking" values for a and b.
    function weakHashLen32WithSeeds(w, x, y, z, a, b) {
        a = a.add(w);
        b = rotate64(b.add(a).add(z), 21);
        const c = a;
        a = a.add(x);
        a = a.add(y);
        b = b.add(rotate64(a, 44));
        return [a.add(z), b.add(c)];
    }
    function weakHashLen32WithSeedsStr(s, offset, a, b) {
        return weakHashLen32WithSeeds(fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16), fetch64(s, offset + 24), a, b);
    }
    function hashLen0to16(s, len = s.length) {
        if (len >= 8) {
            const mul = k2.add(len * 2);
            const a = fetch64(s, 0).add(k2);
            const b = fetch64(s, len - 8);
            const c = rotate64(b, 37).mul(mul).add(a);
            const d = rotate64(a, 25).add(b).mul(mul);
            return hashLen16(c, d, mul);
        }
        if (len >= 4) {
            const mul = k2.add(len * 2);
            const a = fetch32(s, 0);
            return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);
        }
        if (len > 0) {
            const a = s[0];
            const b = s[len >> 1];
            const c = s[len - 1];
            const y = a + (b << 8);
            const z = len + (c << 2);
            return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);
        }
        return k2;
    }
    function hashLen17to32(s, len = s.length) {
        const mul = k2.add(len * 2);
        const a = fetch64(s, 0).mul(k1);
        const b = fetch64(s, 8);
        const c = fetch64(s, len - 8).mul(mul);
        const d = fetch64(s, len - 16).mul(k2);
        return hashLen16(rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d), a.add(rotate64(b.add(k2), 18)).add(c), mul);
    }
    function hashLen33to64(s, len = s.length) {
        const mul = k2.add(len * 2);
        const a = fetch64(s, 0).mul(k2);
        const b = fetch64(s, 8);
        const c = fetch64(s, len - 8).mul(mul);
        const d = fetch64(s, len - 16).mul(k2);
        const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);
        const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);
        const e = fetch64(s, 16).mul(mul);
        const f = fetch64(s, 24);
        const g = y.add(fetch64(s, len - 32)).mul(mul);
        const h = z.add(fetch64(s, len - 24)).mul(mul);
        return hashLen16(rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h), e.add(rotate64(f.add(a), 18)).add(g), mul);
    }
    function fingerPrint64(s, len = s.length) {
        const seed = Long.fromNumber(81, true);
        if (len <= 32) {
            if (len <= 16) {
                return hashLen0to16(s, len);
            }
            else {
                return hashLen17to32(s, len);
            }
        }
        else if (len <= 64) {
            return hashLen33to64(s, len);
        }
        // For strings over 64 bytes we loop.  Internal state consists of
        // 56 bytes: v, w, x, y, and z.
        let x = seed;
        let y = seed.mul(k1).add(113);
        let z = shiftMix(y.mul(k2).add(113)).mul(k2);
        let v = [Long.UZERO, Long.UZERO];
        let w = [Long.UZERO, Long.UZERO];
        x = x.mul(k2).add(fetch64(s, 0));
        let offset = 0;
        // Set end so that after the loop we have 1 to 64 bytes left to process.
        const end = ((len - 1) >> 6) * 64;
        const last64 = end + ((len - 1) & 63) - 63;
        do {
            x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);
            y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);
            x = x.xor(w[1]);
            y = y.add(v[0]).add(fetch64(s, offset + 40));
            z = rotate64(z.add(w[0]), 33).mul(k1);
            v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));
            w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));
            [z, x] = [x, z];
            offset += 64;
        } while (offset !== end);
        const mul = k1.add(z.and(0xff).shl(1));
        // Point to the last 64 bytes of input.
        offset = last64;
        w[0] = w[0].add((len - 1) & 63);
        v[0] = v[0].add(w[0]);
        w[0] = w[0].add(v[0]);
        x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);
        y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);
        x = x.xor(w[1].mul(9));
        y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));
        z = rotate64(z.add(w[0]), 33).mul(mul);
        v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));
        w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));
        [z, x] = [x, z];
        return hashLen16(hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z), hashLen16(v[1], w[1], mul).add(x), mul);
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Create typed array for scalar value. Used for storing in `DataStorage`.
     */
    function createScalarValue(value, dtype) {
        if (dtype === 'string') {
            return encodeString(value);
        }
        return toTypedArray([value], dtype);
    }
    function noConversionNeeded(a, dtype) {
        return (a instanceof Float32Array && dtype === 'float32') ||
            (a instanceof Int32Array && dtype === 'int32') ||
            (a instanceof Uint8Array && dtype === 'bool');
    }
    function toTypedArray(a, dtype) {
        if (dtype === 'string') {
            throw new Error('Cannot convert a string[] to a TypedArray');
        }
        if (Array.isArray(a)) {
            a = flatten(a);
        }
        if (env().getBool('DEBUG')) {
            checkConversionForErrors(a, dtype);
        }
        if (noConversionNeeded(a, dtype)) {
            return a;
        }
        if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
            return new Float32Array(a);
        }
        else if (dtype === 'int32') {
            return new Int32Array(a);
        }
        else if (dtype === 'bool') {
            const bool = new Uint8Array(a.length);
            for (let i = 0; i < bool.length; ++i) {
                if (Math.round(a[i]) !== 0) {
                    bool[i] = 1;
                }
            }
            return bool;
        }
        else {
            throw new Error(`Unknown data type ${dtype}`);
        }
    }
    /**
     * Returns the current high-resolution time in milliseconds relative to an
     * arbitrary time in the past. It works across different platforms (node.js,
     * browsers).
     *
     * ```js
     * console.log(tf.util.now());
     * ```
     *
     * @doc {heading: 'Util', namespace: 'util'}
     */
    function now() {
        return env().platform.now();
    }
    /**
     * Returns a platform-specific implementation of
     * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
     *
     * If `fetch` is defined on the global object (`window`, `process`, etc.),
     * `tf.util.fetch` returns that function.
     *
     * If not, `tf.util.fetch` returns a platform-specific solution.
     *
     * ```js
     * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');
     * // handle response
     * ```
     *
     * @doc {heading: 'Util'}
     */
    function fetch$1(path, requestInits) {
        return env().platform.fetch(path, requestInits);
    }
    /**
     * Encodes the provided string into bytes using the provided encoding scheme.
     *
     * @param s The string to encode.
     * @param encoding The encoding scheme. Defaults to utf-8.
     *
     * @doc {heading: 'Util'}
     */
    function encodeString(s, encoding = 'utf-8') {
        encoding = encoding || 'utf-8';
        return env().platform.encode(s, encoding);
    }
    /**
     * Decodes the provided bytes into a string using the provided encoding scheme.
     * @param bytes The bytes to decode.
     *
     * @param encoding The encoding scheme. Defaults to utf-8.
     *
     * @doc {heading: 'Util'}
     */
    function decodeString(bytes, encoding = 'utf-8') {
        encoding = encoding || 'utf-8';
        return env().platform.decode(bytes, encoding);
    }

    var util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        createScalarValue: createScalarValue,
        toTypedArray: toTypedArray,
        now: now,
        fetch: fetch$1,
        encodeString: encodeString,
        decodeString: decodeString,
        shuffle: shuffle,
        shuffleCombo: shuffleCombo,
        clamp: clamp,
        nearestLargerEven: nearestLargerEven,
        swap: swap,
        sum: sum$3,
        randUniform: randUniform,
        distSquared: distSquared,
        assert: assert,
        assertShapesMatch: assertShapesMatch,
        assertNonNull: assertNonNull,
        flatten: flatten,
        sizeFromShape: sizeFromShape,
        isScalarShape: isScalarShape,
        arraysEqual: arraysEqual,
        isInt: isInt,
        tanh: tanh$3,
        sizeToSquarishShape: sizeToSquarishShape,
        createShuffledIndices: createShuffledIndices,
        rightPad: rightPad,
        repeatedTry: repeatedTry,
        inferFromImplicitShape: inferFromImplicitShape,
        parseAxisParam: parseAxisParam,
        squeezeShape: squeezeShape,
        getTypedArrayFromDType: getTypedArrayFromDType,
        getArrayFromDType: getArrayFromDType,
        checkConversionForErrors: checkConversionForErrors,
        isValidDtype: isValidDtype,
        hasEncodingLoss: hasEncodingLoss,
        isTypedArray: isTypedArray,
        bytesPerElement: bytesPerElement,
        bytesFromStringArray: bytesFromStringArray,
        isString: isString,
        isBoolean: isBoolean,
        isNumber: isNumber,
        inferDtype: inferDtype,
        isFunction: isFunction,
        nearestDivisor: nearestDivisor,
        computeStrides: computeStrides,
        toNestedArray: toNestedArray,
        makeOnesTypedArray: makeOnesTypedArray,
        makeZerosTypedArray: makeZerosTypedArray,
        makeZerosNestedTypedArray: makeZerosNestedTypedArray,
        assertNonNegativeIntegerDimensions: assertNonNegativeIntegerDimensions,
        locToIndex: locToIndex,
        indexToLoc: indexToLoc,
        isPromise: isPromise,
        hexToLong: hexToLong,
        fingerPrint64: fingerPrint64
    });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Profiler {
        constructor(backendTimer, logger) {
            this.backendTimer = backendTimer;
            this.logger = logger;
            if (logger == null) {
                this.logger = new Logger();
            }
        }
        profileKernel(kernelName, inputs, f) {
            let outputs;
            const holdResultWrapperFn = () => {
                outputs = f();
            };
            let timer;
            const start = now();
            if (this.backendTimer.timerAvailable()) {
                timer = this.backendTimer.time(holdResultWrapperFn);
            }
            else {
                holdResultWrapperFn();
                for (const output of outputs) {
                    output.dataSync();
                }
                timer = Promise.resolve({ kernelMs: now() - start });
            }
            if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {
                for (let i = 0; i < outputs.length; i++) {
                    const output = outputs[i];
                    // Dangling promise here because we don't want to propagate up
                    // asynchronicity.
                    output.data().then(tensorVals => {
                        checkComputationForErrors(tensorVals, output.dtype, kernelName);
                    });
                }
            }
            const kernelProfile = {
                kernelName,
                outputs,
                inputs,
                timeMs: timer.then(timing => timing.kernelMs),
                extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?
                    timing.getExtraProfileInfo() :
                    '')
            };
            return kernelProfile;
        }
        logKernelProfile(kernelProfile) {
            const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;
            outputs.forEach(result => {
                Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {
                    this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);
                });
            });
        }
    }
    function checkComputationForErrors(vals, dtype, kernelName) {
        if (dtype !== 'float32') {
            // Only floating point computations will generate NaN values
            return false;
        }
        for (let i = 0; i < vals.length; i++) {
            const num = vals[i];
            if (isNaN(num) || !isFinite(num)) {
                // Throwing custom exception so behavior is testable.
                console.warn(`Found ${num} in the result of '${kernelName}'`);
                return true;
            }
        }
        return false;
    }
    class Logger {
        logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {
            const time = typeof timeMs === 'number' ? rightPad(`${timeMs}ms`, 9) :
                timeMs['error'];
            const paddedName = rightPad(name, 25);
            const rank = result.rank;
            const size = result.size;
            const shape = rightPad(result.shape.toString(), 14);
            let inputShapesDescription = '';
            for (const name in inputs) {
                const input = inputs[name];
                if (input != null) {
                    // The input might be a non-tensor (e.g HTMLImageElement), in which case
                    // we claim the output shape as input shape.
                    const inputShape = input.shape || result.shape;
                    const inputRank = inputShape.length;
                    inputShapesDescription +=
                        `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;
                }
            }
            console.log(`%c${paddedName}\t%c${time}\t%c${rank}D ${shape}\t%c${size}\t%c${inputShapesDescription}\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes a list of TapeNodes that connect x to y, filtering everything else
     * out and preserving the order of the original tape elements.
     *
     * @param tape The tape elements to filter.
     * @param xs The input Tensors.
     * @param y The output Tensor.
     */
    function getFilteredNodesXToY(tape, xs, y) {
        // Forward pass to compute all the nodes and Tensors that are transitively a
        // function of x.
        const tensorsFromX = {};
        const nodesFromX = {};
        for (let i = 0; i < xs.length; i++) {
            tensorsFromX[xs[i].id] = true;
        }
        for (let i = 0; i < tape.length; i++) {
            const node = tape[i];
            const nodeInputs = node.inputs;
            for (const inputName in nodeInputs) {
                const input = nodeInputs[inputName];
                let anyInputFromX = false;
                for (let j = 0; j < xs.length; j++) {
                    if (tensorsFromX[input.id]) {
                        node.outputs.forEach(output => tensorsFromX[output.id] = true);
                        anyInputFromX = true;
                        nodesFromX[node.id] = true;
                        break;
                    }
                }
                if (anyInputFromX) {
                    break;
                }
            }
        }
        // Backward pass to find all of the nodes and Tensors that lead to y.
        const tensorsLeadToY = {};
        tensorsLeadToY[y.id] = true;
        const nodesToY = {};
        for (let i = tape.length - 1; i >= 0; i--) {
            const node = tape[i];
            const nodeInputs = node.inputs;
            // If any of the outputs lead to y, mark all of the inputs as leading to y.
            for (let j = 0; j < node.outputs.length; j++) {
                if (tensorsLeadToY[node.outputs[j].id]) {
                    for (const inputName in nodeInputs) {
                        tensorsLeadToY[nodeInputs[inputName].id] = true;
                        nodesToY[node.id] = true;
                    }
                    break;
                }
            }
        }
        // Return the paths that come from x and lead to y.
        const filteredTape = [];
        for (let i = 0; i < tape.length; i++) {
            const node = tape[i];
            if (nodesFromX[node.id] && nodesToY[node.id]) {
                // Prune the inputs from the node that aren't a function of x.
                const prunedInputs = {};
                for (const inputName in node.inputs) {
                    const nodeInput = node.inputs[inputName];
                    if (tensorsFromX[nodeInput.id]) {
                        prunedInputs[inputName] = nodeInput;
                    }
                }
                // Copy the node and overwrite inputsAndArgs to the pruned version.
                const prunedNode = Object.assign({}, node);
                prunedNode.inputs = prunedInputs;
                prunedNode.outputs = node.outputs;
                filteredTape.push(prunedNode);
            }
        }
        return filteredTape;
    }
    /**
     * Backpropagate gradients through the filtered TapeNodes.
     *
     * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map
     * is mutated by this method.
     * @param filteredTape The filtered TapeNodes to backprop through.
     */
    function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {
        // Walk the tape backward and keep a map of Tensor to its gradient.
        for (let i = filteredTape.length - 1; i >= 0; i--) {
            const node = filteredTape[i];
            const dys = [];
            node.outputs.forEach(o => {
                const gradTensor = tensorAccumulatedGradientMap[o.id];
                if (gradTensor != null) {
                    dys.push(gradTensor);
                }
                else {
                    // This particular output is not in the back-propagation subgraph, so it
                    // does not affect the final output, thus we put null for its dy.
                    dys.push(null);
                }
            });
            if (node.gradient == null) {
                throw new Error(`Cannot compute gradient: gradient function not found ` +
                    `for ${node.kernelName}.`);
            }
            // Backprop dy through this node and accumulate gradients over the inputs.
            const inputGradients = node.gradient(dys);
            for (const inputName in node.inputs) {
                if (!(inputName in inputGradients)) {
                    throw new Error(`Cannot backprop through input ${inputName}. ` +
                        `Available gradients found: ${Object.keys(inputGradients)}.`);
                }
                // Call the gradient function.
                const dx = tidy(() => inputGradients[inputName]());
                if (dx.dtype !== 'float32') {
                    throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +
                        `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);
                }
                const x = node.inputs[inputName];
                if (!arraysEqual(dx.shape, x.shape)) {
                    throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +
                        `'${inputName}' has shape '${dx.shape}', which does not match ` +
                        `the shape of the input '${x.shape}'`);
                }
                if (tensorAccumulatedGradientMap[x.id] == null) {
                    tensorAccumulatedGradientMap[x.id] = dx;
                }
                else {
                    const curGradient = tensorAccumulatedGradientMap[x.id];
                    tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);
                    curGradient.dispose();
                }
            }
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Maximum number of values before we decide to show ellipsis.
    const FORMAT_LIMIT_NUM_VALS = 20;
    // Number of first and last values to show when displaying a, b,...,y, z.
    const FORMAT_NUM_FIRST_LAST_VALS = 3;
    // Number of significant digits to show.
    const FORMAT_NUM_SIG_DIGITS = 7;
    function tensorToString(vals, shape, dtype, verbose) {
        const strides = computeStrides(shape);
        const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);
        const rank = shape.length;
        const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);
        const lines = ['Tensor'];
        if (verbose) {
            lines.push(`  dtype: ${dtype}`);
            lines.push(`  rank: ${rank}`);
            lines.push(`  shape: [${shape}]`);
            lines.push(`  values:`);
        }
        lines.push(valsLines.map(l => '    ' + l).join('\n'));
        return lines.join('\n');
    }
    function computeMaxSizePerColumn(vals, shape, dtype, strides) {
        const n = sizeFromShape(shape);
        const numCols = strides[strides.length - 1];
        const padPerCol = new Array(numCols).fill(0);
        const rank = shape.length;
        const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;
        if (rank > 1) {
            for (let row = 0; row < n / numCols; row++) {
                const offset = row * numCols;
                for (let j = 0; j < numCols; j++) {
                    padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);
                }
            }
        }
        return padPerCol;
    }
    function valToString(val, pad, dtype) {
        let valStr;
        if (Array.isArray(val)) {
            valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +
                `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;
        }
        else if (isString(val)) {
            valStr = `'${val}'`;
        }
        else if (dtype === 'bool') {
            valStr = boolNumToString(val);
        }
        else {
            valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();
        }
        return rightPad(valStr, pad);
    }
    function boolNumToString(v) {
        return v === 0 ? 'false' : 'true';
    }
    function subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {
        const storagePerElement = dtype === 'complex64' ? 2 : 1;
        const size = shape[0];
        const rank = shape.length;
        if (rank === 0) {
            if (dtype === 'complex64') {
                const complexTuple = createComplexTuples(vals);
                return [valToString(complexTuple[0], 0, dtype)];
            }
            if (dtype === 'bool') {
                return [boolNumToString(vals[0])];
            }
            return [vals[0].toString()];
        }
        if (rank === 1) {
            if (size > FORMAT_LIMIT_NUM_VALS) {
                const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;
                let firstVals = Array.from(vals.slice(0, firstValsSize));
                let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));
                if (dtype === 'complex64') {
                    firstVals = createComplexTuples(firstVals);
                    lastVals = createComplexTuples(lastVals);
                }
                return [
                    '[' +
                        firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))
                            .join(', ') +
                        ', ..., ' +
                        lastVals
                            .map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))
                            .join(', ') +
                        ']'
                ];
            }
            const displayVals = dtype === 'complex64' ? createComplexTuples(vals) :
                Array.from(vals);
            return [
                '[' +
                    displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))
                        .join(', ') +
                    ']'
            ];
        }
        // The array is rank 2 or more.
        const subshape = shape.slice(1);
        const substrides = strides.slice(1);
        const stride = strides[0] * storagePerElement;
        const lines = [];
        if (size > FORMAT_LIMIT_NUM_VALS) {
            for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {
                const start = i * stride;
                const end = start + stride;
                lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));
            }
            lines.push('...');
            for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {
                const start = i * stride;
                const end = start + stride;
                lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));
            }
        }
        else {
            for (let i = 0; i < size; i++) {
                const start = i * stride;
                const end = start + stride;
                lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));
            }
        }
        const sep = rank === 2 ? ',' : '';
        lines[0] = '[' + lines[0] + sep;
        for (let i = 1; i < lines.length - 1; i++) {
            lines[i] = ' ' + lines[i] + sep;
        }
        let newLineSep = ',\n';
        for (let i = 2; i < rank; i++) {
            newLineSep += '\n';
        }
        lines[lines.length - 1] =
            ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);
        return lines;
    }
    function createComplexTuples(vals) {
        const complexTuples = [];
        for (let i = 0; i < vals.length; i += 2) {
            complexTuples.push([vals[i], vals[i + 1]]);
        }
        return complexTuples;
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * A mutable object, similar to `tf.Tensor`, that allows users to set values
     * at locations before converting to an immutable `tf.Tensor`.
     *
     * See `tf.buffer` for creating a tensor buffer.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    class TensorBuffer {
        constructor(shape, dtype, values) {
            this.dtype = dtype;
            this.shape = shape.slice();
            this.size = sizeFromShape(shape);
            if (values != null) {
                const n = values.length;
                assert(n === this.size, () => `Length of values '${n}' does not match the size ` +
                    `inferred by the shape '${this.size}'.`);
            }
            if (dtype === 'complex64') {
                throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +
                    `a TensorBuffer for the real and imaginary parts separately and ` +
                    `call tf.complex(real, imag).`);
            }
            this.values = values || getArrayFromDType(dtype, this.size);
            this.strides = computeStrides(shape);
        }
        /**
         * Sets a value in the buffer at a given location.
         *
         * @param value The value to set.
         * @param locs  The location indices.
         *
         * @doc {heading: 'Tensors', subheading: 'Creation'}
         */
        set(value, ...locs) {
            if (locs.length === 0) {
                locs = [0];
            }
            assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +
                `match the rank (${this.rank})`);
            const index = this.locToIndex(locs);
            this.values[index] = value;
        }
        /**
         * Returns the value in the buffer at the provided location.
         *
         * @param locs The location indices.
         *
         * @doc {heading: 'Tensors', subheading: 'Creation'}
         */
        get(...locs) {
            if (locs.length === 0) {
                locs = [0];
            }
            let i = 0;
            for (const loc of locs) {
                if (loc < 0 || loc >= this.shape[i]) {
                    const msg = `Requested out of range element at ${locs}. ` +
                        `  Buffer shape=${this.shape}`;
                    throw new Error(msg);
                }
                i++;
            }
            let index = locs[locs.length - 1];
            for (let i = 0; i < locs.length - 1; ++i) {
                index += this.strides[i] * locs[i];
            }
            return this.values[index];
        }
        locToIndex(locs) {
            if (this.rank === 0) {
                return 0;
            }
            else if (this.rank === 1) {
                return locs[0];
            }
            let index = locs[locs.length - 1];
            for (let i = 0; i < locs.length - 1; ++i) {
                index += this.strides[i] * locs[i];
            }
            return index;
        }
        indexToLoc(index) {
            if (this.rank === 0) {
                return [];
            }
            else if (this.rank === 1) {
                return [index];
            }
            const locs = new Array(this.shape.length);
            for (let i = 0; i < locs.length - 1; ++i) {
                locs[i] = Math.floor(index / this.strides[i]);
                index -= locs[i] * this.strides[i];
            }
            locs[locs.length - 1] = index;
            return locs;
        }
        get rank() {
            return this.shape.length;
        }
        /**
         * Creates an immutable `tf.Tensor` object from the buffer.
         *
         * @doc {heading: 'Tensors', subheading: 'Creation'}
         */
        toTensor() {
            return trackerFn().makeTensor(this.values, this.shape, this.dtype);
        }
    }
    // For tracking tensor creation and disposal.
    let trackerFn = null;
    // Used by chaining methods to call into ops.
    let opHandler$1 = null;
    /**
     * An external consumer can register itself as the tensor tracker. This way
     * the Tensor class can notify the tracker for every tensor created and
     * disposed.
     */
    function setTensorTracker(fn) {
        trackerFn = fn;
    }
    /**
     * An external consumer can register itself as the op handler. This way the
     * Tensor class can have chaining methods that call into ops via the op
     * handler.
     */
    function setOpHandler(handler) {
        opHandler$1 = handler;
    }
    /**
     * A `tf.Tensor` object represents an immutable, multidimensional array of
     * numbers that has a shape and a data type.
     *
     * For performance reasons, functions that create tensors do not necessarily
     * perform a copy of the data passed to them (e.g. if the data is passed as a
     * `Float32Array`), and changes to the data will change the tensor. This is not
     * a feature and is not supported. To avoid this behavior, use the tensor before
     * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.
     *
     * See `tf.tensor` for details on how to create a `tf.Tensor`.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    class Tensor {
        constructor(shape, dtype, dataId, id) {
            /** Whether this tensor has been globally kept. */
            this.kept = false;
            this.isDisposedInternal = false;
            this.shape = shape.slice();
            this.dtype = dtype || 'float32';
            this.size = sizeFromShape(shape);
            this.strides = computeStrides(shape);
            this.dataId = dataId;
            this.id = id;
            this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');
        }
        get rank() {
            return this.shape.length;
        }
        /**
         * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
         *
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        async buffer() {
            const vals = await this.data();
            return opHandler$1.buffer(this.shape, this.dtype, vals);
        }
        /**
         * Returns a `tf.TensorBuffer` that holds the underlying data.
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        bufferSync() {
            return opHandler$1.buffer(this.shape, this.dtype, this.dataSync());
        }
        /**
         * Returns the tensor data as a nested array. The transfer of data is done
         * asynchronously.
         *
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        async array() {
            const vals = await this.data();
            return toNestedArray(this.shape, vals, this.dtype === 'complex64');
        }
        /**
         * Returns the tensor data as a nested array. The transfer of data is done
         * synchronously.
         *
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        arraySync() {
            return toNestedArray(this.shape, this.dataSync(), this.dtype === 'complex64');
        }
        /**
         * Asynchronously downloads the values from the `tf.Tensor`. Returns a
         * promise of `TypedArray` that resolves when the computation has finished.
         *
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        async data() {
            this.throwIfDisposed();
            const data = trackerFn().read(this.dataId);
            if (this.dtype === 'string') {
                const bytes = await data;
                try {
                    return bytes.map(b => decodeString(b));
                }
                catch (_a) {
                    throw new Error('Failed to decode the string bytes into utf-8. ' +
                        'To get the original bytes, call tensor.bytes().');
                }
            }
            return data;
        }
        /**
         * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`
         * and `data()`, this method prevents data from being downloaded to CPU.
         *
         * For WebGL backend, the data will be stored on a densely packed texture.
         * This means that the texture will use the RGBA channels to store value.
         *
         * @param options:
         *     For WebGL,
         *         - customTexShape: Optional. If set, will use the user defined
         *     texture shape to create the texture.
         *
         * @returns For WebGL backend, a GPUData contains the new texture and
         *     its information.
         *     {
         *        tensorRef: The tensor that is associated with this texture,
         *        texture: WebGLTexture,
         *        texShape: [number, number] // [height, width]
         *     }
         *     Remember to dispose the GPUData after it is used by
         *     `res.tensorRef.dispose()`.
         *
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        dataToGPU(options) {
            this.throwIfDisposed();
            return trackerFn().readToGPU(this.dataId, options);
        }
        /**
         * Synchronously downloads the values from the `tf.Tensor`. This blocks the
         * UI thread until the values are ready, which can cause performance issues.
         *
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        dataSync() {
            this.throwIfDisposed();
            const data = trackerFn().readSync(this.dataId);
            if (this.dtype === 'string') {
                try {
                    return data.map(b => decodeString(b));
                }
                catch (_a) {
                    throw new Error('Failed to decode the string bytes into utf-8. ' +
                        'To get the original bytes, call tensor.bytes().');
                }
            }
            return data;
        }
        /** Returns the underlying bytes of the tensor's data. */
        async bytes() {
            this.throwIfDisposed();
            const data = await trackerFn().read(this.dataId);
            if (this.dtype === 'string') {
                return data;
            }
            else {
                return new Uint8Array(data.buffer);
            }
        }
        /**
         * Disposes `tf.Tensor` from memory.
         *
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        dispose() {
            if (this.isDisposed) {
                return;
            }
            trackerFn().disposeTensor(this);
            this.isDisposedInternal = true;
        }
        get isDisposed() {
            return this.isDisposedInternal;
        }
        throwIfDisposed() {
            if (this.isDisposed) {
                throw new Error(`Tensor is disposed.`);
            }
        }
        /**
         * Prints the `tf.Tensor`. See `tf.print` for details.
         *
         * @param verbose Whether to print verbose information about the tensor,
         *    including dtype and size.
         *
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        print(verbose = false) {
            return opHandler$1.print(this, verbose);
        }
        /**
         * Returns a copy of the tensor. See `tf.clone` for details.
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        clone() {
            this.throwIfDisposed();
            return opHandler$1.clone(this);
        }
        /**
         * Returns a human-readable description of the tensor. Useful for logging.
         *
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        toString(verbose = false) {
            const vals = this.dataSync();
            return tensorToString(vals, this.shape, this.dtype, verbose);
        }
        cast(dtype) {
            this.throwIfDisposed();
            return opHandler$1.cast(this, dtype);
        }
        variable(trainable = true, name, dtype) {
            this.throwIfDisposed();
            return trackerFn().makeVariable(this, trainable, name, dtype);
        }
    }
    Object.defineProperty(Tensor, Symbol.hasInstance, {
        value: (instance) => {
            // Implementation note: we should use properties of the object that will be
            // defined before the constructor body has finished executing (methods).
            // This is because when this code is transpiled by babel, babel will call
            // classCallCheck before the constructor body is run.
            // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.
            return !!instance && instance.data != null && instance.dataSync != null &&
                instance.throwIfDisposed != null;
        }
    });
    function getGlobalTensorClass() {
        // Use getGlobal so that we can augment the Tensor class across package
        // boundaries becase the node resolution alg may result in different modules
        // being returned for this file depending on the path they are loaded from.
        return getGlobal('Tensor', () => {
            return Tensor;
        });
    }
    // Global side effect. Cache global reference to Tensor class
    getGlobalTensorClass();
    /**
     * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    class Variable extends Tensor {
        constructor(initialValue, trainable, name, tensorId) {
            super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);
            this.trainable = trainable;
            this.name = name;
        }
        /**
         * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
         * the same shape and dtype as the old `tf.Tensor`.
         *
         * @param newValue New tensor to be assigned to this variable.
         *
         * @doc {heading: 'Tensors', subheading: 'Classes'}
         */
        assign(newValue) {
            if (newValue.dtype !== this.dtype) {
                throw new Error(`dtype of the new value (${newValue.dtype}) and ` +
                    `previous value (${this.dtype}) must match`);
            }
            if (!arraysEqual(newValue.shape, this.shape)) {
                throw new Error(`shape of the new value (${newValue.shape}) and ` +
                    `previous value (${this.shape}) must match`);
            }
            trackerFn().disposeTensor(this);
            this.dataId = newValue.dataId;
            trackerFn().incRef(this, null /* backend */);
        }
        dispose() {
            trackerFn().disposeVariable(this);
            this.isDisposedInternal = true;
        }
    }
    Object.defineProperty(Variable, Symbol.hasInstance, {
        value: (instance) => {
            return instance instanceof Tensor && instance.assign != null &&
                instance.assign instanceof Function;
        }
    });

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    var Rank;
    (function (Rank) {
        Rank["R0"] = "R0";
        Rank["R1"] = "R1";
        Rank["R2"] = "R2";
        Rank["R3"] = "R3";
        Rank["R4"] = "R4";
        Rank["R5"] = "R5";
        Rank["R6"] = "R6";
    })(Rank || (Rank = {}));
    // Looks for upcasting types. Used, for example, in operations with mixed dtype
    // inputs.
    var UpcastInt32AndMap;
    (function (UpcastInt32AndMap) {
        UpcastInt32AndMap["float32"] = "float32";
        UpcastInt32AndMap["int32"] = "int32";
        UpcastInt32AndMap["bool"] = "int32";
        UpcastInt32AndMap["complex64"] = "complex64";
    })(UpcastInt32AndMap || (UpcastInt32AndMap = {}));
    var UpcastBoolAndMap;
    (function (UpcastBoolAndMap) {
        UpcastBoolAndMap["float32"] = "float32";
        UpcastBoolAndMap["int32"] = "int32";
        UpcastBoolAndMap["bool"] = "bool";
        UpcastBoolAndMap["complex64"] = "complex64";
    })(UpcastBoolAndMap || (UpcastBoolAndMap = {}));
    var UpcastFloat32AndMap;
    (function (UpcastFloat32AndMap) {
        UpcastFloat32AndMap["float32"] = "float32";
        UpcastFloat32AndMap["int32"] = "float32";
        UpcastFloat32AndMap["bool"] = "float32";
        UpcastFloat32AndMap["complex64"] = "complex64";
    })(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));
    var UpcastComplex64AndMap;
    (function (UpcastComplex64AndMap) {
        UpcastComplex64AndMap["float32"] = "complex64";
        UpcastComplex64AndMap["int32"] = "complex64";
        UpcastComplex64AndMap["bool"] = "complex64";
        UpcastComplex64AndMap["complex64"] = "complex64";
    })(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));
    const upcastTypeMap = {
        'float32': UpcastFloat32AndMap,
        'int32': UpcastInt32AndMap,
        'bool': UpcastBoolAndMap,
        'complex64': UpcastComplex64AndMap
    };
    function upcastType(typeA, typeB) {
        if (typeA === 'string' || typeB === 'string') {
            if (typeA === 'string' && typeB === 'string') {
                return 'string';
            }
            throw new Error(`Can not upcast ${typeA} with ${typeB}`);
        }
        return upcastTypeMap[typeA][typeB];
    }
    /** Returns the output type after summation. */
    function sumOutType(type) {
        return upcastType(type, 'int32');
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function makeTypesMatch(a, b) {
        if (a.dtype === b.dtype) {
            return [a, b];
        }
        const dtype = upcastType(a.dtype, b.dtype);
        return [a.cast(dtype), b.cast(dtype)];
    }
    function assertTypesMatch(a, b) {
        assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` +
            ` second(${b.dtype}) input must match`);
    }
    function isTensorInList(tensor, tensorList) {
        return tensorList.some(x => x.id === tensor.id);
    }
    /**
     * Extracts any `Tensor`s found within the provided object.
     *
     * @param container an object that may be a `Tensor` or may directly contain
     *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it
     *   is safe to pass any object here, except that `Promise`s are not
     *   supported.
     * @returns An array of `Tensors` found within the passed object. If the
     *   argument is simply a `Tensor', a list containing that `Tensor` is
     *   returned. If the object is not a `Tensor` or does not
     *   contain `Tensors`, an empty list is returned.
     */
    function getTensorsInContainer(result) {
        const list = [];
        const seen = new Set();
        walkTensorContainer(result, list, seen);
        return list;
    }
    function walkTensorContainer(container, list, seen) {
        if (container == null) {
            return;
        }
        if (container instanceof Tensor) {
            list.push(container);
            return;
        }
        if (!isIterable(container)) {
            return;
        }
        // Iteration over keys works also for arrays.
        const iterable = container;
        for (const k in iterable) {
            const val = iterable[k];
            if (!seen.has(val)) {
                seen.add(val);
                walkTensorContainer(val, list, seen);
            }
        }
    }
    // tslint:disable-next-line:no-any
    function isIterable(obj) {
        return Array.isArray(obj) || typeof obj === 'object';
    }

    var tensor_util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        makeTypesMatch: makeTypesMatch,
        assertTypesMatch: assertTypesMatch,
        isTensorInList: isTensorInList,
        getTensorsInContainer: getTensorsInContainer
    });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function isRegisteredKernelInvocation(kernelInvocation) {
        return kernelInvocation.kernelName != null;
    }
    class EngineState {
        constructor() {
            // Public since optimizers will use it.
            this.registeredVariables = {};
            this.nextTapeNodeId = 0;
            this.numBytes = 0;
            this.numTensors = 0;
            this.numStringTensors = 0;
            this.numDataBuffers = 0;
            // Number of nested tf.grad() statements when computing higher-order
            // gradients. E.g. `1` for first-order gradients and `2` for second-order
            // gradients. Used to track if the tape should be removed after a backprop.
            this.gradientDepth = 0;
            // Number of nested kernel calls. When kernel depth is greater than 1, we turn
            // off the tape.
            this.kernelDepth = 0;
            this.scopeStack = [];
            /**
             * Keeps track of the number of data moves during a kernel execution. We
             * maintain a stack since kernels can call other kernels, recursively.
             */
            this.numDataMovesStack = [];
            this.nextScopeId = 0;
            this.tensorInfo = new WeakMap();
            this.profiling = false;
            this.activeProfile = {
                newBytes: 0,
                newTensors: 0,
                peakBytes: 0,
                kernels: [],
                result: null,
                get kernelNames() {
                    return Array.from(new Set(this.kernels.map(k => k.name)));
                }
            };
        }
        dispose() {
            for (const variableName in this.registeredVariables) {
                this.registeredVariables[variableName].dispose();
            }
        }
    }
    class Engine {
        constructor(ENV) {
            this.ENV = ENV;
            this.registry = {};
            this.registryFactory = {};
            this.pendingBackendInitId = 0;
            this.state = new EngineState();
        }
        async ready() {
            if (this.pendingBackendInit != null) {
                return this.pendingBackendInit.then(() => { });
            }
            if (this.backendInstance != null) {
                return;
            }
            const sortedBackends = this.getSortedBackends();
            for (let i = 0; i < sortedBackends.length; i++) {
                const backendName = sortedBackends[i];
                const success = await this.initializeBackend(backendName).success;
                if (success) {
                    await this.setBackend(backendName);
                    return;
                }
            }
            throw new Error(`Could not initialize any backends, all backend initializations ` +
                `failed.`);
        }
        get backend() {
            if (this.pendingBackendInit != null) {
                throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +
                    `sure to await tf.ready() or await tf.setBackend() before calling ` +
                    `other methods`);
            }
            if (this.backendInstance == null) {
                const { name, asyncInit } = this.initializeBackendsAndReturnBest();
                if (asyncInit) {
                    throw new Error(`The highest priority backend '${name}' has not yet been ` +
                        `initialized. Make sure to await tf.ready() or ` +
                        `await tf.setBackend() before calling other methods`);
                }
                this.setBackend(name);
            }
            return this.backendInstance;
        }
        backendNames() {
            return Object.keys(this.registryFactory);
        }
        findBackend(backendName) {
            if (!(backendName in this.registry)) {
                // If the backend hasn't been initialized but we have a registry entry for
                // it, initialize it and return it.
                if (backendName in this.registryFactory) {
                    const { asyncInit } = this.initializeBackend(backendName);
                    if (asyncInit) {
                        // Backend is not ready yet.
                        return null;
                    }
                }
                else {
                    return null;
                }
            }
            return this.registry[backendName];
        }
        findBackendFactory(backendName) {
            if (!(backendName in this.registryFactory)) {
                return null;
            }
            return this.registryFactory[backendName].factory;
        }
        registerBackend(backendName, factory, priority = 1) {
            if (backendName in this.registryFactory) {
                warn(`${backendName} backend was already registered. ` +
                    `Reusing existing backend factory.`);
                return false;
            }
            this.registryFactory[backendName] = { factory, priority };
            return true;
        }
        async setBackend(backendName) {
            if (this.registryFactory[backendName] == null) {
                throw new Error(`Backend name '${backendName}' not found in registry`);
            }
            this.backendName = backendName;
            if (this.registry[backendName] == null) {
                this.backendInstance = null;
                const { success, asyncInit } = this.initializeBackend(backendName);
                const result = asyncInit ? await success : success;
                if (!result) {
                    return false;
                }
            }
            this.backendInstance = this.registry[backendName];
            this.setupRegisteredKernels();
            // Reset the profiler.
            this.profiler = new Profiler(this.backendInstance);
            return true;
        }
        setupRegisteredKernels() {
            const kernels = getKernelsForBackend(this.backendName);
            kernels.forEach(kernel => {
                if (kernel.setupFunc != null) {
                    kernel.setupFunc(this.backendInstance);
                }
            });
        }
        disposeRegisteredKernels(backendName) {
            const kernels = getKernelsForBackend(backendName);
            kernels.forEach(kernel => {
                if (kernel.disposeFunc != null) {
                    kernel.disposeFunc(this.registry[backendName]);
                }
            });
        }
        /**
         * Initializes a backend by looking up the backend name in the factory
         * registry and calling the factory method. Returns a boolean representing
         * whether the initialization of the backend suceeded. Throws an error if
         * there is no backend in the factory registry.
         */
        initializeBackend(backendName) {
            const registryFactoryEntry = this.registryFactory[backendName];
            if (registryFactoryEntry == null) {
                throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);
            }
            try {
                const backend = registryFactoryEntry.factory();
                /* Test if the factory returns a promise.
                Done in a more liberal way than
                previous 'Promise.resolve(backend)===backend'
                as we needed to account for custom Promise
                implementations (e.g. Angular) */
                if (backend && !(backend instanceof KernelBackend) &&
                    typeof backend.then === 'function') {
                    const promiseId = ++this.pendingBackendInitId;
                    const success = backend
                        .then(backendInstance => {
                        // Outdated promise. Another backend was set in the meantime.
                        if (promiseId < this.pendingBackendInitId) {
                            return false;
                        }
                        this.registry[backendName] = backendInstance;
                        this.pendingBackendInit = null;
                        return true;
                    })
                        .catch(err => {
                        // Outdated promise. Another backend was set in the meantime.
                        if (promiseId < this.pendingBackendInitId) {
                            return false;
                        }
                        this.pendingBackendInit = null;
                        warn(`Initialization of backend ${backendName} failed`);
                        warn(err.stack || err.message);
                        return false;
                    });
                    this.pendingBackendInit = success;
                    return { success, asyncInit: true };
                }
                else {
                    this.registry[backendName] = backend;
                    return { success: true, asyncInit: false };
                }
            }
            catch (err) {
                warn(`Initialization of backend ${backendName} failed`);
                warn(err.stack || err.message);
                return { success: false, asyncInit: false };
            }
        }
        removeBackend(backendName) {
            if (!(backendName in this.registryFactory)) {
                throw new Error(`${backendName} backend not found in registry`);
            }
            if (this.backendName === backendName && this.pendingBackendInit != null) {
                // There is a pending promise of the backend we want to remove. Make it
                // obsolete.
                this.pendingBackendInitId++;
            }
            if (backendName in this.registry) {
                this.disposeRegisteredKernels(backendName);
                this.registry[backendName].dispose();
                delete this.registry[backendName];
            }
            delete this.registryFactory[backendName];
            // Unset the backend if it is active.
            if (this.backendName === backendName) {
                this.pendingBackendInit = null;
                this.backendName = null;
                this.backendInstance = null;
            }
        }
        getSortedBackends() {
            if (Object.keys(this.registryFactory).length === 0) {
                throw new Error('No backend found in registry.');
            }
            return Object.keys(this.registryFactory).sort((a, b) => {
                // Highest priority comes first.
                return this.registryFactory[b].priority -
                    this.registryFactory[a].priority;
            });
        }
        initializeBackendsAndReturnBest() {
            const sortedBackends = this.getSortedBackends();
            for (let i = 0; i < sortedBackends.length; i++) {
                const backendName = sortedBackends[i];
                const { success, asyncInit } = this.initializeBackend(backendName);
                if (asyncInit || success) {
                    return { name: backendName, asyncInit };
                }
            }
            throw new Error(`Could not initialize any backends, all backend initializations ` +
                `failed.`);
        }
        moveData(backend, dataId) {
            const info = this.state.tensorInfo.get(dataId);
            const srcBackend = info.backend;
            const values = this.readSync(dataId);
            const refCount = srcBackend.refCount(dataId);
            // Delete the tensor from the old backend and move it to the new
            // backend.
            srcBackend.disposeData(dataId, true);
            info.backend = backend;
            backend.move(dataId, values, info.shape, info.dtype, refCount);
            if (this.shouldCheckForMemLeaks()) {
                // Track the number of moves during a kernel execution to correctly
                // detect memory leaks.
                this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
            }
        }
        tidy(nameOrFn, fn) {
            let name = null;
            if (fn == null) {
                // Called with only 1 argument.
                if (typeof nameOrFn !== 'function') {
                    throw new Error('Please provide a function to tidy()');
                }
                fn = nameOrFn;
            }
            else {
                // Called with 2 arguments.
                if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {
                    throw new Error('When calling with two arguments, the first argument ' +
                        'to tidy() must be a string');
                }
                if (typeof fn !== 'function') {
                    throw new Error('When calling with two arguments, the 2nd argument ' +
                        'to tidy() must be a function');
                }
                name = nameOrFn;
                // TODO(nsthorat,smilkov): Do operation logging and performance
                // profiling.
            }
            let result;
            return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {
                result = fn();
                if (result instanceof Promise) {
                    console.error('Cannot return a Promise inside of tidy.');
                }
                return result;
            });
        }
        scopedRun(start, end, f) {
            start();
            try {
                const res = f();
                end();
                return res;
            }
            catch (ex) {
                end();
                throw ex;
            }
        }
        nextTensorId() {
            return Engine.nextTensorId++;
        }
        nextVariableId() {
            return Engine.nextVariableId++;
        }
        /**
         * This method is called instead of the public-facing tensor.clone() when
         * saving a tensor for backwards pass. It makes sure to add the clone
         * operation to the tape regardless of being called inside a kernel
         * execution.
         */
        clone(x) {
            const y = ENGINE.runKernel(Identity, { x });
            const inputs = { x };
            const grad = (dy) => ({
                x: () => {
                    const dtype = 'float32';
                    const gradInputs = { x: dy };
                    const attrs = { dtype };
                    return ENGINE.runKernel(Cast, gradInputs, 
                    // tslint:disable-next-line: no-unnecessary-type-assertion
                    attrs);
                }
            });
            const saved = [];
            this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});
            return y;
        }
        /**
         * Execute a kernel with the given name and return the output tensor.
         *
         * @param kernelName The name of the kernel to execute.
         * @param inputs A map of input names to tensors.
         * @param attrs A map of attribute names to their values. An attribute is a
         *     primitive (non-tensor) input to the kernel.
         * @param inputsToSave A list of tensors, inputs to save for the backprop
         *     computation.
         * @param outputsToSave A list of booleans, specifying which output to save
         *     for the backprop computation. These are booleans since the output
         * tensors are not visible to the user.
         */
        runKernel(kernelName, inputs, attrs) {
            if (this.backendName == null) {
                // backend has not been initialized yet (backend initialization is lazy
                // can be deferred until an op/ kernel is run).
                // The below getter has side effects that will try to initialize the
                // backend and set properties like this.backendName
                // tslint:disable-next-line: no-unused-expression
                this.backend;
            }
            const hasKernel = getKernel(kernelName, this.backendName) != null;
            if (!hasKernel) {
                throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);
            }
            return this.runKernelFunc({ kernelName, inputs, attrs });
        }
        shouldCheckForMemLeaks() {
            return this.ENV.getBool('IS_TEST');
        }
        checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {
            const numDataIdsAfter = this.backend.numDataIds();
            // Count the number of data ids associated with the result of the kernel.
            let numOutputDataIds = 0;
            outInfos.forEach(info => {
                // Complex numbers allocate 3 data ids, one for 'real', one for
                // 'imaginary', and one for the container that holds the former two.
                numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);
            });
            // Account for the number of moves during kernel execution. A "data move"
            // can happen in the middle of a kernel execution, placing a new (key,value)
            // pair in the data storage. Since data moves have net zero effect (we
            // always remove the data from the old backend), we have to cancel them out
            // when detecting memory leaks.
            const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];
            const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;
            if (dataIdsLeaked > 0) {
                throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +
                    `(${dataIdsLeaked} data ids) after running '${kernelName}'`);
            }
        }
        /**
         * Internal helper method to execute a kernel Func
         *
         * Use `runKernel` to execute kernels from outside of engine.
         */
        runKernelFunc(kernelParams) {
            let outputs;
            let saved = [];
            const isTapeOn = this.isTapeOn();
            const startingBytecount = this.state.numBytes;
            const startingNumTensors = this.state.numTensors;
            if (this.shouldCheckForMemLeaks()) {
                this.state.numDataMovesStack.push(0);
            }
            let kernelFunc;
            if (this.backendName == null) {
                // backend has not been initialized yet (backend initialization is lazy
                // can be deferred until an op/ kernel is run).
                // The below getter has side effects that will try to initialize the
                // backend and set properties like this.backendName
                // tslint:disable-next-line: no-unused-expression
                this.backend;
            }
            let out;
            const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?
                kernelParams.kernelName :
                this.state.activeScope != null ? this.state.activeScope.name : '';
            // Create the kernelFunc from either a registered kernel OR passed in
            // forward/backward functions (used by custom grad). In this context a
            // kernelFunc wraps a kernel implementation with some bookkeeping.
            if (isRegisteredKernelInvocation(kernelParams)) {
                const { kernelName, inputs, attrs } = kernelParams;
                if (this.backendName == null) {
                    // backend has not been initialized yet (backend initialization is lazy
                    // can be deferred until an op/ kernel is run).
                    // The below getter has side effects that will try to initialize the
                    // backend and set properties like this.backendName
                    // tslint:disable-next-line: no-unused-expression
                    this.backend;
                }
                const kernel = getKernel(kernelName, this.backendName);
                assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);
                kernelFunc = () => {
                    const numDataIdsBefore = this.backend.numDataIds();
                    out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });
                    const outInfos = Array.isArray(out) ? out : [out];
                    if (this.shouldCheckForMemLeaks()) {
                        this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);
                    }
                    const outTensors = outInfos.map((outInfo) => {
                        // todo (yassogba) remove this option (Tensor) when node backend
                        // methods have been modularized and they all return tensorInfo.
                        // TensorInfos do not have a rank attribute.
                        if (outInfo.rank != null) {
                            return outInfo;
                        }
                        const { dataId, shape, dtype } = outInfo;
                        return this.makeTensorFromDataId(dataId, shape, dtype);
                    });
                    // Save any required inputs and outputs.
                    // Do not save unless we are recording to the tape. Otherwise it would
                    // cause a mem leak since there would be no backprop for these tensors
                    // (which would otherwise dispose them).
                    if (isTapeOn) {
                        const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);
                        saved = this.saveTensorsForBackwardMode(tensorsToSave);
                    }
                    return outTensors;
                };
            }
            else {
                const { forwardFunc } = kernelParams;
                // Running a customGrad op.
                const saveFunc = (tensors) => {
                    // Do not save unless we are recording to the tape. Otherwise it would
                    // cause a mem leak since we would never run backprop, which disposes
                    // the kept tensors.
                    if (!isTapeOn) {
                        return;
                    }
                    saved = tensors.map(tensor => this.keep(this.clone(tensor)));
                };
                kernelFunc = () => {
                    const numDataIdsBefore = this.backend.numDataIds();
                    out = this.tidy(() => forwardFunc(this.backend, saveFunc));
                    const outs = (Array.isArray(out) ? out : [out]);
                    if (this.shouldCheckForMemLeaks()) {
                        // Scope name is used to print a more helpful error message if needed.
                        this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);
                    }
                    return outs;
                };
            }
            //
            // Run the kernelFunc. Optionally profiling it.
            //
            const { inputs, attrs } = kernelParams;
            const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?
                null :
                kernelParams.backwardsFunc;
            let kernelProfile;
            this.scopedRun(
            // Stop recording to a tape when running a kernel.
            () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
                if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {
                    outputs = kernelFunc();
                }
                else {
                    kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());
                    if (this.ENV.getBool('DEBUG')) {
                        this.profiler.logKernelProfile(kernelProfile);
                    }
                    outputs = kernelProfile.outputs;
                }
            });
            if (isTapeOn) {
                this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);
            }
            if (this.state.profiling) {
                this.state.activeProfile.kernels.push({
                    name: kernelOrScopeName,
                    bytesAdded: this.state.numBytes - startingBytecount,
                    totalBytesSnapshot: this.state.numBytes,
                    tensorsAdded: this.state.numTensors - startingNumTensors,
                    totalTensorsSnapshot: this.state.numTensors,
                    inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),
                    outputShapes: outputs.map(item => item.shape),
                    kernelTimeMs: kernelProfile.timeMs,
                    extraInfo: kernelProfile.extraInfo
                });
            }
            return (Array.isArray(out) ? outputs : outputs[0]);
        }
        /**
         * Saves tensors used in forward mode for use in backward mode.
         *
         * @param tensors the list of tensors to save.
         */
        saveTensorsForBackwardMode(tensors) {
            const saved = tensors.map(tensor => this.keep(this.clone(tensor)));
            return saved;
        }
        /**
         * Returns a list of tensors to save for a given gradient calculation.
         *
         * @param kernelName name of kernel to look up gradient for.
         * @param inputs a map of input tensors.
         * @param outputs an array of output tensors from forward mode of kernel.
         */
        getTensorsForGradient(kernelName, inputs, outputs) {
            const gradConfig = getGradient(kernelName);
            if (gradConfig != null) {
                const inputsToSave = gradConfig.inputsToSave || [];
                const outputsToSave = gradConfig.outputsToSave || [];
                // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs
                // specified in inputsToSave will be saved.
                let inputTensorsToSave;
                if (gradConfig.saveAllInputs) {
                    assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');
                    inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);
                }
                else {
                    inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);
                }
                const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);
                return inputTensorsToSave.concat(outputTensorsToSave);
            }
            // We return an empty list rather than throw an error because the kernel we
            // are looking up may not actually be relevant to backproping through the
            // overall function
            //
            // See 'does not error if irrelevant (pruned) ops are missing grads' test
            // in gradients_test.ts for an example.
            return [];
        }
        /**
         * Internal method used by public APIs for tensor creation. Makes a new
         * tensor with the provided shape, dtype and values. It always
         * creates a new data id and writes the values to the underlying backend.
         */
        makeTensor(values, shape, dtype, backend) {
            if (values == null) {
                throw new Error('Values passed to engine.makeTensor() are null');
            }
            dtype = dtype || 'float32';
            backend = backend || this.backend;
            let backendVals = values;
            if (dtype === 'string' && isString(values[0])) {
                backendVals = values.map(d => encodeString(d));
            }
            const dataId = backend.write(backendVals, shape, dtype);
            const t = new Tensor(shape, dtype, dataId, this.nextTensorId());
            this.trackTensor(t, backend);
            // Count bytes for string tensors.
            if (dtype === 'string') {
                const info = this.state.tensorInfo.get(dataId);
                const newBytes = bytesFromStringArray(backendVals);
                this.state.numBytes += newBytes - info.bytes;
                info.bytes = newBytes;
            }
            return t;
        }
        /**
         * Internal method used by backends. Makes a new tensor
         * that is a wrapper around an existing data id. It doesn't create
         * a new data id, only increments the ref count used in memory tracking.
         */
        makeTensorFromDataId(dataId, shape, dtype, backend) {
            dtype = dtype || 'float32';
            const t = new Tensor(shape, dtype, dataId, this.nextTensorId());
            this.trackTensor(t, backend);
            return t;
        }
        makeVariable(initialValue, trainable = true, name, dtype) {
            name = name || this.nextVariableId().toString();
            if (dtype != null && dtype !== initialValue.dtype) {
                initialValue = initialValue.cast(dtype);
            }
            const v = new Variable(initialValue, trainable, name, this.nextTensorId());
            if (this.state.registeredVariables[v.name] != null) {
                throw new Error(`Variable with name ${v.name} was already registered`);
            }
            this.state.registeredVariables[v.name] = v;
            this.incRef(v, this.backend);
            return v;
        }
        trackTensor(a, backend) {
            this.state.numTensors++;
            if (a.dtype === 'string') {
                this.state.numStringTensors++;
            }
            // Bytes for complex numbers are counted by their components. Bytes for
            // string tensors are counted when writing values.
            let bytes = 0;
            if (a.dtype !== 'complex64' && a.dtype !== 'string') {
                bytes = a.size * bytesPerElement(a.dtype);
            }
            this.state.numBytes += bytes;
            if (!this.state.tensorInfo.has(a.dataId)) {
                this.state.numDataBuffers++;
                this.state.tensorInfo.set(a.dataId, {
                    backend: backend || this.backend,
                    dtype: a.dtype,
                    shape: a.shape,
                    bytes
                });
            }
            if (!(a instanceof Variable)) {
                this.track(a);
            }
        }
        // Track the tensor by dataId and increase the refCount for the dataId in the
        // backend.
        // TODO(pyu10055): This is currently used by makeVariable method, to increase
        // refCount on the backend for the dataId. It can potentially be replaced with
        // Identity op indead of calling backend directly.
        incRef(a, backend) {
            this.trackTensor(a, backend);
            this.backend.incRef(a.dataId);
        }
        removeDataId(dataId, backend) {
            if (this.state.tensorInfo.has(dataId) &&
                this.state.tensorInfo.get(dataId).backend === backend) {
                this.state.tensorInfo.delete(dataId);
                this.state.numDataBuffers--;
            }
        }
        disposeTensor(a) {
            if (!this.state.tensorInfo.has(a.dataId)) {
                return;
            }
            const info = this.state.tensorInfo.get(a.dataId);
            this.state.numTensors--;
            if (a.dtype === 'string') {
                this.state.numStringTensors--;
                this.state.numBytes -= info.bytes;
            }
            // Don't count bytes for complex numbers as they are counted by their
            // components.
            if (a.dtype !== 'complex64' && a.dtype !== 'string') {
                const bytes = a.size * bytesPerElement(a.dtype);
                this.state.numBytes -= bytes;
            }
            // Remove the reference to dataId if backend dispose the data successfully
            if (info.backend.disposeData(a.dataId)) {
                this.removeDataId(a.dataId, info.backend);
            }
            // TODO(nsthorat): Construct an error and save the stack trace for
            // debugging when in debug mode. Creating a stack trace is too expensive
            // to do unconditionally.
        }
        disposeVariables() {
            for (const varName in this.state.registeredVariables) {
                const v = this.state.registeredVariables[varName];
                this.disposeVariable(v);
            }
        }
        disposeVariable(v) {
            this.disposeTensor(v);
            if (this.state.registeredVariables[v.name] != null) {
                delete this.state.registeredVariables[v.name];
            }
        }
        memory() {
            const info = this.backend.memory();
            info.numTensors = this.state.numTensors;
            info.numDataBuffers = this.state.numDataBuffers;
            info.numBytes = this.state.numBytes;
            if (this.state.numStringTensors > 0) {
                info.unreliable = true;
                if (info.reasons == null) {
                    info.reasons = [];
                }
                info.reasons.push('Memory usage by string tensors is approximate ' +
                    '(2 bytes per character)');
            }
            return info;
        }
        async profile(query) {
            this.state.profiling = true;
            const startBytes = this.state.numBytes;
            const startNumTensors = this.state.numTensors;
            this.state.activeProfile.kernels = [];
            this.state.activeProfile.result = await query();
            this.state.profiling = false;
            this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));
            this.state.activeProfile.newBytes = this.state.numBytes - startBytes;
            this.state.activeProfile.newTensors =
                this.state.numTensors - startNumTensors;
            for (const kernel of this.state.activeProfile.kernels) {
                kernel.kernelTimeMs = await kernel.kernelTimeMs;
                kernel.extraInfo = await kernel.extraInfo;
            }
            return this.state.activeProfile;
        }
        isTapeOn() {
            return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
        }
        addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {
            const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };
            const gradConfig = getGradient(kernelName);
            if (gradConfig != null) {
                gradientsFunc = gradConfig.gradFunc;
            }
            if (gradientsFunc != null) {
                tapeNode.gradient = (dys) => {
                    // TODO(smilkov): To optimize back-prop, pass dys that are not used in
                    // the backprop graph to the user as null instead of zeros
                    dys = dys.map((dy, i) => {
                        if (dy == null) {
                            const output = outputs[i];
                            const vals = makeZerosTypedArray(output.size, output.dtype);
                            return this.makeTensor(vals, output.shape, output.dtype);
                        }
                        return dy;
                    });
                    // Grad functions of ops with single outputs expect a dy, while ops
                    // with multiple outputs expect dys (array of dy).
                    return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);
                };
            }
            this.state.activeTape.push(tapeNode);
        }
        keep(result) {
            result.kept = true;
            return result;
        }
        startTape() {
            if (this.state.gradientDepth === 0) {
                this.state.activeTape = [];
            }
            this.state.gradientDepth++;
        }
        endTape() {
            this.state.gradientDepth--;
        }
        /**
         * Start a scope. Use this with endScope() to achieve the same functionality
         * as scope() without the need for a function closure.
         */
        startScope(name) {
            const scopeInfo = {
                track: [],
                name: 'unnamed scope',
                id: this.state.nextScopeId++
            };
            if (name) {
                scopeInfo.name = name;
            }
            this.state.scopeStack.push(scopeInfo);
            this.state.activeScope = scopeInfo;
        }
        /**
         * End a scope. Use this with startScope() to achieve the same functionality
         * as scope() without the need for a function closure.
         */
        endScope(result) {
            const tensorsToTrackInParent = getTensorsInContainer(result);
            const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));
            // Dispose the arrays tracked in this scope.
            for (let i = 0; i < this.state.activeScope.track.length; i++) {
                const tensor = this.state.activeScope.track[i];
                if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {
                    tensor.dispose();
                }
            }
            const oldScope = this.state.scopeStack.pop();
            this.state.activeScope = this.state.scopeStack.length === 0 ?
                null :
                this.state.scopeStack[this.state.scopeStack.length - 1];
            // Track the current result in the parent scope.
            tensorsToTrackInParent.forEach(tensor => {
                // Only track the tensor if was allocated in the inner scope and is not
                // globally kept.
                if (!tensor.kept && tensor.scopeId === oldScope.id) {
                    this.track(tensor);
                }
            });
        }
        /**
         * Returns gradients of `f` with respect to each of the `xs`. The gradients
         * returned are of the same length as `xs`, but some might be null if `f`
         * was not a function of that `x`. It also takes optional dy to multiply the
         * gradient, which defaults to `1`.
         */
        gradients(f, xs, dy, allowNoGradients = false) {
            assert(xs.length > 0, () => 'gradients() received an empty list of xs.');
            if (dy != null && dy.dtype !== 'float32') {
                throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);
            }
            const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));
            assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');
            // Filter out the nodes that don't connect x => y.
            const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);
            if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {
                throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +
                    'that the f you passed encloses all operations that lead from x ' +
                    'to y.');
            }
            return this.tidy('backward', () => {
                const accumulatedGradientMap = {};
                accumulatedGradientMap[y.id] = (dy == null) ? ones$1(y.shape) : dy;
                // Backprop gradients through the filtered nodes.
                backpropagateGradients(accumulatedGradientMap, filteredTape, 
                // Pass the tidy function to avoid circular dep with `tape.ts`.
                f => this.tidy(f), 
                // Pass an add function to avoide a circular dep with `tape.ts`.
                add$2);
                const grads = xs.map(x => accumulatedGradientMap[x.id]);
                if (this.state.gradientDepth === 0) {
                    // This means that we are not computing higher-order gradients
                    // and can clean up the tape.
                    this.state.activeTape.forEach(node => {
                        for (const tensor of node.saved) {
                            tensor.dispose();
                        }
                    });
                    this.state.activeTape = null;
                }
                return { value: y, grads };
            });
        }
        customGrad(f) {
            assert(isFunction(f), () => 'The f passed in customGrad(f) must be a function.');
            return (...inputs) => {
                assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +
                    'tensors');
                let res;
                const inputMap = {};
                inputs.forEach((input, i) => {
                    inputMap[i] = input;
                });
                const forwardFunc = (_, save) => {
                    res = f(...[...inputs, save]);
                    assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' +
                        'object where `obj.value` is a tensor');
                    assert(isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +
                        'object where `obj.gradFunc` is a function.');
                    return res.value;
                };
                const backwardsFunc = (dy, saved) => {
                    const gradRes = res.gradFunc(dy, saved);
                    const grads = Array.isArray(gradRes) ? gradRes : [gradRes];
                    assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +
                        'object where `obj.gradFunc` is a function that returns ' +
                        'the same number of tensors as inputs passed to f(...).');
                    assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' +
                        'object where `obj.gradFunc` is a function that returns ' +
                        'a list of only tensors.');
                    const gradMap = {};
                    grads.forEach((grad, i) => {
                        gradMap[i] = () => grad;
                    });
                    return gradMap;
                };
                return this.runKernelFunc({
                    forwardFunc,
                    backwardsFunc,
                    inputs: inputMap,
                });
            };
        }
        readSync(dataId) {
            // Route the read to the correct backend.
            const info = this.state.tensorInfo.get(dataId);
            return info.backend.readSync(dataId);
        }
        read(dataId) {
            // Route the read to the correct backend.
            const info = this.state.tensorInfo.get(dataId);
            return info.backend.read(dataId);
        }
        readToGPU(dataId, options) {
            // Route the read to the correct backend.
            const info = this.state.tensorInfo.get(dataId);
            return info.backend.readToGPU(dataId, options);
        }
        async time(query) {
            const start = now();
            const timingInfo = await this.backend.time(query);
            timingInfo.wallMs = now() - start;
            return timingInfo;
        }
        /**
         * Tracks a Tensor in the current scope to be automatically cleaned up
         * when the current scope ends, and returns the value.
         *
         * @param result The Tensor to track in the current scope.
         */
        track(result) {
            if (this.state.activeScope != null) {
                result.scopeId = this.state.activeScope.id;
                this.state.activeScope.track.push(result);
            }
            return result;
        }
        get registeredVariables() {
            return this.state.registeredVariables;
        }
        /**
         * Resets the engine state. Removes all backends but does not remove
         * registered backend factories.
         */
        reset() {
            // Make any pending promise obsolete.
            this.pendingBackendInitId++;
            this.state.dispose();
            this.ENV.reset();
            this.state = new EngineState();
            for (const backendName in this.registry) {
                this.disposeRegisteredKernels(backendName);
                this.registry[backendName].dispose();
                delete this.registry[backendName];
            }
            this.backendName = null;
            this.backendInstance = null;
            this.pendingBackendInit = null;
        }
    }
    Engine.nextTensorId = 0;
    Engine.nextVariableId = 0;
    function ones$1(shape) {
        const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');
        return ENGINE.makeTensor(values, shape, 'float32');
    }
    function getOrMakeEngine() {
        const ns = getGlobalNamespace();
        if (ns._tfengine == null) {
            const environment = new Environment(ns);
            ns._tfengine = new Engine(environment);
        }
        setEnvironmentGlobal(ns._tfengine.ENV);
        // Tell the current tensor interface that the global engine is responsible
        // for tracking.
        setTensorTracker(() => ns._tfengine);
        return ns._tfengine;
    }
    const ENGINE = getOrMakeEngine();
    /**
     * A implementation of the add op for use within engine and tape.
     *
     * This allows us to avoid a circular dependency between add.ts and engine.
     * It is exported to be available in tape tests.
     */
    function add$2(a, b) {
        // We duplicate Add here to avoid a circular dependency with add.ts.
        const inputs = { a, b };
        return ENGINE.runKernel(Add, inputs);
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // tslint:disable-next-line:no-any
    function _isNavigatorDefined() {
        return typeof navigator !== 'undefined' && navigator != null;
    }
    let isMobileMockValue;
    function mockIsMobile(value) {
        isMobileMockValue = value;
    }
    function isMobile(nav) {
        if (isMobileMockValue !== undefined) {
            return isMobileMockValue;
        }
        if (nav || _isNavigatorDefined()) {
            if (!nav) {
                nav = navigator;
            }
            if (nav.product === 'ReactNative') {
                return true;
            }
            const a = nav.userAgent || nav.vendor ||
                // tslint:disable-next-line:no-any
                (typeof window !== 'undefined' ? window.opera : '');
            // Use `navigator.userAgentData.mobile` as fallback.
            if (!a) {
                // tslint:disable-next-line:no-any
                const navAny = nav;
                return navAny.userAgentData && navAny.userAgentData.mobile;
            }
            // tslint:disable-next-line:max-line-length
            return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i
                .test(a) ||
                // tslint:disable-next-line:max-line-length
                /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i
                    .test(a.substr(0, 4));
        }
        return false;
    }
    function isBrowser() {
        return (typeof window !== 'undefined' && window.document != null) ||
            //@ts-ignore
            (typeof WorkerGlobalScope !== 'undefined');
    }

    var device_util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        mockIsMobile: mockIsMobile,
        isMobile: isMobile,
        isBrowser: isBrowser
    });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ENV$1 = env();
    /**
     * This file contains environment-related flag registrations.
     */
    /** Whether to enable debug mode. */
    ENV$1.registerFlag('DEBUG', () => false, debugValue => {
        if (debugValue) {
            console.warn('Debugging mode is ON. The output of every math call will ' +
                'be downloaded to CPU and checked for NaNs. ' +
                'This significantly impacts performance.');
        }
    });
    /** Whether we are in a browser (as versus, say, node.js) environment. */
    ENV$1.registerFlag('IS_BROWSER', () => isBrowser());
    /** Whether we are in a browser (as versus, say, node.js) environment. */
    ENV$1.registerFlag('IS_NODE', () => (typeof process !== 'undefined') &&
        (typeof process.versions !== 'undefined') &&
        (typeof process.versions.node !== 'undefined'));
    /** Whether this browser is Chrome. */
    ENV$1.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null &&
        navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&
        /Google Inc/.test(navigator.vendor));
    /**
     * True when the environment is "production" where we disable safety checks
     * to gain performance.
     */
    ENV$1.registerFlag('PROD', () => false);
    /**
     * Whether to do sanity checks when inferring a shape from user-provided
     * values, used when creating a new tensor.
     */
    ENV$1.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV$1.getBool('DEBUG'));
    /** Whether deprecation warnings are enabled. */
    ENV$1.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);
    /** True if running unit tests. */
    ENV$1.registerFlag('IS_TEST', () => false);
    /** Whether to check computation result for errors. */
    ENV$1.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => true);
    /** Whether the backend needs to wrap input to imageBitmap. */
    ENV$1.registerFlag('WRAP_TO_IMAGEBITMAP', () => false);

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function inferShape(val, dtype) {
        let firstElem = val;
        if (isTypedArray(val)) {
            return dtype === 'string' ? [] : [val.length];
        }
        if (!Array.isArray(val)) {
            return []; // Scalar.
        }
        const shape = [];
        while (Array.isArray(firstElem) ||
            isTypedArray(firstElem) && dtype !== 'string') {
            shape.push(firstElem.length);
            firstElem = firstElem[0];
        }
        if (Array.isArray(val) &&
            env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {
            deepAssertShapeConsistency(val, shape, []);
        }
        return shape;
    }
    function deepAssertShapeConsistency(val, shape, indices) {
        indices = indices || [];
        if (!(Array.isArray(val)) && !isTypedArray(val)) {
            assert(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` +
                `but should be an array/TypedArray of ${shape[0]} elements`);
            return;
        }
        assert(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` +
            `but is an array of ${val.length} elements`);
        assert(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +
            `elements, but has ${val.length} elements`);
        const subShape = shape.slice(1);
        for (let i = 0; i < val.length; ++i) {
            deepAssertShapeConsistency(val[i], subShape, indices.concat(i));
        }
    }
    function assertDtype(expectedDtype, actualDType, argName, functionName) {
        if (expectedDtype === 'string_or_numeric') {
            return;
        }
        if (expectedDtype == null) {
            throw new Error(`Expected dtype cannot be null.`);
        }
        if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||
            expectedDtype === 'numeric' && actualDType === 'string') {
            throw new Error(`Argument '${argName}' passed to '${functionName}' must ` +
                `be ${expectedDtype} tensor, but got ${actualDType} tensor`);
        }
    }
    function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {
        if (x instanceof Tensor) {
            assertDtype(parseAsDtype, x.dtype, argName, functionName);
            return x;
        }
        let inferredDtype = inferDtype(x);
        // If the user expects a bool/int/float, use that info to update the
        // inferredDtype when it is not a string.
        if (inferredDtype !== 'string' &&
            ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {
            inferredDtype = parseAsDtype;
        }
        assertDtype(parseAsDtype, inferredDtype, argName, functionName);
        if ((x == null) ||
            (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&
                typeof x !== 'boolean' && typeof x !== 'string')) {
            const type = x == null ? 'null' : x.constructor.name;
            throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` +
                `Tensor or TensorLike, but got '${type}'`);
        }
        const inferredShape = inferShape(x, inferredDtype);
        if (!isTypedArray(x) && !Array.isArray(x)) {
            x = [x];
        }
        const skipTypedArray = true;
        const values = inferredDtype !== 'string' ?
            toTypedArray(x, inferredDtype) :
            flatten(x, [], skipTypedArray);
        return ENGINE.makeTensor(values, inferredShape, inferredDtype);
    }
    function convertToTensorArray(arg, argName, functionName, parseAsDtype = 'numeric') {
        if (!Array.isArray(arg)) {
            throw new Error(`Argument ${argName} passed to ${functionName} must be a ` +
                '`Tensor[]` or `TensorLike[]`');
        }
        const tensors = arg;
        return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const OP_SCOPE_SUFFIX = '__op';
    /**
     * Used for wrapping functions that perform math operations on
     * Tensors. The function will be wrapped in a named scope that cleans all
     * memory usage after the function is done.
     */
    function op(f) {
        const keys = Object.keys(f);
        if (keys.length !== 1) {
            throw new Error(`Please provide an object with a single key ` +
                `(operation name) mapping to a function. Got an object with ` +
                `${keys.length} keys.`);
        }
        let opName = keys[0];
        const fn = f[opName];
        // Strip the underscore from the end of the function name.
        if (opName.endsWith('_')) {
            opName = opName.substring(0, opName.length - 1);
        }
        // add an __op suffix to distinguish ops from kernels in tf.profile
        opName = opName + OP_SCOPE_SUFFIX;
        // tslint:disable-next-line:no-any
        const f2 = (...args) => {
            ENGINE.startScope(opName);
            try {
                const result = fn(...args);
                if (isPromise(result)) {
                    console.error('Cannot return a Promise inside of tidy.');
                }
                ENGINE.endScope(result);
                return result;
            }
            catch (ex) {
                ENGINE.endScope(null);
                throw ex;
            }
        };
        Object.defineProperty(f2, 'name', { value: opName, configurable: true });
        // tslint:disable-next-line:no-any
        return f2;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Converts two real numbers to a complex number.
     *
     * Given a tensor `real` representing the real part of a complex number, and a
     * tensor `imag` representing the imaginary part of a complex number, this
     * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],
     * where r represents the real part and i represents the imag part.
     *
     * The input tensors real and imag must have the same shape.
     *
     * ```js
     * const real = tf.tensor1d([2.25, 3.25]);
     * const imag = tf.tensor1d([4.75, 5.75]);
     * const complex = tf.complex(real, imag);
     *
     * complex.print();
     * ```
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function complex_(real, imag) {
        const $real = convertToTensor(real, 'real', 'complex');
        const $imag = convertToTensor(imag, 'imag', 'complex');
        assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +
            `must match in call to tf.complex().`);
        const inputs = { real: $real, imag: $imag };
        return ENGINE.runKernel(Complex, inputs);
    }
    const complex$2 = op({ complex_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /** This is shared code across all tensor creation methods. */
    function makeTensor(values, shape, inferredShape, dtype) {
        if (dtype == null) {
            dtype = inferDtype(values);
        }
        if (dtype === 'complex64') {
            throw new Error(`Cannot construct a complex64 tensor directly. ` +
                `Please use tf.complex(real, imag).`);
        }
        if (!isTypedArray(values) && !Array.isArray(values) &&
            typeof values !== 'number' && typeof values !== 'boolean' &&
            typeof values !== 'string') {
            throw new Error('values passed to tensor(values) must be a number/boolean/string or ' +
                'an array of numbers/booleans/strings, or a TypedArray');
        }
        if (shape != null) {
            assertNonNegativeIntegerDimensions(shape);
            const providedSize = sizeFromShape(shape);
            const inferredSize = sizeFromShape(inferredShape);
            assert(providedSize === inferredSize, () => `Based on the provided shape, [${shape}], the tensor should have ` +
                `${providedSize} values but has ${inferredSize}`);
            for (let i = 0; i < inferredShape.length; ++i) {
                const inferred = inferredShape[i];
                const flatDimsDontMatch = i === inferredShape.length - 1 ?
                    inferred !== sizeFromShape(shape.slice(i)) :
                    true;
                assert(inferredShape[i] === shape[i] || !flatDimsDontMatch, () => `Error creating a new Tensor. Inferred shape ` +
                    `(${inferredShape}) does not match the provided ` +
                    `shape (${shape}). `);
            }
        }
        if (!isTypedArray(values) && !Array.isArray(values)) {
            values = [values];
        }
        shape = shape || inferredShape;
        values = dtype !== 'string' ?
            toTypedArray(values, dtype) :
            flatten(values, [], true);
        return ENGINE.makeTensor(values, shape, dtype);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with the provided values, shape and dtype.
     *
     * ```js
     * // Pass an array of values to create a vector.
     * tf.tensor([1, 2, 3, 4]).print();
     * ```
     *
     * ```js
     * // Pass a nested array of values to make a matrix or a higher
     * // dimensional tensor.
     * tf.tensor([[1, 2], [3, 4]]).print();
     * ```
     *
     * ```js
     * // Pass a flat array and specify a shape yourself.
     * tf.tensor([1, 2, 3, 4], [2, 2]).print();
     * ```
     *
     * @param values The values of the tensor. Can be nested array of numbers,
     *     or a flat array, or a `TypedArray`. If the values are strings,
     *     they will be encoded as utf-8 and kept as `Uint8Array[]`.
     * @param shape The shape of the tensor. Optional. If not provided,
     *   it is inferred from `values`.
     * @param dtype The data type.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function tensor(values, shape, dtype) {
        const inferredShape = inferShape(values, dtype);
        return makeTensor(values, shape, inferredShape, dtype);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /* Type definitions for exporting and importing of models. */
    /**
     * A map from Tensor dtype to number of bytes per element of the Tensor.
     */
    const DTYPE_VALUE_SIZE_MAP = {
        'float32': 4,
        'float16': 2,
        'int32': 4,
        'uint16': 2,
        'uint8': 1,
        'bool': 1,
        'complex64': 8
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /** Number of bytes reserved for the length of the string. (32bit integer). */
    const NUM_BYTES_STRING_LENGTH = 4;
    /**
     * Encode a map from names to weight values as an ArrayBuffer, along with an
     * `Array` of `WeightsManifestEntry` as specification of the encoded weights.
     *
     * This function does not perform sharding.
     *
     * This function is the reverse of `decodeWeights`.
     *
     * @param tensors A map ("dict") from names to tensors.
     * @param group Group to which the weights belong (optional).
     * @returns A `Promise` of
     *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s
     *     concatenated.
     *   - An `Array` of `WeightManifestEntry`s, carrying information including
     *     tensor names, `dtype`s and shapes.
     * @throws Error: on unsupported tensor `dtype`.
     */
    async function encodeWeights(tensors, group) {
        // TODO(adarob, cais): Support quantization.
        const specs = [];
        const dataPromises = [];
        const names = Array.isArray(tensors) ?
            tensors.map(tensor => tensor.name) :
            Object.keys(tensors);
        for (let i = 0; i < names.length; ++i) {
            const name = names[i];
            const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];
            if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&
                t.dtype !== 'string' && t.dtype !== 'complex64') {
                throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);
            }
            const spec = { name, shape: t.shape, dtype: t.dtype };
            if (t.dtype === 'string') {
                const utf8bytes = new Promise(async (resolve) => {
                    const vals = await t.bytes();
                    const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +
                        NUM_BYTES_STRING_LENGTH * vals.length;
                    const bytes = new Uint8Array(totalNumBytes);
                    let offset = 0;
                    for (let i = 0; i < vals.length; i++) {
                        const val = vals[i];
                        const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);
                        bytes.set(bytesOfLength, offset);
                        offset += NUM_BYTES_STRING_LENGTH;
                        bytes.set(val, offset);
                        offset += val.length;
                    }
                    resolve(bytes);
                });
                dataPromises.push(utf8bytes);
            }
            else {
                dataPromises.push(t.data());
            }
            if (group != null) {
                spec.group = group;
            }
            specs.push(spec);
        }
        const tensorValues = await Promise.all(dataPromises);
        return { data: concatenateTypedArrays(tensorValues), specs };
    }
    /**
     * Decode flat ArrayBuffer as weights.
     *
     * This function does not handle sharding.
     *
     * This function is the reverse of `encodeWeights`.
     *
     * @param buffer A flat ArrayBuffer carrying the binary values of the tensors
     *   concatenated in the order specified in `specs`.
     * @param specs Specifications of the names, dtypes and shapes of the tensors
     *   whose value are encoded by `buffer`.
     * @return A map from tensor name to tensor value, with the names corresponding
     *   to names in `specs`.
     * @throws Error, if any of the tensors has unsupported dtype.
     */
    function decodeWeights(buffer, specs) {
        // TODO(adarob, cais): Support quantization.
        const out = {};
        let float16Decode;
        let offset = 0;
        for (const spec of specs) {
            const name = spec.name;
            const dtype = spec.dtype;
            const shape = spec.shape;
            const size = sizeFromShape(shape);
            let values;
            if ('quantization' in spec) {
                const quantization = spec.quantization;
                if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
                    if (!('min' in quantization && 'scale' in quantization)) {
                        throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` +
                            `doesn't have corresponding metadata min and scale.`);
                    }
                }
                else if (quantization.dtype === 'float16') {
                    if (dtype !== 'float32') {
                        throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` +
                            `which only supports weights of type float32 not ${dtype}.`);
                    }
                }
                else {
                    throw new Error(`Weight ${spec.name} has unknown ` +
                        `quantization dtype ${quantization.dtype}. ` +
                        `Supported quantization dtypes are: ` +
                        `'uint8', 'uint16', and 'float16'.`);
                }
                const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];
                const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);
                const quantizedArray = (quantization.dtype === 'uint8') ?
                    new Uint8Array(byteBuffer) :
                    new Uint16Array(byteBuffer);
                if (dtype === 'float32') {
                    if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
                        values = new Float32Array(quantizedArray.length);
                        for (let i = 0; i < quantizedArray.length; i++) {
                            const v = quantizedArray[i];
                            values[i] = v * quantization.scale + quantization.min;
                        }
                    }
                    else if (quantization.dtype === 'float16') {
                        if (float16Decode === undefined) {
                            float16Decode = getFloat16Decoder();
                        }
                        values = float16Decode(quantizedArray);
                    }
                    else {
                        throw new Error(`Unsupported quantization type ${quantization.dtype} ` +
                            `for weight type float32.`);
                    }
                }
                else if (dtype === 'int32') {
                    if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {
                        throw new Error(`Unsupported quantization type ${quantization.dtype} ` +
                            `for weight type int32.`);
                    }
                    values = new Int32Array(quantizedArray.length);
                    for (let i = 0; i < quantizedArray.length; i++) {
                        const v = quantizedArray[i];
                        values[i] = Math.round(v * quantization.scale + quantization.min);
                    }
                }
                else {
                    throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
                }
                offset += size * quantizationSizeFactor;
            }
            else if (dtype === 'string') {
                const size = sizeFromShape(spec.shape);
                values = [];
                for (let i = 0; i < size; i++) {
                    const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];
                    offset += NUM_BYTES_STRING_LENGTH;
                    const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));
                    values.push(bytes);
                    offset += byteLength;
                }
            }
            else {
                const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];
                const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);
                if (dtype === 'float32') {
                    values = new Float32Array(byteBuffer);
                }
                else if (dtype === 'int32') {
                    values = new Int32Array(byteBuffer);
                }
                else if (dtype === 'bool') {
                    values = new Uint8Array(byteBuffer);
                }
                else if (dtype === 'complex64') {
                    values = new Float32Array(byteBuffer);
                    const real = new Float32Array(values.length / 2);
                    const image = new Float32Array(values.length / 2);
                    for (let i = 0; i < real.length; i++) {
                        real[i] = values[i * 2];
                        image[i] = values[i * 2 + 1];
                    }
                    const realTensor = tensor(real, shape, 'float32');
                    const imageTensor = tensor(image, shape, 'float32');
                    out[name] = complex$2(realTensor, imageTensor);
                    realTensor.dispose();
                    imageTensor.dispose();
                }
                else {
                    throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
                }
                offset += size * dtypeFactor;
            }
            if (dtype !== 'complex64') {
                out[name] = tensor(values, shape, dtype);
            }
        }
        return out;
    }
    /**
     * Concatenate TypedArrays into an ArrayBuffer.
     */
    function concatenateTypedArrays(xs) {
        // TODO(adarob, cais): Support quantization.
        if (xs === null) {
            throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);
        }
        let totalByteLength = 0;
        // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'
        // can have a different byte length from that of the `TypedArray` itself,
        // for example, when the `TypedArray` is created from an offset in an
        // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match
        // the `TypedArray` in byte length. If an element of `xs` does not show
        // this property, a new `TypedArray` that satisfy this property will be
        // constructed and pushed into `normalizedXs`.
        const normalizedXs = [];
        xs.forEach((x) => {
            totalByteLength += x.byteLength;
            // tslint:disable:no-any
            normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :
                new x.constructor(x));
            if (!(x instanceof Float32Array || x instanceof Int32Array ||
                x instanceof Uint8Array)) {
                throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);
            }
            // tslint:enable:no-any
        });
        const y = new Uint8Array(totalByteLength);
        let offset = 0;
        normalizedXs.forEach((x) => {
            y.set(new Uint8Array(x.buffer), offset);
            offset += x.byteLength;
        });
        return y.buffer;
    }
    // Use Buffer on Node.js instead of Blob/atob/btoa
    const useNodeBuffer = typeof Buffer !== 'undefined' &&
        (typeof Blob === 'undefined' || typeof atob === 'undefined' ||
            typeof btoa === 'undefined');
    /**
     * Calculate the byte length of a JavaScript string.
     *
     * Note that a JavaScript string can contain wide characters, therefore the
     * length of the string is not necessarily equal to the byte length.
     *
     * @param str Input string.
     * @returns Byte length.
     */
    function stringByteLength(str) {
        if (useNodeBuffer) {
            return Buffer.byteLength(str);
        }
        return new Blob([str]).size;
    }
    /**
     * Encode an ArrayBuffer as a base64 encoded string.
     *
     * @param buffer `ArrayBuffer` to be converted.
     * @returns A string that base64-encodes `buffer`.
     */
    function arrayBufferToBase64String(buffer) {
        if (useNodeBuffer) {
            return Buffer.from(buffer).toString('base64');
        }
        const buf = new Uint8Array(buffer);
        let s = '';
        for (let i = 0, l = buf.length; i < l; i++) {
            s += String.fromCharCode(buf[i]);
        }
        return btoa(s);
    }
    /**
     * Decode a base64 string as an ArrayBuffer.
     *
     * @param str Base64 string.
     * @returns Decoded `ArrayBuffer`.
     */
    function base64StringToArrayBuffer(str) {
        if (useNodeBuffer) {
            const buf = Buffer.from(str, 'base64');
            return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        }
        const s = atob(str);
        const buffer = new Uint8Array(s.length);
        for (let i = 0; i < s.length; ++i) {
            buffer.set([s.charCodeAt(i)], i);
        }
        return buffer.buffer;
    }
    /**
     * Concatenate a number of ArrayBuffers into one.
     *
     * @param buffers A number of array buffers to concatenate.
     * @returns Result of concatenating `buffers` in order.
     */
    function concatenateArrayBuffers(buffers) {
        if (buffers.length === 1) {
            return buffers[0];
        }
        let totalByteLength = 0;
        buffers.forEach((buffer) => {
            totalByteLength += buffer.byteLength;
        });
        const temp = new Uint8Array(totalByteLength);
        let offset = 0;
        buffers.forEach((buffer) => {
            temp.set(new Uint8Array(buffer), offset);
            offset += buffer.byteLength;
        });
        return temp.buffer;
    }
    /**
     * Get the basename of a path.
     *
     * Behaves in a way analogous to Linux's basename command.
     *
     * @param path
     */
    function basename(path) {
        const SEPARATOR = '/';
        path = path.trim();
        while (path.endsWith(SEPARATOR)) {
            path = path.slice(0, path.length - 1);
        }
        const items = path.split(SEPARATOR);
        return items[items.length - 1];
    }
    /**
     * Create `ModelJSON` from `ModelArtifacts`.
     *
     * @param artifacts Model artifacts, describing the model and its weights.
     * @param manifest Weight manifest, describing where the weights of the
     *     `ModelArtifacts` are stored, and some metadata about them.
     * @returns Object representing the `model.json` file describing the model
     *     artifacts and weights
     */
    function getModelJSONForModelArtifacts(artifacts, manifest) {
        const result = {
            modelTopology: artifacts.modelTopology,
            format: artifacts.format,
            generatedBy: artifacts.generatedBy,
            convertedBy: artifacts.convertedBy,
            weightsManifest: manifest
        };
        if (artifacts.signature != null) {
            result.signature = artifacts.signature;
        }
        if (artifacts.userDefinedMetadata != null) {
            result.userDefinedMetadata = artifacts.userDefinedMetadata;
        }
        if (artifacts.modelInitializer != null) {
            result.modelInitializer = artifacts.modelInitializer;
        }
        if (artifacts.trainingConfig != null) {
            result.trainingConfig = artifacts.trainingConfig;
        }
        return result;
    }
    /**
     * Create `ModelArtifacts` from a JSON file.
     *
     * @param modelJSON Object containing the parsed JSON of `model.json`
     * @param loadWeights Function that takes the JSON file's weights manifest,
     *     reads weights from the listed path(s), and returns a Promise of the
     *     weight manifest entries along with the weights data.
     * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.
     */
    async function getModelArtifactsForJSON(modelJSON, loadWeights) {
        const modelArtifacts = {
            modelTopology: modelJSON.modelTopology,
            format: modelJSON.format,
            generatedBy: modelJSON.generatedBy,
            convertedBy: modelJSON.convertedBy
        };
        if (modelJSON.trainingConfig != null) {
            modelArtifacts.trainingConfig = modelJSON.trainingConfig;
        }
        if (modelJSON.weightsManifest != null) {
            const [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);
            modelArtifacts.weightSpecs = weightSpecs;
            modelArtifacts.weightData = weightData;
        }
        if (modelJSON.signature != null) {
            modelArtifacts.signature = modelJSON.signature;
        }
        if (modelJSON.userDefinedMetadata != null) {
            modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;
        }
        if (modelJSON.modelInitializer != null) {
            modelArtifacts.modelInitializer = modelJSON.modelInitializer;
        }
        return modelArtifacts;
    }
    /**
     * Populate ModelArtifactsInfo fields for a model with JSON topology.
     * @param modelArtifacts
     * @returns A ModelArtifactsInfo object.
     */
    function getModelArtifactsInfoForJSON(modelArtifacts) {
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
            throw new Error('Expected JSON model topology, received ArrayBuffer.');
        }
        return {
            dateSaved: new Date(),
            modelTopologyType: 'JSON',
            modelTopologyBytes: modelArtifacts.modelTopology == null ?
                0 :
                stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),
            weightSpecsBytes: modelArtifacts.weightSpecs == null ?
                0 :
                stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),
            weightDataBytes: modelArtifacts.weightData == null ?
                0 :
                modelArtifacts.weightData.byteLength,
        };
    }
    /**
     * Computes mantisa table for casting Float16 to Float32
     * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
     *
     * @returns Uint32Array, 2048 mantissa lookup values.
     */
    function computeFloat16MantisaTable() {
        const convertMantissa = (i) => {
            let m = i << 13;
            let e = 0;
            while ((m & 0x00800000) === 0) {
                e -= 0x00800000;
                m <<= 1;
            }
            m &= ~0x00800000;
            e += 0x38800000;
            return m | e;
        };
        const mantisaTable = new Uint32Array(2048);
        mantisaTable[0] = 0;
        for (let i = 1; i < 1024; i++) {
            mantisaTable[i] = convertMantissa(i);
        }
        for (let i = 1024; i < 2048; i++) {
            mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);
        }
        return mantisaTable;
    }
    /**
     * Computes exponent table for casting Float16 to Float32
     * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
     *
     * @returns Uint32Array, 64 exponent lookup values.
     */
    function computeFloat16ExponentTable() {
        const exponentTable = new Uint32Array(64);
        exponentTable[0] = 0;
        exponentTable[31] = 0x47800000;
        exponentTable[32] = 0x80000000;
        exponentTable[63] = 0xc7800000;
        for (let i = 1; i < 31; i++) {
            exponentTable[i] = i << 23;
        }
        for (let i = 33; i < 63; i++) {
            exponentTable[i] = 0x80000000 + ((i - 32) << 23);
        }
        return exponentTable;
    }
    /**
     * Computes offset table for casting Float16 to Float32
     * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
     *
     * @returns Uint32Array, 6d offset values.
     */
    function computeFloat16OffsetTable() {
        const offsetTable = new Uint32Array(64);
        for (let i = 0; i < 64; i++) {
            offsetTable[i] = 1024;
        }
        offsetTable[0] = offsetTable[32] = 0;
        return offsetTable;
    }
    /**
     * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values
     * to a Float32Array.
     *
     * @returns Function (buffer: Uint16Array) => Float32Array which decodes
     *          the Uint16Array of Float16 bytes to a Float32Array.
     */
    function getFloat16Decoder() {
        // Algorithm is based off of
        // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
        // Cache lookup tables
        const mantisaTable = computeFloat16MantisaTable();
        const exponentTable = computeFloat16ExponentTable();
        const offsetTable = computeFloat16OffsetTable();
        return (quantizedArray) => {
            const buffer = new ArrayBuffer(4 * quantizedArray.length);
            const bufferUint32View = new Uint32Array(buffer);
            for (let index = 0; index < quantizedArray.length; index++) {
                const float16Bits = quantizedArray[index];
                const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +
                    exponentTable[float16Bits >> 10];
                bufferUint32View[index] = float32Bits;
            }
            return new Float32Array(buffer);
        };
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class IORouterRegistry {
        constructor() {
            this.saveRouters = [];
            this.loadRouters = [];
        }
        static getInstance() {
            if (IORouterRegistry.instance == null) {
                IORouterRegistry.instance = new IORouterRegistry();
            }
            return IORouterRegistry.instance;
        }
        /**
         * Register a save-handler router.
         *
         * @param saveRouter A function that maps a URL-like string onto an instance
         * of `IOHandler` with the `save` method defined or `null`.
         */
        static registerSaveRouter(saveRouter) {
            IORouterRegistry.getInstance().saveRouters.push(saveRouter);
        }
        /**
         * Register a load-handler router.
         *
         * @param loadRouter A function that maps a URL-like string onto an instance
         * of `IOHandler` with the `load` method defined or `null`.
         */
        static registerLoadRouter(loadRouter) {
            IORouterRegistry.getInstance().loadRouters.push(loadRouter);
        }
        /**
         * Look up IOHandler for saving, given a URL-like string.
         *
         * @param url
         * @returns If only one match is found, an instance of IOHandler with the
         * `save` method defined. If no match is found, `null`.
         * @throws Error, if more than one match is found.
         */
        static getSaveHandlers(url) {
            return IORouterRegistry.getHandlers(url, 'save');
        }
        /**
         * Look up IOHandler for loading, given a URL-like string.
         *
         * @param url
         * @param loadOptions Optional, custom load options.
         * @returns All valid handlers for `url`, given the currently registered
         *   handler routers.
         */
        static getLoadHandlers(url, loadOptions) {
            return IORouterRegistry.getHandlers(url, 'load', loadOptions);
        }
        static getHandlers(url, handlerType, loadOptions) {
            const validHandlers = [];
            const routers = handlerType === 'load' ?
                IORouterRegistry.getInstance().loadRouters :
                IORouterRegistry.getInstance().saveRouters;
            routers.forEach(router => {
                const handler = router(url, loadOptions);
                if (handler !== null) {
                    validHandlers.push(handler);
                }
            });
            return validHandlers;
        }
    }
    const registerSaveRouter = (loudRouter) => IORouterRegistry.registerSaveRouter(loudRouter);
    const registerLoadRouter = (loudRouter) => IORouterRegistry.registerLoadRouter(loudRouter);
    const getSaveHandlers = (url) => IORouterRegistry.getSaveHandlers(url);
    const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const DATABASE_NAME = 'tensorflowjs';
    const DATABASE_VERSION = 1;
    // Model data and ModelArtifactsInfo (metadata) are stored in two separate
    // stores for efficient access of the list of stored models and their metadata.
    // 1. The object store for model data: topology, weights and weight manifests.
    const MODEL_STORE_NAME = 'models_store';
    // 2. The object store for ModelArtifactsInfo, including meta-information such
    //    as the type of topology (JSON vs binary), byte size of the topology, byte
    //    size of the weights, etc.
    const INFO_STORE_NAME = 'model_info_store';
    function getIndexedDBFactory() {
        if (!env().getBool('IS_BROWSER')) {
            // TODO(cais): Add more info about what IOHandler subtypes are available.
            //   Maybe point to a doc page on the web and/or automatically determine
            //   the available IOHandlers and print them in the error message.
            throw new Error('Failed to obtain IndexedDB factory because the current environment' +
                'is not a web browser.');
        }
        // tslint:disable-next-line:no-any
        const theWindow = typeof window === 'undefined' ? self : window;
        const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||
            theWindow.webkitIndexedDB || theWindow.msIndexedDB ||
            theWindow.shimIndexedDB;
        if (factory == null) {
            throw new Error('The current browser does not appear to support IndexedDB.');
        }
        return factory;
    }
    function setUpDatabase(openRequest) {
        const db = openRequest.result;
        db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });
        db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });
    }
    /**
     * IOHandler subclass: Browser IndexedDB.
     *
     * See the doc string of `browserIndexedDB` for more details.
     */
    class BrowserIndexedDB {
        constructor(modelPath) {
            this.indexedDB = getIndexedDBFactory();
            if (modelPath == null || !modelPath) {
                throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');
            }
            this.modelPath = modelPath;
        }
        async save(modelArtifacts) {
            // TODO(cais): Support saving GraphDef models.
            if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +
                    'in binary formats yet.');
            }
            return this.databaseAction(this.modelPath, modelArtifacts);
        }
        async load() {
            return this.databaseAction(this.modelPath);
        }
        /**
         * Perform database action to put model artifacts into or read model artifacts
         * from IndexedDB object store.
         *
         * Whether the action is put or get depends on whether `modelArtifacts` is
         * specified. If it is specified, the action will be put; otherwise the action
         * will be get.
         *
         * @param modelPath A unique string path for the model.
         * @param modelArtifacts If specified, it will be the model artifacts to be
         *   stored in IndexedDB.
         * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
         *   of `ModelArtifacts`, if the action is get.
         */
        databaseAction(modelPath, modelArtifacts) {
            return new Promise((resolve, reject) => {
                const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
                openRequest.onupgradeneeded = () => setUpDatabase(openRequest);
                openRequest.onsuccess = () => {
                    const db = openRequest.result;
                    if (modelArtifacts == null) {
                        // Read model out from object store.
                        const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');
                        const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                        const getRequest = modelStore.get(this.modelPath);
                        getRequest.onsuccess = () => {
                            if (getRequest.result == null) {
                                db.close();
                                return reject(new Error(`Cannot find model with path '${this.modelPath}' ` +
                                    `in IndexedDB.`));
                            }
                            else {
                                resolve(getRequest.result.modelArtifacts);
                            }
                        };
                        getRequest.onerror = error => {
                            db.close();
                            return reject(getRequest.error);
                        };
                        modelTx.oncomplete = () => db.close();
                    }
                    else {
                        // Put model into object store.
                        const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);
                        // First, put ModelArtifactsInfo into info store.
                        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
                        let infoStore = infoTx.objectStore(INFO_STORE_NAME);
                        const putInfoRequest = infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });
                        let modelTx;
                        putInfoRequest.onsuccess = () => {
                            // Second, put model data into model store.
                            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                            const putModelRequest = modelStore.put({
                                modelPath: this.modelPath,
                                modelArtifacts,
                                modelArtifactsInfo
                            });
                            putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });
                            putModelRequest.onerror = error => {
                                // If the put-model request fails, roll back the info entry as
                                // well.
                                infoStore = infoTx.objectStore(INFO_STORE_NAME);
                                const deleteInfoRequest = infoStore.delete(this.modelPath);
                                deleteInfoRequest.onsuccess = () => {
                                    db.close();
                                    return reject(putModelRequest.error);
                                };
                                deleteInfoRequest.onerror = error => {
                                    db.close();
                                    return reject(putModelRequest.error);
                                };
                            };
                        };
                        putInfoRequest.onerror = error => {
                            db.close();
                            return reject(putInfoRequest.error);
                        };
                        infoTx.oncomplete = () => {
                            if (modelTx == null) {
                                db.close();
                            }
                            else {
                                modelTx.oncomplete = () => db.close();
                            }
                        };
                    }
                };
                openRequest.onerror = error => reject(openRequest.error);
            });
        }
    }
    BrowserIndexedDB.URL_SCHEME = 'indexeddb://';
    const indexedDBRouter = (url) => {
        if (!env().getBool('IS_BROWSER')) {
            return null;
        }
        else {
            if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {
                return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));
            }
            else {
                return null;
            }
        }
    };
    IORouterRegistry.registerSaveRouter(indexedDBRouter);
    IORouterRegistry.registerLoadRouter(indexedDBRouter);
    /**
     * Creates a browser IndexedDB IOHandler for saving and loading models.
     *
     * ```js
     * const model = tf.sequential();
     * model.add(
     *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
     *
     * const saveResult = await model.save('indexeddb://MyModel'));
     * console.log(saveResult);
     * ```
     *
     * @param modelPath A unique identifier for the model to be saved. Must be a
     *   non-empty string.
     * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),
     *   which can be used with, e.g., `tf.Model.save`.
     */
    function browserIndexedDB(modelPath) {
        return new BrowserIndexedDB(modelPath);
    }
    function maybeStripScheme$1(key) {
        return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?
            key.slice(BrowserIndexedDB.URL_SCHEME.length) :
            key;
    }
    class BrowserIndexedDBManager {
        constructor() {
            this.indexedDB = getIndexedDBFactory();
        }
        async listModels() {
            return new Promise((resolve, reject) => {
                const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
                openRequest.onupgradeneeded = () => setUpDatabase(openRequest);
                openRequest.onsuccess = () => {
                    const db = openRequest.result;
                    const tx = db.transaction(INFO_STORE_NAME, 'readonly');
                    const store = tx.objectStore(INFO_STORE_NAME);
                    // tslint:disable:max-line-length
                    // Need to cast `store` as `any` here because TypeScript's DOM
                    // library does not have the `getAll()` method even though the
                    // method is supported in the latest version of most mainstream
                    // browsers:
                    // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll
                    // tslint:enable:max-line-length
                    // tslint:disable-next-line:no-any
                    const getAllInfoRequest = store.getAll();
                    getAllInfoRequest.onsuccess = () => {
                        const out = {};
                        for (const item of getAllInfoRequest.result) {
                            out[item.modelPath] = item.modelArtifactsInfo;
                        }
                        resolve(out);
                    };
                    getAllInfoRequest.onerror = error => {
                        db.close();
                        return reject(getAllInfoRequest.error);
                    };
                    tx.oncomplete = () => db.close();
                };
                openRequest.onerror = error => reject(openRequest.error);
            });
        }
        async removeModel(path) {
            path = maybeStripScheme$1(path);
            return new Promise((resolve, reject) => {
                const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
                openRequest.onupgradeneeded = () => setUpDatabase(openRequest);
                openRequest.onsuccess = () => {
                    const db = openRequest.result;
                    const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
                    const infoStore = infoTx.objectStore(INFO_STORE_NAME);
                    const getInfoRequest = infoStore.get(path);
                    let modelTx;
                    getInfoRequest.onsuccess = () => {
                        if (getInfoRequest.result == null) {
                            db.close();
                            return reject(new Error(`Cannot find model with path '${path}' ` +
                                `in IndexedDB.`));
                        }
                        else {
                            // First, delete the entry in the info store.
                            const deleteInfoRequest = infoStore.delete(path);
                            const deleteModelData = () => {
                                // Second, delete the entry in the model store.
                                modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
                                const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                                const deleteModelRequest = modelStore.delete(path);
                                deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);
                                deleteModelRequest.onerror = error => reject(getInfoRequest.error);
                            };
                            // Proceed with deleting model data regardless of whether deletion
                            // of info data succeeds or not.
                            deleteInfoRequest.onsuccess = deleteModelData;
                            deleteInfoRequest.onerror = error => {
                                deleteModelData();
                                db.close();
                                return reject(getInfoRequest.error);
                            };
                        }
                    };
                    getInfoRequest.onerror = error => {
                        db.close();
                        return reject(getInfoRequest.error);
                    };
                    infoTx.oncomplete = () => {
                        if (modelTx == null) {
                            db.close();
                        }
                        else {
                            modelTx.oncomplete = () => db.close();
                        }
                    };
                };
                openRequest.onerror = error => reject(openRequest.error);
            });
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const PATH_SEPARATOR = '/';
    const PATH_PREFIX = 'tensorflowjs_models';
    const INFO_SUFFIX = 'info';
    const MODEL_TOPOLOGY_SUFFIX = 'model_topology';
    const WEIGHT_SPECS_SUFFIX = 'weight_specs';
    const WEIGHT_DATA_SUFFIX = 'weight_data';
    const MODEL_METADATA_SUFFIX = 'model_metadata';
    function getModelKeys(path) {
        return {
            info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),
            topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),
            weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),
            weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),
            modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)
        };
    }
    function removeItems(keys) {
        for (const key of Object.values(keys)) {
            window.localStorage.removeItem(key);
        }
    }
    /**
     * Get model path from a local-storage key.
     *
     * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'
     *
     * @param key
     */
    function getModelPathFromKey(key) {
        const items = key.split(PATH_SEPARATOR);
        if (items.length < 3) {
            throw new Error(`Invalid key format: ${key}`);
        }
        return items.slice(1, items.length - 1).join(PATH_SEPARATOR);
    }
    function maybeStripScheme(key) {
        return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?
            key.slice(BrowserLocalStorage.URL_SCHEME.length) :
            key;
    }
    /**
     * IOHandler subclass: Browser Local Storage.
     *
     * See the doc string to `browserLocalStorage` for more details.
     */
    class BrowserLocalStorage {
        constructor(modelPath) {
            if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||
                typeof window.localStorage === 'undefined') {
                // TODO(cais): Add more info about what IOHandler subtypes are
                // available.
                //   Maybe point to a doc page on the web and/or automatically determine
                //   the available IOHandlers and print them in the error message.
                throw new Error('The current environment does not support local storage.');
            }
            this.LS = window.localStorage;
            if (modelPath == null || !modelPath) {
                throw new Error('For local storage, modelPath must not be null, undefined or empty.');
            }
            this.modelPath = modelPath;
            this.keys = getModelKeys(this.modelPath);
        }
        /**
         * Save model artifacts to browser local storage.
         *
         * See the documentation to `browserLocalStorage` for details on the saved
         * artifacts.
         *
         * @param modelArtifacts The model artifacts to be stored.
         * @returns An instance of SaveResult.
         */
        async save(modelArtifacts) {
            if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +
                    'in binary formats yet.');
            }
            else {
                const topology = JSON.stringify(modelArtifacts.modelTopology);
                const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);
                const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);
                try {
                    this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));
                    this.LS.setItem(this.keys.topology, topology);
                    this.LS.setItem(this.keys.weightSpecs, weightSpecs);
                    this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));
                    // Note that JSON.stringify doesn't write out keys that have undefined
                    // values, so for some keys, we set undefined instead of a null-ish
                    // value.
                    const metadata = {
                        format: modelArtifacts.format,
                        generatedBy: modelArtifacts.generatedBy,
                        convertedBy: modelArtifacts.convertedBy,
                        signature: modelArtifacts.signature != null ?
                            modelArtifacts.signature :
                            undefined,
                        userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ?
                            modelArtifacts.userDefinedMetadata :
                            undefined,
                        modelInitializer: modelArtifacts.modelInitializer != null ?
                            modelArtifacts.modelInitializer :
                            undefined,
                        trainingConfig: modelArtifacts.trainingConfig != null ?
                            modelArtifacts.trainingConfig :
                            undefined
                    };
                    this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));
                    return { modelArtifactsInfo };
                }
                catch (err) {
                    // If saving failed, clean up all items saved so far.
                    removeItems(this.keys);
                    throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` +
                        `size quota being exceeded is a possible cause of this failure: ` +
                        `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +
                        `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +
                        `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);
                }
            }
        }
        /**
         * Load a model from local storage.
         *
         * See the documentation to `browserLocalStorage` for details on the saved
         * artifacts.
         *
         * @returns The loaded model (if loading succeeds).
         */
        async load() {
            const info = JSON.parse(this.LS.getItem(this.keys.info));
            if (info == null) {
                throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
            }
            if (info.modelTopologyType !== 'JSON') {
                throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +
                    'topology yet.');
            }
            const out = {};
            // Load topology.
            const topology = JSON.parse(this.LS.getItem(this.keys.topology));
            if (topology == null) {
                throw new Error(`In local storage, the topology of model '${this.modelPath}' ` +
                    `is missing.`);
            }
            out.modelTopology = topology;
            // Load weight specs.
            const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
            if (weightSpecs == null) {
                throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` +
                    `are missing.`);
            }
            out.weightSpecs = weightSpecs;
            // Load meta-data fields.
            const metadataString = this.LS.getItem(this.keys.modelMetadata);
            if (metadataString != null) {
                const metadata = JSON.parse(metadataString);
                out.format = metadata.format;
                out.generatedBy = metadata.generatedBy;
                out.convertedBy = metadata.convertedBy;
                if (metadata.signature != null) {
                    out.signature = metadata.signature;
                }
                if (metadata.userDefinedMetadata != null) {
                    out.userDefinedMetadata = metadata.userDefinedMetadata;
                }
                if (metadata.modelInitializer != null) {
                    out.modelInitializer = metadata.modelInitializer;
                }
                if (metadata.trainingConfig != null) {
                    out.trainingConfig = metadata.trainingConfig;
                }
            }
            // Load weight data.
            const weightDataBase64 = this.LS.getItem(this.keys.weightData);
            if (weightDataBase64 == null) {
                throw new Error(`In local storage, the binary weight values of model ` +
                    `'${this.modelPath}' are missing.`);
            }
            out.weightData = base64StringToArrayBuffer(weightDataBase64);
            return out;
        }
    }
    BrowserLocalStorage.URL_SCHEME = 'localstorage://';
    const localStorageRouter = (url) => {
        if (!env().getBool('IS_BROWSER')) {
            return null;
        }
        else {
            if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {
                return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));
            }
            else {
                return null;
            }
        }
    };
    IORouterRegistry.registerSaveRouter(localStorageRouter);
    IORouterRegistry.registerLoadRouter(localStorageRouter);
    /**
     * Factory function for local storage IOHandler.
     *
     * This `IOHandler` supports both `save` and `load`.
     *
     * For each model's saved artifacts, four items are saved to local storage.
     *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the
     *     model, such as date saved, type of the topology, size in bytes, etc.
     *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-
     *     style models, this is a stringized JSON.
     *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the
     *     model, can be used to decode the saved binary weight values (see
     *     item below).
     *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary
     *     weight values, stored as a base64-encoded string.
     *
     * Saving may throw an `Error` if the total size of the artifacts exceed the
     * browser-specific quota.
     *
     * @param modelPath A unique identifier for the model to be saved. Must be a
     *   non-empty string.
     * @returns An instance of `IOHandler`, which can be used with, e.g.,
     *   `tf.Model.save`.
     */
    function browserLocalStorage(modelPath) {
        return new BrowserLocalStorage(modelPath);
    }
    class BrowserLocalStorageManager {
        constructor() {
            assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');
            assert(typeof window === 'undefined' ||
                typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');
            this.LS = window.localStorage;
        }
        async listModels() {
            const out = {};
            const prefix = PATH_PREFIX + PATH_SEPARATOR;
            const suffix = PATH_SEPARATOR + INFO_SUFFIX;
            for (let i = 0; i < this.LS.length; ++i) {
                const key = this.LS.key(i);
                if (key.startsWith(prefix) && key.endsWith(suffix)) {
                    const modelPath = getModelPathFromKey(key);
                    out[modelPath] = JSON.parse(this.LS.getItem(key));
                }
            }
            return out;
        }
        async removeModel(path) {
            path = maybeStripScheme(path);
            const keys = getModelKeys(path);
            if (this.LS.getItem(keys.info) == null) {
                throw new Error(`Cannot find model at path '${path}'`);
            }
            const info = JSON.parse(this.LS.getItem(keys.info));
            removeItems(keys);
            return info;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const URL_SCHEME_SUFFIX = '://';
    class ModelStoreManagerRegistry {
        constructor() {
            this.managers = {};
        }
        static getInstance() {
            if (ModelStoreManagerRegistry.instance == null) {
                ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();
            }
            return ModelStoreManagerRegistry.instance;
        }
        /**
         * Register a save-handler router.
         *
         * @param saveRouter A function that maps a URL-like string onto an instance
         * of `IOHandler` with the `save` method defined or `null`.
         */
        static registerManager(scheme, manager) {
            assert(scheme != null, () => 'scheme must not be undefined or null.');
            if (scheme.endsWith(URL_SCHEME_SUFFIX)) {
                scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));
            }
            assert(scheme.length > 0, () => 'scheme must not be an empty string.');
            const registry = ModelStoreManagerRegistry.getInstance();
            assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);
            registry.managers[scheme] = manager;
        }
        static getManager(scheme) {
            const manager = this.getInstance().managers[scheme];
            if (manager == null) {
                throw new Error(`Cannot find model manager for scheme '${scheme}'`);
            }
            return manager;
        }
        static getSchemes() {
            return Object.keys(this.getInstance().managers);
        }
    }
    /**
     * Helper method for parsing a URL string into a scheme and a path.
     *
     * @param url E.g., 'localstorage://my-model'
     * @returns A dictionary with two fields: scheme and path.
     *   Scheme: e.g., 'localstorage' in the example above.
     *   Path: e.g., 'my-model' in the example above.
     */
    function parseURL(url) {
        if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {
            throw new Error(`The url string provided does not contain a scheme. ` +
                `Supported schemes are: ` +
                `${ModelStoreManagerRegistry.getSchemes().join(',')}`);
        }
        return {
            scheme: url.split(URL_SCHEME_SUFFIX)[0],
            path: url.split(URL_SCHEME_SUFFIX)[1],
        };
    }
    async function cloneModelInternal(sourceURL, destURL, deleteSource = false) {
        assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);
        const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);
        assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);
        assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +
            `load handlers for source URL ${sourceURL}.`);
        const loadHandler = loadHandlers[0];
        const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);
        assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` +
            `URL ${destURL}.`);
        assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +
            `save handlers for destination URL ${destURL}.`);
        const saveHandler = saveHandlers[0];
        const sourceScheme = parseURL(sourceURL).scheme;
        const sourcePath = parseURL(sourceURL).path;
        const sameMedium = sourceScheme === parseURL(sourceURL).scheme;
        const modelArtifacts = await loadHandler.load();
        // If moving within the same storage medium, remove the old model as soon as
        // the loading is done. Without doing this, it is possible that the combined
        // size of the two models will cause the cloning to fail.
        if (deleteSource && sameMedium) {
            await ModelStoreManagerRegistry.getManager(sourceScheme)
                .removeModel(sourcePath);
        }
        const saveResult = await saveHandler.save(modelArtifacts);
        // If moving between mediums, the deletion is done after the save succeeds.
        // This guards against the case in which saving to the destination medium
        // fails.
        if (deleteSource && !sameMedium) {
            await ModelStoreManagerRegistry.getManager(sourceScheme)
                .removeModel(sourcePath);
        }
        return saveResult.modelArtifactsInfo;
    }
    /**
     * List all models stored in registered storage mediums.
     *
     * For a web browser environment, the registered mediums are Local Storage and
     * IndexedDB.
     *
     * ```js
     * // First create and save a model.
     * const model = tf.sequential();
     * model.add(tf.layers.dense(
     *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
     * await model.save('localstorage://demo/management/model1');
     *
     * // Then list existing models.
     * console.log(JSON.stringify(await tf.io.listModels()));
     *
     * // Delete the model.
     * await tf.io.removeModel('localstorage://demo/management/model1');
     *
     * // List models again.
     * console.log(JSON.stringify(await tf.io.listModels()));
     * ```
     *
     * @returns A `Promise` of a dictionary mapping URLs of existing models to
     * their model artifacts info. URLs include medium-specific schemes, e.g.,
     *   'indexeddb://my/model/1'. Model artifacts info include type of the
     * model's topology, byte sizes of the topology, weights, etc.
     *
     * @doc {
     *   heading: 'Models',
     *   subheading: 'Management',
     *   namespace: 'io',
     *   ignoreCI: true
     * }
     */
    async function listModels() {
        const schemes = ModelStoreManagerRegistry.getSchemes();
        const out = {};
        for (const scheme of schemes) {
            const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();
            for (const path in schemeOut) {
                const url = scheme + URL_SCHEME_SUFFIX + path;
                out[url] = schemeOut[path];
            }
        }
        return out;
    }
    /**
     * Remove a model specified by URL from a reigstered storage medium.
     *
     * ```js
     * // First create and save a model.
     * const model = tf.sequential();
     * model.add(tf.layers.dense(
     *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
     * await model.save('localstorage://demo/management/model1');
     *
     * // Then list existing models.
     * console.log(JSON.stringify(await tf.io.listModels()));
     *
     * // Delete the model.
     * await tf.io.removeModel('localstorage://demo/management/model1');
     *
     * // List models again.
     * console.log(JSON.stringify(await tf.io.listModels()));
     * ```
     *
     * @param url A URL to a stored model, with a scheme prefix, e.g.,
     *   'localstorage://my-model-1', 'indexeddb://my/model/2'.
     * @returns ModelArtifactsInfo of the deleted model (if and only if deletion
     *   is successful).
     * @throws Error if deletion fails, e.g., if no model exists at `path`.
     *
     * @doc {
     *   heading: 'Models',
     *   subheading: 'Management',
     *   namespace: 'io',
     *   ignoreCI: true
     * }
     */
    async function removeModel(url) {
        const schemeAndPath = parseURL(url);
        const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);
        return manager.removeModel(schemeAndPath.path);
    }
    /**
     * Copy a model from one URL to another.
     *
     * This function supports:
     *
     * 1. Copying within a storage medium, e.g.,
     *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`
     * 2. Copying between two storage mediums, e.g.,
     *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`
     *
     * ```js
     * // First create and save a model.
     * const model = tf.sequential();
     * model.add(tf.layers.dense(
     *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
     * await model.save('localstorage://demo/management/model1');
     *
     * // Then list existing models.
     * console.log(JSON.stringify(await tf.io.listModels()));
     *
     * // Copy the model, from Local Storage to IndexedDB.
     * await tf.io.copyModel(
     *     'localstorage://demo/management/model1',
     *     'indexeddb://demo/management/model1');
     *
     * // List models again.
     * console.log(JSON.stringify(await tf.io.listModels()));
     *
     * // Remove both models.
     * await tf.io.removeModel('localstorage://demo/management/model1');
     * await tf.io.removeModel('indexeddb://demo/management/model1');
     * ```
     *
     * @param sourceURL Source URL of copying.
     * @param destURL Destination URL of copying.
     * @returns ModelArtifactsInfo of the copied model (if and only if copying
     *   is successful).
     * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or
     *   if `oldPath` and `newPath` are identical.
     *
     * @doc {
     *   heading: 'Models',
     *   subheading: 'Management',
     *   namespace: 'io',
     *   ignoreCI: true
     * }
     */
    async function copyModel(sourceURL, destURL) {
        const deleteSource = false;
        return cloneModelInternal(sourceURL, destURL, deleteSource);
    }
    /**
     * Move a model from one URL to another.
     *
     * This function supports:
     *
     * 1. Moving within a storage medium, e.g.,
     *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`
     * 2. Moving between two storage mediums, e.g.,
     *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`
     *
     * ```js
     * // First create and save a model.
     * const model = tf.sequential();
     * model.add(tf.layers.dense(
     *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
     * await model.save('localstorage://demo/management/model1');
     *
     * // Then list existing models.
     * console.log(JSON.stringify(await tf.io.listModels()));
     *
     * // Move the model, from Local Storage to IndexedDB.
     * await tf.io.moveModel(
     *     'localstorage://demo/management/model1',
     *     'indexeddb://demo/management/model1');
     *
     * // List models again.
     * console.log(JSON.stringify(await tf.io.listModels()));
     *
     * // Remove the moved model.
     * await tf.io.removeModel('indexeddb://demo/management/model1');
     * ```
     *
     * @param sourceURL Source URL of moving.
     * @param destURL Destination URL of moving.
     * @returns ModelArtifactsInfo of the copied model (if and only if copying
     *   is successful).
     * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or
     *   if `oldPath` and `newPath` are identical.
     *
     * @doc {
     *   heading: 'Models',
     *   subheading: 'Management',
     *   namespace: 'io',
     *   ignoreCI: true
     * }
     */
    async function moveModel(sourceURL, destURL) {
        const deleteSource = true;
        return cloneModelInternal(sourceURL, destURL, deleteSource);
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class PlatformBrowser {
        fetch(path, init) {
            return fetch(path, init);
        }
        now() {
            return performance.now();
        }
        encode(text, encoding) {
            if (encoding !== 'utf-8' && encoding !== 'utf8') {
                throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);
            }
            if (this.textEncoder == null) {
                this.textEncoder = new TextEncoder();
            }
            return this.textEncoder.encode(text);
        }
        decode(bytes, encoding) {
            return new TextDecoder(encoding).decode(bytes);
        }
    }
    if (env().get('IS_BROWSER')) {
        env().setPlatform('browser', new PlatformBrowser());
        // Register LocalStorage IOHandler
        try {
            ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());
        }
        catch (err) {
        }
        // Register IndexedDB IOHandler
        try {
            ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());
        }
        catch (err) {
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // We are wrapping this within an object so it can be stubbed by Jasmine.
    const getNodeFetch = {
        // tslint:disable-next-line:no-require-imports
        importFetch: () => require('node-fetch')
    };
    let systemFetch;
    class PlatformNode {
        constructor() {
            // tslint:disable-next-line:no-require-imports
            this.util = require('util');
            // According to the spec, the built-in encoder can do only UTF-8 encoding.
            // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder
            this.textEncoder = new this.util.TextEncoder();
        }
        fetch(path, requestInits) {
            if (env().global.fetch != null) {
                return env().global.fetch(path, requestInits);
            }
            if (systemFetch == null) {
                systemFetch = getNodeFetch.importFetch();
            }
            return systemFetch(path, requestInits);
        }
        now() {
            const time = process.hrtime();
            return time[0] * 1000 + time[1] / 1000000;
        }
        encode(text, encoding) {
            if (encoding !== 'utf-8' && encoding !== 'utf8') {
                throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);
            }
            return this.textEncoder.encode(text);
        }
        decode(bytes, encoding) {
            if (bytes.length === 0) {
                return '';
            }
            return new this.util.TextDecoder(encoding).decode(bytes);
        }
    }
    if (env().get('IS_NODE')) {
        env().setPlatform('node', new PlatformNode());
    }

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.
     *
     * The values are stored in CPU as `TypedArray`. Fill the buffer using
     * `buffer.set()`, or by modifying directly `buffer.values`.
     *
     * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with
     * those values.
     *
     * ```js
     * // Create a buffer and set values at particular indices.
     * const buffer = tf.buffer([2, 2]);
     * buffer.set(3, 0, 0);
     * buffer.set(5, 1, 0);
     *
     * // Convert the buffer back to a tensor.
     * buffer.toTensor().print();
     * ```
     *
     * @param shape An array of integers defining the output tensor shape.
     * @param dtype The dtype of the buffer. Defaults to 'float32'.
     * @param values The values of the buffer as `TypedArray`. Defaults to
     * zeros.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function buffer(shape, dtype = 'float32', values) {
        dtype = dtype || 'float32';
        assertNonNegativeIntegerDimensions(shape);
        return new TensorBuffer(shape, dtype, values);
    }

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Casts a `tf.Tensor` to a new dtype.
     *
     * ```js
     * const x = tf.tensor1d([1.5, 2.5, 3]);
     * tf.cast(x, 'int32').print();
     * ```
     * @param x The input tensor to be casted.
     * @param dtype The dtype to cast the input tensor to.
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    function cast_(x, dtype) {
        const $x = convertToTensor(x, 'x', 'cast');
        // Sanity checks.
        if (!isValidDtype(dtype)) {
            throw new Error(`Failed to cast to unknown dtype ${dtype}`);
        }
        if (dtype === 'string' && $x.dtype !== 'string' ||
            dtype !== 'string' && $x.dtype === 'string') {
            throw new Error('Only strings can be casted to strings');
        }
        const inputs = { x: $x };
        const attrs = { dtype };
        return ENGINE.runKernel(Cast, inputs, attrs);
    }
    const cast$2 = op({ cast_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a new tensor with the same values and shape as the specified
     * tensor.
     *
     * ```js
     * const x = tf.tensor([1, 2]);
     *
     * x.clone().print();
     * ```
     *
     * @param x The tensor to clone.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function clone_(x) {
        const $x = convertToTensor(x, 'x', 'clone', 'string_or_numeric');
        const inputs = { x: $x };
        // Note this op is called tf.identity in python. Hence the kernel name used
        // here.
        return ENGINE.runKernel(Identity, inputs);
    }
    const clone = op({ clone_ });

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Prints information about the `tf.Tensor` including its data.
     *
     * ```js
     * const verbose = true;
     * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);
     * ```
     * @param x The tensor to be printed.
     * @param verbose Whether to print verbose information about the ` Tensor`,
     * including dtype and size.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function print(x, verbose = false) {
        console.log(x.toString(verbose));
    }

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    getOrMakeEngine();
    const opHandler = {
        buffer,
        cast: cast$2,
        clone,
        print
    };
    setOpHandler(opHandler);

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const DEFAULT_FILE_NAME_PREFIX = 'model';
    const DEFAULT_JSON_EXTENSION_NAME = '.json';
    const DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';
    function defer(f) {
        return new Promise(resolve => setTimeout(resolve)).then(f);
    }
    class BrowserDownloads {
        constructor(fileNamePrefix) {
            if (!env().getBool('IS_BROWSER')) {
                // TODO(cais): Provide info on what IOHandlers are available under the
                //   current environment.
                throw new Error('browserDownloads() cannot proceed because the current environment ' +
                    'is not a browser.');
            }
            if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {
                fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);
            }
            if (fileNamePrefix == null || fileNamePrefix.length === 0) {
                fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;
            }
            this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;
            this.weightDataFileName =
                fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
        }
        async save(modelArtifacts) {
            if (typeof (document) === 'undefined') {
                throw new Error('Browser downloads are not supported in ' +
                    'this environment since `document` is not present');
            }
            const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));
            if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                throw new Error('BrowserDownloads.save() does not support saving model topology ' +
                    'in binary formats yet.');
            }
            else {
                const weightsManifest = [{
                        paths: ['./' + this.weightDataFileName],
                        weights: modelArtifacts.weightSpecs
                    }];
                const modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);
                const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], { type: 'application/json' }));
                // If anchor elements are not provided, create them without attaching them
                // to parents, so that the downloaded file names can be controlled.
                const jsonAnchor = this.modelJsonAnchor == null ?
                    document.createElement('a') :
                    this.modelJsonAnchor;
                jsonAnchor.download = this.modelJsonFileName;
                jsonAnchor.href = modelJsonURL;
                // Trigger downloads by evoking a click event on the download anchors.
                // When multiple downloads are started synchronously, Firefox will only
                // save the last one.
                await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));
                if (modelArtifacts.weightData != null) {
                    const weightDataAnchor = this.weightDataAnchor == null ?
                        document.createElement('a') :
                        this.weightDataAnchor;
                    weightDataAnchor.download = this.weightDataFileName;
                    weightDataAnchor.href = weightsURL;
                    await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));
                }
                return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };
            }
        }
    }
    BrowserDownloads.URL_SCHEME = 'downloads://';
    class BrowserFiles {
        constructor(files) {
            if (files == null || files.length < 1) {
                throw new Error(`When calling browserFiles, at least 1 file is required, ` +
                    `but received ${files}`);
            }
            this.jsonFile = files[0];
            this.weightsFiles = files.slice(1);
        }
        async load() {
            return new Promise((resolve, reject) => {
                const jsonReader = new FileReader();
                jsonReader.onload = (event) => {
                    // tslint:disable-next-line:no-any
                    const modelJSON = JSON.parse(event.target.result);
                    const modelTopology = modelJSON.modelTopology;
                    if (modelTopology == null) {
                        reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
                        return;
                    }
                    const weightsManifest = modelJSON.weightsManifest;
                    if (weightsManifest == null) {
                        reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
                        return;
                    }
                    if (this.weightsFiles.length === 0) {
                        resolve({ modelTopology });
                        return;
                    }
                    const modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));
                    resolve(modelArtifactsPromise);
                };
                jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +
                    `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +
                    `Keras-style tf.Model artifacts only.`);
                jsonReader.readAsText(this.jsonFile);
            });
        }
        loadWeights(weightsManifest) {
            const weightSpecs = [];
            const paths = [];
            for (const entry of weightsManifest) {
                weightSpecs.push(...entry.weights);
                paths.push(...entry.paths);
            }
            const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);
            const promises = paths.map(path => this.loadWeightsFile(path, pathToFile[path]));
            return Promise.all(promises).then(buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);
        }
        loadWeightsFile(path, file) {
            return new Promise((resolve, reject) => {
                const weightFileReader = new FileReader();
                weightFileReader.onload = (event) => {
                    // tslint:disable-next-line:no-any
                    const weightData = event.target.result;
                    resolve(weightData);
                };
                weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);
                weightFileReader.readAsArrayBuffer(file);
            });
        }
        /**
         * Check the compatibility between weights manifest and weight files.
         */
        checkManifestAndWeightFiles(manifest) {
            const basenames = [];
            const fileNames = this.weightsFiles.map(file => basename(file.name));
            const pathToFile = {};
            for (const group of manifest) {
                group.paths.forEach(path => {
                    const pathBasename = basename(path);
                    if (basenames.indexOf(pathBasename) !== -1) {
                        throw new Error(`Duplicate file basename found in weights manifest: ` +
                            `'${pathBasename}'`);
                    }
                    basenames.push(pathBasename);
                    if (fileNames.indexOf(pathBasename) === -1) {
                        throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);
                    }
                    else {
                        pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];
                    }
                });
            }
            if (basenames.length !== this.weightsFiles.length) {
                throw new Error(`Mismatch in the number of files in weights manifest ` +
                    `(${basenames.length}) and the number of weight files provided ` +
                    `(${this.weightsFiles.length}).`);
            }
            return pathToFile;
        }
    }
    const browserDownloadsRouter = (url) => {
        if (!env().getBool('IS_BROWSER')) {
            return null;
        }
        else {
            if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {
                return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));
            }
            else {
                return null;
            }
        }
    };
    IORouterRegistry.registerSaveRouter(browserDownloadsRouter);
    /**
     * Creates an IOHandler that triggers file downloads from the browser.
     *
     * The returned `IOHandler` instance can be used as model exporting methods such
     * as `tf.Model.save` and supports only saving.
     *
     * ```js
     * const model = tf.sequential();
     * model.add(tf.layers.dense(
     *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
     * const saveResult = await model.save('downloads://mymodel');
     * // This will trigger downloading of two files:
     * //   'mymodel.json' and 'mymodel.weights.bin'.
     * console.log(saveResult);
     * ```
     *
     * @param fileNamePrefix Prefix name of the files to be downloaded. For use with
     *   `tf.Model`, `fileNamePrefix` should follow either of the following two
     *   formats:
     *   1. `null` or `undefined`, in which case the default file
     *      names will be used:
     *      - 'model.json' for the JSON file containing the model topology and
     *        weights manifest.
     *      - 'model.weights.bin' for the binary file containing the binary weight
     *        values.
     *   2. A single string or an Array of a single string, as the file name prefix.
     *      For example, if `'foo'` is provided, the downloaded JSON
     *      file and binary weights file will be named 'foo.json' and
     *      'foo.weights.bin', respectively.
     * @param config Additional configuration for triggering downloads.
     * @returns An instance of `BrowserDownloads` `IOHandler`.
     *
     * @doc {
     *   heading: 'Models',
     *   subheading: 'Loading',
     *   namespace: 'io',
     *   ignoreCI: true
     * }
     */
    function browserDownloads(fileNamePrefix = 'model') {
        return new BrowserDownloads(fileNamePrefix);
    }
    /**
     * Creates an IOHandler that loads model artifacts from user-selected files.
     *
     * This method can be used for loading from files such as user-selected files
     * in the browser.
     * When used in conjunction with `tf.loadLayersModel`, an instance of
     * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
     *
     * ```js
     * // Note: This code snippet won't run properly without the actual file input
     * //   elements in the HTML DOM.
     *
     * // Suppose there are two HTML file input (`<input type="file" ...>`)
     * // elements.
     * const uploadJSONInput = document.getElementById('upload-json');
     * const uploadWeightsInput = document.getElementById('upload-weights');
     * const model = await tf.loadLayersModel(tf.io.browserFiles(
     *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));
     * ```
     *
     * @param files `File`s to load from. Currently, this function supports only
     *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for
     *   which an `Array` of `File`s is expected (in that order):
     *   - A JSON file containing the model topology and weight manifest.
     *   - Optionally, One or more binary files containing the binary weights.
     *     These files must have names that match the paths in the `weightsManifest`
     *     contained by the aforementioned JSON file, or errors will be thrown
     *     during loading. These weights files have the same format as the ones
     *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`
     *     Python PIP package. If no weights files are provided, only the model
     *     topology will be loaded from the JSON file above.
     * @returns An instance of `Files` `IOHandler`.
     *
     * @doc {
     *   heading: 'Models',
     *   subheading: 'Loading',
     *   namespace: 'io',
     *   ignoreCI: true
     * }
     */
    function browserFiles(files) {
        return new BrowserFiles(files);
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Monitor Promise.all progress, fire onProgress callback function.
     *
     * @param promises Promise list going to be monitored
     * @param onProgress Callback function. Fired when a promise resolved.
     * @param startFraction Optional fraction start. Default to 0.
     * @param endFraction Optional fraction end. Default to 1.
     */
    function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {
        checkPromises(promises);
        startFraction = startFraction == null ? 0 : startFraction;
        endFraction = endFraction == null ? 1 : endFraction;
        checkFraction(startFraction, endFraction);
        let resolvedPromise = 0;
        const registerMonitor = (promise) => {
            promise.then(value => {
                const fraction = startFraction +
                    ++resolvedPromise / promises.length * (endFraction - startFraction);
                // pass fraction as parameter to callback function.
                onProgress(fraction);
                return value;
            });
            return promise;
        };
        function checkPromises(promises) {
            assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');
        }
        function checkFraction(startFraction, endFraction) {
            assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +
                `got startFraction ${startFraction}`);
            assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +
                `got endFraction ${endFraction}`);
            assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` +
                `got startFraction ${startFraction} and endFraction ` +
                `${endFraction}`);
        }
        return Promise.all(promises.map(registerMonitor));
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Reads binary weights data from a number of URLs.
     *
     * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.
     * @param requestOptions RequestInit (options) for the HTTP requests.
     * @param fetchFunc Optional overriding value for the `window.fetch` function.
     * @param onProgress Optional, progress callback function, fired periodically
     *   before the load is completed.
     * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same
     *   length as `fetchURLs`.
     */
    async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {
        if (loadOptions == null) {
            loadOptions = {};
        }
        const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :
            loadOptions.fetchFunc;
        // Create the requests for all of the weights in parallel.
        const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));
        const fetchStartFraction = 0;
        const fetchEndFraction = 0.5;
        const responses = loadOptions.onProgress == null ?
            await Promise.all(requests) :
            await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);
        const bufferPromises = responses.map(response => response.arrayBuffer());
        const bufferStartFraction = 0.5;
        const bufferEndFraction = 1;
        const buffers = loadOptions.onProgress == null ?
            await Promise.all(bufferPromises) :
            await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);
        return buffers;
    }
    /**
     * Reads a weights manifest JSON configuration, fetches the weights and
     * returns them as `Tensor`s.
     *
     * @param manifest The weights manifest JSON.
     * @param filePathPrefix The path prefix for filenames given in the manifest.
     *     Defaults to the empty string.
     * @param weightNames The names of the weights to be fetched.
     */
    async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {
        // TODO(nsthorat): Groups are currently fetched atomically. If you need a
        // single weight from a group, the whole group will be fetched. At a future
        // date, we should support fetching only the individual shards within a
        // group that are needed to reconstruct the requested weight.
        // TODO(cais): Use `decodeWeights` for implementation.
        const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });
        const loadWeights = weightsLoaderFactory(fetchWeights);
        return loadWeights(manifest, filePathPrefix, weightNames);
    }
    /**
     * Creates a function, which reads a weights manifest JSON configuration,
     * fetches the weight files using the specified function and returns them as
     * `Tensor`s.
     *
     * ```js
     * // example for creating a nodejs weight loader, which reads the weight files
     * // from disk using fs.readFileSync
     *
     * import * as fs from 'fs'
     *
     * const fetchWeightsFromDisk = (filePaths: string[]) =>
     *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)
     *
     * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)
     *
     * const manifest = JSON.parse(
     *   fs.readFileSync('./my_model-weights_manifest').toString()
     * )
     * const weightMap = await loadWeights(manifest, './')
     * ```
     * @param fetchWeightsFunction The function used for fetching the weight files.
     * @returns Weight loading function.
     */
    function weightsLoaderFactory(fetchWeightsFunction) {
        return async (manifest, filePathPrefix = '', weightNames) => {
            // Collect all the groups, weights, and their relative offsets to be
            // fetched.
            const groupIndicesToFetchMap = manifest.map(() => false);
            const groupWeightsToFetch = {};
            const weightsFound = weightNames != null ? weightNames.map(() => false) : [];
            const allManifestWeightNames = [];
            manifest.forEach((manifestGroupConfig, groupIndex) => {
                let groupOffset = 0;
                manifestGroupConfig.weights.forEach(weightsEntry => {
                    const rawDtype = ('quantization' in weightsEntry) ?
                        weightsEntry.quantization.dtype :
                        weightsEntry.dtype;
                    const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *
                        sizeFromShape(weightsEntry.shape);
                    const enqueueWeightsForFetchingFn = () => {
                        groupIndicesToFetchMap[groupIndex] = true;
                        if (groupWeightsToFetch[groupIndex] == null) {
                            groupWeightsToFetch[groupIndex] = [];
                        }
                        groupWeightsToFetch[groupIndex].push({
                            manifestEntry: weightsEntry,
                            groupOffset,
                            sizeBytes: weightsBytes
                        });
                    };
                    if (weightNames != null) {
                        weightNames.forEach((weightName, weightIndex) => {
                            if (weightName === weightsEntry.name) {
                                enqueueWeightsForFetchingFn();
                                weightsFound[weightIndex] = true;
                            }
                        });
                    }
                    else {
                        enqueueWeightsForFetchingFn();
                    }
                    allManifestWeightNames.push(weightsEntry.name);
                    groupOffset += weightsBytes;
                });
            });
            if (!weightsFound.every(found => found)) {
                const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);
                throw new Error(`Could not find weights in manifest with names: ` +
                    `${weightsNotFound.join(', ')}. \n` +
                    `Manifest JSON has weights with names: ` +
                    `${allManifestWeightNames.join(', ')}.`);
            }
            // Convert the one-hot boolean groupId => shouldFetch map to a list of group
            // IDs.
            const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {
                if (shouldFetch) {
                    accumulator.push(i);
                }
                return accumulator;
            }, []);
            const fetchUrls = [];
            groupIndicesToFetch.forEach(i => {
                manifest[i].paths.forEach(filepath => {
                    const fetchUrl = filePathPrefix +
                        (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;
                    fetchUrls.push(fetchUrl);
                });
            });
            const buffers = await fetchWeightsFunction(fetchUrls);
            const weightsTensorMap = {};
            let bufferIndexOffset = 0;
            groupIndicesToFetch.forEach(i => {
                const numBuffers = manifest[i].paths.length;
                let groupBytes = 0;
                for (let i = 0; i < numBuffers; i++) {
                    groupBytes += buffers[bufferIndexOffset + i].byteLength;
                }
                // Create a buffer for the whole group.
                const groupBuffer = new ArrayBuffer(groupBytes);
                const groupByteBuffer = new Uint8Array(groupBuffer);
                let groupBufferOffset = 0;
                for (let i = 0; i < numBuffers; i++) {
                    const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);
                    groupByteBuffer.set(buffer, groupBufferOffset);
                    groupBufferOffset += buffer.byteLength;
                }
                const weightsEntries = groupWeightsToFetch[i];
                weightsEntries.forEach(weightsEntry => {
                    const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);
                    const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);
                    for (const name in nameToTensorMap) {
                        weightsTensorMap[name] = nameToTensorMap[name];
                    }
                });
                bufferIndexOffset += numBuffers;
            });
            return weightsTensorMap;
        };
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const OCTET_STREAM_MIME_TYPE = 'application/octet-stream';
    const JSON_TYPE = 'application/json';
    class HTTPRequest {
        constructor(path, loadOptions) {
            this.DEFAULT_METHOD = 'POST';
            if (loadOptions == null) {
                loadOptions = {};
            }
            this.weightPathPrefix = loadOptions.weightPathPrefix;
            this.onProgress = loadOptions.onProgress;
            this.weightUrlConverter = loadOptions.weightUrlConverter;
            if (loadOptions.fetchFunc != null) {
                assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +
                    '`fetch` (see ' +
                    'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');
                this.fetch = loadOptions.fetchFunc;
            }
            else {
                this.fetch = env().platform.fetch;
            }
            assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +
                'empty.');
            if (Array.isArray(path)) {
                assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' +
                    `(actual length is ${path.length}).`);
            }
            this.path = path;
            if (loadOptions.requestInit != null &&
                loadOptions.requestInit.body != null) {
                throw new Error('requestInit is expected to have no pre-existing body, but has one.');
            }
            this.requestInit = loadOptions.requestInit || {};
        }
        async save(modelArtifacts) {
            if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +
                    'in binary formats yet.');
            }
            const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
            init.body = new FormData();
            const weightsManifest = [{
                    paths: ['./model.weights.bin'],
                    weights: modelArtifacts.weightSpecs,
                }];
            const modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);
            init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');
            if (modelArtifacts.weightData != null) {
                init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');
            }
            const response = await this.fetch(this.path, init);
            if (response.ok) {
                return {
                    modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),
                    responses: [response],
                };
            }
            else {
                throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +
                    `${response.status}.`);
            }
        }
        /**
         * Load model artifacts via HTTP request(s).
         *
         * See the documentation to `tf.io.http` for details on the saved
         * artifacts.
         *
         * @returns The loaded model artifacts (if loading succeeds).
         */
        async load() {
            const modelConfigRequest = await this.fetch(this.path, this.requestInit);
            if (!modelConfigRequest.ok) {
                throw new Error(`Request to ${this.path} failed with status code ` +
                    `${modelConfigRequest.status}. Please verify this URL points to ` +
                    `the model JSON of the model to load.`);
            }
            let modelJSON;
            try {
                modelJSON = await modelConfigRequest.json();
            }
            catch (e) {
                let message = `Failed to parse model JSON of response from ${this.path}.`;
                // TODO(nsthorat): Remove this after some time when we're comfortable that
                // .pb files are mostly gone.
                if (this.path.endsWith('.pb')) {
                    message += ' Your path contains a .pb file extension. ' +
                        'Support for .pb models have been removed in TensorFlow.js 1.0 ' +
                        'in favor of .json models. You can re-convert your Python ' +
                        'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +
                        'or you can convert your.pb models with the \'pb2json\'' +
                        'NPM script in the tensorflow/tfjs-converter repository.';
                }
                else {
                    message += ' Please make sure the server is serving valid ' +
                        'JSON for this request.';
                }
                throw new Error(message);
            }
            // We do not allow both modelTopology and weightsManifest to be missing.
            const modelTopology = modelJSON.modelTopology;
            const weightsManifest = modelJSON.weightsManifest;
            if (modelTopology == null && weightsManifest == null) {
                throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +
                    `topology or manifest for weights.`);
            }
            return getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));
        }
        async loadWeights(weightsManifest) {
            const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;
            const [prefix, suffix] = parseUrl(weightPath);
            const pathPrefix = this.weightPathPrefix || prefix;
            const weightSpecs = [];
            for (const entry of weightsManifest) {
                weightSpecs.push(...entry.weights);
            }
            const fetchURLs = [];
            const urlPromises = [];
            for (const weightsGroup of weightsManifest) {
                for (const path of weightsGroup.paths) {
                    if (this.weightUrlConverter != null) {
                        urlPromises.push(this.weightUrlConverter(path));
                    }
                    else {
                        fetchURLs.push(pathPrefix + path + suffix);
                    }
                }
            }
            if (this.weightUrlConverter) {
                fetchURLs.push(...await Promise.all(urlPromises));
            }
            const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {
                requestInit: this.requestInit,
                fetchFunc: this.fetch,
                onProgress: this.onProgress
            });
            return [weightSpecs, concatenateArrayBuffers(buffers)];
        }
    }
    HTTPRequest.URL_SCHEME_REGEX = /^https?:\/\//;
    /**
     * Extract the prefix and suffix of the url, where the prefix is the path before
     * the last file, and suffix is the search params after the last file.
     * ```
     * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'
     * [prefix, suffix] = parseUrl(url)
     * // prefix = 'http://tfhub.dev/model/1/'
     * // suffix = '?tfjs-format=file'
     * ```
     * @param url the model url to be parsed.
     */
    function parseUrl(url) {
        const lastSlash = url.lastIndexOf('/');
        const lastSearchParam = url.lastIndexOf('?');
        const prefix = url.substring(0, lastSlash);
        const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';
        return [prefix + '/', suffix];
    }
    function isHTTPScheme(url) {
        return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;
    }
    const httpRouter = (url, loadOptions) => {
        if (typeof fetch === 'undefined' &&
            (loadOptions == null || loadOptions.fetchFunc == null)) {
            // `http` uses `fetch` or `node-fetch`, if one wants to use it in
            // an environment that is not the browser or node they have to setup a
            // global fetch polyfill.
            return null;
        }
        else {
            let isHTTP = true;
            if (Array.isArray(url)) {
                isHTTP = url.every(urlItem => isHTTPScheme(urlItem));
            }
            else {
                isHTTP = isHTTPScheme(url);
            }
            if (isHTTP) {
                return http(url, loadOptions);
            }
        }
        return null;
    };
    IORouterRegistry.registerSaveRouter(httpRouter);
    IORouterRegistry.registerLoadRouter(httpRouter);
    /**
     * Creates an IOHandler subtype that sends model artifacts to HTTP server.
     *
     * An HTTP request of the `multipart/form-data` mime type will be sent to the
     * `path` URL. The form data includes artifacts that represent the topology
     * and/or weights of the model. In the case of Keras-style `tf.Model`, two
     * blobs (files) exist in form-data:
     *   - A JSON file consisting of `modelTopology` and `weightsManifest`.
     *   - A binary weights file consisting of the concatenated weight values.
     * These files are in the same format as the one generated by
     * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).
     *
     * The following code snippet exemplifies the client-side code that uses this
     * function:
     *
     * ```js
     * const model = tf.sequential();
     * model.add(
     *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
     *
     * const saveResult = await model.save(tf.io.http(
     *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));
     * console.log(saveResult);
     * ```
     *
     * If the default `POST` method is to be used, without any custom parameters
     * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:
     *
     * ```js
     * const saveResult = await model.save('http://model-server:5000/upload');
     * ```
     *
     * The following GitHub Gist
     * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864
     * implements a server based on [flask](https://github.com/pallets/flask) that
     * can receive the request. Upon receiving the model artifacts via the requst,
     * this particular server reconsistutes instances of [Keras
     * Models](https://keras.io/models/model/) in memory.
     *
     *
     * @param path A URL path to the model.
     *   Can be an absolute HTTP path (e.g.,
     *   'http://localhost:8000/model-upload)') or a relative path (e.g.,
     *   './model-upload').
     * @param requestInit Request configurations to be used when sending
     *    HTTP request to server using `fetch`. It can contain fields such as
     *    `method`, `credentials`, `headers`, `mode`, etc. See
     *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
     *    for more information. `requestInit` must not have a body, because the
     * body will be set by TensorFlow.js. File blobs representing the model
     * topology (filename: 'model.json') and the weights of the model (filename:
     * 'model.weights.bin') will be appended to the body. If `requestInit` has a
     * `body`, an Error will be thrown.
     * @param loadOptions Optional configuration for the loading. It includes the
     *   following fields:
     *   - weightPathPrefix Optional, this specifies the path prefix for weight
     *     files, by default this is calculated from the path param.
     *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,
     *     the `fetch` from node-fetch can be used here.
     *   - onProgress Optional, progress callback function, fired periodically
     *     before the load is completed.
     * @returns An instance of `IOHandler`.
     *
     * @doc {
     *   heading: 'Models',
     *   subheading: 'Loading',
     *   namespace: 'io',
     *   ignoreCI: true
     * }
     */
    function http(path, loadOptions) {
        return new HTTPRequest(path, loadOptions);
    }
    /**
     * Deprecated. Use `tf.io.http`.
     * @param path
     * @param loadOptions
     */
    function browserHTTPRequest(path, loadOptions) {
        return http(path, loadOptions);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class PassthroughLoader {
        constructor(modelArtifacts) {
            this.modelArtifacts = modelArtifacts;
        }
        async load() {
            return this.modelArtifacts;
        }
    }
    class PassthroughSaver {
        constructor(saveHandler) {
            this.saveHandler = saveHandler;
        }
        async save(modelArtifacts) {
            return this.saveHandler(modelArtifacts);
        }
    }
    /**
     * Creates an IOHandler that loads model artifacts from memory.
     *
     * When used in conjunction with `tf.loadLayersModel`, an instance of
     * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
     *
     * ```js
     * const model = await tf.loadLayersModel(tf.io.fromMemory(
     *     modelTopology, weightSpecs, weightData));
     * ```
     *
     * @param modelArtifacts a object containing model topology (i.e., parsed from
     *   the JSON format).
     * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
     *   names, shapes, types, and quantization of the weight data.
     * @param weightData A single `ArrayBuffer` containing the weight data,
     *   concatenated in the order described by the weightSpecs.
     * @param trainingConfig Model training configuration. Optional.
     *
     * @returns A passthrough `IOHandler` that simply loads the provided data.
     */
    function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {
        if (arguments.length === 1) {
            const isModelArtifacts = modelArtifacts.modelTopology != null ||
                modelArtifacts.weightSpecs != null;
            if (isModelArtifacts) {
                return new PassthroughLoader(modelArtifacts);
            }
            else {
                // Legacy support: with only modelTopology.
                // TODO(cais): Remove this deprecated API.
                console.warn('Please call tf.io.fromMemory() with only one argument. ' +
                    'The argument should be of type ModelArtifacts. ' +
                    'The multi-argument signature of tf.io.fromMemory() has been ' +
                    'deprecated and will be removed in a future release.');
                return new PassthroughLoader({ modelTopology: modelArtifacts });
            }
        }
        else {
            // Legacy support.
            // TODO(cais): Remove this deprecated API.
            console.warn('Please call tf.io.fromMemory() with only one argument. ' +
                'The argument should be of type ModelArtifacts. ' +
                'The multi-argument signature of tf.io.fromMemory() has been ' +
                'deprecated and will be removed in a future release.');
            return new PassthroughLoader({
                modelTopology: modelArtifacts,
                weightSpecs,
                weightData,
                trainingConfig
            });
        }
    }
    /**
     * Creates an IOHandler that passes saved model artifacts to a callback.
     *
     * ```js
     * function handleSave(artifacts) {
     *   // ... do something with the artifacts ...
     *   return {modelArtifactsInfo: {...}, ...};
     * }
     *
     * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
     * ```
     *
     * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
     *     `SaveResult`.
     */
    function withSaveHandler(saveHandler) {
        return new PassthroughSaver(saveHandler);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */

    var io = /*#__PURE__*/Object.freeze({
        __proto__: null,
        browserFiles: browserFiles,
        browserHTTPRequest: browserHTTPRequest,
        concatenateArrayBuffers: concatenateArrayBuffers,
        decodeWeights: decodeWeights,
        encodeWeights: encodeWeights,
        fromMemory: fromMemory,
        getLoadHandlers: getLoadHandlers,
        getModelArtifactsForJSON: getModelArtifactsForJSON,
        getModelArtifactsInfoForJSON: getModelArtifactsInfoForJSON,
        getSaveHandlers: getSaveHandlers,
        http: http,
        isHTTPScheme: isHTTPScheme,
        loadWeights: loadWeights,
        registerLoadRouter: registerLoadRouter,
        registerSaveRouter: registerSaveRouter,
        weightsLoaderFactory: weightsLoaderFactory,
        withSaveHandler: withSaveHandler,
        copyModel: copyModel,
        listModels: listModels,
        moveModel: moveModel,
        removeModel: removeModel
    });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the dot product of two matrices, A * B. These must be matrices.
     *
     * ```js
     * const a = tf.tensor2d([1, 2], [1, 2]);
     * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * a.matMul(b).print();  // or tf.matMul(a, b)
     * ```
     * @param a First matrix in dot product operation.
     * @param b Second matrix in dot product operation.
     * @param transposeA If true, `a` is transposed before multiplication.
     * @param transposeB If true, `b` is transposed before multiplication.
     *
     * @doc {heading: 'Operations', subheading: 'Matrices'}
     */
    function matMul_(a, b, transposeA = false, transposeB = false) {
        let $a = convertToTensor(a, 'a', 'matMul');
        let $b = convertToTensor(b, 'b', 'matMul');
        [$a, $b] = makeTypesMatch($a, $b);
        const inputs = { a: $a, b: $b };
        const attrs = { transposeA, transposeB };
        return ENGINE.runKernel(BatchMatMul, inputs, attrs);
    }
    const matMul$1 = op({ matMul_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take
     * value `onValue` (defaults to 1), while all other locations take value
     * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank
     * `R+1` with the last axis of size `depth`.
     *
     * ```js
     * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();
     * ```
     *
     * @param indices `tf.Tensor` of indices with dtype `int32`.
     * @param depth The depth of the one hot dimension.
     * @param onValue A number used to fill in the output when the index matches
     * the location.
     * @param offValue A number used to fill in the output when the index does
     *     not match the location.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function oneHot_(indices, depth, onValue = 1, offValue = 0) {
        if (depth < 2) {
            throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);
        }
        const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');
        const inputs = { indices: $indices };
        const attrs = { depth, onValue, offValue };
        return ENGINE.runKernel(OneHot, inputs, attrs);
    }
    const oneHot$2 = op({ oneHot_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.
     *
     * The returned `tf.Tensor`'s dimension `i` will correspond to the input
     * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,
     * where `n` is the rank of the input `tf.Tensor`. Hence by default, this
     * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.
     *
     * ```js
     * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
     *
     * a.transpose().print();  // or tf.transpose(a)
     * ```
     *
     * @param x The tensor to transpose.
     * @param perm The permutation of the dimensions of a.
     *
     * @doc {heading: 'Operations', subheading: 'Matrices'}
     */
    function transpose_(x, perm) {
        const $x = convertToTensor(x, 'x', 'transpose');
        if (perm == null) {
            perm = $x.shape.map((s, i) => i).reverse();
        }
        assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` +
            `must match length of perm ${perm}.`);
        perm.forEach(axis => {
            assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +
                ` but got ${perm}`);
        });
        if ($x.rank <= 1) {
            return $x.clone();
        }
        const inputs = { x: $x };
        const attrs = { perm };
        return ENGINE.runKernel(Transpose, inputs, attrs);
    }
    const transpose$2 = op({ transpose_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the confusion matrix from true labels and predicted labels.
     *
     * ```js
     * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');
     * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');
     * const numClasses = 3;
     * const out = tf.math.confusionMatrix(labels, predictions, numClasses);
     * out.print();
     * // Expected output matrix:
     * // [[2, 0, 0],
     * //  [0, 1, 1],
     * //  [0, 0, 1]]
     * ```
     *
     * @param labels The target labels, assumed to be 0-based integers
     *   for the classes. The shape is `[numExamples]`, where
     *   `numExamples` is the number of examples included.
     * @param predictions The predicted classes, assumed to be
     *   0-based integers for the classes. Must have the same shape as `labels`.
     * @param numClasses Number of all classes, as an integer.
     *   Its value must be larger than the largest element in `labels` and
     *   `predictions`.
     * @returns The confusion matrix as a int32-type 2D tensor. The value at
     *   row `r` and column `c` is the number of times examples of actual class
     *   `r` were predicted as class `c`.
     *
     * @doc {heading: 'Operations', subheading: 'Evaluation'}
     */
    function confusionMatrix_(labels, predictions, numClasses) {
        const $labels = convertToTensor(labels, 'labels', 'confusionMatrix');
        const $predictions = convertToTensor(predictions, 'predictions', 'confusionMatrix');
        assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), () => `If provided, numClasses must be a positive integer, ` +
            `but got ${numClasses}`);
        assert($labels.rank === 1, () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);
        assert($predictions.rank === 1, () => `Expected the rank of predictions to be 1, ` +
            `but got ${$predictions.rank}`);
        assert($labels.shape[0] === $predictions.shape[0], () => `Mismatch in the number of examples: ` +
            `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` +
            `Labels and predictions should have the same number of elements.`);
        assert(numClasses > 0 && Number.isInteger(numClasses), () => `numClasses is required to be a positive integer, but got ` +
            `${numClasses}`);
        // TODO(cais): In the future, if oneHot supports tensors inputs for
        //   `numClasses`, `confusionMatrix` can make `numClasses` optional.
        const oneHotLabels = oneHot$2(cast$2($labels, 'int32'), numClasses);
        const oneHotPredictions = oneHot$2(cast$2($predictions, 'int32'), numClasses);
        const oneHotLabelsT = transpose$2(oneHotLabels);
        const product = matMul$1(oneHotLabelsT, oneHotPredictions);
        return cast$2(product, 'int32');
    }
    const confusionMatrix = op({ confusionMatrix_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */

    var math = /*#__PURE__*/Object.freeze({
        __proto__: null,
        confusionMatrix: confusionMatrix
    });

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the dimensions in the input shape that are broadcasted to
     * produce the provided output shape.
     *
     * The returned dimensions are 0-indexed and sorted. An example:
     * inShape = [4, 1, 3]
     * outShape = [5, 4, 3, 3]
     * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.
     */
    function getBroadcastDims$1(inShape, outShape) {
        const inRank = inShape.length;
        const dims = [];
        for (let i = 0; i < inRank; i++) {
            const dim = inRank - 1 - i;
            const a = inShape[dim] || 1;
            const b = outShape[outShape.length - 1 - i] || 1;
            if (b > 1 && a === 1) {
                dims.unshift(dim);
            }
        }
        return dims;
    }
    /**
     * Returns the axes in the output space that should be reduced to produce
     * the input space.
     */
    function getReductionAxes(inShape, outShape) {
        const result = [];
        for (let i = 0; i < outShape.length; i++) {
            const inDim = inShape[inShape.length - i - 1];
            const outAxis = outShape.length - i - 1;
            const outDim = outShape[outAxis];
            if (inDim == null || (inDim === 1 && outDim > 1)) {
                result.unshift(outAxis);
            }
        }
        return result;
    }
    function assertAndGetBroadcastShape(shapeA, shapeB) {
        const result = [];
        const l = Math.max(shapeA.length, shapeB.length);
        for (let i = 0; i < l; i++) {
            let a = shapeA[shapeA.length - i - 1];
            if (a == null) {
                a = 1;
            }
            let b = shapeB[shapeB.length - i - 1];
            if (b == null) {
                b = 1;
            }
            if (a === 1) {
                result.unshift(b);
            }
            else if (b === 1) {
                result.unshift(a);
            }
            else if (a !== b) {
                const errMsg = `Operands could not be broadcast together with shapes ` +
                    `${shapeA} and ${shapeB}.`;
                throw Error(errMsg);
            }
            else {
                result.unshift(a);
            }
        }
        return result;
    }

    var broadcast_util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getBroadcastDims: getBroadcastDims$1,
        getReductionAxes: getReductionAxes,
        assertAndGetBroadcastShape: assertAndGetBroadcastShape
    });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.
     *
     * The same functionality can be achieved with `tf.tensor`, but in general
     * we recommend using `tf.tensor3d` as it makes the code more readable.
     *
     *  ```js
     * // Pass a nested array.
     * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();
     * ```
     * ```js
     * // Pass a flat array and specify a shape.
     * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();
     * ```
     *
     * @param values The values of the tensor. Can be nested array of numbers,
     *     or a flat array, or a `TypedArray`.
     * @param shape The shape of the tensor. If not provided,  it is inferred from
     *     `values`.
     * @param dtype The data type.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function tensor3d(values, shape, dtype) {
        assertNonNull(values);
        if (shape != null && shape.length !== 3) {
            throw new Error('tensor3d() requires shape to have three numbers');
        }
        const inferredShape = inferShape(values, dtype);
        if (inferredShape.length !== 3 && inferredShape.length !== 1) {
            throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor3d() requires shape to be provided when `values` ' +
                'are a flat array');
        }
        return makeTensor(values, shape, inferredShape, dtype);
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    let fromPixels2DContext$1;
    /**
     * Creates a `tf.Tensor` from an image.
     *
     * ```js
     * const image = new ImageData(1, 1);
     * image.data[0] = 100;
     * image.data[1] = 150;
     * image.data[2] = 200;
     * image.data[3] = 255;
     *
     * tf.browser.fromPixels(image).print();
     * ```
     *
     * @param pixels The input image to construct the tensor from. The
     * supported image types are all 4-channel. You can also pass in an image
     * object with following attributes:
     * `{data: Uint8Array; width: number; height: number}`
     * @param numChannels The number of channels of the output tensor. A
     * numChannels value less than 4 allows you to ignore channels. Defaults to
     * 3 (ignores alpha channel of input image).
     *
     * @returns A Tensor3D with the shape `[height, width, numChannels]`.
     *
     * Note: fromPixels can be lossy in some cases, same image may result in
     * slightly different tensor values, if rendered by different rendering
     * engines. This means that results from different browsers, or even same
     * browser with CPU and GPU rendering engines can be different. See discussion
     * in details:
     * https://github.com/tensorflow/tfjs/issues/5482
     *
     * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
     */
    function fromPixels_(pixels, numChannels = 3) {
        // Sanity checks.
        if (numChannels > 4) {
            throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');
        }
        if (pixels == null) {
            throw new Error('pixels passed to tf.browser.fromPixels() can not be null');
        }
        let isPixelData = false;
        let isImageData = false;
        let isVideo = false;
        let isImage = false;
        let isCanvasLike = false;
        let isImageBitmap = false;
        if (pixels.data instanceof Uint8Array) {
            isPixelData = true;
        }
        else if (typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {
            isImageData = true;
        }
        else if (typeof (HTMLVideoElement) !== 'undefined' &&
            pixels instanceof HTMLVideoElement) {
            isVideo = true;
        }
        else if (typeof (HTMLImageElement) !== 'undefined' &&
            pixels instanceof HTMLImageElement) {
            isImage = true;
            // tslint:disable-next-line: no-any
        }
        else if (pixels.getContext != null) {
            isCanvasLike = true;
        }
        else if (typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap) {
            isImageBitmap = true;
        }
        else {
            throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' +
                `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +
                `in browser, or OffscreenCanvas, ImageData in webworker` +
                ` or {data: Uint32Array, width: number, height: number}, ` +
                `but was ${pixels.constructor.name}`);
        }
        if (isVideo) {
            const HAVE_CURRENT_DATA_READY_STATE = 2;
            if (isVideo &&
                pixels.readyState <
                    HAVE_CURRENT_DATA_READY_STATE) {
                throw new Error('The video element has not loaded data yet. Please wait for ' +
                    '`loadeddata` event on the <video> element.');
            }
        }
        // If the current backend has 'FromPixels' registered, it has a more
        // efficient way of handling pixel uploads, so we call that.
        const kernel = getKernel(FromPixels, ENGINE.backendName);
        if (kernel != null) {
            const inputs = { pixels };
            const attrs = { numChannels };
            return ENGINE.runKernel(FromPixels, inputs, attrs);
        }
        const [width, height] = isVideo ?
            [
                pixels.videoWidth,
                pixels.videoHeight
            ] :
            [pixels.width, pixels.height];
        let vals;
        if (isCanvasLike) {
            vals =
                // tslint:disable-next-line:no-any
                pixels.getContext('2d').getImageData(0, 0, width, height).data;
        }
        else if (isImageData || isPixelData) {
            vals = pixels.data;
        }
        else if (isImage || isVideo || isImageBitmap) {
            if (fromPixels2DContext$1 == null) {
                if (typeof document === 'undefined') {
                    if (typeof OffscreenCanvas !== 'undefined' &&
                        typeof OffscreenCanvasRenderingContext2D !== 'undefined') {
                        // @ts-ignore
                        fromPixels2DContext$1 = new OffscreenCanvas(1, 1).getContext('2d');
                    }
                    else {
                        throw new Error('Cannot parse input in current context. ' +
                            'Reason: OffscreenCanvas Context2D rendering is not supported.');
                    }
                }
                else {
                    fromPixels2DContext$1 = document.createElement('canvas').getContext('2d');
                }
            }
            fromPixels2DContext$1.canvas.width = width;
            fromPixels2DContext$1.canvas.height = height;
            fromPixels2DContext$1.drawImage(pixels, 0, 0, width, height);
            vals = fromPixels2DContext$1.getImageData(0, 0, width, height).data;
        }
        let values;
        if (numChannels === 4) {
            values = new Int32Array(vals);
        }
        else {
            const numPixels = width * height;
            values = new Int32Array(numPixels * numChannels);
            for (let i = 0; i < numPixels; i++) {
                for (let channel = 0; channel < numChannels; ++channel) {
                    values[i * numChannels + channel] = vals[i * 4 + channel];
                }
            }
        }
        const outShape = [height, width, numChannels];
        return tensor3d(values, outShape, 'int32');
    }
    // Helper functions for |fromPixelsAsync| to check whether the input can
    // be wrapped into imageBitmap.
    function isPixelData(pixels) {
        return (pixels != null) && (pixels.data instanceof Uint8Array);
    }
    function isImageBitmapFullySupported() {
        return typeof window !== 'undefined' &&
            typeof (ImageBitmap) !== 'undefined' &&
            window.hasOwnProperty('createImageBitmap');
    }
    function isNonEmptyPixels(pixels) {
        return pixels != null && pixels.width !== 0 && pixels.height !== 0;
    }
    function canWrapPixelsToImageBitmap(pixels) {
        return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) &&
            isNonEmptyPixels(pixels) && !isPixelData(pixels);
    }
    /**
     * Creates a `tf.Tensor` from an image in async way.
     *
     * ```js
     * const image = new ImageData(1, 1);
     * image.data[0] = 100;
     * image.data[1] = 150;
     * image.data[2] = 200;
     * image.data[3] = 255;
     *
     * (await tf.browser.fromPixelsAsync(image)).print();
     * ```
     * This API is the async version of fromPixels. The API will first
     * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to
     * imageBitmap if the flag is set to true.
     *
     * @param pixels The input image to construct the tensor from. The
     * supported image types are all 4-channel. You can also pass in an image
     * object with following attributes:
     * `{data: Uint8Array; width: number; height: number}`
     * @param numChannels The number of channels of the output tensor. A
     * numChannels value less than 4 allows you to ignore channels. Defaults to
     * 3 (ignores alpha channel of input image).
     *
     * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
     */
    async function fromPixelsAsync(pixels, numChannels = 3) {
        let inputs = null;
        // Check whether the backend needs to wrap |pixels| to imageBitmap and
        // whether |pixels| can be wrapped to imageBitmap.
        if (env().getBool('WRAP_TO_IMAGEBITMAP') &&
            canWrapPixelsToImageBitmap(pixels)) {
            // Force the imageBitmap creation to not do any premultiply alpha
            // ops.
            let imageBitmap;
            try {
                // wrap in try-catch block, because createImageBitmap may not work
                // properly in some browsers, e.g.
                // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594
                // tslint:disable-next-line: no-any
                imageBitmap = await createImageBitmap(pixels, { premultiplyAlpha: 'none' });
            }
            catch (e) {
                imageBitmap = null;
            }
            // createImageBitmap will clip the source size.
            // In some cases, the input will have larger size than its content.
            // E.g. new Image(10, 10) but with 1 x 1 content. Using
            // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which
            // is not correct. We should avoid wrapping such resouce to
            // imageBitmap.
            if (imageBitmap != null && imageBitmap.width === pixels.width &&
                imageBitmap.height === pixels.height) {
                inputs = imageBitmap;
            }
            else {
                inputs = pixels;
            }
        }
        else {
            inputs = pixels;
        }
        return fromPixels_(inputs, numChannels);
    }
    /**
     * Draws a `tf.Tensor` of pixel values to a byte array or optionally a
     * canvas.
     *
     * When the dtype of the input is 'float32', we assume values in the range
     * [0-1]. Otherwise, when input is 'int32', we assume values in the range
     * [0-255].
     *
     * Returns a promise that resolves when the canvas has been drawn to.
     *
     * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor
     * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If
     * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws
     * grayscale. When depth of 3, we draw with the first three components of
     * the depth dimension corresponding to r, g, b and alpha = 1. When depth of
     * 4, all four components of the depth dimension correspond to r, g, b, a.
     * @param canvas The canvas to draw to.
     *
     * @doc {heading: 'Browser', namespace: 'browser'}
     */
    async function toPixels(img, canvas) {
        let $img = convertToTensor(img, 'img', 'toPixels');
        if (!(img instanceof Tensor)) {
            // Assume int32 if user passed a native array.
            const originalImgTensor = $img;
            $img = cast$2(originalImgTensor, 'int32');
            originalImgTensor.dispose();
        }
        if ($img.rank !== 2 && $img.rank !== 3) {
            throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);
        }
        const [height, width] = $img.shape.slice(0, 2);
        const depth = $img.rank === 2 ? 1 : $img.shape[2];
        if (depth > 4 || depth === 2) {
            throw new Error(`toPixels only supports depth of size ` +
                `1, 3 or 4 but got ${depth}`);
        }
        if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {
            throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` +
                ` Please use float32 or int32 tensors.`);
        }
        const data = await $img.data();
        const multiplier = $img.dtype === 'float32' ? 255 : 1;
        const bytes = new Uint8ClampedArray(width * height * 4);
        for (let i = 0; i < height * width; ++i) {
            const rgba = [0, 0, 0, 255];
            for (let d = 0; d < depth; d++) {
                const value = data[i * depth + d];
                if ($img.dtype === 'float32') {
                    if (value < 0 || value > 1) {
                        throw new Error(`Tensor values for a float32 Tensor must be in the ` +
                            `range [0 - 1] but encountered ${value}.`);
                    }
                }
                else if ($img.dtype === 'int32') {
                    if (value < 0 || value > 255) {
                        throw new Error(`Tensor values for a int32 Tensor must be in the ` +
                            `range [0 - 255] but encountered ${value}.`);
                    }
                }
                if (depth === 1) {
                    rgba[0] = value * multiplier;
                    rgba[1] = value * multiplier;
                    rgba[2] = value * multiplier;
                }
                else {
                    rgba[d] = value * multiplier;
                }
            }
            const j = i * 4;
            bytes[j + 0] = Math.round(rgba[0]);
            bytes[j + 1] = Math.round(rgba[1]);
            bytes[j + 2] = Math.round(rgba[2]);
            bytes[j + 3] = Math.round(rgba[3]);
        }
        if (canvas != null) {
            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext('2d');
            const imageData = new ImageData(bytes, width, height);
            ctx.putImageData(imageData, 0, 0);
        }
        if ($img !== img) {
            $img.dispose();
        }
        return bytes;
    }
    const fromPixels$1 = op({ fromPixels_ });

    var browser = /*#__PURE__*/Object.freeze({
        __proto__: null,
        fromPixelsAsync: fromPixelsAsync,
        toPixels: toPixels,
        fromPixels: fromPixels$1
    });

    /**
     * Validate gather nd inputs.
     *
     * @param tensor The tensor contains the source values.
     * @param indices The tensor contains the indices to slice the source.
     *
     * @returns [resultShape, numUpdates, sliceSize, strides]
     */
    function prepareAndValidate(tensor, indices) {
        const tensorRank = tensor.shape.length;
        const indicesRank = indices.shape.length;
        if (tensorRank < 1) {
            throw new Error('tf.gatherND() expects the input to be rank 1 or higher,' +
                ` but the rank was ${tensorRank}.`);
        }
        if (indicesRank < 1) {
            throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,' +
                ` but the rank was ${indicesRank}.`);
        }
        if (indices.dtype !== 'int32') {
            throw new Error('tf.gatherND() expects the indices to be int32 type,' +
                ` but the dtype was ${indices.dtype}.`);
        }
        if (indices.shape[indicesRank - 1] > tensorRank) {
            throw new Error('index innermost dimension length must be <= tensor rank; saw: ' +
                `${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);
        }
        if (sizeFromShape(tensor.shape) === 0) {
            throw new Error('Requested more than 0 entries, but input is empty.' +
                ` Input shape: ${tensor.shape}.`);
        }
        const indicesShape = indices.shape;
        const sliceRank = indicesShape[indicesShape.length - 1];
        // The result shape is
        //   indices.shape[:-1] + params.shape[indices.shape[-1]:]
        let nResult = 1;
        for (let i = 0; i < indicesShape.length - 1; ++i) {
            nResult *= indicesShape[i];
        }
        const inputShape = tensor.shape;
        const resultShape = indicesShape.slice();
        resultShape.pop();
        let sliceSize = 1;
        for (let i = sliceRank; i < tensorRank; ++i) {
            sliceSize *= inputShape[i];
            resultShape.push(inputShape[i]);
        }
        const strides = [...computeStrides(tensor.shape).map(stride => stride / sliceSize),
            1].slice(0, sliceRank);
        return [resultShape, nResult, sliceSize, strides];
    }

    var gather_nd_util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        prepareAndValidate: prepareAndValidate
    });

    /**
     * Check whether updates.shape = indices.shape[:batchDim] +
     * shape[sliceDim:]
     *
     * @param x The input tensor.
     */
    function validateUpdateShape(shape, indices, updates) {
        const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;
        const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;
        const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +
            `shape[sliceDim:], got updates.shape: ${updates.shape}` +
            `, indices.shape: ${indices.shape}, shape: ${shape}` +
            `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;
        if (updates.rank < batchDim) {
            throw new Error(shapeError + ` update.rank < ${batchDim}. `);
        }
        if (shape.length < sliceDim + (updates.rank - batchDim)) {
            throw new Error(shapeError +
                ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);
        }
        if (updates.rank !== batchDim + shape.length - sliceDim) {
            throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);
        }
        for (let d = 0; d < batchDim; ++d) {
            if (updates.shape[d] !== indices.shape[d]) {
                throw new Error(shapeError +
                    ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);
            }
        }
        for (let d = 0; d < updates.rank - batchDim; ++d) {
            if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {
                throw new Error(shapeError +
                    ` updates.shape[${d + batchDim}] (${updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${shape[d + batchDim]})`);
            }
        }
    }
    /**
     * Validate scatter nd inputs.
     *
     * @param update The tensor contains the update values.
     * @param indices The tensor contains the indices for the update values.
     * @param shape The shape of the output tensor.
     */
    function validateInput$1(updates, indices, shape) {
        if (indices.rank < 1) {
            throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,' +
                ` but the rank was ${indices.rank}.`);
        }
        if (updates.rank < 1) {
            throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,' +
                ` but the rank was ${updates.rank}.`);
        }
        if (indices.dtype !== 'int32') {
            throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);
        }
        if (shape.length < 1) {
            throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);
        }
        if (shape.length === 0) {
            if (indices.size === 0) {
                throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);
            }
            if (updates.size === 0) {
                throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);
            }
        }
        validateUpdateShape(shape, indices, updates);
    }
    /**
     * Calculate the shape information for the output.
     *
     * @param update The tensor contains the update values.
     * @param indices The tensor contains the indices for the update values.
     * @param shape The shape of the output tensor.
     *
     * @returns ScatterShapeInfo
     */
    function calculateShapes(updates, indices, shape) {
        // Calculate the number of dimensions in indices
        const indicesRank = indices.shape.length;
        const sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;
        // Calculate the number of elements that make up each slice of our updated
        // tensor. This allows us to work with flattened tensors and copy over whole
        // slices at a time.
        const totalNd = shape.length;
        let sliceSize = 1;
        for (let i = sliceRank; i < totalNd; ++i) {
            sliceSize *= shape[i];
        }
        const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;
        const numUpdates = sizeFromShape(indices.shape) / safeSliceDim;
        const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];
        const outputSize = sizeFromShape(shape);
        return { sliceRank, numUpdates, sliceSize, strides, outputSize };
    }

    var scatter_nd_util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        validateUpdateShape: validateUpdateShape,
        validateInput: validateInput$1,
        calculateShapes: calculateShapes
    });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const NEW_AXIS = -2;
    const SHRINK_AXIS = -1;
    function assertParamsValid(input, begin, size) {
        const inputRank = input.shape.length;
        assert(inputRank === begin.length, () => `Error in slice${inputRank}D: Length of begin ${begin} must ` +
            `match the rank of the array (${inputRank}).`);
        assert(inputRank === size.length, () => `Error in slice${inputRank}D: Length of size ${size} must ` +
            `match the rank of the array (${inputRank}).`);
        for (let i = 0; i < inputRank; ++i) {
            assert(begin[i] + size[i] <= input.shape[i], () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] ` +
                `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);
        }
    }
    /** Converts a binary mask to an array of axes. Used in stridedSlice(). */
    function maskToAxes(mask) {
        const axes = [];
        let axis = 0;
        while (mask > 0) {
            if (mask & 1) {
                axes.push(axis);
            }
            mask /= 2;
            axis++;
        }
        return axes;
    }
    /** Computes the output shape given the strided slice params. */
    function computeOutShape$2(begin, end, strides) {
        const size = [];
        for (let axis = 0; axis < begin.length; axis++) {
            size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);
        }
        return size;
    }
    // Creates full selection at the elided dimensions. If the dimension matches
    // the ellipsis mask, override the current stride value. Otherwise, insert.
    function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {
        const newStrides = [...strides];
        for (let i = newStrides.length; i < inputShape.length; i++) {
            newStrides.push(1);
        }
        for (let i = 0; i < numElidedAxes; i++) {
            if (i === 0) {
                newStrides[ellipsisInsertionIndex] = 1;
            }
            else {
                newStrides.splice(ellipsisInsertionIndex, 0 /* num elements to delete */, 1 /* element to add */);
                newStrides.pop();
            }
        }
        return newStrides;
    }
    function unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {
        if (normalizedAxis <= ellipsisInsertionIndex) {
            return normalizedAxis;
        }
        return normalizedAxis - (numElidedAxes - 1);
    }
    function getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {
        const elidedAxes = [];
        for (let i = 0; i < numElidedAxes; i++) {
            elidedAxes.push(ellipsisInsertionIndex + i);
        }
        return elidedAxes;
    }
    // Normalize the start, end and strides.
    function getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {
        const inputRank = inputShape.length;
        let normalizedBegin = new Array(inputRank), normalizedEnd = new Array(inputRank), normalizedStrides = new Array(inputRank);
        if (ellipsisAxes.length && numInterpolatedAxes > 0) {
            const fullIndex = ellipsisAxes[0];
            // The ellipsis applies to the masked index as well as any dimensions
            // that are interpolated.
            const numElidedAxes = numInterpolatedAxes + 1;
            normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);
            normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);
            normalizedStrides =
                stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);
        }
        else {
            for (let axis = 0; axis < inputRank; axis++) {
                normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);
                normalizedEnd[axis] =
                    stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);
                normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);
            }
        }
        return {
            begin: normalizedBegin,
            end: normalizedEnd,
            strides: normalizedStrides
        };
    }
    // Creates full selection at the elided dimensions. If the dimension matches
    // the ellipsis mask, override the current start value. Otherwise, insert.
    function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {
        const newIndices = [...inputShape];
        const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);
        for (let axis = 0; axis < newIndices.length; axis++) {
            if (elidedAxes.indexOf(axis) > -1) {
                newIndices[axis] = 0;
            }
            else {
                const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
                let originalValue = originalBegin[originalAxis];
                if (beginMask & 1 << originalAxis) {
                    originalValue = 0;
                }
                newIndices[axis] = originalValue;
            }
        }
        return newIndices;
    }
    // Creates full selection at the elided dimensions. If the dimension matches
    // the ellipsis mask, override the current stop value. Otherwise, insert.
    function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {
        const newIndices = [...inputShape];
        const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);
        for (let axis = 0; axis < newIndices.length; axis++) {
            if (elidedAxes.indexOf(axis) > -1) {
                newIndices[axis] = Number.MAX_SAFE_INTEGER;
            }
            else {
                const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
                let originalValue = originalEnd[originalAxis];
                if (endMask & 1 << originalAxis) {
                    originalValue = Number.MAX_SAFE_INTEGER;
                }
                newIndices[axis] = originalValue;
            }
        }
        for (let i = 0; i < newIndices.length; i++) {
            // Handle negative indices
            const axisSize = inputShape[i];
            if (newIndices[i] < 0) {
                newIndices[i] += axisSize;
            }
            newIndices[i] = clamp(0, newIndices[i], inputShape[i]);
        }
        return newIndices;
    }
    function stridesForAxis(strides, axis, ellipsisMask) {
        let stride = strides[axis];
        if (ellipsisMask & (1 << axis) || stride == null) {
            stride = 1;
        }
        return stride;
    }
    function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {
        // Begin with the specified index
        let start = startIndices[axis];
        const stride = strides[axis] || 1;
        // Check the axis bit from right of masked axes, or the begin index is not set
        // for the axis.
        if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {
            if (stride > 0) {
                // Forward iteration - use the first element. These values will get
                // clamped below (Note: We could have set them to 0 and axis_size-1, but
                // use lowest() and max() to maintain symmetry with StopForAxis())
                start = Number.MIN_SAFE_INTEGER;
            }
            else {
                // Backward iteration - use the last element.
                start = Number.MAX_SAFE_INTEGER;
            }
        }
        // Handle negative indices
        const axisSize = inputShape[axis];
        if (start < 0) {
            start += axisSize;
        }
        // Clamping
        start = clamp(0, start, axisSize - 1);
        return start;
    }
    function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {
        // Begin with the specified index
        let stop = stopIndices[axis];
        const stride = strides[axis] || 1;
        // Check the axis bit from right of masked axes, or if the stop index is not
        // set for this axis.
        if (endMask & (1 << axis) || ellipsisMask & (1 << axis) || stop == null) {
            if (stride > 0) {
                // Forward iteration - use the last element. These values will get
                // clamped below
                stop = Number.MAX_SAFE_INTEGER;
            }
            else {
                // Backward iteration - use the first element.
                stop = Number.MIN_SAFE_INTEGER;
            }
        }
        // Handle negative indices
        const axisSize = inputShape[axis];
        if (stop < 0) {
            stop += axisSize;
        }
        // Clamping
        // Because the end index points one past the last element, we need slightly
        // different clamping ranges depending on the direction.
        if (stride > 0) {
            // Forward iteration
            stop = clamp(0, stop, axisSize);
        }
        else {
            // Backward iteration
            stop = clamp(-1, stop, axisSize - 1);
        }
        return stop;
    }
    /**
     * Returns true if the slice occupies a continous set of elements in the
     * 'flat' space.
     */
    function isSliceContinous(shape, begin, size) {
        // Index of the first axis that has size > 1.
        let firstNonOneAxis = size.length;
        for (let i = 0; i < size.length; i++) {
            if (size[i] > 1) {
                firstNonOneAxis = i;
                break;
            }
        }
        for (let i = firstNonOneAxis + 1; i < size.length; i++) {
            if (begin[i] > 0 || size[i] !== shape[i]) {
                return false;
            }
        }
        return true;
    }
    function computeFlatOffset(begin, strides) {
        let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;
        for (let i = 0; i < begin.length - 1; i++) {
            flatOffset += begin[i] * strides[i];
        }
        return flatOffset;
    }
    function parseSliceParams(x, begin, size) {
        // The following logic allows for more ergonomic calls.
        let begin_;
        const xRank = x.shape.length;
        if (typeof begin === 'number') {
            begin_ = [begin, ...new Array(xRank - 1).fill(0)];
        }
        else if (begin.length < xRank) {
            begin_ = begin.concat(new Array(xRank - begin.length).fill(0));
        }
        else {
            begin_ = begin.slice();
        }
        begin_.forEach(d => {
            assert(d !== -1, () => 'slice() does not support negative begin indexing.');
        });
        let size_;
        if (size == null) {
            size_ = new Array(xRank).fill(-1);
        }
        else if (typeof size === 'number') {
            size_ = [size, ...new Array(xRank - 1).fill(-1)];
        }
        else if (size.length < xRank) {
            size_ = size.concat(new Array(xRank - size.length).fill(-1));
        }
        else {
            size_ = size;
        }
        size_ = size_.map((d, i) => {
            if (d >= 0) {
                return d;
            }
            else {
                assert(d === -1, () => `Negative size values should be exactly -1 but got ` +
                    `${d} for the slice() size at index ${i}.`);
                return x.shape[i] - begin_[i];
            }
        });
        return [begin_, size_];
    }
    // Convert the slicing specification from a sparse representation to a dense
    // representation. This means that all ellipses and newaxis are expanded out.
    function sliceInfo(xShape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
        let stridesNonNull;
        if (strides == null) {
            stridesNonNull = new Array(begin.length);
            stridesNonNull.fill(1);
        }
        else {
            stridesNonNull = strides;
        }
        // Only one non-zero bit is allowed in ellipsisMask, which means ellipsisMask
        // is a power of 2. Use bit compares to ensure ellipsisMask is 0 or a power
        // of 2. When i is a power of 2, i & (i - 1) is always 0.
        // Also ref:
        // https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2
        if (ellipsisMask != null && (ellipsisMask & (ellipsisMask - 1)) !== 0) {
            throw new Error('Multiple ellipses in slice is not allowed.');
        }
        // Step 1: Account for ellipsis and new axis.
        // Check for ellipsis and count how many non-newaxis there are after.
        let ellipsisSeen = false;
        const sparseSpec = {
            dims: stridesNonNull.length,
            numAddAxisAfterEllipsis: 0,
            begin: begin.slice(),
            end: end.slice(),
            strides: stridesNonNull.slice(),
            beginMask,
            endMask,
            ellipsisMask,
            newAxisMask,
            shrinkAxisMask
        };
        for (let i = 0; i < sparseSpec.dims; i++) {
            if (ellipsisSeen && ((1 << i) & newAxisMask) !== 0) {
                sparseSpec.numAddAxisAfterEllipsis++;
            }
            if ((1 << i) & ellipsisMask) {
                ellipsisSeen = true;
            }
        }
        // If no ellipsis insert one at the end.
        if (!ellipsisSeen) {
            sparseSpec.ellipsisMask |= (1 << sparseSpec.dims);
            sparseSpec.dims++; // this effects loop iteration below
        }
        // Step 2: Make a sparse spec into a full index spec.
        //
        // The sparse spec deos not correspond to the number of dimensions.
        // Make a dense spec that cooresponds to the number of dimensions.
        //
        // For example suppose foo[...,3:] on foo.shape = [2, 2, 3] then we need to
        // produce the missing beginMask for the first two dimensions i.e. from
        // beginMaskSpec = 0, endMaskSpec = 2, we achieve beginMask = 6 (110),
        // endMask = 7 (111).
        const denseSpec = {
            dims: xShape.length,
            beginMask: 0,
            endMask: 0,
            beginValid: false,
            endValid: false
        };
        buildDenseSpec(sparseSpec, denseSpec);
        // Step 3: Make implicit ranges (non-zero beginMasks and endMasks) explicit
        // and bounds check.
        let isIdentity = true;
        let sliceDim0 = true;
        let isSimpleSlice = true;
        const processingShape = [];
        const finalShape = [];
        for (let i = 0; i < xShape.length; ++i) {
            if (denseSpec.strides[i] === 0) {
                throw Error(`strides[${i}] must be non-zero`);
            }
            const shrinkI = !!(denseSpec.shrinkAxisMask & (1 << i));
            const dimI = xShape[i];
            if (dimI === -1) {
                processingShape.push(shrinkI ? 1 : -1);
                continue;
            }
            const masks = [denseSpec.beginMask & (1 << i), denseSpec.endMask & (1 << i)];
            const validRange = [
                denseSpec.strides[i] > 0 ? 0 : -1,
                denseSpec.strides[i] > 0 ? dimI : dimI - 1
            ];
            if (shrinkI && denseSpec.strides[i] <= 0) {
                throw Error('only stride 1 allowed on non-range indexing.');
            }
            isSimpleSlice = isSimpleSlice && (denseSpec.strides[i] === 1);
            const beginAndEndMasked = !!((denseSpec.beginMask & (1 << i)) && (denseSpec.endMask & (1 << i)));
            if (denseSpec.beginValid && denseSpec.endValid) {
                if (shrinkI) {
                    // If we are shrinking, the end index is now possibly incorrect. In
                    // particular foo[-1] produces sparseBegin = -1, sparseEnd = 0.
                    // and canonical puts these to n-1 and 0, which implies a degenerate
                    // interval. Fortunately, it is now safe to re-create end as begin + 1.
                    const xFwd = denseSpec.begin[i] < 0 ? dimI + denseSpec.begin[i] :
                        denseSpec.begin[i];
                    denseSpec.begin[i] = xFwd;
                    denseSpec.end[i] = denseSpec.begin[i] + 1;
                    if (xFwd < 0 || xFwd >= dimI) {
                        throw Error(`slice index ${denseSpec.begin[i]} of dimension ${i} out of bounds.`);
                    }
                }
                else {
                    denseSpec.begin[i] = canonical(denseSpec.begin[i], 0, denseSpec.strides[i], dimI, masks, validRange);
                    denseSpec.end[i] = canonical(denseSpec.end[i], 1, denseSpec.strides[i], dimI, masks, validRange);
                }
                // Update optimization values
                const takeAllInDimension = denseSpec.strides[i] === 1 &&
                    denseSpec.begin[i] === 0 && denseSpec.end[i] === dimI;
                isIdentity = isIdentity && takeAllInDimension;
                sliceDim0 = sliceDim0 &&
                    ((i === 0 && denseSpec.strides[i] === 1) || takeAllInDimension);
            }
            else {
                isIdentity =
                    isIdentity && ((denseSpec.strides[i] === 1) && beginAndEndMasked);
                sliceDim0 = sliceDim0 &&
                    ((i === 0 && denseSpec.strides[i] === 1) || beginAndEndMasked);
            }
            // Compute the processing shape (the intermediate Eigen will produce)
            let intervalLength;
            let knownInterval = false;
            if (denseSpec.beginValid && denseSpec.endValid) {
                intervalLength = denseSpec.end[i] - denseSpec.begin[i];
                knownInterval = true;
            }
            else if (shrinkI) {
                // The dimension is still known as 1 for the processingShape, but will be
                // discarded for the final shape.
                intervalLength = 1;
                knownInterval = true;
            }
            else if (beginAndEndMasked) {
                // Even if we don't have values for begin or end, we do know that this
                // dimension covers the whole interval. If we have shape information for
                // this dimension, that tells us the interval length.
                if (dimI >= 0) {
                    if (denseSpec.strides[i] < 0) {
                        intervalLength = -dimI;
                    }
                    else {
                        intervalLength = dimI;
                    }
                    knownInterval = true;
                }
            }
            if (knownInterval) {
                let sizeI;
                // Hold zero if the interval is degenerate, otherwise account for
                // remainder
                if (intervalLength === 0 ||
                    ((intervalLength < 0) !== (denseSpec.strides[i] < 0))) {
                    sizeI = 0;
                }
                else {
                    sizeI = Math.trunc(intervalLength / denseSpec.strides[i]) +
                        (intervalLength % denseSpec.strides[i] !== 0 ? 1 : 0);
                }
                processingShape.push(sizeI);
            }
            else {
                processingShape.push(-1);
            }
        }
        // Step 4: Compute the final shape
        //
        // newAxis will increase dimension by 1 (with a one-size dimension)
        // slices like foo[3, ...] will reduce dimension by 1.
        // This cannot be done earlier, because it depends on Step 3.
        for (let denseDim = 0; denseDim < denseSpec.finalShapeGatherIndices.length; ++denseDim) {
            const gatherIndex = denseSpec.finalShapeGatherIndices[denseDim];
            if (gatherIndex >= 0) {
                finalShape.push(processingShape[gatherIndex]);
            }
            else if (gatherIndex === NEW_AXIS) {
                finalShape.push(1);
            }
        }
        const finalShapeSparse = finalShape.filter((dim, i) => denseSpec.finalShapeGatherIndices[i] !== NEW_AXIS);
        return {
            finalShapeSparse,
            finalShape,
            isIdentity,
            sliceDim0,
            isSimpleSlice,
            begin: denseSpec.begin,
            end: denseSpec.end,
            strides: denseSpec.strides
        };
    }
    function buildDenseSpec(sparse, dense) {
        dense.beginMask = 0;
        dense.endMask = 0;
        dense.shrinkAxisMask = 0;
        let fullIndex = 0;
        dense.beginValid = sparse.begin != null;
        dense.endValid = sparse.end != null;
        dense.begin = new Array(dense.dims);
        dense.end = new Array(dense.dims);
        dense.strides = new Array(dense.dims);
        dense.finalShapeGatherIndices = [];
        dense.finalShapeGatherIndicesSparse = [];
        dense.inputShapeGatherIndicesSparse = new Array(dense.dims);
        for (let i = 0; i < sparse.dims; i++) {
            if ((1 << i) & sparse.ellipsisMask) {
                // Only the bit that has ellipsis will fall in this condition.
                // Expand the ellipsis into the appropriate indices
                // Note: this only works because we guaranteed one ellipsis.
                const nextIndex = Math.min(dense.dims - (sparse.dims - i) + 1 + sparse.numAddAxisAfterEllipsis, dense.dims);
                for (; fullIndex < nextIndex; fullIndex++) {
                    // newAxis aren't real axis so you have to skip.
                    dense.begin[fullIndex] = 0;
                    dense.end[fullIndex] = 0;
                    dense.strides[fullIndex] = 1;
                    dense.beginMask |= (1 << fullIndex);
                    dense.endMask |= (1 << fullIndex);
                    dense.finalShapeGatherIndices.push(fullIndex);
                    dense.finalShapeGatherIndicesSparse.push(-1);
                    dense.inputShapeGatherIndicesSparse[fullIndex] = i;
                }
            }
            else if ((1 << i) & sparse.newAxisMask) {
                // Only the bit that has newAxis will fall in this condition.
                dense.finalShapeGatherIndices.push(NEW_AXIS);
                dense.finalShapeGatherIndicesSparse.push(-1);
            }
            else {
                if (fullIndex === dense.begin.length) {
                    throw Error(`Index out of range using input dim ${fullIndex}; input ` +
                        `has only ${dense.dims} dims, ${dense.begin.length}.`);
                }
                // Gather slicing spec into appropriate index.
                if (sparse.begin != null) {
                    dense.begin[fullIndex] = sparse.begin[i];
                }
                if (sparse.end != null) {
                    dense.end[fullIndex] = sparse.end[i];
                }
                dense.strides[fullIndex] = sparse.strides[i];
                if (sparse.beginMask & (1 << i)) {
                    dense.beginMask |= (1 << fullIndex);
                }
                if (sparse.endMask & (1 << i)) {
                    dense.endMask |= (1 << fullIndex);
                }
                // If shrink, record where to get the dimensionality from (i.e. newAxis)
                // creates a fake 1 size dimension. Also remember shrink axis (now in
                // dense form) so we can ignore dense.end below.
                if (sparse.shrinkAxisMask & (1 << i)) {
                    dense.finalShapeGatherIndices.push(SHRINK_AXIS);
                    dense.finalShapeGatherIndicesSparse.push(-1);
                    dense.shrinkAxisMask |= (1 << fullIndex);
                }
                else {
                    dense.finalShapeGatherIndices.push(fullIndex);
                    // Remember that where in the sparse shape the dense dim comes from.
                    dense.finalShapeGatherIndicesSparse.push(i);
                }
                dense.inputShapeGatherIndicesSparse[fullIndex] = i;
                fullIndex++;
            }
        }
    }
    function canonical(x, c, strideI, dimI, masks, validRange) {
        if (masks[c]) {
            return strideI > 0 ? validRange[c] : validRange[(c + 1) & 1];
        }
        else {
            const xFwd = x < 0 ? dimI + x : x; // make negative indices positive
            return xFwd < validRange[0] ? validRange[0] :
                xFwd > validRange[1] ? validRange[1] : xFwd;
        }
    }

    var slice_util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        assertParamsValid: assertParamsValid,
        maskToAxes: maskToAxes,
        computeOutShape: computeOutShape$2,
        stridesWithElidedDims: stridesWithElidedDims,
        getNormalizedAxes: getNormalizedAxes,
        startIndicesWithElidedDims: startIndicesWithElidedDims,
        stopIndicesWithElidedDims: stopIndicesWithElidedDims,
        stridesForAxis: stridesForAxis,
        startForAxis: startForAxis,
        stopForAxis: stopForAxis,
        isSliceContinous: isSliceContinous,
        computeFlatOffset: computeFlatOffset,
        parseSliceParams: parseSliceParams,
        sliceInfo: sliceInfo
    });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Serializable defines the serialization contract.
     *
     * TFJS requires serializable classes to return their className when asked
     * to avoid issues with minification.
     */
    class Serializable {
        /**
         * Return the class name for this class to use in serialization contexts.
         *
         * Generally speaking this will be the same thing that constructor.name
         * would have returned.  However, the class name needs to be robust
         * against minification for serialization/deserialization to work properly.
         *
         * There's also places such as initializers.VarianceScaling, where
         * implementation details between different languages led to different
         * class hierarchies and a non-leaf node is used for serialization purposes.
         */
        getClassName() {
            return this.constructor
                .className;
        }
        /**
         * Creates an instance of T from a ConfigDict.
         *
         * This works for most descendants of serializable.  A few need to
         * provide special handling.
         * @param cls A Constructor for the class to instantiate.
         * @param config The Configuration for the object.
         */
        /** @nocollapse */
        static fromConfig(cls, config) {
            return new cls(config);
        }
    }
    /**
     * Maps string keys to class constructors.
     *
     * Used during (de)serialization from the cross-language JSON format, which
     * requires the class name in the serialization format matches the class
     * names as used in Python, should it exist.
     */
    class SerializationMap {
        constructor() {
            this.classNameMap = {};
        }
        /**
         * Returns the singleton instance of the map.
         */
        static getMap() {
            if (SerializationMap.instance == null) {
                SerializationMap.instance = new SerializationMap();
            }
            return SerializationMap.instance;
        }
        /**
         * Registers the class as serializable.
         */
        static register(cls) {
            SerializationMap.getMap().classNameMap[cls.className] =
                [cls, cls.fromConfig];
        }
    }
    /**
     * Register a class with the serialization map of TensorFlow.js.
     *
     * This is often used for registering custom Layers, so they can be
     * serialized and deserialized.
     *
     * Example:
     *
     * ```js
     * class MyCustomLayer extends tf.layers.Layer {
     *   static className = 'MyCustomLayer';
     *
     *   constructor(config) {
     *     super(config);
     *   }
     * }
     * tf.serialization.registerClass(MyCustomLayer);
     * ```
     *
     * @param cls The class to be registered. It must have a public static member
     *   called `className` defined and the value must be a non-empty string.
     *
     * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}
     */
    function registerClass(cls) {
        assert(cls.className != null, () => `Class being registered does not have the static className ` +
            `property defined.`);
        assert(typeof cls.className === 'string', () => `className is required to be a string, but got type ` +
            typeof cls.className);
        assert(cls.className.length > 0, () => `Class being registered has an empty-string as its className, ` +
            `which is disallowed.`);
        SerializationMap.register(cls);
    }

    var serialization = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Serializable: Serializable,
        SerializationMap: SerializationMap,
        registerClass: registerClass
    });

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const TEST_EPSILON_FLOAT32 = 1e-3;
    const TEST_EPSILON_FLOAT16 = 1e-1;
    function expectArraysClose(actual, expected, epsilon) {
        if (epsilon == null) {
            epsilon = testEpsilon();
        }
        return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));
    }
    function testEpsilon() {
        return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :
            TEST_EPSILON_FLOAT16;
    }
    function expectArraysPredicate(actual, expected, predicate) {
        let checkClassType = true;
        if (isTypedArray(actual) || isTypedArray(expected)) {
            checkClassType = false;
        }
        if (isTypedArray(actual) && isTypedArray(expected)) {
            checkClassType = true;
        }
        if (checkClassType) {
            const aType = actual.constructor.name;
            const bType = expected.constructor.name;
            if (aType !== bType) {
                throw new Error(`Arrays are of different type. Actual: ${aType}. ` +
                    `Expected: ${bType}`);
            }
        }
        if (Array.isArray(actual) && Array.isArray(expected)) {
            const actualShape = inferShape(actual);
            const expectedShape = inferShape(expected);
            if (!arraysEqual(actualShape, expectedShape)) {
                throw new Error(`Arrays have different shapes. ` +
                    `Actual: [${actualShape}]. Expected: [${expectedShape}]`);
            }
        }
        const actualFlat = isTypedArray(actual) ? actual : flatten(actual);
        const expectedFlat = isTypedArray(expected) ?
            expected :
            flatten(expected);
        if (actualFlat.length !== expectedFlat.length) {
            throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` +
                `expected: ${expectedFlat.length}.\n` +
                `Actual:   ${actualFlat}.\n` +
                `Expected: ${expectedFlat}.`);
        }
        for (let i = 0; i < expectedFlat.length; ++i) {
            const a = actualFlat[i];
            const e = expectedFlat[i];
            if (!predicate(a, e)) {
                throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\n` +
                    `Actual:   ${actualFlat}.\n` +
                    `Expected: ${expectedFlat}.`);
            }
        }
    }
    function expectPromiseToFail(fn, done) {
        fn().then(() => done.fail(), () => done());
    }
    function expectArraysEqual(actual, expected) {
        const exp = typeof expected === 'string' || typeof expected === 'number' ||
            typeof expected === 'boolean' ?
            [expected] :
            expected;
        if (isString(actual) || isString(actual[0]) ||
            isString(expected) || isString(expected[0])) {
            // tslint:disable-next-line: triple-equals
            return expectArraysPredicate(actual, exp, (a, b) => a == b);
        }
        return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));
    }
    function expectNumbersClose(a, e, epsilon) {
        if (epsilon == null) {
            epsilon = testEpsilon();
        }
        if (!areClose(a, e, epsilon)) {
            throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);
        }
    }
    function areClose(a, e, epsilon) {
        if (!isFinite(a) && !isFinite(e)) {
            return true;
        }
        if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {
            return false;
        }
        return true;
    }
    function expectValuesInRange(actual, low, high) {
        for (let i = 0; i < actual.length; i++) {
            if (actual[i] < low || actual[i] > high) {
                throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);
            }
        }
    }
    function expectArrayBuffersEqual(actual, expected) {
        // Safari does not like comparing ArrayBuffers directly. Wrapping in
        // a Float32Array solves this issue.
        const actualArray = new Float32Array(actual);
        const expectedArray = new Float32Array(expected);
        if (actualArray.length !== expectedArray.length) {
            throw new Error('Expected ArrayBuffer to be of length ' +
                `${expectedArray.length}, but it was ${actualArray.length}`);
        }
        for (let i = 0; i < expectedArray.length; i++) {
            if (actualArray[i] !== expectedArray[i]) {
                throw new Error(`Expected ArrayBuffer value at ${i} to be ` +
                    `${expectedArray[i]} but got ${actualArray[i]} instead`);
            }
        }
    }
    /** Encodes strings into utf-8 bytes. */
    function encodeStrings(a) {
        for (let i = 0; i < a.length; i++) {
            const val = a[i];
            if (Array.isArray(val)) {
                encodeStrings(val);
            }
            else {
                a[i] = encodeString(val);
            }
        }
        return a;
    }

    var test_util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        TEST_EPSILON_FLOAT16: TEST_EPSILON_FLOAT16,
        expectArraysClose: expectArraysClose,
        testEpsilon: testEpsilon,
        expectPromiseToFail: expectPromiseToFail,
        expectArraysEqual: expectArraysEqual,
        expectNumbersClose: expectNumbersClose,
        expectValuesInRange: expectValuesInRange,
        expectArrayBuffersEqual: expectArrayBuffersEqual,
        encodeStrings: encodeStrings
    });

    /** @license See the LICENSE file. */
    // This code is auto-generated, do not modify this file!
    const version = '3.13.0';

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Enables production mode which disables correctness checks in favor of
     * performance.
     *
     * @doc {heading: 'Environment'}
     */
    function enableProdMode() {
        env().set('PROD', true);
    }
    /**
     * Enables debug mode which will log information about all executed kernels:
     * the elapsed time of the kernel execution, as well as the rank, shape, and
     * size of the output tensor.
     *
     * Debug mode will significantly slow down your application as it will
     * download the result of every operation to the CPU. This should not be used in
     * production. Debug mode does not affect the timing information of the kernel
     * execution as we do not measure download time in the kernel execution time.
     *
     * See also: `tf.profile`, `tf.memory`.
     *
     * @doc {heading: 'Environment'}
     */
    function enableDebugMode() {
        env().set('DEBUG', true);
    }
    /** Globally disables deprecation warnings */
    function disableDeprecationWarnings() {
        env().set('DEPRECATION_WARNINGS_ENABLED', false);
        console.warn(`TensorFlow.js deprecation warnings have been disabled.`);
    }
    /** Warn users about deprecated functionality. */
    function deprecationWarn(msg) {
        if (env().getBool('DEPRECATION_WARNINGS_ENABLED')) {
            console.warn(msg + ' You can disable deprecation warnings with ' +
                'tf.disableDeprecationWarnings().');
        }
    }
    /**
     * Dispose all variables kept in backend engine.
     *
     * @doc {heading: 'Environment'}
     */
    function disposeVariables() {
        ENGINE.disposeVariables();
    }
    /**
     * It returns the global engine that keeps track of all tensors and backends.
     *
     * @doc {heading: 'Environment'}
     */
    function engine() {
        return ENGINE;
    }
    /**
     * Returns memory info at the current time in the program. The result is an
     * object with the following properties:
     *
     * - `numBytes`: Number of bytes allocated (undisposed) at this time.
     * - `numTensors`: Number of unique tensors allocated.
     * - `numDataBuffers`: Number of unique data buffers allocated
     *   (undisposed) at this time, which is ≤ the number of tensors
     *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same
     *   data buffer with `a`).
     * - `unreliable`: True if the memory usage is unreliable. See `reasons` when
     *    `unreliable` is true.
     * - `reasons`: `string[]`, reasons why the memory is unreliable, present if
     *    `unreliable` is true.
     *
     * WebGL Properties:
     * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at
     *     this time.
     *
     * @doc {heading: 'Performance', subheading: 'Memory'}
     */
    function memory() {
        return ENGINE.memory();
    }
    /**
     * Executes the provided function `f()` and returns a promise that resolves
     * with information about the function's memory use:
     * - `newBytes`: the number of new bytes allocated
     * - `newTensors`: the number of new tensors created
     * - `peakBytes`: the peak number of bytes allocated
     * - `kernels`: an array of objects for each kernel involved that reports
     * their input and output shapes, number of bytes used, and number of new
     * tensors created.
     * - `kernelNames`: an array of unique strings with just the names of the
     * kernels in the `kernels` array.
     *
     * ```js
     * const profile = await tf.profile(() => {
     *   const x = tf.tensor1d([1, 2, 3]);
     *   let x2 = x.square();
     *   x2.dispose();
     *   x2 = x.square();
     *   x2.dispose();
     *   return x;
     * });
     *
     * console.log(`newBytes: ${profile.newBytes}`);
     * console.log(`newTensors: ${profile.newTensors}`);
     * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>
     * k.totalBytesSnapshot)}`);
     * ```
     *
     *
     * @doc {heading: 'Performance', subheading: 'Profile'}
     */
    function profile(f) {
        return ENGINE.profile(f);
    }
    /**
     * Executes the provided function `fn` and after it is executed, cleans up all
     * intermediate tensors allocated by `fn` except those returned by `fn`.
     * `fn` must not return a Promise (async functions not allowed). The returned
     * result can be a complex object.
     *
     * Using this method helps avoid memory leaks. In general, wrap calls to
     * operations in `tf.tidy` for automatic memory cleanup.
     *
     * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to
     * dispose variables, please use `tf.disposeVariables` or call dispose()
     * directly on variables.
     *
     * ```js
     * // y = 2 ^ 2 + 1
     * const y = tf.tidy(() => {
     *   // a, b, and one will be cleaned up when the tidy ends.
     *   const one = tf.scalar(1);
     *   const a = tf.scalar(2);
     *   const b = a.square();
     *
     *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
     *
     *   // The value returned inside the tidy function will return
     *   // through the tidy, in this case to the variable y.
     *   return b.add(one);
     * });
     *
     * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
     * y.print();
     * ```
     *
     * @param nameOrFn The name of the closure, or the function to execute.
     *     If a name is provided, the 2nd argument should be the function.
     *     If debug mode is on, the timing and the memory usage of the function
     *     will be tracked and displayed on the console using the provided name.
     * @param fn The function to execute.
     *
     * @doc {heading: 'Performance', subheading: 'Memory'}
     */
    function tidy(nameOrFn, fn) {
        return ENGINE.tidy(nameOrFn, fn);
    }
    /**
     * Disposes any `tf.Tensor`s found within the provided object.
     *
     * @param container an object that may be a `tf.Tensor` or may directly
     *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If
     *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing
     *     happens. In general it is safe to pass any object here, except that
     *     `Promise`s are not supported.
     *
     * @doc {heading: 'Performance', subheading: 'Memory'}
     */
    function dispose(container) {
        const tensors = getTensorsInContainer(container);
        tensors.forEach(tensor => tensor.dispose());
    }
    /**
     * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed
     * automatically.
     *
     * ```js
     * let b;
     * const y = tf.tidy(() => {
     *   const one = tf.scalar(1);
     *   const a = tf.scalar(2);
     *
     *   // b will not be cleaned up by the tidy. a and one will be cleaned up
     *   // when the tidy ends.
     *   b = tf.keep(a.square());
     *
     *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
     *
     *   // The value returned inside the tidy function will return
     *   // through the tidy, in this case to the variable y.
     *   return b.add(one);
     * });
     *
     * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
     * console.log('y:');
     * y.print();
     * console.log('b:');
     * b.print();
     * ```
     *
     * @param result The tensor to keep from being disposed.
     *
     * @doc {heading: 'Performance', subheading: 'Memory'}
     */
    function keep(result) {
        return ENGINE.keep(result);
    }
    /**
     * Executes `f()` and returns a promise that resolves with timing
     * information.
     *
     * The result is an object with the following properties:
     *
     * - `wallMs`: Wall execution time.
     * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the
     * WebGL backend and the query timer extension is not available, this will
     * return an error object.
     * - On `WebGL` The following additional properties exist:
     *   - `uploadWaitMs`: CPU blocking time on texture uploads.
     *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).
     *
     * ```js
     * const x = tf.randomNormal([20, 20]);
     * const time = await tf.time(() => x.matMul(x));
     *
     * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);
     * ```
     *
     * @param f The function to execute and time.
     *
     * @doc {heading: 'Performance', subheading: 'Timing'}
     */
    function time(f) {
        return ENGINE.time(f);
    }
    /**
     * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and
     * executing operations on those tensors. Returns a promise that resolves
     * to a boolean if the backend initialization was successful.
     *
     * Note this disposes the current backend, if any, as well as any tensors
     * associated with it. A new backend is initialized, even if it is of the
     * same type as the previous one.
     *
     * @param backendName The name of the backend. Currently supports
     *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js
     *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).
     *
     * @doc {heading: 'Backends'}
     */
    function setBackend(backendName) {
        return ENGINE.setBackend(backendName);
    }
    /**
     * Returns a promise that resolves when the currently selected backend (or the
     * highest priority one) has initialized. Await this promise when you are using
     * a backend that has async initialization.
     *
     * @doc {heading: 'Backends'}
     */
    function ready() {
        return ENGINE.ready();
    }
    /**
     * Returns the current backend name (cpu, webgl, etc). The backend is
     * responsible for creating tensors and executing operations on those tensors.
     *
     * @doc {heading: 'Backends'}
     */
    function getBackend() {
        return ENGINE.backendName;
    }
    /**
     * Removes a backend and the registered factory.
     *
     * @doc {heading: 'Backends'}
     */
    function removeBackend(name) {
        ENGINE.removeBackend(name);
    }
    /**
     * Finds the backend registered under the provided name. Returns null if the
     * name is not in the registry, or the registration hasn't finished yet.
     */
    function findBackend(name) {
        return ENGINE.findBackend(name);
    }
    /**
     * Finds the backend factory registered under the provided name. Returns a
     * function that produces a new backend when called. Returns null if the name
     * is not in the registry.
     */
    function findBackendFactory(name) {
        return ENGINE.findBackendFactory(name);
    }
    /**
     * Registers a global backend. The registration should happen when importing
     * a module file (e.g. when importing `backend_webgl.ts`), and is used for
     * modular builds (e.g. custom tfjs bundle with only webgl support).
     *
     * @param factory The backend factory function. When called, it should
     * return a backend instance, or a promise of an instance.
     * @param priority The priority of the backend (higher = more important).
     *     In case multiple backends are registered, the priority is used to find
     *     the best backend. Defaults to 1.
     * @return False if there is already a registered backend under this name, true
     *     if not.
     *
     * @doc {heading: 'Backends'}
     */
    function registerBackend(name, factory, priority = 1) {
        return ENGINE.registerBackend(name, factory, priority);
    }
    /**
     * Gets the current backend. If no backends have been initialized, this will
     * attempt to initialize the best backend. Will throw an error if the highest
     * priority backend has async initialization, in which case, you should call
     * 'await tf.ready()' before running other code.
     *
     * @doc {heading: 'Backends'}
     */
    function backend() {
        return ENGINE.backend;
    }
    /**
     * Sets the global platform.
     *
     * @param platformName The name of this platform.
     * @param platform A platform implementation.
     */
    function setPlatform(platformName, platform) {
        env().setPlatform(platformName, platform);
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.
     *
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3, 4]);
     * const b = tf.tensor1d([10, 20, 30, 40]);
     *
     * a.add(b).print();  // or tf.add(a, b)
     * ```
     *
     * ```js
     * // Broadcast add a with b.
     * const a = tf.scalar(5);
     * const b = tf.tensor1d([10, 20, 30, 40]);
     *
     * a.add(b).print();  // or tf.add(a, b)
     * ```
     * @param a The first `tf.Tensor` to add.
     * @param b The second `tf.Tensor` to add. Must have the same type as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function add_(a, b) {
        let $a = convertToTensor(a, 'a', 'add');
        let $b = convertToTensor(b, 'b', 'add');
        [$a, $b] = makeTypesMatch($a, $b);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(Add, inputs);
    }
    const add$1 = op({ add_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
     * The result is rounded with floor function.
     *
     *
     * ```js
     * const a = tf.tensor1d([1, 4, 9, 16]);
     * const b = tf.tensor1d([1, 2, 3, 4]);
     *
     * a.floorDiv(b).print();  // or tf.div(a, b)
     * ```
     *
     * ```js
     * // Broadcast div a with b.
     * const a = tf.tensor1d([2, 4, 6, 8]);
     * const b = tf.scalar(2);
     *
     * a.floorDiv(b).print();  // or tf.floorDiv(a, b)
     * ```
     *
     * @param a The first tensor as the numerator.
     * @param b The second tensor as the denominator. Must have the same dtype as
     * `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function floorDiv_(a, b) {
        let $a = convertToTensor(a, 'a', 'floorDiv');
        let $b = convertToTensor(b, 'b', 'floorDiv');
        [$a, $b] = makeTypesMatch($a, $b);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(FloorDiv, inputs);
    }
    const floorDiv$2 = op({ floorDiv_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([1, 4, 9, 16]);
     * const b = tf.tensor1d([1, 2, 3, 4]);
     *
     * a.div(b).print();  // or tf.div(a, b)
     * ```
     *
     * ```js
     * // Broadcast div a with b.
     * const a = tf.tensor1d([2, 4, 6, 8]);
     * const b = tf.scalar(2);
     *
     * a.div(b).print();  // or tf.div(a, b)
     * ```
     *
     * @param a The first tensor as the numerator.
     * @param b The second tensor as the denominator. Must have the same dtype as
     * `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function div_(a, b) {
        let $a = convertToTensor(a, 'a', 'div');
        let $b = convertToTensor(b, 'b', 'div');
        [$a, $b] = makeTypesMatch($a, $b);
        if ($a.dtype === 'int32' && $b.dtype === 'int32') {
            return floorDiv$2($a, $b);
        }
        const inputs = { a: $a, b: $b };
        const attrs = {};
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return ENGINE.runKernel(RealDiv, inputs, attrs);
    }
    const div$1 = op({ div_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.
     *
     * We also expose `tf.mulStrict` which has the same signature as this op and
     * asserts that `a` and `b` are the same shape (does not broadcast).
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3, 4]);
     * const b = tf.tensor1d([2, 3, 4, 5]);
     *
     * a.mul(b).print();  // or tf.mul(a, b)
     * ```
     *
     * ```js
     * // Broadcast mul a with b.
     * const a = tf.tensor1d([1, 2, 3, 4]);
     * const b = tf.scalar(5);
     *
     * a.mul(b).print();  // or tf.mul(a, b)
     * ```
     * @param a The first tensor to multiply.
     * @param b The second tensor to multiply. Must have the same dtype as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function mul_(a, b) {
        let $a = convertToTensor(a, 'a', 'mul');
        let $b = convertToTensor(b, 'b', 'mul');
        [$a, $b] = makeTypesMatch($a, $b);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(Multiply, inputs);
    }
    const mul = op({ mul_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes absolute value element-wise: `abs(x)`
     *
     * ```js
     * const x = tf.tensor1d([-1, 2, -3, 4]);
     *
     * x.abs().print();  // or tf.abs(x)
     * ```
     * @param x The input `tf.Tensor`.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function abs_(x) {
        const $x = convertToTensor(x, 'x', 'abs');
        if ($x.dtype === 'complex64') {
            const inputs = { x: $x };
            return ENGINE.runKernel(ComplexAbs, inputs);
        }
        else {
            const inputs = { x: $x };
            return ENGINE.runKernel(Abs, inputs);
        }
    }
    const abs$2 = op({ abs_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, 1, -1, .7]);
     *
     * x.acos().print();  // or tf.acos(x)
     * ```
     * @param x The input tensor.
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function acos_(x) {
        const $x = convertToTensor(x, 'x', 'acos');
        const inputs = { x: $x };
        return ENGINE.runKernel(Acos, inputs);
    }
    const acos$2 = op({ acos_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:
     * `acosh(x)`
     *
     * ```js
     * const x = tf.tensor1d([10, 1, 3, 5.7]);
     *
     * x.acosh().print();  // or tf.acosh(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function acosh_(x) {
        const $x = convertToTensor(x, 'x', 'acosh');
        const inputs = { x: $x };
        return ENGINE.runKernel(Acosh, inputs);
    }
    const acosh$2 = op({ acosh_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.
     *
     * ```js
     * const a = tf.tensor1d([1, 2]);
     * const b = tf.tensor1d([3, 4]);
     * const c = tf.tensor1d([5, 6]);
     *
     * tf.addN([a, b, c]).print();
     * ```
     * @param tensors A list of tensors with the same shape and dtype.
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function addN_(tensors) {
        assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');
        assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` +
            `${tensors.length}`);
        const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));
        const firstTensor = $tensors[0];
        $tensors.forEach(t => {
            if (t.dtype !== firstTensor.dtype) {
                throw new Error('All tensors passed to tf.addN() must have the same dtype');
            }
        });
        $tensors.forEach(t => {
            if (!arraysEqual(t.shape, firstTensor.shape)) {
                throw new Error('All tensors passed to tf.addN() must have the same shape');
            }
        });
        const inputs = $tensors;
        return ENGINE.runKernel(AddN, inputs);
    }
    const addN$2 = op({ addN_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the logical and of elements across dimensions of a `tf.Tensor`.
     *
     * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
     * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
     * `axes`. If `keepDims` is true, the reduced dimensions are retained with
     * length 1. If `axes` has no entries, all dimensions are reduced, and an
     * `tf.Tensor` with a single element is returned.
     *
     * ```js
     * const x = tf.tensor1d([1, 1, 1], 'bool');
     *
     * x.all().print();  // or tf.all(x)
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
     *
     * const axis = 1;
     * x.all(axis).print();  // or tf.all(x, axis)
     * ```
     *
     * @param x The input tensor. Must be of dtype bool.
     * @param axis The dimension(s) to reduce. By default it reduces
     *     all dimensions.
     * @param keepDims If true, retains reduced dimensions with size 1.
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function all_(x, axis = null, keepDims = false) {
        const $x = convertToTensor(x, 'x', 'all', 'bool');
        const inputs = { x: $x };
        const attrs = { axis, keepDims };
        return ENGINE.runKernel(All, inputs, attrs);
    }
    const all$2 = op({ all_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the logical or of elements across dimensions of a `tf.Tensor`.
     *
     * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
     * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
     * `axes`. If `keepDims` is true, the reduced dimensions are retained with
     * length 1. If `axes` has no entries, all dimensions are reduced, and an
     * `tf.Tensor` with a single element is returned.
     *
     * ```js
     * const x = tf.tensor1d([1, 1, 1], 'bool');
     *
     * x.any().print();  // or tf.any(x)
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
     *
     * const axis = 1;
     * x.any(axis).print();  // or tf.any(x, axis)
     * ```
     *
     * @param x The input tensor. Must be of dtype bool.
     * @param axis The dimension(s) to reduce. By default it reduces
     *     all dimensions.
     * @param keepDims If true, retains reduced dimensions with size 1.
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function any_(x, axis = null, keepDims = false) {
        const $x = convertToTensor(x, 'x', 'any', 'bool');
        const inputs = { x: $x };
        const attrs = { axis, keepDims };
        return ENGINE.runKernel(Any, inputs, attrs);
    }
    // tslint:disable-next-line:variable-name
    const any$2 = op({ any_ });

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the indices of the maximum values along an `axis`.
     *
     * The result has the same shape as `input` with the dimension along `axis`
     * removed.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3]);
     *
     * x.argMax().print();  // or tf.argMax(x)
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
     *
     * const axis = 1;
     * x.argMax(axis).print();  // or tf.argMax(x, axis)
     * ```
     *
     * @param x The input tensor.
     * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function argMax_(x, axis = 0) {
        const $x = convertToTensor(x, 'x', 'argMax');
        const inputs = { x: $x };
        const attrs = { axis };
        return ENGINE.runKernel(ArgMax, inputs, attrs);
    }
    const argMax$2 = op({ argMax_ });

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the indices of the minimum values along an `axis`.
     *
     * The result has the same shape as `input` with the dimension along `axis`
     * removed.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3]);
     *
     * x.argMin().print();  // or tf.argMin(x)
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
     *
     * const axis = 1;
     * x.argMin(axis).print();  // or tf.argMin(x, axis)
     * ```
     *
     * @param x The input tensor.
     * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function argMin_(x, axis = 0) {
        const $x = convertToTensor(x, 'x', 'argMin');
        const inputs = { x: $x };
        const attrs = { axis };
        return ENGINE.runKernel(ArgMin, inputs, attrs);
    }
    const argMin$2 = op({ argMin_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, 1, -1, .7]);
     *
     * x.asin().print();  // or tf.asin(x)
     * ```
     * @param x The input tensor.
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function asin_(x) {
        const $x = convertToTensor(x, 'x', 'asin');
        const inputs = { x: $x };
        return ENGINE.runKernel(Asin, inputs);
    }
    const asin$2 = op({ asin_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:
     * `asinh(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, 1, -1, .7]);
     *
     * x.asinh().print();  // or tf.asinh(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function asinh_(x) {
        const $x = convertToTensor(x, 'x', 'asinh');
        const inputs = { x: $x };
        return ENGINE.runKernel(Asinh, inputs);
    }
    const asinh$2 = op({ asinh_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, 1, -1, .7]);
     *
     * x.atan().print();  // or tf.atan(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function atan_(x) {
        const $x = convertToTensor(x, 'x', 'atan');
        const inputs = { x: $x };
        return ENGINE.runKernel(Atan, inputs);
    }
    const atan$2 = op({ atan_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.
     * Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);
     * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);
     *
     * tf.atan2(a, b).print()
     * ```
     *
     * @param a The first tensor.
     * @param b The second tensor. Must have the same dtype as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function atan2_(a, b) {
        let $a = convertToTensor(a, 'a', 'atan2');
        let $b = convertToTensor(b, 'b', 'atan2');
        [$a, $b] = makeTypesMatch($a, $b);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(Atan2, inputs);
    }
    const atan2$2 = op({ atan2_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:
     * `atanh(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, .1, -.1, .7]);
     *
     * x.atanh().print();  // or tf.atanh(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function atanh_(x) {
        const $x = convertToTensor(x, 'x', 'atanh');
        const inputs = { x: $x };
        return ENGINE.runKernel(Atanh, inputs);
    }
    const atanh$2 = op({ atanh_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     *
     * @param inputShape Input tensor shape is of the following dimensions:
     *     `[batch, height, width, inChannels]`.
     * @param filterShape The filter shape is of the following dimensions:
     *     `[filterHeight, filterWidth, depth]`.
     * @param strides The strides of the sliding window for each dimension of the
     *     input tensor: `[strideHeight, strideWidth]`.
     *     If `strides` is a single number,
     *     then `strideHeight == strideWidth`.
     * @param pad The type of padding algorithm.
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1*1x1.
     *    - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dataFormat The data format of the input and output data.
     *     Defaults to 'NHWC'.
     * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.
     *     Defaults to `[1, 1]`. If `dilations` is a single number, then
     *     `dilationHeight == dilationWidth`.
     */
    function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {
        // `computerConv2DInfo` require filterShape to be in the dimension of:
        // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have
        // outDepth, it should have the same depth as the input.
        // Input shape: [batch, height, width, inChannels]
        const inputChannels = inputShape[3];
        const $filterShape = [...filterShape, inputChannels];
        const $dataFormat = convertConv2DDataFormat(dataFormat);
        return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null /* roundingMode */, null /* depthWise */, $dataFormat);
    }
    function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {
        const [filterHeight, filterWidth] = parseTupleParam(filterSize);
        let filterShape;
        if (dataFormat === 'channelsLast') {
            filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];
        }
        else if (dataFormat === 'channelsFirst') {
            filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];
        }
        else {
            throw new Error(`Unknown dataFormat ${dataFormat}`);
        }
        return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);
    }
    /**
     * Computes the information for a forward pass of a pooling3D operation.
     */
    function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {
        const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);
        let filterShape;
        let $dataFormat;
        if (dataFormat === 'NDHWC') {
            $dataFormat = 'channelsLast';
            filterShape =
                [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];
        }
        else if (dataFormat === 'NCDHW') {
            $dataFormat = 'channelsFirst';
            filterShape =
                [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];
        }
        else {
            throw new Error(`Unknown dataFormat ${dataFormat}`);
        }
        return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);
    }
    /**
     * Computes the information for a forward pass of a convolution/pooling
     * operation.
     */
    function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {
        let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];
        if (dataFormat === 'channelsLast') {
            [batchSize, inHeight, inWidth, inChannels] = inShape;
        }
        else if (dataFormat === 'channelsFirst') {
            [batchSize, inChannels, inHeight, inWidth] = inShape;
        }
        else {
            throw new Error(`Unknown dataFormat ${dataFormat}`);
        }
        const [filterHeight, filterWidth, , filterChannels] = filterShape;
        const [strideHeight, strideWidth] = parseTupleParam(strides);
        const [dilationHeight, dilationWidth] = parseTupleParam(dilations);
        const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
        const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
        const { padInfo, outHeight, outWidth } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);
        const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
        let outShape;
        if (dataFormat === 'channelsFirst') {
            outShape = [batchSize, outChannels, outHeight, outWidth];
        }
        else if (dataFormat === 'channelsLast') {
            outShape = [batchSize, outHeight, outWidth, outChannels];
        }
        return {
            batchSize,
            dataFormat,
            inHeight,
            inWidth,
            inChannels,
            outHeight,
            outWidth,
            outChannels,
            padInfo,
            strideHeight,
            strideWidth,
            filterHeight,
            filterWidth,
            effectiveFilterHeight,
            effectiveFilterWidth,
            dilationHeight,
            dilationWidth,
            inShape,
            outShape,
            filterShape
        };
    }
    /**
     * Computes the information for a forward pass of a 3D convolution/pooling
     * operation.
     */
    function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {
        let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];
        if (dataFormat === 'channelsLast') {
            [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;
        }
        else if (dataFormat === 'channelsFirst') {
            [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;
        }
        else {
            throw new Error(`Unknown dataFormat ${dataFormat}`);
        }
        const [filterDepth, filterHeight, filterWidth, , filterChannels] = filterShape;
        const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);
        const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);
        const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);
        const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
        const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
        const { padInfo, outDepth, outHeight, outWidth } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);
        const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
        let outShape;
        if (dataFormat === 'channelsFirst') {
            outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];
        }
        else if (dataFormat === 'channelsLast') {
            outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];
        }
        return {
            batchSize,
            dataFormat,
            inDepth,
            inHeight,
            inWidth,
            inChannels,
            outDepth,
            outHeight,
            outWidth,
            outChannels,
            padInfo,
            strideDepth,
            strideHeight,
            strideWidth,
            filterDepth,
            filterHeight,
            filterWidth,
            effectiveFilterDepth,
            effectiveFilterHeight,
            effectiveFilterWidth,
            dilationDepth,
            dilationHeight,
            dilationWidth,
            inShape,
            outShape,
            filterShape
        };
    }
    function computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {
        if (zeroPad == null) {
            zeroPad = computeDefaultPad(inShape, fieldSize, stride);
        }
        const inputRows = inShape[0];
        const inputCols = inShape[1];
        const outputRows = round$3((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
        const outputCols = round$3((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
        return [outputRows, outputCols];
    }
    function computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {
        if (zeroPad == null) {
            zeroPad = computeDefaultPad(inShape, fieldSize, stride);
        }
        const inputDepth = inShape[0];
        const inputRows = inShape[1];
        const inputCols = inShape[2];
        const outputDepths = round$3((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
        const outputRows = round$3((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
        const outputCols = round$3((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
        return [outputDepths, outputRows, outputCols, outChannels];
    }
    function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {
        const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);
        return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);
    }
    function parseTupleParam(param) {
        if (typeof param === 'number') {
            return [param, param, param];
        }
        if (param.length === 2) {
            return [param[0], param[1], 1];
        }
        return param;
    }
    function parse3TupleParam(param) {
        return typeof param === 'number' ? [param, param, param] : param;
    }
    /* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d
     * Atrous convolution is equivalent to standard convolution with upsampled
     * filters with effective_filter_height =
     * filter_height + (filter_height - 1) * (dilation - 1)
     * and effective_filter_width =
     * filter_width + (filter_width - 1) * (dilation - 1),
     * produced by inserting dilation - 1 zeros along consecutive elements across
     * the filters' spatial dimensions.
     * When there is a dilation, this converts a filter dimension to the
     * effective filter dimension, so it can be used in a standard convolution.
     */
    function getEffectiveFilterSize(filterSize, dilation) {
        if (dilation <= 1) {
            return filterSize;
        }
        return filterSize + (filterSize - 1) * (dilation - 1);
    }
    function getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {
        let padInfo;
        let outHeight;
        let outWidth;
        if (typeof pad === 'number') {
            const padType = (pad === 0) ? 'VALID' : 'NUMBER';
            padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };
            const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);
            outHeight = outShape[0];
            outWidth = outShape[1];
        }
        else if (pad === 'same') {
            outHeight = Math.ceil(inHeight / strideHeight);
            outWidth = Math.ceil(inWidth / strideWidth);
            const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);
            const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);
            const top = Math.floor(padAlongHeight / 2);
            const bottom = padAlongHeight - top;
            const left = Math.floor(padAlongWidth / 2);
            const right = padAlongWidth - left;
            padInfo = { top, bottom, left, right, type: 'SAME' };
        }
        else if (pad === 'valid') {
            padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };
            outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
            outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
        }
        else if (typeof pad === 'object') {
            const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];
            const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];
            const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];
            const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];
            const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?
                'VALID' :
                'EXPLICIT';
            padInfo = { top, bottom, left, right, type: padType };
            outHeight = round$3((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);
            outWidth = round$3((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);
        }
        else {
            throw Error(`Unknown padding parameter: ${pad}`);
        }
        return { padInfo, outHeight, outWidth };
    }
    function get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {
        let padInfo;
        let outDepth;
        let outHeight;
        let outWidth;
        if (typeof pad === 'number') {
            const padType = (pad === 0) ? 'VALID' : 'NUMBER';
            padInfo = {
                top: pad,
                bottom: pad,
                left: pad,
                right: pad,
                front: pad,
                back: pad,
                type: padType
            };
            const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);
            outDepth = outShape[0];
            outHeight = outShape[1];
            outWidth = outShape[2];
        }
        else if (pad === 'same') {
            outDepth = Math.ceil(inDepth / strideDepth);
            outHeight = Math.ceil(inHeight / strideHeight);
            outWidth = Math.ceil(inWidth / strideWidth);
            const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;
            const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;
            const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;
            const front = Math.floor(padAlongDepth / 2);
            const back = padAlongDepth - front;
            const top = Math.floor(padAlongHeight / 2);
            const bottom = padAlongHeight - top;
            const left = Math.floor(padAlongWidth / 2);
            const right = padAlongWidth - left;
            padInfo = { top, bottom, left, right, front, back, type: 'SAME' };
        }
        else if (pad === 'valid') {
            padInfo = {
                top: 0,
                bottom: 0,
                left: 0,
                right: 0,
                front: 0,
                back: 0,
                type: 'VALID'
            };
            outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);
            outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
            outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
        }
        else {
            throw Error(`Unknown padding parameter: ${pad}`);
        }
        return { padInfo, outDepth, outHeight, outWidth };
    }
    /**
     * Rounds a value depending on the rounding mode
     * @param value
     * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     */
    function round$3(value, roundingMode) {
        if (!roundingMode) {
            return Math.trunc(value);
        }
        switch (roundingMode) {
            case 'round':
                // used for Caffe Conv
                return Math.round(value);
            case 'ceil':
                // used for Caffe Pool
                return Math.ceil(value);
            case 'floor':
                return Math.floor(value);
            default:
                throw new Error(`Unknown roundingMode ${roundingMode}`);
        }
    }
    function tupleValuesAreOne(param) {
        const [dimA, dimB, dimC] = parseTupleParam(param);
        return dimA === 1 && dimB === 1 && dimC === 1;
    }
    function eitherStridesOrDilationsAreOne(strides, dilations) {
        return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);
    }
    /**
     * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to
     *    'channelsLast'|'channelsFirst'
     * @param dataFormat in 'NHWC'|'NCHW' mode
     * @return dataFormat in 'channelsLast'|'channelsFirst' mode
     * @throws unknown dataFormat
     */
    function convertConv2DDataFormat(dataFormat) {
        if (dataFormat === 'NHWC') {
            return 'channelsLast';
        }
        else if (dataFormat === 'NCHW') {
            return 'channelsFirst';
        }
        else {
            throw new Error(`Unknown dataFormat ${dataFormat}`);
        }
    }
    /**
     * Check validity of pad when using dimRoundingMode.
     * @param opDesc A string of op description
     * @param pad The type of padding algorithm.
     *   - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *   - `valid` output will be smaller than input if filter is larger
     *       than 1x1.
     *   - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     * @throws unknown padding parameter
     */
    function checkPadOnDimRoundingMode(opDesc, pad, dimRoundingMode) {
        if (dimRoundingMode != null) {
            if (typeof pad === 'string') {
                throw Error(`Error in ${opDesc}: pad must be an integer when using ` +
                    `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
            }
            else if (typeof pad === 'number') {
                assert(isInt(pad), () => `Error in ${opDesc}: pad must be an integer when using ` +
                    `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
            }
            else if (typeof pad === 'object') {
                pad.forEach(p => {
                    p.forEach(v => {
                        assert(isInt(v), () => `Error in ${opDesc}: pad must be an integer when using ` +
                            `dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);
                    });
                });
            }
            else {
                throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad}`);
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Reshapes a `tf.Tensor` to a given shape.
     *
     * Given an input tensor, returns a new tensor with the same values as the
     * input tensor with shape `shape`.
     *
     * If one component of shape is the special value -1, the size of that
     * dimension is computed so that the total size remains constant. In
     * particular, a shape of [-1] flattens into 1-D. At most one component of
     * shape can be -1.
     *
     * If shape is 1-D or higher, then the operation returns a tensor with shape
     * shape filled with the values of tensor. In this case, the number of
     * elements implied by shape must be the same as the number of elements in
     * tensor.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3, 4]);
     * x.reshape([2, 2]).print();
     * ```
     *
     * @param x The input tensor to be reshaped.
     * @param shape An array of integers defining the output tensor shape.
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    function reshape_(x, shape) {
        const $x = convertToTensor(x, 'x', 'reshape', 'string_or_numeric');
        const inputs = { x: $x };
        const attrs = { shape };
        return ENGINE.runKernel(Reshape, inputs, attrs);
    }
    const reshape$2 = op({ reshape_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the 2D average pooling of an image.
     *
     * @param x The input tensor, of rank 4 or rank 3 of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
     * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
     *     `filterSize` is a single number, then `filterHeight == filterWidth`.
     * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
     *     `strides` is a single number, then `strideHeight == strideWidth`.
     * @param pad The type of padding algorithm:
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     *    - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     */
    function avgPool_(x, filterSize, strides, pad, dimRoundingMode) {
        const $x = convertToTensor(x, 'x', 'avgPool', 'float32');
        const dilations = 1;
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +
            `Got strides ${strides} and dilations '${dilations}'`);
        let x4D = $x;
        let reshapedTo4D = false;
        if ($x.rank === 3) {
            reshapedTo4D = true;
            x4D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        }
        assert(x4D.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);
        checkPadOnDimRoundingMode('avgPool', pad, dimRoundingMode);
        const inputs = { x: x4D };
        const attrs = { filterSize, strides, pad, dimRoundingMode };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        let res = ENGINE.runKernel(AvgPool, inputs, attrs);
        res = cast$2(res, $x.dtype);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    const avgPool$2 = op({ avgPool_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the 3D average pooling.
     *
     * ```js
     * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
     * const result = tf.avgPool3d(x, 2, 1, 'valid');
     * result.print();
     * ```
     *
     * @param x The input tensor, of rank 5 or rank 4 of shape
     *     `[batch, depth, height, width, inChannels]`.
     * @param filterSize The filter size:
     *     `[filterDepth, filterHeight, filterWidth]`.
     *     If `filterSize` is a single number,
     *     then `filterDepth == filterHeight == filterWidth`.
     * @param strides The strides of the pooling:
     *     `[strideDepth, strideHeight, strideWidth]`.
     *     If `strides` is a single number,
     *     then `strideDepth == strideHeight == strideWidth`.
     * @param pad The type of padding algorithm.
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1*1x1.
     *    - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
     *     "NDHWC". Specify the data format of the input and output data. With the
     *     default format "NDHWC", the data is stored in the order of: [batch,
     *     depth, height, width, channels]. Only "NDHWC" is currently supported.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = 'NDHWC') {
        const $x = convertToTensor(x, 'x', 'avgPool3d', 'float32');
        let x5D = $x;
        let reshapedTo5D = false;
        if ($x.rank === 4) {
            reshapedTo5D = true;
            x5D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
        }
        assert(x5D.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
        assert(dataFormat === 'NDHWC', () => `Error in avgPool3d: Only NDHWC is currently supported, ` +
            `but got dataFormat of ${dataFormat}`);
        checkPadOnDimRoundingMode('avgPool3d', pad, dimRoundingMode);
        const inputs = { x: x5D };
        const attrs = { filterSize, strides, pad, dimRoundingMode, dataFormat };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        let res = ENGINE.runKernel(AvgPool3D, inputs, attrs);
        res = cast$2(res, x5D.dtype);
        if (reshapedTo5D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
        }
        return res;
    }
    const avgPool3d = op({ avgPool3d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Concatenates a list of `tf.Tensor`s along a given axis.
     *
     * The tensors ranks and types must match, and their sizes must match in all
     * dimensions except `axis`.
     *
     * Also available are stricter rank-specific methods that assert that
     * `tensors` are of the given rank:
     *   - `tf.concat1d`
     *   - `tf.concat2d`
     *   - `tf.concat3d`
     *   - `tf.concat4d`
     *
     * Except `tf.concat1d` (which does not have axis param), all methods have
     * same signature as this method.
     *
     * ```js
     * const a = tf.tensor1d([1, 2]);
     * const b = tf.tensor1d([3, 4]);
     * a.concat(b).print();  // or a.concat(b)
     * ```
     *
     * ```js
     * const a = tf.tensor1d([1, 2]);
     * const b = tf.tensor1d([3, 4]);
     * const c = tf.tensor1d([5, 6]);
     * tf.concat([a, b, c]).print();
     * ```
     *
     * ```js
     * const a = tf.tensor2d([[1, 2], [10, 20]]);
     * const b = tf.tensor2d([[3, 4], [30, 40]]);
     * const axis = 1;
     * tf.concat([a, b], axis).print();
     * ```
     * @param tensors A list of tensors to concatenate.
     * @param axis The axis to concate along. Defaults to 0 (the first dim).
     *
     * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
     */
    function concat_(tensors, axis = 0) {
        assert(tensors.length >= 1, () => 'Pass at least one tensor to concat');
        const $tensors = convertToTensorArray(tensors, 'tensors', 'concat', 'string_or_numeric');
        if ($tensors[0].dtype === 'complex64') {
            $tensors.forEach(tensor => {
                if (tensor.dtype !== 'complex64') {
                    throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${tensor.dtype}. `);
                }
            });
        }
        if ($tensors.length === 1) {
            return clone($tensors[0]);
        }
        const inputs = $tensors;
        const attr = { axis };
        return ENGINE.runKernel(Concat, inputs, attr);
    }
    const concat$2 = op({ concat_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes sigmoid element-wise, `1 / (1 + exp(-x))`
     *
     * ```js
     * const x = tf.tensor1d([0, -1, 2, -3]);
     *
     * x.sigmoid().print();  // or tf.sigmoid(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function sigmoid_(x) {
        const $x = convertToTensor(x, 'x', 'sigmoid', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Sigmoid, inputs);
    }
    const sigmoid$2 = op({ sigmoid_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`
     * and is of size `size`.
     *
     * Also available are stricter rank-specific methods with the same signature
     * as this method that assert that `x` is of the given rank:
     *   - `tf.slice1d`
     *   - `tf.slice2d`
     *   - `tf.slice3d`
     *   - `tf.slice4d`
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3, 4]);
     *
     * x.slice([1], [2]).print();
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * x.slice([1, 0], [1, 2]).print();
     * ```
     * @param x The input `tf.Tensor` to slice from.
     * @param begin The coordinates to start the slice from. The length can be
     *     less than the rank of x - the rest of the axes will have implicit 0 as
     *     start. Can also be a single number, in which case it specifies the
     *     first axis.
     * @param size The size of the slice. The length can be less than the rank of
     *     x - the rest of the axes will have implicit -1. A value of -1 requests
     *     the rest of the dimensions in the axis. Can also be a single number,
     *     in which case it specifies the size of the first axis.
     *
     * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
     */
    function slice_(x, begin, size) {
        const $x = convertToTensor(x, 'x', 'slice', 'string_or_numeric');
        if ($x.rank === 0) {
            throw new Error('Slicing scalar is not possible');
        }
        const inputs = { x: $x };
        const attrs = { begin, size };
        return ENGINE.runKernel(Slice, inputs, attrs);
    }
    const slice$2 = op({ slice_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, 1, -1, 70]);
     *
     * x.tanh().print();  // or tf.tanh(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function tanh_(x) {
        const $x = convertToTensor(x, 'x', 'tanh', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Tanh, inputs);
    }
    const tanh$2 = op({ tanh_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the next state and output of a BasicLSTMCell.
     *
     * Returns `[newC, newH]`.
     *
     * Derived from tf.contrib.rnn.BasicLSTMCell.
     *
     * @param forgetBias Forget bias for the cell.
     * @param lstmKernel The weights for the cell.
     * @param lstmBias The bias for the cell.
     * @param data The input to the cell.
     * @param c Previous cell state.
     * @param h Previous cell output.
     *
     * @doc {heading: 'Operations', subheading: 'RNN'}
     */
    function basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {
        const $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');
        const $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');
        const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');
        const $data = convertToTensor(data, 'data', 'basicLSTMCell');
        const $c = convertToTensor(c, 'c', 'basicLSTMCell');
        const $h = convertToTensor(h, 'h', 'basicLSTMCell');
        const combined = concat$2([$data, $h], 1);
        const weighted = matMul$1(combined, $lstmKernel);
        const res = add$1(weighted, $lstmBias);
        // i = input_gate, j = new_input, f = forget_gate, o = output_gate
        const batchSize = res.shape[0];
        const sliceCols = res.shape[1] / 4;
        const sliceSize = [batchSize, sliceCols];
        const i = slice$2(res, [0, 0], sliceSize);
        const j = slice$2(res, [0, sliceCols], sliceSize);
        const f = slice$2(res, [0, sliceCols * 2], sliceSize);
        const o = slice$2(res, [0, sliceCols * 3], sliceSize);
        const newC = add$1(mul(sigmoid$2(i), tanh$2(j)), mul($c, sigmoid$2(add$1($forgetBias, f))));
        const newH = mul(tanh$2(newC), sigmoid$2(o));
        return [newC, newH];
    }
    const basicLSTMCell = op({ basicLSTMCell_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of
     * shape `blockShape + [batch]`, interleaves these blocks back into the grid
     * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with
     * the same rank as the input. The spatial dimensions of this intermediate
     * result are then optionally cropped according to `crops` to produce the
     * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise
     * description.
     *
     * ```js
     * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);
     * const blockShape = [2, 2];
     * const crops = [[0, 0], [0, 0]];
     *
     * x.batchToSpaceND(blockShape, crops).print();
     * ```
     *
     * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
     * remainingShape`, where spatialShape has `M` dimensions.
     * @param blockShape A 1-D array. Must have shape `[M]`, all values must
     * be >= 1.
     * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.
     * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input
     * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required
     * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`
     *
     * This operation is equivalent to the following steps:
     *
     * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,
     * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,
     * x.shape[N-1]]`
     *
     * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /
     * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],
     * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
     *
     * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /
     * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *
     * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
     *
     * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`
     * according to `crops` to produce the output of shape: `[batch /
     * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],
     * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -
     * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    function batchToSpaceND_(x, blockShape, crops) {
        const $x = convertToTensor(x, 'x', 'batchToSpaceND');
        const prod = blockShape.reduce((a, b) => a * b);
        assert($x.rank >= 1 + blockShape.length, () => `input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);
        assert(crops.length === blockShape.length, () => `crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);
        assert($x.shape[0] % prod === 0, () => `input tensor batch is ${$x.shape[0]} but is not divisible by the product of ` +
            `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);
        const inputs = { x: $x };
        const attrs = { blockShape, crops };
        return ENGINE.runKernel(BatchToSpaceND, inputs, attrs);
    }
    const batchToSpaceND$2 = op({ batchToSpaceND_ });

    function xAs4D(x) {
        let x4D;
        if (x.rank === 0 || x.rank === 1) {
            x4D = reshape$2(x, [1, 1, 1, x.size]);
        }
        else if (x.rank === 2) {
            x4D = reshape$2(x, [1, 1, x.shape[0], x.shape[1]]);
        }
        else if (x.rank === 3) {
            x4D = reshape$2(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
        }
        else {
            x4D = x;
        }
        return x4D;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Batch normalization.
     *
     * As described in
     * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).
     *
     * Mean, variance, scale, and offset can be of two shapes:
     *   - The same shape as the input.
     *   - In the common case, the depth dimension is the last dimension of x, so
     *     the values would be an `tf.Tensor1D` of shape [depth].
     *
     * Also available are stricter rank-specific methods with the same signature
     * as this method that assert that parameters passed are of given rank
     *   - `tf.batchNorm2d`
     *   - `tf.batchNorm3d`
     *   - `tf.batchNorm4d`
     *
     * @param x The input Tensor.
     * @param mean A mean Tensor.
     * @param variance A variance Tensor.
     * @param offset An offset Tensor.
     * @param scale A scale Tensor.
     * @param varianceEpsilon A small float number to avoid dividing by 0.
     *
     * @doc {heading: 'Operations', subheading: 'Normalization'}
     */
    function batchNorm_(x, mean, variance, offset, scale, varianceEpsilon) {
        if (varianceEpsilon == null) {
            varianceEpsilon = 0.001;
        }
        const $x = convertToTensor(x, 'x', 'batchNorm');
        const $mean = convertToTensor(mean, 'mean', 'batchNorm');
        const $variance = convertToTensor(variance, 'variance', 'batchNorm');
        let $scale;
        if (scale != null) {
            $scale = convertToTensor(scale, 'scale', 'batchNorm');
        }
        let $offset;
        if (offset != null) {
            $offset = convertToTensor(offset, 'offset', 'batchNorm');
        }
        assert($mean.rank === $variance.rank, () => 'Batch normalization gradient requires mean and variance to have ' +
            'equal ranks.');
        assert($offset == null || $mean.rank === $offset.rank, () => 'Batch normalization gradient requires mean and offset to have ' +
            'equal ranks.');
        assert($scale == null || $mean.rank === $scale.rank, () => 'Batch normalization gradient requires mean and scale to have ' +
            'equal ranks.');
        const x4D = xAs4D($x);
        const inputs = {
            x: x4D,
            scale: $scale,
            offset: $offset,
            mean: $mean,
            variance: $variance
        };
        const attrs = { varianceEpsilon };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(FusedBatchNorm, inputs, attrs);
        return reshape$2(res, $x.shape);
    }
    const batchNorm$2 = op({ batchNorm_ });

    /**
     * Batch normalization, strictly for 2D. For the more relaxed version, see
     * `tf.batchNorm`.
     *
     * @param x The input Tensor.
     * @param mean A mean Tensor.
     * @param variance A variance Tensor.
     * @param offset An offset Tensor.
     * @param scale A scale Tensor.
     * @param varianceEpsilon A small float number to avoid dividing by 0.
     */
    function batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {
        const $x = convertToTensor(x, 'x', 'batchNorm');
        const $mean = convertToTensor(mean, 'mean', 'batchNorm');
        const $variance = convertToTensor(variance, 'variance', 'batchNorm');
        let $scale;
        if (scale != null) {
            $scale = convertToTensor(scale, 'scale', 'batchNorm');
        }
        let $offset;
        if (offset != null) {
            $offset = convertToTensor(offset, 'offset', 'batchNorm');
        }
        assert($x.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ` +
            `${$x.rank}.`);
        assert($mean.rank === 2 || $mean.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +
            `got rank ${$mean.rank}.`);
        assert($variance.rank === 2 || $variance.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +
            `but got rank ${$variance.rank}.`);
        if ($scale != null) {
            assert($scale.rank === 2 || $scale.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +
                `but got rank ${$scale.rank}.`);
        }
        if ($offset != null) {
            assert($offset.rank === 2 || $offset.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +
                `but got rank ${$offset.rank}.`);
        }
        return batchNorm$2($x, $mean, $variance, $offset, $scale, varianceEpsilon);
    }
    const batchNorm2d = op({ batchNorm2d_ });

    /**
     * Batch normalization, strictly for 3D. For the more relaxed version, see
     * `tf.batchNorm`.
     *
     * @param x The input Tensor.
     * @param mean A mean Tensor.
     * @param variance A variance Tensor.
     * @param offset An offset Tensor.
     * @param scale A scale Tensor.
     * @param varianceEpsilon A small float number to avoid dividing by 0.
     */
    function batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon) {
        const $x = convertToTensor(x, 'x', 'batchNorm');
        const $mean = convertToTensor(mean, 'mean', 'batchNorm');
        const $variance = convertToTensor(variance, 'variance', 'batchNorm');
        let $scale;
        if (scale != null) {
            $scale = convertToTensor(scale, 'scale', 'batchNorm');
        }
        let $offset;
        if (offset != null) {
            $offset = convertToTensor(offset, 'offset', 'batchNorm');
        }
        assert($x.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ` +
            `${$x.rank}.`);
        assert($mean.rank === 3 || $mean.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but ` +
            `got rank ${$mean.rank}.`);
        assert($variance.rank === 3 || $variance.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 ` +
            `but got rank ${$variance.rank}.`);
        if ($scale != null) {
            assert($scale.rank === 3 || $scale.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 ` +
                `but got rank ${$scale.rank}.`);
        }
        if ($offset != null) {
            assert($offset.rank === 3 || $offset.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 ` +
                `but got rank ${$offset.rank}.`);
        }
        return batchNorm$2($x, $mean, $variance, $offset, $scale, varianceEpsilon);
    }
    const batchNorm3d = op({ batchNorm3d_ });

    /**
     * Batch normalization, strictly for 4D. For the more relaxed version, see
     * `tf.batchNorm`.
     *
     * @param x The input Tensor.
     * @param mean A mean Tensor.
     * @param variance A variance Tensor.
     * @param offset An offset Tensor.
     * @param scale A scale Tensor.
     * @param varianceEpsilon A small float number to avoid dividing by 0.
     */
    function batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {
        const $x = convertToTensor(x, 'x', 'batchNorm');
        const $mean = convertToTensor(mean, 'mean', 'batchNorm');
        const $variance = convertToTensor(variance, 'variance', 'batchNorm');
        let $scale;
        if (scale != null) {
            $scale = convertToTensor(scale, 'scale', 'batchNorm');
        }
        let $offset;
        if (offset != null) {
            $offset = convertToTensor(offset, 'offset', 'batchNorm');
        }
        assert($x.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ` +
            `${$x.rank}.`);
        assert($mean.rank === 4 || $mean.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` +
            `got rank ${$mean.rank}.`);
        assert($variance.rank === 4 || $variance.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` +
            `but got rank ${$variance.rank}.`);
        if ($scale != null) {
            assert($scale.rank === 4 || $scale.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` +
                `but got rank ${$scale.rank}.`);
        }
        if ($offset != null) {
            assert($offset.rank === 4 || $offset.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` +
                `but got rank ${$offset.rank}.`);
        }
        return batchNorm$2($x, $mean, $variance, $offset, $scale, varianceEpsilon);
    }
    const batchNorm4d = op({ batchNorm4d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Outputs a vector with length `size` and the same dtype as `weights`.
     *
     * If `weights` are empty, then index `i` stores the number of times the value
     * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the
     * sum of the value in `weights` at each index where the corresponding value in
     * `x` is `i`.
     *
     * Values in `x` outside of the range [0, size) are ignored.
     *
     * @param x The input int tensor, rank 1.
     * @param weights The weights tensor, must have the same shape as x, or a
     *     length-0 Tensor, in which case it acts as all weights equal to 1.
     * @param size Non-negative integer.
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function bincount_(x, weights, size) {
        const $x = convertToTensor(x, 'x', 'bincount');
        const $weights = convertToTensor(weights, 'weights', 'bincount');
        assert($x.dtype === 'int32', () => `Error in bincount: input ` +
            `dtype must be int32, but got ${$x.dtype}`);
        assert(size >= 0, () => `size must be non-negative, but got ${size}.`);
        assert($weights.size === $x.size || $weights.size === 0, () => `Error in bincount: weights must have the same size as input or` +
            `0-length, but got input shape: ${$x.shape}, weights shape: ` +
            `${$weights.shape}.`);
        const inputs = { x: $x, weights: $weights };
        const attrs = { size };
        return ENGINE.runKernel(Bincount, inputs, attrs);
    }
    const bincount$2 = op({ bincount_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Return the shape of s0 op s1 with broadcast.
     *
     * compute r0, the broadcasted shape as a tensor.
     * s0, s1 and r0 are all integer vectors.
     *
     * This function returns the shape of the result of an operation between
     * two tensors of size s0 and s1 performed with broadcast.
     *
     * @param s0 A tensor representing a shape
     * @param s1 A tensor representing a shape
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    function broadcastArgs_(s0, s1) {
        const shape1Input = convertToTensor(s0, 's0', 'broadcastArgs', 'int32');
        const shape2Input = convertToTensor(s1, 's1', 'broadcastArgs', 'int32');
        if (shape1Input.rank !== 1) {
            throw new Error('broadcastArgs(): first input must be a vector (rank=1). ' +
                `Has rank ${shape1Input.rank}`);
        }
        if (shape2Input.rank !== 1) {
            throw new Error('broadcastArgs(): second input must be a vector (rank=1). ' +
                `Has rank ${shape2Input.rank}`);
        }
        const inputs = { s0: shape1Input, s1: shape2Input };
        return ENGINE.runKernel(BroadcastArgs, inputs);
    }
    const broadcastArgs$2 = op({ broadcastArgs_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Broadcast an array to a compatible shape NumPy-style.
     *
     * The tensor's shape is compared to the broadcast shape from end to beginning.
     * Ones are prepended to the tensor's shape until is has the same length as
     * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is
     * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then
     * the input tensor is tiled N times along that axis (using tf.tile).
     *
     * @param input The tensor that is to be broadcasted.
     * @param shape The input is to be broadcast to this shape.
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    function broadcastTo_(x, shape) {
        let input = convertToTensor(x, 'broadcastTo', 'x');
        const xShape = input.shape;
        if (shape.some(d => !(d > 0) || d % 1 !== 0)) {
            throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);
        }
        if (shape.length < input.rank) {
            throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);
        }
        if (shape.length > input.rank) {
            const newShape = input.shape.slice();
            while (newShape.length < shape.length) {
                newShape.unshift(1);
            }
            input = reshape$2(input, newShape);
        }
        const inputShape = input.shape;
        const reps = Array.from(shape);
        for (let i = shape.length - 1; i >= 0; i--) {
            if (inputShape[i] === shape[i]) {
                reps[i] = 1;
            }
            else if (input.shape[i] !== 1) {
                throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);
            }
        }
        const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);
        if (axes.length === 0) {
            return clone(input);
        }
        // TODO call broadcastTo kernel directly once backends implement broadcstTo
        const inputs = { x: input };
        const attrs = { reps };
        return ENGINE.runKernel(Tile, inputs, attrs);
    }
    const broadcastTo = op({ broadcastTo_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`
     *
     * ```js
     * const x = tf.tensor1d([.6, 1.1, -3.3]);
     *
     * x.ceil().print();  // or tf.ceil(x)
     * ```
     * @param x The input Tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function ceil_(x) {
        const $x = convertToTensor(x, 'x', 'ceil', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Ceil, inputs);
    }
    const ceil$2 = op({ ceil_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`
     *
     * ```js
     * const x = tf.tensor1d([-1, 2, -3, 4]);
     *
     * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)
     * ```
     * @param x The input tensor.
     * @param clipValueMin Lower-bound of range to be clipped to.
     * @param clipValueMax Upper-bound of range to be clipped to.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function clipByValue_(x, clipValueMin, clipValueMax) {
        const $x = convertToTensor(x, 'x', 'clipByValue');
        assert((clipValueMin <= clipValueMax), () => `Error in clip: min (${clipValueMin}) must be ` +
            `less than or equal to max (${clipValueMax}).`);
        const inputs = { x: $x };
        const attrs = { clipValueMin, clipValueMax };
        return ENGINE.runKernel(ClipByValue, inputs, attrs);
    }
    const clipByValue$2 = op({ clipByValue_ });

    /**
     * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.
     *
     * For example, if:
     * A: shape(3) = |r1, g1, b1|
     * B: shape(2) = |r2, g2|
     * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|
     *
     * @param tensors A list of`tf.Tensor`s to concatenate.
     * @return The concatenated array.
     */
    function concat1d_(tensors) {
        return concat$2(tensors, 0 /* axis */);
    }
    const concat1d = op({ concat1d_ });

    /**
     * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.
     *
     * For example, if:
     * A: shape(2, 3) = | r1, g1, b1 |
     *                  | r2, g2, b2 |
     *
     * B: shape(2, 3) = | r3, g3, b3 |
     *                  | r4, g4, b4 |
     *
     * C = tf.concat2d([A, B], axis)
     *
     * if axis = 0:
     * C: shape(4, 3) = | r1, g1, b1 |
     *                  | r2, g2, b2 |
     *                  | r3, g3, b3 |
     *                  | r4, g4, b4 |
     *
     * if axis = 1:
     * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |
     *                   | r2, g2, b2, r4, g4, b4 |
     *
     *
     * @param tensors A list of `tf.Tensor`s to concatenate.
     * @param axis The axis to concatenate along.
     * @return The concatenated array.
     */
    function concat2d_(tensors, axis) {
        return concat$2(tensors, axis);
    }
    const concat2d = op({ concat2d_ });

    /**
     * Concatenates a list of `tf.Tensor3D`s along an axis.
     * See `concat` for details.
     *
     * For example, if:
     * A: shape(2, 1, 3) = | r1, g1, b1 |
     *                     | r2, g2, b2 |
     *
     * B: shape(2, 1, 3) = | r3, g3, b3 |
     *                     | r4, g4, b4 |
     *
     * C = tf.concat3d([A, B], axis)
     *
     * if axis = 0:
     * C: shape(4, 1, 3) = | r1, g1, b1 |
     *                     | r2, g2, b2 |
     *                     | r3, g3, b3 |
     *                     | r4, g4, b4 |
     *
     * if axis = 1:
     * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |
     *                     | r2, g2, b2, r4, g4, b4 |
     *
     * if axis = 2:
     * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |
     *                      | r2, g2, b2, r4, g4, b4 |
     *
     * @param tensors A list of`tf.Tensor`s to concatenate.
     * @param axis The axis to concate along.
     * @return The concatenated array.
     */
    function concat3d_(tensors, axis) {
        return concat$2(tensors, axis);
    }
    const concat3d = op({ concat3d_ });

    /**
     * Concatenates a list of `tf.Tensor4D`s along an axis.
     * See `concat` for details.
     *
     * @param tensors A list of `tf.Tensor`s to concatenate.
     * @param axis The axis to concate along.
     * @return The concatenated array.
     */
    function concat4d_(tensors, axis) {
        return concat$2(tensors, axis);
    }
    const concat4d = op({ concat4d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes a 2D convolution over the input x.
     *
     * @param x The input tensor, of rank 4 or rank 3, of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
     * assumed.
     * @param filter The filter, rank 4, of shape
     *     `[filterHeight, filterWidth, inDepth, outDepth]`.
     * @param strides The strides of the convolution: `[strideHeight,
     * strideWidth]`.
     * @param pad The type of padding algorithm.
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     *   - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
     *     "NHWC". Specify the data format of the input and output data. With the
     *     default format "NHWC", the data is stored in the order of: [batch,
     *     height, width, channels].
     * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
     *     in which we sample input values across the height and width dimensions
     *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
     *     number, then `dilationHeight == dilationWidth`. If it is greater than
     *     1, then all values of `strides` must be 1.
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function conv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {
        const $x = convertToTensor(x, 'x', 'conv2d', 'float32');
        const $filter = convertToTensor(filter, 'filter', 'conv2d', 'float32');
        let x4D = $x;
        let reshapedTo4D = false;
        if ($x.rank === 3) {
            reshapedTo4D = true;
            x4D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        }
        assert(x4D.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);
        assert($filter.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ` +
            `${$filter.rank}.`);
        checkPadOnDimRoundingMode('conv2d', pad, dimRoundingMode);
        const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
        assert(inDepth === $filter.shape[2], () => `Error in conv2d: depth of input (${inDepth}) must match ` +
            `input depth for filter ${$filter.shape[2]}.`);
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' +
            `Got strides ${strides} and dilations '${dilations}'`);
        const inputs = { x: x4D, filter: $filter };
        const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(Conv2D, inputs, attrs);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    const conv2d$2 = op({ conv2d_ });

    /**
     * Computes a 1D convolution over the input x.
     *
     * @param x The input tensor, of rank 3 or rank 2, of shape
     *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.
     * @param filter The filter, rank 3, of shape
     *     `[filterWidth, inDepth, outDepth]`.
     * @param stride The number of entries by which the filter is moved right at
     *     each step.
     * @param pad The type of padding algorithm.
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     *   - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dataFormat An optional string from "NWC", "NCW". Defaults to "NWC",
     *     the data is stored in the order of [batch, in_width, in_channels]. Only
     *     "NWC" is currently supported.
     * @param dilation The dilation rate in which we sample input values in
     *     atrous convolution. Defaults to `1`. If it is greater than 1, then
     *     stride must be `1`.
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function conv1d_(x, filter, stride, pad, dataFormat = 'NWC', dilation = 1, dimRoundingMode) {
        const $x = convertToTensor(x, 'x', 'conv1d');
        const $filter = convertToTensor(filter, 'filter', 'conv1d');
        let x3D = $x;
        let reshapedTo3D = false;
        if ($x.rank === 2) {
            reshapedTo3D = true;
            x3D = reshape$2($x, [1, $x.shape[0], $x.shape[1]]);
        }
        assert(x3D.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);
        assert($filter.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ` +
            `${$filter.rank}.`);
        checkPadOnDimRoundingMode('conv1d', pad, dimRoundingMode);
        assert(x3D.shape[2] === $filter.shape[1], () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` +
            `input depth for filter ${$filter.shape[1]}.`);
        assert(eitherStridesOrDilationsAreOne(stride, dilation), () => 'Error in conv1D: Either stride or dilation must be 1. ' +
            `Got stride ${stride} and dilation '${dilation}'`);
        assert(dataFormat === 'NWC', () => `Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);
        const filter4D = reshape$2($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);
        const input4D = reshape$2(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);
        const strides = [1, stride];
        const dilations = [1, dilation];
        const conv2dDataFormat = 'NHWC';
        const res = conv2d$2(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);
        if (reshapedTo3D) {
            return reshape$2(res, [res.shape[2], res.shape[3]]);
        }
        return reshape$2(res, [res.shape[0], res.shape[2], res.shape[3]]);
    }
    const conv1d = op({ conv1d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the derivative of the input of a 2D convolution.
     *
     * @param xShape The shape of the input: [batch, height, width, inDepth].
     * If length of 3, batch of 1 is assumed.
     * @param dy The derivative of the output, of rank 4 or rank 3 of shape
     *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is
     * assumed.
     * @param filter The filter, rank 4, of shape
     *     `[filterHeight, filterWidth, inDepth, outDepth]`.
     * @param strides The strides of the convolution: `[strideHeight,
     * strideWidth]`.
     * @param pad The type of padding algorithm used:
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
     *     "NHWC". Specify the data format of the input and output data. With the
     *     default format "NHWC", the data is stored in the order of: [batch,
     *     height, width, channels].
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     */
    function conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {
        assert(xShape.length === dy.rank, () => `Length of inShape ` +
            `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
        let xShape4D = xShape;
        let dy4D = dy;
        let reshapedTo4D = false;
        if (dy.rank === 3) {
            reshapedTo4D = true;
            dy4D = reshape$2(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
            xShape4D = [1, xShape[0], xShape[1], xShape[2]];
        }
        assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` +
            `${xShape4D.length}.`);
        assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` +
            `rank ${dy4D.rank}`);
        assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` +
            `rank ${filter.rank}`);
        const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];
        const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
        assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +
            `match input depth for filter ${filter.shape[2]}.`);
        assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +
            `match output depth for filter ${filter.shape[3]}.`);
        checkPadOnDimRoundingMode('conv2dDerInput', pad, dimRoundingMode);
        const inputs = { dy: dy4D, filter };
        const attrs = { strides, pad, dataFormat, dimRoundingMode, inputShape: xShape4D };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(Conv2DBackpropInput, inputs, attrs);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    const conv2DBackpropInput$2 = op({ conv2DBackpropInput_ });

    /**
     * Computes the transposed 2D convolution of an image, also known as a
     * deconvolution.
     *
     * @param x The input image, of rank 4 or rank 3, of shape
     *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.
     * @param filter The filter, rank 4, of shape
     *     `[filterHeight, filterWidth, outDepth, inDepth]`.
     *     `inDepth` must match `inDepth` in `x`.
     * @param outputShape Output shape, of rank 4 or rank 3:
     *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.
     * @param strides The strides of the original convolution:
     *     `[strideHeight, strideWidth]`.
     * @param pad  The type of padding algorithm used in the non-transpose version
     *    of the op.
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {
        const $x = convertToTensor(x, 'x', 'conv2dTranspose');
        const $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');
        return conv2DBackpropInput$2(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);
    }
    const conv2dTranspose = op({ conv2dTranspose_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes a 3D convolution over the input x.
     *
     * @param x The input tensor, of rank 5 or rank 4, of shape
     *     `[batch, depth, height, width, channels]`. If rank 4,
     * batch of 1 is assumed.
     * @param filter The filter, rank 5, of shape
     *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.
     *      inChannels must match between input and filter.
     * @param strides The strides of the convolution: `[strideDepth, strideHeight,
     * strideWidth]`.
     * @param pad The type of padding algorithm.
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     *   - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dataFormat: An optional string from: "NDHWC", "NCDHW". Defaults to
     *     "NDHWC". Specify the data format of the input and output data. With the
     *     default format "NDHWC", the data is stored in the order of: [batch,
     *     depth, height, width, channels]. Only "NDHWC" is currently supported.
     * @param dilations The dilation rates: `[dilationDepth, dilationHeight,
     *     dilationWidth]` in which we sample input values across the height
     *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.
     *     If `dilations` is a single number, then
     *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater
     *     than 1, then all values of `strides` must be 1.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function conv3d_(x, filter, strides, pad, dataFormat = 'NDHWC', dilations = [1, 1, 1]) {
        const $x = convertToTensor(x, 'x', 'conv3d');
        const $filter = convertToTensor(filter, 'filter', 'conv3d');
        let x5D = $x;
        let reshapedTo5D = false;
        if ($x.rank === 4) {
            reshapedTo5D = true;
            x5D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
        }
        assert(x5D.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);
        assert($filter.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ` +
            `${$filter.rank}.`);
        assert(x5D.shape[4] === $filter.shape[3], () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` +
            `input depth for filter ${$filter.shape[3]}.`);
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv3D: Either strides or dilations must be 1. ' +
            `Got strides ${strides} and dilations '${dilations}'`);
        assert(dataFormat === 'NDHWC', () => `Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);
        const inputs = { x: x5D, filter: $filter };
        const attrs = { strides, pad, dataFormat, dilations };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(Conv3D, inputs, attrs);
        if (reshapedTo5D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
        }
        return res;
    }
    const conv3d = op({ conv3d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the derivative of the input of a 3D convolution.
     *
     * @param xShape The shape of the input: [batch, depth, height, width,
     * in_channels]. If length of 4, batch of 1 is assumed.
     * @param dy The derivative of the output, of rank 5 or rank 4 of shape
     *   `[batch, outDepth, outHeight, outWidth, in_channels]`.
     * If rank 4, batch of 1 is assumed.
     * @param filter The filter, rank 5, of shape
     *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.
     * @param strides The strides of the convolution: `[strideDepth, strideHeight,
     * strideWidth]`.
     * @param pad The type of padding algorithm used:
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     */
    function conv3DBackpropInput_(xShape, dy, filter, strides, pad) {
        assert(xShape.length === dy.rank, () => `Length of inShape ` +
            `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
        let xShape5D = xShape;
        let dy5D = dy;
        let reshapedTo5D = false;
        if (dy.rank === 4) {
            reshapedTo5D = true;
            dy5D = reshape$2(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
            xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];
        }
        const inDepth = xShape5D[4];
        const outDepth = dy5D.shape[4];
        assert(xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ` +
            `${xShape5D.length}.`);
        assert(dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got ` +
            `rank ${dy5D.rank}`);
        assert(filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got ` +
            `rank ${filter.rank}`);
        assert(inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +
            `match input depth for filter ${filter.shape[3]}.`);
        assert(outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +
            `match output depth for filter ${filter.shape[4]}.`);
        const inputs = { dy: dy5D, filter };
        const attrs = { pad, strides, inputShape: xShape5D };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(Conv3DBackpropInputV2, inputs, attrs);
        if (reshapedTo5D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
        }
        return res;
    }
    const conv3DBackpropInput$1 = op({ conv3DBackpropInput_ });

    /**
     * Computes the transposed 3D convolution of a volume, also known as a
     * deconvolution.
     *
     * @param x The input image, of rank 5 or rank 4, of shape
     *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.
     * @param filter The filter, rank 4, of shape
     *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.
     *     `inDepth` must match `inDepth` in `x`.
     * @param outputShape Output shape, of rank 5 or rank 4:
     *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is
     *    assumed.
     * @param strides The strides of the original convolution:
     *     `[strideDepth, strideHeight, strideWidth]`.
     * @param pad  The type of padding algorithm used in the non-transpose version
     *    of the op.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function conv3dTranspose_(x, filter, outputShape, strides, pad) {
        const $x = convertToTensor(x, 'x', 'conv3dTranspose');
        const $filter = convertToTensor(filter, 'filter', 'conv3dTranspose');
        return conv3DBackpropInput$1(outputShape, $x, $filter, strides, pad);
    }
    const conv3dTranspose = op({ conv3dTranspose_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
     *
     * x.cos().print();  // or tf.cos(x)
     * ```
     * @param x The input tensor. Must be float32 type.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function cos_(x) {
        const $x = convertToTensor(x, 'x', 'cos', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Cos, inputs);
    }
    const cos$2 = op({ cos_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, 1, -1, .7]);
     *
     * x.cosh().print();  // or tf.cosh(x)
     * ```
     * @param x The input tensor. Must be float32 type.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function cosh_(x) {
        const $x = convertToTensor(x, 'x', 'cosh', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Cosh, inputs);
    }
    const cosh$2 = op({ cosh_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the cumulative sum of a `tf.Tensor` along `axis`.
     *
     * ```js
     * const x = tf.tensor([1, 2, 3, 4]);
     * x.cumsum().print();
     * ```
     * ```js
     * const x = tf.tensor([[1, 2], [3, 4]]);
     * x.cumsum().print();
     * ```
     *
     * @param x The input tensor to be summed.
     * @param axis The axis along which to sum. Optional. Defaults to 0.
     * @param exclusive Whether to perform exclusive cumulative sum. Optional.
     *     Defaults to false. If set to true then the sum of each tensor entry
     *     does not include its own value, but only the values previous to it
     *     along the specified axis.
     * @param reverse Whether to sum in the opposite direction. Optional.
     *     Defaults to false.
     *
     * @doc {heading: 'Operations', subheading: 'Scan'}
     */
    function cumsum_(x, axis = 0, exclusive = false, reverse = false) {
        const $x = convertToTensor(x, 'x', 'cumsum');
        const inputs = { x: $x };
        const attrs = { axis, exclusive, reverse };
        return ENGINE.runKernel(Cumsum, inputs, attrs);
    }
    const cumsum$2 = op({ cumsum_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Outputs a vector with length `size` and the same dtype as `weights`.
     *
     * If `weights` are empty, then index `i` stores the number of times the value
     * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the
     * sum of the value in `weights` at each index where the corresponding value in
     * `x` is `i`.
     *
     * Values in `x` outside of the range [0, size) are ignored.
     *
     * @param x The input int tensor, rank 1 or rank 2.
     * @param weights The weights tensor, must have the same shape as x, or a
     *     length-0 Tensor, in which case it acts as all weights equal to 1.
     * @param size Non-negative integer.
     * @param binaryOutput Optional. Whether the kernel should count the appearance
     *     or number of occurrences. Defaults to False.
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function denseBincount_(x, weights, size, binaryOutput = false) {
        const $x = convertToTensor(x, 'x', 'denseBincount');
        const $weights = convertToTensor(weights, 'weights', 'denseBincount');
        assert($x.dtype === 'int32', () => `Error in denseBincount: input ` +
            `dtype must be int32, but got ${$x.dtype}`);
        assert($x.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got ` +
            `rank ${$x.rank}.`);
        assert(size >= 0, () => `size must be non-negative, but got ${size}.`);
        assert($weights.size === $x.size || $weights.size === 0, () => `Error in denseBincount: weights must have the same shape as x or ` +
            `0-length, but got x shape: ${$x.shape}, weights shape: ` +
            `${$weights.shape}.`);
        const inputs = { x: $x, weights: $weights };
        const attrs = { size, binaryOutput };
        return ENGINE.runKernel(DenseBincount, inputs, attrs);
    }
    const denseBincount$2 = op({ denseBincount_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Rearranges data from depth into blocks of spatial data. More specifically,
     * this op outputs a copy of the input tensor where values from the `depth`
     * dimension are moved in spatial blocks to the `height` and `width` dimensions.
     * The attr `blockSize` indicates the input block size and how the data is
     * moved.
     *
     *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged
     * into non-overlapping blocks of size `blockSize x blockSize`
     *
     *  - The width the output tensor is `inputWidth * blockSize`, whereas the
     * height is `inputHeight * blockSize`
     *
     *  - The Y, X coordinates within each block of the output image are determined
     * by the high order component of the input channel index
     *
     *  - The depth of the input tensor must be divisible by `blockSize *
     * blockSize`
     *
     * The `dataFormat` attr specifies the layout of the input and output tensors
     * with the following options: "NHWC": [ `batch, height, width, channels` ]
     * "NCHW": [ `batch, channels, height, width` ]
     *
     * ```js
     * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);
     * const blockSize = 2;
     * const dataFormat = "NHWC";
     *
     * tf.depthToSpace(x, blockSize, dataFormat).print();
     * ```
     *
     * @param x The input tensor of rank 4
     * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block
     * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to "NHWC"
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    function depthToSpace_(x, blockSize, dataFormat = 'NHWC') {
        const $x = convertToTensor(x, 'x', 'depthToSpace', 'float32');
        const inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];
        const inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];
        const inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];
        assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);
        assert(inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${inputHeight} and ${blockSize}  for depthToSpace with input shape
    ${$x.shape}`);
        assert(inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${inputWidth} and ${blockSize} for depthToSpace with input shape
        ${$x.shape}`);
        assert((inputDepth % (blockSize * blockSize) === 0), () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);
        const inputs = { x: $x };
        const attrs = { blockSize, dataFormat };
        return ENGINE.runKernel(DepthToSpace, inputs, attrs);
    }
    const depthToSpace$2 = op({ depthToSpace_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Depthwise 2D convolution.
     *
     * Given a 4D `input` array and a `filter` array of shape
     * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
     * `inChannels` convolutional filters of depth 1, this op applies a
     * different filter to each input channel (expanding from 1 channel to
     * `channelMultiplier` channels for each), then concatenates the results
     * together. The output has `inChannels * channelMultiplier` channels.
     *
     * See
     * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
     *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
     * for more details.
     *
     * @param x The input tensor, of rank 4 or rank 3, of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
     * assumed.
     * @param filter The filter tensor, rank 4, of shape
     *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
     * @param strides The strides of the convolution: `[strideHeight,
     * strideWidth]`. If strides is a single number, then `strideHeight ==
     * strideWidth`.
     * @param pad The type of padding algorithm.
     *   - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *   - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     *   - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
     *     in which we sample input values across the height and width dimensions
     *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
     *     number, then `dilationHeight == dilationWidth`. If it is greater than
     *     1, then all values of `strides` must be 1.
     * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
     *     "NHWC". Specify the data format of the input and output data. With the
     *     default format "NHWC", the data is stored in the order of: [batch,
     *     height, width, channels]. Only "NHWC" is currently supported.
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function depthwiseConv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {
        const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');
        const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');
        let x4D = $x;
        let reshapedTo4D = false;
        if ($x.rank === 3) {
            reshapedTo4D = true;
            x4D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        }
        assert(x4D.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got ` +
            `rank ${x4D.rank}.`);
        assert($filter.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +
            `${$filter.rank}.`);
        assert(x4D.shape[3] === $filter.shape[2], () => `Error in depthwiseConv2d: number of input channels ` +
            `(${x4D.shape[3]}) must match the inChannels dimension in ` +
            `filter ${$filter.shape[2]}.`);
        checkPadOnDimRoundingMode('depthwiseConv2d', pad, dimRoundingMode);
        const inputs = { x: x4D, filter: $filter };
        const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(DepthwiseConv2dNative, inputs, attrs);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    const depthwiseConv2d$1 = op({ depthwiseConv2d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns a diagonal tensor with a given diagonal values.
     *
     * Given a diagonal, this operation returns a tensor with the diagonal and
     * everything else padded with zeros.
     *
     * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor
     * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3, 4]);
     *
     * tf.diag(x).print()
     * ```
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])
     *
     * tf.diag(x).print()
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function diag_(x) {
        const $x = convertToTensor(x, 'x', 'diag');
        const inputs = { x: $x };
        return ENGINE.runKernel(Diag, inputs);
    }
    const diag$2 = op({ diag_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the grayscale dilation over the input `x`.
     *
     * @param x The input tensor, rank 3 or rank 4 of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
     * @param filter The filter tensor, rank 3, of shape
     *     `[filterHeight, filterWidth, depth]`.
     * @param strides The strides of the sliding window for each dimension of the
     *     input tensor: `[strideHeight, strideWidth]`.
     *     If `strides` is a single number,
     *     then `strideHeight == strideWidth`.
     * @param pad The type of padding algorithm.
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1*1x1.
     *    - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dataFormat Specify the data format of the input and output data.
     *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the
     *      default format "NHWC", the data is stored in the order of: [batch,
     *      height, width, channels].
     * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
     *     in which we sample input values across the height and width dimensions
     *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`
     *     is a single number, then `dilationHeight == dilationWidth`. If it is
     *     greater than 1, then all values of `strides` must be 1.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function dilation2d_(x, filter, strides, pad, dilations = [1, 1], dataFormat = 'NHWC') {
        const $x = convertToTensor(x, 'x', 'dilation2d');
        const $filter = convertToTensor(filter, 'filter', 'dilation2d');
        assert($x.rank === 3 || $x.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ` +
            `${$x.rank}.`);
        assert($filter.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ` +
            `${$filter.rank}.`);
        assert(dataFormat === 'NHWC', () => `Error in dilation2d: Only NHWC is currently supported, ` +
            `but got dataFormat of ${dataFormat}`);
        let x4D = $x;
        let reshapedTo4D = false;
        if ($x.rank === 3) {
            x4D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
            reshapedTo4D = true;
        }
        const inputs = { x: x4D, filter: $filter };
        const attrs = { strides, pad, dilations };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(Dilation2D, inputs, attrs);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    const dilation2d = op({ dilation2d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the truth value of (a == b) element-wise. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3]);
     * const b = tf.tensor1d([2, 2, 2]);
     *
     * a.equal(b).print();
     * ```
     *
     * @param a The first input tensor.
     * @param b The second input tensor. Must have the same dtype as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function equal_(a, b) {
        let $a = convertToTensor(a, 'a', 'equal', 'string_or_numeric');
        let $b = convertToTensor(b, 'b', 'equal', 'string_or_numeric');
        [$a, $b] = makeTypesMatch($a, $b);
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(Equal, inputs);
    }
    const equal$2 = op({ equal_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the elements, either `a` or `b` depending on the `condition`.
     *
     * If the condition is true, select from `a`, otherwise select from `b`.
     *
     * ```js
     * const cond = tf.tensor1d([false, false, true], 'bool');
     * const a = tf.tensor1d([1 , 2, 3]);
     * const b = tf.tensor1d([-1, -2, -3]);
     *
     * a.where(cond, b).print();
     * ```
     *
     * @param condition The input condition. Must be of dtype bool.
     * @param a If `condition` is rank 1, `a` may have a higher rank but
     *     its first dimension must match the size of `condition`.
     * @param b A tensor with the same dtype as `a` and with shape that is
     *     compatible with `a`.
     * @return A tensor with same dtype as `a` and `b`, and shape that is
     *     broadcastable from `a` and `b`.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function where_(condition, a, b) {
        const $a = convertToTensor(a, 'a', 'where');
        const $b = convertToTensor(b, 'b', 'where');
        const $condition = convertToTensor(condition, 'condition', 'where', 'bool');
        // TODO: move this logic to forward function when the broadcastTo op is
        // implemented in WASM.
        // Find the broadcastable shape for $condition, $a, and $b.
        const broadcastShape = assertAndGetBroadcastShape(assertAndGetBroadcastShape($condition.shape, $a.shape), $b.shape);
        const $broadcastedCondition = broadcastTo($condition, broadcastShape);
        const $broadcastedA = broadcastTo($a, broadcastShape);
        const $broadcastedB = broadcastTo($b, broadcastShape);
        const inputs = {
            condition: $broadcastedCondition,
            t: $broadcastedA,
            e: $broadcastedB
        };
        return ENGINE.runKernel(Select, inputs);
    }
    const where = op({ where_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the
     * given tensor.
     *
     * ```js
     * const x = tf.tensor([1, 2]);
     * tf.zerosLike(x).print();
     * ```
     *
     * @param x The tensor of required shape.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function zerosLike_(x) {
        const $x = convertToTensor(x, 'x', 'zerosLike');
        const inputs = { x: $x };
        return ENGINE.runKernel(ZerosLike, inputs);
    }
    const zerosLike$2 = op({ zerosLike_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0
     * if denominator is 0.
     *
     *
     * ```js
     * const a = tf.tensor1d([1, 4, 9, 16]);
     * const b = tf.tensor1d([1, 2, 3, 4]);
     * const c = tf.tensor1d([0, 0, 0, 0]);
     *
     * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
     * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
     * ```
     *
     * ```js
     * // Broadcast div a with b.
     * const a = tf.tensor1d([2, 4, 6, 8]);
     * const b = tf.scalar(2);
     * const c = tf.scalar(0);
     *
     * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
     * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
     * ```
     *
     * @param a The first tensor as the numerator.
     * @param b The second tensor as the denominator. Must have the same dtype as
     * `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function divNoNan_(a, b) {
        // TODO: Make this into its own kernel.
        let $a = convertToTensor(a, 'a', 'div');
        let $b = convertToTensor(b, 'b', 'div');
        [$a, $b] = makeTypesMatch($a, $b);
        const divResult = div$1($a, $b);
        const zeros = zerosLike$2(divResult);
        const bEqualsZero = equal$2($b, zeros);
        return where(bEqualsZero, zeros, divResult);
    }
    const divNoNan = op({ divNoNan_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.
     *
     * ```js
     * const a = tf.tensor1d([1, 2]);
     * const b = tf.tensor2d([[1, 2], [3, 4]]);
     * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
     *
     * a.dot(b).print();  // or tf.dot(a, b)
     * b.dot(a).print();
     * b.dot(c).print();
     * ```
     * @param t1 The first tensor in the dot operation.
     * @param t2 The second tensor in the dot operation.
     *
     * @doc {heading: 'Operations', subheading: 'Matrices'}
     */
    function dot_(t1, t2) {
        const $t1 = convertToTensor(t1, 't1', 'dot');
        const $t2 = convertToTensor(t2, 't2', 'dot');
        assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +
            `${$t1.rank} and ${$t2.rank}.`);
        const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);
        const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);
        assert(t1Inner === t2Inner, () => `Error in dot: inner dimensions of inputs must match, but got ` +
            `${t1Inner} and ${t2Inner}.`);
        if ($t1.rank === 1 && $t2.rank === 1) {
            const t12D = reshape$2($t1, [1, -1]);
            const t22D = reshape$2($t2, [-1, 1]);
            const t1t2 = matMul$1(t12D, t22D);
            return reshape$2(t1t2, []);
        }
        else if ($t1.rank === 1 && $t2.rank === 2) {
            const t12D = reshape$2($t1, [1, -1]);
            const t22D = reshape$2($t2, [$t2.shape[0], $t2.shape[1]]);
            const t1t2 = matMul$1(t12D, t22D);
            return reshape$2(t1t2, [t1t2.size]);
        }
        else if ($t1.rank === 2 && $t2.rank === 1) {
            const t22D = reshape$2($t2, [-1, 1]);
            const t1t2 = matMul$1($t1, t22D);
            return reshape$2(t1t2, [t1t2.size]);
        }
        else {
            const t22D = reshape$2($t2, [$t2.shape[0], $t2.shape[1]]);
            const t1t2 = matMul$1($t1, t22D);
            return t1t2;
        }
    }
    const dot = op({ dot_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Tensor contraction over specified indices and outer product.
     *
     * `einsum` allows defining Tensors by defining their element-wise computation.
     * This computation is based on
     * [Einstein summation](https://en.wikipedia.org/wiki/Einstein_notation).
     *
     * Some special cases include:
     *
     * Matrix multiplication:
     * ```js
     * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
     * const y = tf.tensor2d([[0, 1], [2, 3], [4, 5]]);
     * x.print();
     * y.print();
     * tf.einsum('ij,jk->ik', x, y).print();
     * ```
     *
     * Dot product:
     * ```js
     * const x = tf.tensor1d([1, 2, 3]);
     * const y = tf.tensor1d([0, 1, 2]);
     * x.print();
     * y.print();
     * tf.einsum('i,i->', x, y).print();
     * ```
     *
     * Batch dot product:
     * ```js
     * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
     * const y = tf.tensor2d([[0, 1, 2], [3, 4, 5]]);
     * x.print();
     * y.print();
     * tf.einsum('bi,bi->b', x, y).print();
     * ```
     *
     * Outer prouduct:
     * ```js
     * const x = tf.tensor1d([1, 3, 5]);
     * const y = tf.tensor1d([2, 4, 6]);
     * x.print();
     * y.print();
     * tf.einsum('i,j->ij', x, y).print();
     * ```
     *
     * Matrix transpose:
     * ```js
     * const x = tf.tensor2d([[1, 2], [3, 4]]);
     * x.print();
     * tf.einsum('ij->ji', x).print();
     * ```
     *
     * Batch matrix transpose:
     * ```js
     * const x = tf.tensor3d([[[1, 2], [3, 4]], [[-1, -2], [-3, -4]]]);
     * x.print();
     * tf.einsum('bij->bji', x).print();
     * ```
     *
     * Limitations:
     *
     * This implementation of einsum has the following limitations:
     *
     * - Does not support >2 input tensors.
     * - Does not support duplicate axes for any given input tensor. E.g., equation
     *   'ii->' is not suppoted.
     * - The `...` notation is not supported.
     *
     * @param equation a string describing the contraction, in the same format as
     * [numpy.einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html).
     * @param tensors the input(s) to contract (each one a Tensor), whose shapes
     *     should be consistent with equation.
     * @returns The output tensor.
     *
     * @doc {heading: 'Tensors', subheading: 'Matrices'}
     */
    function einsum_(equation, ...tensors) {
        const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'einsum'));
        const attrs = { equation };
        return ENGINE.runKernel(Einsum, $tensors, attrs);
    }
    const einsum$2 = op({ einsum_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes exponential linear element-wise: `x > 0 ? x : (e ^ x) - 1`.
     *
     * ```js
     * const x = tf.tensor1d([-1, 1, -3, 2]);
     *
     * x.elu().print();  // or tf.elu(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function elu_(x) {
        const $x = convertToTensor(x, 'x', 'elu', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Elu, inputs);
    }
    const elu$2 = op({ elu_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes gause error function of the input `tf.Tensor` element-wise:
     * `erf(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, .1, -.1, .7]);
     *
     * x.erf().print(); // or tf.erf(x);
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function erf_(x) {
        let $x = convertToTensor(x, 'x', 'erf');
        assert($x.dtype === 'int32' || $x.dtype === 'float32', () => 'Input dtype must be `int32` or `float32`.');
        if ($x.dtype === 'int32') {
            $x = cast$2($x, 'float32');
        }
        const inputs = { x: $x };
        return ENGINE.runKernel(Erf, inputs);
    }
    const erf$2 = op({ erf_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`
     *
     * ```js
     * const x = tf.tensor1d([1, 2, -3]);
     *
     * x.exp().print();  // or tf.exp(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function exp_(x) {
        const $x = convertToTensor(x, 'x', 'exp');
        const inputs = { x: $x };
        return ENGINE.runKernel(Exp, inputs);
    }
    const exp$2 = op({ exp_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
     * into the tensor's shape.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3, 4]);
     * const axis = 1;
     * x.expandDims(axis).print();
     * ```
     *
     * @param x The input tensor whose dimensions to be expanded.
     * @param axis The dimension index at which to insert shape of `1`. Defaults
     *     to 0 (the first dimension).
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    function expandDims_(x, axis = 0) {
        const $x = convertToTensor(x, 'x', 'expandDims', 'string_or_numeric');
        assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');
        const inputs = { input: $x };
        const attrs = { dim: axis };
        return ENGINE.runKernel(ExpandDims, inputs, attrs);
    }
    const expandDims$2 = op({ expandDims_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes exponential of the input `tf.Tensor` minus one element-wise.
     * `e ^ x - 1`
     *
     * ```js
     * const x = tf.tensor1d([1, 2, -3]);
     *
     * x.expm1().print();  // or tf.expm1(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function expm1_(x) {
        const $x = convertToTensor(x, 'x', 'expm1');
        const inputs = { x: $x };
        return ENGINE.runKernel(Expm1, inputs);
    }
    const expm1$2 = op({ expm1_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Construct a tensor by repeating it the number of times given by reps.
     *
     * This operation creates a new tensor by replicating `input` `reps`
     * times. The output tensor's i'th dimension has `input.shape[i] *
     * reps[i]` elements, and the values of `input` are replicated
     * `reps[i]` times along the i'th dimension. For example, tiling
     * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.
     *
     * ```js
     * const a = tf.tensor1d([1, 2]);
     *
     * a.tile([2]).print();    // or a.tile([2])
     * ```
     *
     * ```js
     * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * a.tile([1, 2]).print();  // or a.tile([1, 2])
     * ```
     * @param x The tensor to tile.
     * @param reps Determines the number of replications per dimension.
     *
     * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
     */
    function tile_(x, reps) {
        const $x = convertToTensor(x, 'x', 'tile', 'string_or_numeric');
        assert($x.rank === reps.length, () => `Error in transpose: rank of input ${$x.rank} ` +
            `must match length of reps ${reps}.`);
        const inputs = { x: $x };
        const attrs = { reps };
        return ENGINE.runKernel(Tile, inputs, attrs);
    }
    const tile$2 = op({ tile_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Create an identity matrix.
     *
     * @param numRows Number of rows.
     * @param numColumns Number of columns. Defaults to `numRows`.
     * @param batchShape If provided, will add the batch shape to the beginning
     *   of the shape of the returned `tf.Tensor` by repeating the identity
     *   matrix.
     * @param dtype Data type.
     * @returns Identity matrix of the specified size and data type, possibly
     *   with batch repetition if `batchShape` is specified.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function eye_(numRows, numColumns, batchShape, dtype = 'float32') {
        if (numColumns == null) {
            numColumns = numRows;
        }
        const buff = buffer([numRows, numColumns], dtype);
        const n = numRows <= numColumns ? numRows : numColumns;
        for (let i = 0; i < n; ++i) {
            buff.set(1, i, i);
        }
        const out = reshape$2(buff.toTensor(), [numRows, numColumns]);
        if (batchShape == null) {
            return out;
        }
        else {
            if (batchShape.length === 1) {
                return tile$2(expandDims$2(out, 0), [batchShape[0], 1, 1]);
            }
            else if (batchShape.length === 2) {
                // tslint:disable-next-line:no-unnecessary-type-assertion
                return tile$2(expandDims$2(expandDims$2(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);
            }
            else if (batchShape.length === 3) {
                // tslint:disable-next-line:no-unnecessary-type-assertion
                return tile$2(expandDims$2(expandDims$2(expandDims$2(out, 0), 0), 0), [
                    batchShape[0], batchShape[1], batchShape[2], 1, 1
                ]);
            }
            else {
                throw new Error(`eye() currently supports only 1D and 2D ` +
                    // tslint:disable-next-line:no-any
                    `batchShapes, but received ${batchShape.length}D.`);
            }
        }
    }
    const eye = op({ eye_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` filled with a scalar value.
     *
     * ```js
     * tf.fill([2, 2], 4).print();
     * ```
     *
     * @param shape An array of integers defining the output tensor shape.
     * @param value The scalar value to fill the tensor with.
     * @param dtype The type of an element in the resulting tensor. Defaults to
     * 'float'.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function fill$2(shape, value, dtype) {
        const attrs = { shape, value, dtype };
        return ENGINE.runKernel(Fill, {}, attrs);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.
     *
     * ```js
     * const x = tf.tensor1d([.6, 1.1, -3.3]);
     *
     * x.floor().print();  // or tf.floor(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function floor_(x) {
        const $x = convertToTensor(x, 'x', 'floor', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Floor, inputs);
    }
    const floor$2 = op({ floor_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Gather slices from tensor `x`'s axis `axis` according to `indices`.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3, 4]);
     * const indices = tf.tensor1d([1, 3, 3], 'int32');
     *
     * x.gather(indices).print();
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     * const indices = tf.tensor1d([1, 1, 0], 'int32');
     *
     * x.gather(indices).print();
     * ```
     * @param x The input tensor whose slices to be gathered.
     * @param indices The indices of the values to extract.
     * @param axis The axis over which to select values. Defaults to 0.
     * @param batchDims Optional. The number of batch dimensions. It must be less
     *     than or equal to rank(indices). Defaults to 0.
     *     The output tensor will have shape of
     *     `x.shape[:axis] + indices.shape[batchDims:] + x.shape[axis + 1:]`
     *
     * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
     */
    function gather_(x, indices, axis = 0, batchDims = 0) {
        const $x = convertToTensor(x, 'x', 'gather');
        const $indices = convertToTensor(indices, 'indices', 'gather', 'int32');
        const inputs = { x: $x, indices: $indices };
        const attrs = { axis, batchDims };
        return ENGINE.runKernel(GatherV2, inputs, attrs);
    }
    const gather = op({ gather_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the truth value of (a > b) element-wise. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3]);
     * const b = tf.tensor1d([2, 2, 2]);
     *
     * a.greater(b).print();
     * ```
     *
     * @param a The first input tensor.
     * @param b The second input tensor. Must have the same dtype as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function greater_(a, b) {
        let $a = convertToTensor(a, 'a', 'greater', 'string_or_numeric');
        let $b = convertToTensor(b, 'b', 'greater', 'string_or_numeric');
        [$a, $b] = makeTypesMatch($a, $b);
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(Greater, inputs);
    }
    const greater$2 = op({ greater_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the truth value of (a >= b) element-wise. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3]);
     * const b = tf.tensor1d([2, 2, 2]);
     *
     * a.greaterEqual(b).print();
     * ```
     *
     * @param a The first input tensor.
     * @param b The second input tensor. Must have the same dtype as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function greaterEqual_(a, b) {
        let $a = convertToTensor(a, 'a', 'greaterEqual', 'string_or_numeric');
        let $b = convertToTensor(b, 'b', 'greaterEqual', 'string_or_numeric');
        [$a, $b] = makeTypesMatch($a, $b);
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(GreaterEqual, inputs);
    }
    const greaterEqual$2 = op({ greaterEqual_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the imaginary part of a complex (or real) tensor.
     *
     * Given a tensor input, this operation returns a tensor of type float that is
     * the imaginary part of each element in input considered as a complex number.
     * If input is real, a tensor of all zeros is returned.
     *
     * ```js
     * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
     * tf.imag(x).print();
     * ```
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function imag_(input) {
        const $input = convertToTensor(input, 'input', 'imag');
        const inputs = { input: $input };
        return ENGINE.runKernel(Imag, inputs);
    }
    const imag$2 = op({ imag_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns which elements of x are finite.
     *
     * ```js
     * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
     *
     * x.isFinite().print();  // or tf.isNaN(x)
     * ```
     * @param x The input Tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function isFinite_(x) {
        const $x = convertToTensor(x, 'x', 'isFinite');
        const inputs = { x: $x };
        return ENGINE.runKernel(IsFinite, inputs);
    }
    const isFinite$3 = op({ isFinite_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns which elements of x are Infinity or -Infinity.
     *
     * ```js
     * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
     *
     * x.isInf().print();  // or tf.isNaN(x)
     * ```
     * @param x The input Tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function isInf_(x) {
        const $x = convertToTensor(x, 'x', 'isInf');
        const inputs = { x: $x };
        return ENGINE.runKernel(IsInf, inputs);
    }
    const isInf$2 = op({ isInf_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * RReturns which elements of x are NaN.
     *
     * ```js
     * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
     *
     * x.isNaN().print();  // or tf.isNaN(x)
     * ```
     * @param x The input Tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function isNaN_(x) {
        const $x = convertToTensor(x, 'x', 'isNaN');
        const inputs = { x: $x };
        return ENGINE.runKernel(IsNan, inputs);
    }
    const isNaN$3 = op({ isNaN_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes leaky rectified linear element-wise.
     *
     * See
     * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](
     *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)
     *
     * ```js
     * const x = tf.tensor1d([-1, 2, -3, 4]);
     *
     * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)
     * ```
     * @param x The input tensor.
     * @param alpha The scaling factor for negative values, defaults to 0.2.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function leakyRelu_(x, alpha = 0.2) {
        const $x = convertToTensor(x, 'x', 'leakyRelu');
        const inputs = { x: $x };
        const attrs = { alpha };
        return ENGINE.runKernel(LeakyRelu, inputs, attrs);
    }
    const leakyRelu$2 = op({ leakyRelu_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the truth value of (a < b) element-wise. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3]);
     * const b = tf.tensor1d([2, 2, 2]);
     *
     * a.less(b).print();
     * ```
     * @param a The first input tensor.
     * @param b The second input tensor. Must have the same dtype as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function less_(a, b) {
        let $a = convertToTensor(a, 'a', 'less', 'string_or_numeric');
        let $b = convertToTensor(b, 'b', 'less', 'string_or_numeric');
        [$a, $b] = makeTypesMatch($a, $b);
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(Less, inputs);
    }
    const less$2 = op({ less_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the truth value of (a <= b) element-wise. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3]);
     * const b = tf.tensor1d([2, 2, 2]);
     *
     * a.lessEqual(b).print();
     * ```
     *
     * @param a The first input tensor.
     * @param b The second input tensor. Must have the same dtype as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function lessEqual_(a, b) {
        let $a = convertToTensor(a, 'a', 'lessEqual', 'string_or_numeric');
        let $b = convertToTensor(b, 'b', 'lessEqual', 'string_or_numeric');
        [$a, $b] = makeTypesMatch($a, $b);
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(LessEqual, inputs);
    }
    const lessEqual$2 = op({ lessEqual_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Return an evenly spaced sequence of numbers over the given interval.
     *
     * ```js
     * tf.linspace(0, 9, 10).print();
     * ```
     * @param start The start value of the sequence.
     * @param stop The end value of the sequence.
     * @param num The number of values to generate.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function linspace(start, stop, num) {
        if (num <= 0) {
            throw new Error('The number of values should be positive.');
        }
        const attrs = { start, stop, num };
        return ENGINE.runKernel(LinSpace, {}, attrs);
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Normalizes the activation of a local neighborhood across or within
     * channels.
     *
     * @param x The input tensor. The 4-D input tensor is treated as a 3-D array
     *     of 1D vectors (along the last dimension), and each vector is
     *     normalized independently.
     * @param depthRadius The number of adjacent channels in the 1D normalization
     *     window.
     * @param bias A constant bias term for the basis.
     * @param alpha A scale factor, usually positive.
     * @param beta An exponent.
     *
     * @doc {heading: 'Operations', subheading: 'Normalization'}
     */
    function localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
        const $x = convertToTensor(x, 'x', 'localResponseNormalization');
        assert($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${$x.rank}.`);
        assert(isInt(depthRadius), () => `Error in localResponseNormalization: depthRadius must be an ` +
            `integer but got depthRadius ${depthRadius}.`);
        let x4D = $x;
        let reshapedTo4D = false;
        if ($x.rank === 3) {
            reshapedTo4D = true;
            x4D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        }
        const inputs = { x: x4D };
        const attrs = { depthRadius, bias, alpha, beta };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(LRN, inputs, attrs);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        else {
            return res;
        }
    }
    const localResponseNormalization = op({ localResponseNormalization_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`
     *
     * ```js
     * const x = tf.tensor1d([1, 2, Math.E]);
     *
     * x.log().print();  // or tf.log(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function log_(x) {
        const $x = convertToTensor(x, 'x', 'log', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Log, inputs);
    }
    const log$2 = op({ log_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes natural logarithm of the input `tf.Tensor` plus one
     * element-wise: `ln(1 + x)`
     *
     * ```js
     * const x = tf.tensor1d([1, 2, Math.E - 1]);
     *
     * x.log1p().print();  // or tf.log1p(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function log1p_(x) {
        const $x = convertToTensor(x, 'x', 'log1p');
        const inputs = { x: $x };
        return ENGINE.runKernel(Log1p, inputs);
    }
    const log1p$2 = op({ log1p_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the
     * gradient of `f(x)` with respect to `x`.
     *
     * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to
     * `x` is computed instead. `f(x)` must take a single tensor `x` and return a
     * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.
     *
     * ```js
     * // f(x) = x ^ 2
     * const f = x => x.square();
     * // f'(x) = 2x
     * const g = tf.grad(f);
     *
     * const x = tf.tensor1d([2, 3]);
     * g(x).print();
     * ```
     *
     * ```js
     * // f(x) = x ^ 3
     * const f = x => x.pow(tf.scalar(3, 'int32'));
     * // f'(x) = 3x ^ 2
     * const g = tf.grad(f);
     * // f''(x) = 6x
     * const gg = tf.grad(g);
     *
     * const x = tf.tensor1d([2, 3]);
     * gg(x).print();
     * ```
     *
     * @param f The function f(x), to compute gradient for.
     *
     * @doc {heading: 'Training', subheading: 'Gradients'}
     */
    function grad(f) {
        assert(isFunction(f), () => 'The f passed in grad(f) must be a function');
        return (x, dy) => {
            // x can be of any dtype, thus null as the last argument.
            const $x = convertToTensor(x, 'x', 'tf.grad', 'string_or_numeric');
            const $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;
            return ENGINE.tidy(() => {
                const { value, grads } = ENGINE.gradients(() => f($x), [$x], $dy);
                if ($dy != null) {
                    assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' +
                        'returned by f(x)');
                }
                checkGrads(grads);
                return grads[0];
            });
        };
    }
    /**
     * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,
     * which gives an array of gradients of `f()` with respect to each input
     * [`x1`,`x2`,...].
     *
     * If `dy` is passed when calling `g()`, the gradient of
     * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.
     * The provided `f` must take one or more tensors and return a single tensor
     * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.
     *
     * ```js
     * // f(a, b) = a * b
     * const f = (a, b) => a.mul(b);
     * // df / da = b, df / db = a
     * const g = tf.grads(f);
     *
     * const a = tf.tensor1d([2, 3]);
     * const b = tf.tensor1d([-2, -3]);
     * const [da, db] = g([a, b]);
     * console.log('da');
     * da.print();
     * console.log('db');
     * db.print();
     * ```
     *
     * @param f The function `f(x1, x2,...)` to compute gradients for.
     *
     * @doc {heading: 'Training', subheading: 'Gradients'}
     */
    function grads(f) {
        assert(isFunction(f), () => 'The f passed in grads(f) must be a function');
        return (args, dy) => {
            assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' +
                'of `Tensor`s or `TensorLike`s');
            // args can be of any dtype, thus null as the last argument.
            const $args = convertToTensorArray(args, 'args', 'tf.grads', 'string_or_numeric');
            const $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;
            return ENGINE.tidy(() => {
                const { value, grads } = ENGINE.gradients(() => f(...$args), $args, $dy);
                if ($dy != null) {
                    assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' +
                        'match the shape returned by f([x1,...])');
                }
                checkGrads(grads);
                return grads;
            });
        };
    }
    /**
     * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`
     * returns a metric you want to show.
     *
     * The result is a rich object with the following properties:
     * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).
     * - value: The value returned by `f(x)`.
     *
     * ```js
     * // f(x) = x ^ 2
     * const f = x => x.square();
     * // f'(x) = 2x
     * const g = tf.valueAndGrad(f);
     *
     * const x = tf.tensor1d([2, 3]);
     * const {value, grad} = g(x);
     *
     * console.log('value');
     * value.print();
     * console.log('grad');
     * grad.print();
     * ```
     *
     * @doc {heading: 'Training', subheading: 'Gradients'}
     */
    function valueAndGrad(f) {
        assert(isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');
        return (x, dy) => {
            assert(x instanceof Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');
            assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');
            const { grads, value } = ENGINE.gradients(() => f(x), [x], dy);
            checkGrads(grads);
            return { grad: grads[0], value };
        };
    }
    /**
     * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`
     * returns a metric you want to show.
     *
     * The result is a rich object with the following properties:
     * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).
     * - value: The value returned by `f(x)`.
     *
     * ```js
     * // f(a, b) = a * b
     * const f = (a, b) => a.mul(b);
     * // df/da = b, df/db = a
     * const g = tf.valueAndGrads(f);
     *
     * const a = tf.tensor1d([2, 3]);
     * const b = tf.tensor1d([-2, -3]);
     * const {value, grads} = g([a, b]);
     *
     * const [da, db] = grads;
     *
     * console.log('value');
     * value.print();
     *
     * console.log('da');
     * da.print();
     * console.log('db');
     * db.print();
     * ```
     *
     * @doc {heading: 'Training', subheading: 'Gradients'}
     */
    function valueAndGrads(f) {
        assert(isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');
        return (args, dy) => {
            assert(Array.isArray(args) && args.every(arg => arg instanceof Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' +
                'tensors');
            assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');
            const res = ENGINE.gradients(() => f(...args), args, dy);
            if (dy != null) {
                assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +
                    'match the shape returned by f([x1,...])');
            }
            checkGrads(res.grads);
            return res;
        };
    }
    /**
     * Computes and returns the gradient of f(x) with respect to the list of
     * trainable variables provided by `varList`. If no list is provided, it
     * defaults to all trainable variables.
     *
     * ```js
     * const a = tf.variable(tf.tensor1d([3, 4]));
     * const b = tf.variable(tf.tensor1d([5, 6]));
     * const x = tf.tensor1d([1, 2]);
     *
     * // f(a, b) = a * x ^ 2 + b * x
     * const f = () => a.mul(x.square()).add(b.mul(x)).sum();
     * // df/da = x ^ 2, df/db = x
     * const {value, grads} = tf.variableGrads(f);
     *
     * Object.keys(grads).forEach(varName => grads[varName].print());
     * ```
     *
     * @param f The function to execute. f() should return a scalar.
     * @param varList The list of variables to compute the gradients with respect
     *     to. Defaults to all trainable variables.
     * @returns An object with the following keys and values:
     *   - `value`: The value of the function `f`.
     *   - `grads`: A map from the names of the variables to the gradients.
     *     If the `varList` argument is provided explicitly and contains a subset of
     *     non-trainable variables, this map in the return value will contain keys
     *     that map the names of the non-trainable variables to `null`.
     *
     * @doc {heading: 'Training', subheading: 'Gradients'}
     */
    function variableGrads(f, varList) {
        assert(isFunction(f), () => 'The f passed in variableGrads(f) must be a function');
        assert(varList == null ||
            Array.isArray(varList) && varList.every(v => v instanceof Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' +
            'of variables');
        const specifiedVarList = varList != null;
        if (!specifiedVarList) {
            // Get all of the trainable variables.
            varList = [];
            for (const varName in ENGINE.registeredVariables) {
                varList.push(ENGINE.registeredVariables[varName]);
            }
        }
        const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null;
        // Prune non-trainable variables.
        const originalVarCount = varList.length;
        varList = varList.filter(variable => variable.trainable);
        assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` +
            `be trainable, but none of the ${originalVarCount} variables is ` +
            `trainable.`);
        const allowNoGradients = true;
        const { value, grads } = ENGINE.gradients(f, varList, null, allowNoGradients);
        assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' +
            'the loss function y=f(x). Please make sure the operations that ' +
            'use variables are inside the function f passed to minimize().');
        assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` +
            `returned a rank-${value.rank} tensor`);
        const namedGrads = {};
        varList.forEach((v, i) => {
            if (grads[i] != null) {
                namedGrads[v.name] = grads[i];
            }
        });
        if (specifiedNonTrainable != null) {
            // If varList is explicitly provided and contains non-trainable values,
            // add them to the returned gradients with `null` values.
            specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);
        }
        return { value, grads: namedGrads };
    }
    /**
     * Overrides the gradient computation of a function `f`.
     *
     * Takes a function
     * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`
     * and returns another function `g(...inputs)` which takes the same inputs as
     * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients
     * with respect to each input of `f` are computed using `f().gradFunc`.
     *
     * The `save` function passsed to `f` should be used for saving tensors needed
     * in the gradient. And the `saved` passed to the `gradFunc` is a
     * `NamedTensorMap`, which contains those saved tensor.
     *
     * ```js
     * const customOp = tf.customGrad((x, save) => {
     *   // Save x to make sure it's available later for the gradient.
     *   save([x]);
     *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);
     *   return {
     *     value: x.square(),
     *     // Note `saved.x` which points to the `x` we saved earlier.
     *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]
     *   };
     * });
     *
     * const x = tf.tensor1d([-1, -2, 3]);
     * const dx = tf.grad(x => customOp(x));
     *
     * console.log(`f(x):`);
     * customOp(x).print();
     * console.log(`f'(x):`);
     * dx(x).print();
     * ```
     *
     * @param f The function to evaluate in forward mode, which should return
     *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`
     *     returns the custom gradients of `f` with respect to its inputs.
     *
     * @doc {heading: 'Training', subheading: 'Gradients'}
     */
    function customGrad(f) {
        return ENGINE.customGrad(f);
    }
    function checkGrads(grads) {
        const numNullGradients = grads.filter(g => g == null).length;
        if (numNullGradients > 0) {
            throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes `-1 * x` element-wise.
     *
     * ```js
     * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);
     *
     * x.neg().print();  // or tf.neg(x)
     * ```
     *
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function neg_(x) {
        const $x = convertToTensor(x, 'x', 'neg');
        const inputs = { x: $x };
        return ENGINE.runKernel(Neg, inputs);
    }
    const neg$2 = op({ neg_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`
     *
     * ```js
     * const x = tf.tensor1d([0, 1, -1, .7]);
     *
     * x.softplus().print();  // or tf.softplus(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function softplus_(x) {
        const $x = convertToTensor(x, 'x', 'softplus');
        const inputs = { x: $x };
        return ENGINE.runKernel(Softplus, inputs);
    }
    const softplus$2 = op({ softplus_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes log sigmoid of the input `tf.Tensor` element-wise:
     * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.
     *
     * ```js
     * const x = tf.tensor1d([0, 1, -1, .7]);
     *
     * x.logSigmoid().print();  // or tf.logSigmoid(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function logSigmoid_(x) {
        const $x = convertToTensor(x, 'x', 'logSigmoid');
        // Use a custom gradient to maintain previous implementation.
        // There is no LogSigmoid kernel in TF so we can't use engine.runKernel
        // directly
        const customOp = customGrad((x) => {
            // TODO(yassogba) we can remove the chained softplus call here only
            // after backends have modualrized softplus at which point we can call
            // engine runKernel(..., Sotfplus, ...) directly.
            const value = neg$2(softplus$2(neg$2(x)));
            const gradFunc = (dy) => {
                const derX = mul(dy, sigmoid$2(neg$2(x)));
                return derX;
            };
            return { value, gradFunc };
        });
        return customOp($x);
    }
    const logSigmoid = op({ logSigmoid_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the maximum of elements across dimensions of a `tf.Tensor`.
     *
     * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
     * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
     * `axes`. If `keepDims` is true, the reduced dimensions are retained with
     * length 1. If `axes` has no entries, all dimensions are reduced, and an
     * `tf.Tensor` with a single element is returned.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3]);
     *
     * x.max().print();  // or tf.max(x)
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * const axis = 1;
     * x.max(axis).print();  // or tf.max(x, axis)
     * ```
     *
     * @param x The input tensor.
     * @param axis The dimension(s) to reduce. By default it reduces
     *     all dimensions.
     * @param keepDims If true, retains reduced dimensions with size 1.
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function max_(x, axis = null, keepDims = false) {
        const $x = convertToTensor(x, 'x', 'max');
        const inputs = { x: $x };
        const attrs = { reductionIndices: axis, keepDims };
        return ENGINE.runKernel(Max, inputs, attrs);
    }
    const max$2 = op({ max_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([10, 20, 30, 40]);
     * const b = tf.tensor1d([1, 2, 3, 4]);
     *
     * a.sub(b).print();  // or tf.sub(a, b)
     * ```
     *
     * ```js
     * // Broadcast subtract a with b.
     * const a = tf.tensor1d([10, 20, 30, 40]);
     * const b = tf.scalar(5);
     *
     * a.sub(b).print();  // or tf.sub(a, b)
     * ```
     * @param a The first `tf.Tensor` to subtract from.
     * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as
     * `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function sub_(a, b) {
        let $a = convertToTensor(a, 'a', 'sub');
        let $b = convertToTensor(b, 'b', 'sub');
        [$a, $b] = makeTypesMatch($a, $b);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(Sub, inputs);
    }
    const sub$2 = op({ sub_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the sum of elements across dimensions of a `tf.Tensor`.
     *
     * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
     * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
     * `axes`. If `keepDims` is true, the reduced dimensions are retained with
     * length 1. If axes has no entries, all dimensions are reduced, and a
     * `tf.Tensor` with a single element is returned.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3]);
     *
     * x.sum().print();  // or tf.sum(x)
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * const axis = 1;
     * x.sum(axis).print();  // or tf.sum(x, axis)
     * ```
     *
     * @param x The input tensor to compute the sum over. If the dtype is `bool`
     *   it will be converted to `int32` and the output dtype will be `int32`.
     * @param axis The dimension(s) to reduce. By default it reduces
     *     all dimensions.
     * @param keepDims If true, retains reduced dimensions with size 1.
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function sum_(x, axis = null, keepDims = false) {
        let $x = convertToTensor(x, 'x', 'sum');
        if ($x.dtype === 'bool') {
            $x = cast$2($x, 'int32');
        }
        const inputs = { x: $x };
        const attrs = { axis, keepDims };
        return ENGINE.runKernel(Sum, inputs, attrs);
    }
    const sum$2 = op({ sum_ });

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the log softmax.
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3]);
     *
     * a.logSoftmax().print();  // or tf.logSoftmax(a)
     * ```
     *
     * ```js
     * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
     *
     * a.logSoftmax().print();  // or tf.logSoftmax(a)
     * ```
     *
     * @param logits The logits array.
     * @param axis The dimension softmax would be performed on. Defaults to `-1`
     *     which indicates the last dimension.
     *
     * @doc {heading: 'Operations', subheading: 'Normalization'}
     */
    function logSoftmax_(logits, axis = -1) {
        const $logits = convertToTensor(logits, 'logits', 'logSoftmax');
        if (axis === -1) {
            axis = $logits.rank - 1;
        }
        if (axis !== $logits.rank - 1) {
            throw Error('Log Softmax along a non-last dimension is not yet supported. ' +
                `Logits was rank ${$logits.rank} and axis was ${axis}`);
        }
        // const forward: ForwardFunc<Tensor> = (backend, save) => {
        //   const keepDims = true;
        //   const xMax = max(logits, axis, true);
        //   const shifted = sub(logits, xMax);
        //   const value =
        //       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,
        //       keepDims)));
        //   save([value]);
        //   return value;
        // };
        // Use a custom gradient for numerical stability.
        const customOp = customGrad((logits, save) => {
            const keepDims = true;
            const xMax = max$2(logits, axis, true);
            const shifted = sub$2(logits, xMax);
            const value = sub$2(cast$2(shifted, 'float32'), log$2(sum$2(exp$2(shifted), axis, keepDims)));
            save([value]);
            const gradFunc = (dy, saved) => {
                const [value] = saved;
                const keepDims = true;
                const softmax = exp$2(value);
                return sub$2(dy, mul(sum$2(dy, axis, keepDims), softmax));
            };
            return { value, gradFunc };
        });
        return customOp($logits);
        // TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.
        // const inputs: LogSoftmaxInputs = {logits: $logits};
        // const attrs: LogSoftmaxAttrs = {axis};
        // return ENGINE.runKernel(
        //            LogSoftmax, inputs as {} as NamedTensorMap,
        //            attrs as {} as NamedAttrMap);
    }
    const logSoftmax = op({ logSoftmax_ });

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns true if the axis specifies the inner most dimensions of the
     * array.
     */
    function axesAreInnerMostDims(axes, rank) {
        for (let i = 0; i < axes.length; ++i) {
            if (axes[axes.length - i - 1] !== rank - 1 - i) {
                return false;
            }
        }
        return true;
    }
    function combineLocations(outputLoc, reduceLoc, axes) {
        const rank = outputLoc.length + reduceLoc.length;
        const loc = [];
        let outIdx = 0;
        let reduceIdx = 0;
        for (let dim = 0; dim < rank; dim++) {
            if (axes.indexOf(dim) === -1) {
                loc.push(outputLoc[outIdx++]);
            }
            else {
                loc.push(reduceLoc[reduceIdx++]);
            }
        }
        return loc;
    }
    function computeOutAndReduceShapes(aShape, axes) {
        const outShape = [];
        const rank = aShape.length;
        for (let dim = 0; dim < rank; dim++) {
            if (axes.indexOf(dim) === -1) {
                outShape.push(aShape[dim]);
            }
        }
        const reduceShape = axes.map(dim => aShape[dim]);
        return [outShape, reduceShape];
    }
    function expandShapeToKeepDim(shape, axes) {
        const reduceSubShape = axes.map(x => 1);
        return combineLocations(shape, reduceSubShape, axes);
    }
    function assertAxesAreInnerMostDims(msg, axes, rank) {
        assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` +
            `Got axes ${axes} and rank-${rank} input.`);
    }
    /**
     * Returns the axes permutation to be used with `tf.transpose`, if such
     * permutation is necessary. Otherwise it returns null. This method is used by
     * operations that operate only on inner-most axes.
     */
    function getAxesPermutation(axes, rank) {
        if (axesAreInnerMostDims(axes, rank)) {
            return null;
        }
        const result = [];
        for (let i = 0; i < rank; ++i) {
            if (axes.indexOf(i) === -1) {
                result.push(i);
            }
        }
        axes.forEach(axis => result.push(axis));
        return result;
    }
    /** Returns the axes permutation that undoes the original permutation. */
    function getUndoAxesPermutation(axes) {
        return axes.map((axis, i) => [i, axis])
            .sort((a, b) => a[1] - b[1])
            .map(x => x[0]);
    }
    function getInnerMostAxes(numAxes, rank) {
        const res = [];
        for (let i = rank - numAxes; i < rank; ++i) {
            res.push(i);
        }
        return res;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the log(sum(exp(elements across the reduction dimensions)).
     *
     * Reduces the input along the dimensions given in `axis`. Unless `keepDims`
     * is true, the rank of the array is reduced by 1 for each entry in `axis`.
     * If `keepDims` is true, the reduced dimensions are retained with length 1.
     * If `axis` has no entries, all dimensions are reduced, and an array with a
     * single element is returned.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3]);
     *
     * x.logSumExp().print();  // or tf.logSumExp(x)
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * const axis = 1;
     * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)
     * ```
     * @param x The input tensor.
     * @param axis The dimension(s) to reduce. If null (the default),
     *     reduces all dimensions.
     * @param keepDims If true, retains reduced dimensions with length
     *     of 1. Defaults to false.
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function logSumExp_(x, axis = null, keepDims = false) {
        const $x = convertToTensor(x, 'x', 'logSumExp');
        const axes = parseAxisParam(axis, $x.shape);
        const xMax = max$2($x, axes, true /* keepDims */);
        const a = sub$2($x, xMax);
        const b = exp$2(a);
        const c = sum$2(b, axes);
        const d = log$2(c);
        const res = add$1(reshape$2(xMax, d.shape), d);
        if (keepDims) {
            const newShape = expandShapeToKeepDim(res.shape, axes);
            return reshape$2(res, newShape);
        }
        return res;
    }
    const logSumExp = op({ logSumExp_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the truth value of `a AND b` element-wise. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([false, false, true, true], 'bool');
     * const b = tf.tensor1d([false, true, false, true], 'bool');
     *
     * a.logicalAnd(b).print();
     * ```
     *
     * @param a The first input tensor. Must be of dtype bool.
     * @param b The second input tensor. Must be of dtype bool.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function logicalAnd_(a, b) {
        const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');
        const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(LogicalAnd, inputs);
    }
    const logicalAnd$2 = op({ logicalAnd_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the truth value of `NOT x` element-wise.
     *
     * ```js
     * const a = tf.tensor1d([false, true], 'bool');
     *
     * a.logicalNot().print();
     * ```
     *
     * @param x The input tensor. Must be of dtype 'bool'.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function logicalNot_(x) {
        const $x = convertToTensor(x, 'x', 'logicalNot', 'bool');
        const inputs = { x: $x };
        return ENGINE.runKernel(LogicalNot, inputs);
    }
    const logicalNot$2 = op({ logicalNot_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the truth value of `a OR b` element-wise. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([false, false, true, true], 'bool');
     * const b = tf.tensor1d([false, true, false, true], 'bool');
     *
     * a.logicalOr(b).print();
     * ```
     * @param a The first input tensor. Must be of dtype bool.
     * @param b The second input tensor. Must be of dtype bool.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function logicalOr_(a, b) {
        const $a = convertToTensor(a, 'a', 'logicalOr', 'bool');
        const $b = convertToTensor(b, 'b', 'logicalOr', 'bool');
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(LogicalOr, inputs);
    }
    const logicalOr$2 = op({ logicalOr_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([false, false, true, true], 'bool');
     * const b = tf.tensor1d([false, true, false, true], 'bool');
     *
     * a.logicalXor(b).print();
     * ```
     *
     * @param a The first input tensor. Must be of dtype bool.
     * @param b The second input tensor. Must be of dtype bool.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function logicalXor_(a, b) {
        const $a = convertToTensor(a, 'a', 'logicalXor', 'bool');
        const $b = convertToTensor(b, 'b', 'logicalXor', 'bool');
        assertAndGetBroadcastShape($a.shape, $b.shape);
        // x ^ y = (x | y) & ~(x & y)
        return logicalAnd$2(logicalOr$2(a, b), logicalNot$2(logicalAnd$2(a, b)));
    }
    const logicalXor = op({ logicalXor_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the 2D max pooling of an image.
     *
     * @param x The input tensor, of rank 4 or rank 3 of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
     * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
     *     `filterSize` is a single number, then `filterHeight == filterWidth`.
     * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
     *     `strides` is a single number, then `strideHeight == strideWidth`.
     * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
     *     in which we sample input values across the height and width dimensions
     *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single
     *     number, then `dilationHeight == dilationWidth`. If it is greater than
     *     1, then all values of `strides` must be 1.
     * @param pad The type of padding algorithm.
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     *    - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     */
    function maxPool_(x, filterSize, strides, pad, dimRoundingMode) {
        const $x = convertToTensor(x, 'x', 'maxPool');
        const dilations = 1;
        let x4D = $x;
        let reshapedTo4D = false;
        if ($x.rank === 3) {
            reshapedTo4D = true;
            x4D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        }
        assert(x4D.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +
            `Got strides ${strides} and dilations '${dilations}'`);
        checkPadOnDimRoundingMode('maxPool', pad, dimRoundingMode);
        const inputs = { x: x4D };
        const attrs = { filterSize, strides, pad, dimRoundingMode };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(MaxPool, inputs, attrs);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    const maxPool$2 = op({ maxPool_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the 3D max pooling.
     *
     * ```js
     * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
     * const result = tf.maxPool3d(x, 2, 1, 'valid');
     * result.print();
     * ```
     *
     * @param x The input tensor, of rank 5 or rank 4 of shape
     *     `[batch, depth, height, width, inChannels]`.
     * @param filterSize The filter size:
     *     `[filterDepth, filterHeight, filterWidth]`.
     *     If `filterSize` is a single number,
     *     then `filterDepth == filterHeight == filterWidth`.
     * @param strides The strides of the pooling:
     *     `[strideDepth, strideHeight, strideWidth]`.
     *     If `strides` is a single number,
     *     then `strideDepth == strideHeight == strideWidth`.
     * @param pad The type of padding algorithm.
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1*1x1.
     *    - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
     *     "NDHWC". Specify the data format of the input and output data. With the
     *     default format "NDHWC", the data is stored in the order of: [batch,
     *     depth, height, width, channels]. Only "NDHWC" is currently supported.
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function maxPool3d_(x, filterSize = [1, 1, 1], strides, pad, dimRoundingMode, dataFormat = 'NDHWC') {
        const $x = convertToTensor(x, 'x', 'maxPool3d');
        let x5D = $x;
        let reshapedTo5D = false;
        if ($x.rank === 4) {
            reshapedTo5D = true;
            x5D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
        }
        assert(x5D.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
        assert(dataFormat === 'NDHWC', () => `Error in maxPool3d: Only NDHWC is currently supported, ` +
            `but got dataFormat of ${dataFormat}`);
        checkPadOnDimRoundingMode('maxPool3d', pad, dimRoundingMode);
        const inputs = { x: x5D };
        const attrs = { filterSize, strides, pad, dimRoundingMode, dataFormat };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(MaxPool3D, inputs, attrs);
        if (reshapedTo5D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
        }
        return res;
    }
    const maxPool3d$1 = op({ maxPool3d_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the 2D max pooling of an image with Argmax index.
     * The indices in argmax are flattened, so that a maximum value at position `[b,
     * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if
     * include_batch_in_index is False; `((b * height + y) * width + x) * channels
     * +c` if include_batch_in_index is True.
     *
     * The indices returned are always in `[0, height) x [0, width)` before
     * flattening.
     *
     * @param x The input tensor, of rank 4 or rank 3 of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
     * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
     *     `filterSize` is a single number, then `filterHeight == filterWidth`.
     * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
     *     `strides` is a single number, then `strideHeight == strideWidth`.
     * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
     *     "NDHWC". Specify the data format of the input and output data. With the
     *     default format "NDHWC", the data is stored in the order of: [batch,
     *     depth, height, width, channels]. Only "NDHWC" is currently supported.
     * @param pad The type of padding algorithm.
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     *    - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param includeBatchIndex Defaults to False. Whether to include batch
     *    dimension in flattened index of argmax.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {
        const $x = convertToTensor(x, 'x', 'maxPoolWithArgmax');
        const inputs = { x: $x };
        const attrs = { filterSize, strides, pad, includeBatchInIndex };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const result = ENGINE.runKernel(MaxPoolWithArgmax, inputs, attrs);
        return { result: result[0], indexes: result[1] };
    }
    const maxPoolWithArgmax = op({ maxPoolWithArgmax_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the max of a and b (`a > b ? a : b`) element-wise.
     * Supports broadcasting.
     *
     * We also expose `tf.maximumStrict` which has the same signature as this op and
     * asserts that `a` and `b` are the same shape (does not broadcast).
     *
     * ```js
     * const a = tf.tensor1d([1, 4, 3, 16]);
     * const b = tf.tensor1d([1, 2, 9, 4]);
     *
     * a.maximum(b).print();  // or tf.maximum(a, b)
     * ```
     *
     * ```js
     * // Broadcast maximum a with b.
     * const a = tf.tensor1d([2, 4, 6, 8]);
     * const b = tf.scalar(5);
     *
     * a.maximum(b).print();  // or tf.maximum(a, b)
     * ```
     *
     * @param a The first tensor.
     * @param b The second tensor. Must have the same type as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function maximum_(a, b) {
        let $a = convertToTensor(a, 'a', 'maximum');
        let $b = convertToTensor(b, 'b', 'maximum');
        [$a, $b] = makeTypesMatch($a, $b);
        if ($a.dtype === 'bool') {
            $a = cast$2($a, 'int32');
            $b = cast$2($b, 'int32');
        }
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(Maximum, inputs);
    }
    const maximum$2 = op({ maximum_ });

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the mean of elements across dimensions of a `tf.Tensor`.
     *
     * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is
     * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.
     * If `keepDims` is true, the reduced dimensions are retained with length 1.
     * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with
     * a single element is returned.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3]);
     *
     * x.mean().print();  // or tf.mean(a)
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * const axis = 1;
     * x.mean(axis).print();  // or tf.mean(x, axis)
     * ```
     *
     * @param x The input tensor.
     * @param axis The dimension(s) to reduce. By default it reduces
     *     all dimensions.
     * @param keepDims If true, retains reduced dimensions with size 1.
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function mean_(x, axis = null, keepDims = false) {
        const $x = convertToTensor(x, 'x', 'mean');
        const inputs = { x: $x };
        const attrs = { axis, keepDims };
        return ENGINE.runKernel(Mean, inputs, attrs);
    }
    const mean$1 = op({ mean_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with all elements set to 0.
     *
     * ```js
     * tf.zeros([2, 2]).print();
     * ```
     *
     * @param shape An array of integers defining the output tensor shape.
     * @param dtype The type of an element in the resulting tensor. Can
     *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function zeros$1(shape, dtype = 'float32') {
        if (dtype === 'complex64') {
            const real = zeros$1(shape, 'float32');
            const imag = zeros$1(shape, 'float32');
            return complex$2(real, imag);
        }
        const values = makeZerosTypedArray(sizeFromShape(shape), dtype);
        return ENGINE.makeTensor(values, shape, dtype);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with all elements set to 1.
     *
     * ```js
     * tf.ones([2, 2]).print();
     * ```
     *
     * @param shape An array of integers defining the output tensor shape.
     * @param dtype The type of an element in the resulting tensor. Defaults to
     *     'float'.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function ones(shape, dtype = 'float32') {
        if (dtype === 'complex64') {
            const real = ones(shape, 'float32');
            const imag = zeros$1(shape, 'float32');
            return complex$2(real, imag);
        }
        const values = makeOnesTypedArray(sizeFromShape(shape), dtype);
        return ENGINE.makeTensor(values, shape, dtype);
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Broadcasts parameters for evaluation on an N-D grid.
     *
     * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`
     * of N-D coordinate arrays for evaluating expressions on an N-D grid.
     *
     * Notes:
     * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.
     * When the `indexing` argument is set to 'xy' (the default), the broadcasting
     * instructions for the first two dimensions are swapped.
     * Examples:
     * Calling `const [X, Y] = meshgrid(x, y)` with the tensors
     *
     * ```javascript
     * const x = [1, 2, 3];
     * const y = [4, 5, 6];
     * const [X, Y] = tf.meshgrid(x, y);
     * // X = [[1, 2, 3],
     * //      [1, 2, 3],
     * //      [1, 2, 3]]
     * // Y = [[4, 4, 4],
     * //      [5, 5, 5],
     * //      [6, 6, 6]]
     * ```
     *
     * @param x Tensor with rank geq 1.
     * @param y Tensor with rank geq 1.
     * @param indexing
     *
     * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
     */
    function meshgrid(x, y, { indexing = 'xy' } = {}) {
        if (indexing !== 'xy' && indexing !== 'ij') {
            throw new TypeError(`${indexing} is not a valid third argument to meshgrid`);
        }
        if (x === undefined) {
            return [];
        }
        let $x = convertToTensor(x, 'x', 'meshgrid', x instanceof Tensor ? x.dtype : 'float32');
        if (y === undefined) {
            return [$x];
        }
        let $y = convertToTensor(y, 'y', 'meshgrid', y instanceof Tensor ? y.dtype : 'float32');
        const w = sizeFromShape($x.shape);
        const h = sizeFromShape($y.shape);
        if (indexing === 'xy') {
            $x = reshape$2($x, [1, -1]);
            $y = reshape$2($y, [-1, 1]);
            return [
                matMul$1(ones([h, 1], $x.dtype), $x),
                matMul$1($y, ones([1, w], $y.dtype)),
            ];
        }
        $x = reshape$2($x, [-1, 1]);
        $y = reshape$2($y, [1, -1]);
        return [
            matMul$1($x, ones([1, h], $x.dtype)),
            matMul$1(ones([w, 1], $y.dtype), $y),
        ];
    }

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the minimum value from the input.
     *
     * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
     * is true, the rank of the array is reduced by 1 for each entry in `axes`.
     * If `keepDims` is true, the reduced dimensions are retained with length 1.
     * If `axes` has no entries, all dimensions are reduced, and an array with a
     * single element is returned.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3]);
     *
     * x.min().print();  // or tf.min(x)
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * const axis = 1;
     * x.min(axis).print();  // or tf.min(x, axis)
     * ```
     *
     * @param x The input Tensor.
     * @param axis The dimension(s) to reduce. By default it reduces
     *     all dimensions.
     * @param keepDims If true, retains reduced dimensions with size 1.
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function min_(x, axis = null, keepDims = false) {
        const $x = convertToTensor(x, 'x', 'min');
        const inputs = { x: $x };
        const attrs = { axis, keepDims };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return ENGINE.runKernel(Min, inputs, attrs);
    }
    const min$2 = op({ min_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the min of a and b (`a < b ? a : b`) element-wise.
     * Supports broadcasting.
     *
     * We also expose `minimumStrict` which has the same signature as this op and
     * asserts that `a` and `b` are the same shape (does not broadcast).
     *
     * ```js
     * const a = tf.tensor1d([1, 4, 3, 16]);
     * const b = tf.tensor1d([1, 2, 9, 4]);
     *
     * a.minimum(b).print();  // or tf.minimum(a, b)
     * ```
     *
     * ```js
     * // Broadcast minimum a with b.
     * const a = tf.tensor1d([2, 4, 6, 8]);
     * const b = tf.scalar(5);
     *
     * a.minimum(b).print();  // or tf.minimum(a, b)
     * ```
     *
     * @param a The first tensor.
     * @param b The second tensor. Must have the same type as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function minimum_(a, b) {
        let $a = convertToTensor(a, 'a', 'minimum');
        let $b = convertToTensor(b, 'b', 'minimum');
        [$a, $b] = makeTypesMatch($a, $b);
        if ($a.dtype === 'bool') {
            $a = cast$2($a, 'int32');
            $b = cast$2($b, 'int32');
        }
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(Minimum, inputs);
    }
    const minimum$2 = op({ minimum_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Pads a `tf.Tensor` using mirror padding.
     *
     * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.
     *
     * ```js
     * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);
     * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();
     * ```
     * @param x The tensor to pad.
     * @param paddings An array of length `R` (the rank of the tensor), where
     * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
     * specifying how much to pad along each dimension of the tensor.
     * In "reflect" mode, the padded regions do not include the borders,
     * while in "symmetric" mode the padded regions do include the borders.
     * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,
     * then the output is `[1, 2, 3, 2, 1]` in "reflect" mode, and
     * `[1, 2, 3, 3, 2]` in "symmetric" mode.
     * If `mode` is "reflect" then both `paddings[D, 0]` and `paddings[D, 1]`
     * must be no greater than `x.shape[D] - 1`. If mode is "symmetric"
     * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than
     * `x.shape[D]`
     * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`
     */
    /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
    function mirrorPad_(x, paddings, mode) {
        assert(mode === 'reflect' || mode === 'symmetric', () => `Invalid mode. Mode must be either reflect or symmetric. ` +
            `Got ${mode}.`);
        const $x = convertToTensor(x, 'x', 'mirrorPad');
        if ($x.rank === 0) {
            throw new Error('mirrorPad(scalar) is not defined. ' +
                'Pass non-scalar to mirrorPad');
        }
        assert(paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. ` +
            `Got ${paddings.length}.`);
        const shapeOffset = mode === 'reflect' ? 1 : 0;
        for (let i = 0; i < $x.rank; i++) {
            assert(paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);
            assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset &&
                paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal ` +
                `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` +
                `shape ${$x.shape}`);
        }
        const attrs = { paddings, mode };
        const inputs = { x: $x };
        return ENGINE.runKernel(MirrorPad, inputs, attrs);
    }
    const mirrorPad$1 = op({ mirrorPad_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the mod of a and b element-wise.
     * `floor(x / y) * y + mod(x, y) = x`
     * Supports broadcasting.
     *
     * We also expose `tf.modStrict` which has the same signature as this op and
     * asserts that `a` and `b` are the same shape (does not broadcast).
     *
     * ```js
     * const a = tf.tensor1d([1, 4, 3, 16]);
     * const b = tf.tensor1d([1, 2, 9, 4]);
     *
     * a.mod(b).print();  // or tf.mod(a, b)
     * ```
     *
     * ```js
     * // Broadcast a mod b.
     * const a = tf.tensor1d([2, 4, 6, 8]);
     * const b = tf.scalar(5);
     *
     * a.mod(b).print();  // or tf.mod(a, b)
     * ```
     *
     * @param a The first tensor.
     * @param b The second tensor. Must have the same type as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function mod_(a, b) {
        let $a = convertToTensor(a, 'a', 'mod');
        let $b = convertToTensor(b, 'b', 'mod');
        [$a, $b] = makeTypesMatch($a, $b);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(Mod, inputs);
    }
    const mod$2 = op({ mod_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes square of `x` element-wise: `x ^ 2`
     *
     * ```js
     * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);
     *
     * x.square().print();  // or tf.square(x)
     * ```
     * @param x The input Tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function square_(x) {
        const $x = convertToTensor(x, 'x', 'square');
        const attrs = {};
        return ENGINE.runKernel('Square', { x: $x }, attrs);
    }
    const square$1 = op({ square_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Calculates the mean and variance of `x`. The mean and variance are
     * calculated by aggregating the contents of `x` across `axes`. If `x` is
     * 1-D and `axes = [0]` this is just the mean and variance of a vector.
     *
     * @param x The input tensor.
     * @param axis The dimension(s) along with to compute mean and
     *     variance. By default it reduces all dimensions.
     * @param keepDims If true, the moments have the same dimensionality as the
     *     input.
     * @return An object with two keys: `mean` and `variance`.
     *
     * @doc {heading: 'Operations', subheading: 'Normalization'}
     */
    function moments_(x, axis = null, keepDims = false) {
        x = convertToTensor(x, 'x', 'moments');
        const axes = parseAxisParam(axis, x.shape);
        const xMean = mean$1(x, axes, keepDims);
        let keepDimsShape = xMean.shape;
        if (!keepDims) {
            keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);
        }
        const devSquared = square$1(sub$2(cast$2(x, 'float32'), reshape$2(xMean, keepDimsShape)));
        const variance = mean$1(devSquared, axes, keepDims);
        return { mean: xMean, variance };
    }
    const moments = op({ moments_ });

    /**
     * Computes the next states and outputs of a stack of LSTMCells.
     *
     * Each cell output is used as input to the next cell.
     *
     * Returns `[cellState, cellOutput]`.
     *
     * Derived from tf.contrib.rn.MultiRNNCell.
     *
     * @param lstmCells Array of LSTMCell functions.
     * @param data The input to the cell.
     * @param c Array of previous cell states.
     * @param h Array of previous cell outputs.
     *
     * @doc {heading: 'Operations', subheading: 'RNN'}
     */
    function multiRNNCell_(lstmCells, data, c, h) {
        const $data = convertToTensor(data, 'data', 'multiRNNCell');
        const $c = convertToTensorArray(c, 'c', 'multiRNNCell');
        const $h = convertToTensorArray(h, 'h', 'multiRNNCell');
        let input = $data;
        const newStates = [];
        for (let i = 0; i < lstmCells.length; i++) {
            const output = lstmCells[i](input, $c[i], $h[i]);
            newStates.push(output[0]);
            newStates.push(output[1]);
            input = output[1];
        }
        const newC = [];
        const newH = [];
        for (let i = 0; i < newStates.length; i += 2) {
            newC.push(newStates[i]);
            newH.push(newStates[i + 1]);
        }
        return [newC, newH];
    }
    const multiRNNCell = op({ multiRNNCell_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with values drawn from a multinomial distribution.
     *
     * ```js
     * const probs = tf.tensor([.75, .25]);
     * tf.multinomial(probs, 3).print();
     * ```
     *
     * @param logits 1D array with unnormalized log-probabilities, or
     *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`
     *     parameter.
     * @param numSamples Number of samples to draw for each row slice.
     * @param seed The seed number.
     * @param normalized Whether the provided `logits` are normalized true
     *     probabilities (sum to 1). Defaults to false.
     * @return 1D array of shape `[numSamples]`, or 2D array of shape
     *     `[batchSize, numSamples]`, depending on the rank of the input.
     *
     * @doc {heading: 'Tensors', subheading: 'Random'}
     */
    function multinomial_(logits, numSamples, seed, normalized = false) {
        const $logits = convertToTensor(logits, 'logits', 'multinomial');
        const numOutcomes = $logits.size;
        const origRank = $logits.rank;
        if (numOutcomes < 2) {
            throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` +
                `${numOutcomes}.`);
        }
        if (origRank > 2) {
            throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);
        }
        // TODO(lina128): Investigate correct seed behavior. The code seems not allow
        // setting see to 0.
        seed = seed || Math.random();
        // The kernel only accepts (and returns) rank 2 tensors.
        const logits2D = origRank === 1 ? reshape$2($logits, [1, -1]) : $logits;
        const inputs = { logits: logits2D };
        const attrs = { numSamples, seed, normalized };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(Multinomial, inputs, attrs);
        // tslint:disable-next-line:no-unnecessary-type-assertion
        return origRank === 1 ? reshape$2(res, [res.size]) : res;
    }
    const multinomial$2 = op({ multinomial_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the truth value of (a != b) element-wise. Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3]);
     * const b = tf.tensor1d([0, 2, 3]);
     *
     * a.notEqual(b).print();
     * ```
     * @param a The first input tensor.
     * @param b The second input tensor. Must have the same dtype as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    function notEqual_(a, b) {
        let $a = convertToTensor(a, 'a', 'notEqual', 'string_or_numeric');
        let $b = convertToTensor(b, 'b', 'notEqual', 'string_or_numeric');
        [$a, $b] = makeTypesMatch($a, $b);
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        return ENGINE.runKernel(NotEqual, inputs);
    }
    const notEqual$2 = op({ notEqual_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the
     * given tensor.
     *
     * ```js
     * const x = tf.tensor([1, 2]);
     * tf.onesLike(x).print();
     * ```
     * @param x A tensor.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function onesLike_(x) {
        const $x = convertToTensor(x, 'x', 'onesLike');
        const inputs = { x: $x };
        return ENGINE.runKernel(OnesLike, inputs);
    }
    const onesLike$2 = op({ onesLike_ });

    /**
     * Computes the outer product of two vectors, `v1` and `v2`.
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3]);
     * const b = tf.tensor1d([3, 4, 5]);
     *
     * tf.outerProduct(a, b).print();
     * ```
     * @param v1 The first vector in the outer product operation.
     * @param v2 The second vector in the outer product operation.
     *
     * @doc {heading: 'Operations', subheading: 'Matrices'}
     */
    function outerProduct_(v1, v2) {
        const $v1 = convertToTensor(v1, 'v1', 'outerProduct');
        const $v2 = convertToTensor(v2, 'v2', 'outerProduct');
        assert($v1.rank === 1 && $v2.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +
            `${$v1.rank} and ${$v2.rank}.`);
        const v12D = reshape$2($v1, [-1, 1]);
        const v22D = reshape$2($v2, [1, -1]);
        return matMul$1(v12D, v22D);
    }
    const outerProduct = op({ outerProduct_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Pads a `tf.Tensor` with a given value and paddings.
     *
     * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,
     * refer to `tf.mirrorPad`
     *
     * Also available are stricter rank-specific methods with the same signature
     * as this method that assert that `paddings` is of given length.
     *   - `tf.pad1d`
     *   - `tf.pad2d`
     *   - `tf.pad3d`
     *   - `tf.pad4d`
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3, 4]);
     * x.pad([[1, 2]]).print();
     * ```
     * @param x The tensor to pad.
     * @param paddings An array of length `R` (the rank of the tensor), where
     * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
     * specifying how much to pad along each dimension of the tensor.
     * @param constantValue The pad value to use. Defaults to 0.
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    function pad_(x, paddings, constantValue = 0) {
        const $x = convertToTensor(x, 'x', 'pad');
        if ($x.rank === 0) {
            throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');
        }
        const attrs = { paddings, constantValue };
        const inputs = { x: $x };
        return ENGINE.runKernel(PadV2, inputs, attrs);
    }
    const pad = op({ pad_ });

    /**
     * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.
     */
    function pad1d_(x, paddings, constantValue = 0) {
        assert(paddings.length === 2, () => 'Invalid number of paddings. Must be length of 2.');
        return pad(x, [paddings], constantValue);
    }
    const pad1d = op({ pad1d_ });

    /**
     * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.
     */
    function pad2d_(x, paddings, constantValue = 0) {
        assert(paddings.length === 2 && paddings[0].length === 2 &&
            paddings[1].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
        return pad(x, paddings, constantValue);
    }
    const pad2d = op({ pad2d_ });

    /**
     * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.
     */
    function pad3d_(x, paddings, constantValue = 0) {
        assert(paddings.length === 3 && paddings[0].length === 2 &&
            paddings[1].length === 2 && paddings[2].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
        return pad(x, paddings, constantValue);
    }
    const pad3d = op({ pad3d_ });

    /**
     * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.
     */
    function pad4d_(x, paddings, constantValue = 0) {
        assert(paddings.length === 4 && paddings[0].length === 2 &&
            paddings[1].length === 2 && paddings[2].length === 2 &&
            paddings[3].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
        return pad(x, paddings, constantValue);
    }
    const pad4d = op({ pad4d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * This operation divides "spatial" dimensions `[1, ..., M]` of the input into
     * a grid of blocks of shape `blockShape`, and interleaves these blocks with
     * the "batch" dimension (0) such that in the output, the spatial
     * dimensions `[1, ..., M]` correspond to the position within the grid,
     * and the batch dimension combines both the position within a spatial block
     * and the original batch position. Prior to division into blocks,
     * the spatial dimensions of the input are optionally zero padded
     * according to `paddings`. See below for a precise description.
     *
     * ```js
     * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);
     * const blockShape = [2, 2];
     * const paddings = [[0, 0], [0, 0]];
     *
     * x.spaceToBatchND(blockShape, paddings).print();
     * ```
     *
     * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
     * remainingShape`, where spatialShape has `M` dimensions.
     * @param blockShape A 1-D array. Must have shape `[M]`, all values must
     * be >= 1.
     * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=
     *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad
     * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It
     * is required that
     * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`
     *
     * This operation is equivalent to the following steps:
     *
     * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input
     * according to `paddings` to produce `padded` of shape paddedShape.
     *
     * 2. Reshape `padded` to `reshapedPadded` of shape:
     * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,
     * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`
     *
     * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`
     * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,
     * paddedShape[M] / blockShape[M-1]] + remainingShape`
     *
     * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the
     * batch dimension, producing an output tensor of shape:
     * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,
     * paddedShape[M] / blockShape[M-1]] + remainingShape`
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    function spaceToBatchND_(x, blockShape, paddings) {
        const $x = convertToTensor(x, 'x', 'spaceToBatchND');
        assert($x.rank >= 1 + blockShape.length, () => `input rank ${$x.rank} should be > than [blockShape] ${blockShape.length}`);
        assert(paddings.length === blockShape.length, () => `paddings.shape[0] ${paddings.length} must be equal to [blockShape] ${blockShape.length}`);
        assert($x.shape.reduce((a, b, i) => {
            if (i > 0 && i <= blockShape.length) {
                return a &&
                    ((b + paddings[i - 1][0] + paddings[i - 1][1]) %
                        blockShape[i - 1] ===
                        0);
            }
            return a;
        }, true), () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${paddings.toString()} must be divisible by blockShapes ${blockShape.toString()}`);
        const inputs = { x: $x };
        const attrs = { blockShape, paddings };
        return ENGINE.runKernel(SpaceToBatchND, inputs, attrs);
    }
    const spaceToBatchND$2 = op({ spaceToBatchND_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Performs an N-D pooling operation
     *
     * @param input The input tensor, of rank 4 or rank 3 of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
     * @param windowShape The filter size: `[filterHeight, filterWidth]`. If
     *     `filterSize` is a single number, then `filterHeight == filterWidth`.
     * @param poolingType The type of pooling, either 'max' or 'avg'.
     * @param pad The type of padding algorithm:
     *    - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *    - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     *    - For more info, see this guide:
     *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
     *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
     * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
     *     in which we sample input values across the height and width dimensions
     *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single
     *     number, then `dilationHeight == dilationWidth`. If it is greater than
     *     1, then all values of `strides` must be 1.
     * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
     *     `strides` is a single number, then `strideHeight == strideWidth`.
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function pool_(input, windowShape, poolingType, pad, dilations, strides, dimRoundingMode) {
        if (dilations == null) {
            dilations = [1, 1];
        }
        if (strides == null) {
            strides = 1;
        }
        if (pad === 0) {
            pad = 'valid';
        }
        const $x = convertToTensor(input, 'x', 'maxPool');
        let x4D = $x;
        let reshapedTo4D = false;
        if ($x.rank === 3) {
            reshapedTo4D = true;
            x4D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        }
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in pool: Either strides or dilations must be 1. ' +
            `Got strides ${strides} and dilations '${dilations}'`);
        const convInfo = computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);
        const dilation = [convInfo.dilationHeight, convInfo.dilationWidth];
        // The following implementation does batchToSpace(pool(spaceToBatch(x)))
        // whenever dilation > 1 since the TF kernels do not support dilation > 1.
        // tslint:disable-next-line:max-line-length
        // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037
        let basePadding;
        if (pad === 'same') {
            basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);
        }
        else {
            basePadding = [[0, 0], [0, 0]];
        }
        const isDilationOne = dilation[0] === 1 && dilation[1] === 1;
        const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding);
        const convertedPad = isDilationOne ? pad : 'valid';
        const convertedX = isDilationOne ? x4D : spaceToBatchND$2(x4D, dilation, adjustedPadding);
        const forwardOp = poolingType === 'avg' ?
            () => avgPool$2(convertedX, windowShape, strides, convertedPad, dimRoundingMode) :
            () => maxPool$2(convertedX, windowShape, strides, convertedPad, dimRoundingMode);
        const y = forwardOp();
        const res = isDilationOne ? y : batchToSpaceND$2(y, dilation, adjustedCrops);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    // Helper function to compute crops and paddings for pool with dilation > 1.
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184
    function requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {
        const padStart = basePadding.map(b => b[0]);
        const origPadEnd = basePadding.map(b => b[1]);
        const fullInputShape = inputShape.concat(padStart, origPadEnd);
        const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);
        const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);
        const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);
        const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);
        return [paddings, crops];
    }
    // Helper function to compute base paddings for pool with dilation > 1.
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524
    function withSpaceToBatchBasePaddings(filterShape, dilation) {
        // Spatial dimensions of the filters and the upsampled filters in which we
        // introduce (rate - 1) zeros between consecutive filter values.
        const dilatedFilterShape = filterShape.map((s, i) => {
            return s + (s - 1) * (dilation[i] - 1);
        });
        const padExtraShape = dilatedFilterShape.map(s => s - 1);
        // When padding is odd, we pad more at end, following the same
        // convention as conv2d.
        const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));
        const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);
        return padExtraShape.map((_, i) => {
            return [padExtraStart[i], padExtraEnd[i]];
        });
    }
    const pool$1 = op({ pool_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the power of one `tf.Tensor` to another. Supports broadcasting.
     *
     * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for
     * corresponding elements in x and y. The result's dtype will be the upcasted
     * type of the `base` and `exp` dtypes.
     *
     * ```js
     * const a = tf.tensor([[2, 3], [4, 5]])
     * const b = tf.tensor([[1, 2], [3, 0]]).toInt();
     *
     * a.pow(b).print();  // or tf.pow(a, b)
     * ```
     *
     * ```js
     * const a = tf.tensor([[1, 2], [3, 4]])
     * const b = tf.tensor(2).toInt();
     *
     * a.pow(b).print();  // or tf.pow(a, b)
     * ```
     * We also expose `powStrict` which has the same signature as this op and
     * asserts that `base` and `exp` are the same shape (does not broadcast).
     *
     * @param base The base `tf.Tensor` to pow element-wise.
     * @param exp The exponent `tf.Tensor` to pow element-wise.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function pow_(base, exp) {
        let $base = convertToTensor(base, 'base', 'pow');
        let $exp = convertToTensor(exp, 'exp', 'pow');
        [$base, $exp] = makeTypesMatch($base, $exp);
        const inputs = { a: $base, b: $exp };
        return ENGINE.runKernel(Pow, inputs);
    }
    const pow$2 = op({ pow_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes leaky rectified linear element-wise with parametric alphas.
     *
     * `x < 0 ? alpha * x : f(x) = x`
     *
     * ```js
     * const x = tf.tensor1d([-1, 2, -3, 4]);
     * const alpha = tf.scalar(0.1);
     *
     * x.prelu(alpha).print();  // or tf.prelu(x, alpha)
     * ```
     * @param x The input tensor.
     * @param alpha Scaling factor for negative values.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function prelu_(x, alpha) {
        const $x = convertToTensor(x, 'x', 'prelu');
        const $alpha = convertToTensor(alpha, 'alpha', 'prelu');
        const inputs = { x: $x, alpha: $alpha };
        return ENGINE.runKernel(Prelu, inputs);
    }
    const prelu$2 = op({ prelu_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the product of elements across dimensions of a `tf.Tensor`.
     *
     * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
     * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
     * `axes`. If `keepDims` is true, the reduced dimensions are retained with
     * length 1. If `axes` has no entries, all dimensions are reduced, and a
     * `tf.Tensor` with a single element is returned.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3]);
     *
     * x.prod().print();  // or tf.prod(x)
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * const axis = 1;
     * x.prod(axis).print();  // or tf.prod(x, axis)
     * ```
     *
     * @param x The input tensor to compute the product over. If the dtype is `bool`
     *   it will be converted to `int32` and the output dtype will be `int32`.
     * @param axis The dimension(s) to reduce. By default it reduces
     *     all dimensions.
     * @param keepDims If true, retains reduced dimensions with size 1.
     *
     * @doc {heading: 'Operations', subheading: 'Reduction'}
     */
    function prod_(x, axis = null, keepDims = false) {
        let $x = convertToTensor(x, 'x', 'prod');
        if ($x.dtype === 'bool') {
            // bool is not an allowed type for the underlying kernel.
            $x = cast$2($x, 'int32');
        }
        const inputs = { x: $x };
        const attrs = { axis, keepDims };
        return ENGINE.runKernel(Prod, inputs, attrs);
    }
    const prod$2 = op({ prod_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with values sampled from a random number generator
     * function defined by the user.
     *
     * @param shape An array of integers defining the output tensor shape.
     * @param randFunction A random number generator function which is called
     * for each element in the output tensor.
     * @param dtype The data type of the output tensor. Defaults to 'float32'.
     *
     * @doc {heading: 'Tensors', subheading: 'Random'}
     */
    function rand_(shape, randFunction, dtype) {
        const size = sizeFromShape(shape);
        let values = null;
        if (dtype == null || dtype === 'float32') {
            values = new Float32Array(size);
        }
        else if (dtype === 'int32') {
            values = new Int32Array(size);
        }
        else if (dtype === 'bool') {
            values = new Uint8Array(size);
        }
        else {
            throw new Error(`Unknown data type ${dtype}`);
        }
        for (let i = 0; i < size; i++) {
            values[i] = randFunction();
        }
        return ENGINE.makeTensor(values, shape, dtype);
    }
    const rand = op({ rand_ });

    var alea$3 = {exports: {}};

    (function (module) {
    // A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
    // http://baagoe.com/en/RandomMusings/javascript/
    // https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
    // Original work is under MIT license -

    // Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal
    // in the Software without restriction, including without limitation the rights
    // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    // copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    // 
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    // 
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    // THE SOFTWARE.



    (function(global, module, define) {

    function Alea(seed) {
      var me = this, mash = Mash();

      me.next = function() {
        var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
        me.s0 = me.s1;
        me.s1 = me.s2;
        return me.s2 = t - (me.c = t | 0);
      };

      // Apply the seeding algorithm from Baagoe.
      me.c = 1;
      me.s0 = mash(' ');
      me.s1 = mash(' ');
      me.s2 = mash(' ');
      me.s0 -= mash(seed);
      if (me.s0 < 0) { me.s0 += 1; }
      me.s1 -= mash(seed);
      if (me.s1 < 0) { me.s1 += 1; }
      me.s2 -= mash(seed);
      if (me.s2 < 0) { me.s2 += 1; }
      mash = null;
    }

    function copy(f, t) {
      t.c = f.c;
      t.s0 = f.s0;
      t.s1 = f.s1;
      t.s2 = f.s2;
      return t;
    }

    function impl(seed, opts) {
      var xg = new Alea(seed),
          state = opts && opts.state,
          prng = xg.next;
      prng.int32 = function() { return (xg.next() * 0x100000000) | 0; };
      prng.double = function() {
        return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
      };
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    function Mash() {
      var n = 0xefc8249d;

      var mash = function(data) {
        data = data.toString();
        for (var i = 0; i < data.length; i++) {
          n += data.charCodeAt(i);
          var h = 0.02519603282416938 * n;
          n = h >>> 0;
          h -= n;
          h *= n;
          n = h >>> 0;
          h -= n;
          n += h * 0x100000000; // 2^32
        }
        return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
      };

      return mash;
    }


    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.alea = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(alea$3));

    var xor128$3 = {exports: {}};

    (function (module) {
    // A Javascript implementaion of the "xor128" prng algorithm by
    // George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this, strseed = '';

      me.x = 0;
      me.y = 0;
      me.z = 0;
      me.w = 0;

      // Set up generator function.
      me.next = function() {
        var t = me.x ^ (me.x << 11);
        me.x = me.y;
        me.y = me.z;
        me.z = me.w;
        return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
      };

      if (seed === (seed | 0)) {
        // Integer seed.
        me.x = seed;
      } else {
        // String seed.
        strseed += seed;
      }

      // Mix in string seed, then discard an initial batch of 64 values.
      for (var k = 0; k < strseed.length + 64; k++) {
        me.x ^= strseed.charCodeAt(k) | 0;
        me.next();
      }
    }

    function copy(f, t) {
      t.x = f.x;
      t.y = f.y;
      t.z = f.z;
      t.w = f.w;
      return t;
    }

    function impl(seed, opts) {
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xor128 = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(xor128$3));

    var xorwow$3 = {exports: {}};

    (function (module) {
    // A Javascript implementaion of the "xorwow" prng algorithm by
    // George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this, strseed = '';

      // Set up generator function.
      me.next = function() {
        var t = (me.x ^ (me.x >>> 2));
        me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
        return (me.d = (me.d + 362437 | 0)) +
           (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
      };

      me.x = 0;
      me.y = 0;
      me.z = 0;
      me.w = 0;
      me.v = 0;

      if (seed === (seed | 0)) {
        // Integer seed.
        me.x = seed;
      } else {
        // String seed.
        strseed += seed;
      }

      // Mix in string seed, then discard an initial batch of 64 values.
      for (var k = 0; k < strseed.length + 64; k++) {
        me.x ^= strseed.charCodeAt(k) | 0;
        if (k == strseed.length) {
          me.d = me.x << 10 ^ me.x >>> 4;
        }
        me.next();
      }
    }

    function copy(f, t) {
      t.x = f.x;
      t.y = f.y;
      t.z = f.z;
      t.w = f.w;
      t.v = f.v;
      t.d = f.d;
      return t;
    }

    function impl(seed, opts) {
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xorwow = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(xorwow$3));

    var xorshift7$3 = {exports: {}};

    (function (module) {
    // A Javascript implementaion of the "xorshift7" algorithm by
    // François Panneton and Pierre L'ecuyer:
    // "On the Xorgshift Random Number Generators"
    // http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this;

      // Set up generator function.
      me.next = function() {
        // Update xor generator.
        var X = me.x, i = me.i, t, v;
        t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
        t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
        t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
        t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
        t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
        X[i] = v;
        me.i = (i + 1) & 7;
        return v;
      };

      function init(me, seed) {
        var j, X = [];

        if (seed === (seed | 0)) {
          // Seed state array using a 32-bit integer.
          X[0] = seed;
        } else {
          // Seed state using a string.
          seed = '' + seed;
          for (j = 0; j < seed.length; ++j) {
            X[j & 7] = (X[j & 7] << 15) ^
                (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
          }
        }
        // Enforce an array length of 8, not all zeroes.
        while (X.length < 8) X.push(0);
        for (j = 0; j < 8 && X[j] === 0; ++j);
        if (j == 8) X[7] = -1;

        me.x = X;
        me.i = 0;

        // Discard an initial 256 values.
        for (j = 256; j > 0; --j) {
          me.next();
        }
      }

      init(me, seed);
    }

    function copy(f, t) {
      t.x = f.x.slice();
      t.i = f.i;
      return t;
    }

    function impl(seed, opts) {
      if (seed == null) seed = +(new Date);
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (state.x) copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xorshift7 = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(xorshift7$3));

    var xor4096$3 = {exports: {}};

    (function (module) {
    // A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
    //
    // This fast non-cryptographic random number generator is designed for
    // use in Monte-Carlo algorithms. It combines a long-period xorshift
    // generator with a Weyl generator, and it passes all common batteries
    // of stasticial tests for randomness while consuming only a few nanoseconds
    // for each prng generated.  For background on the generator, see Brent's
    // paper: "Some long-period random number generators using shifts and xors."
    // http://arxiv.org/pdf/1004.3115v1.pdf
    //
    // Usage:
    //
    // var xor4096 = require('xor4096');
    // random = xor4096(1);                        // Seed with int32 or string.
    // assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
    // assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
    //
    // For nonzero numeric keys, this impelementation provides a sequence
    // identical to that by Brent's xorgens 3 implementaion in C.  This
    // implementation also provides for initalizing the generator with
    // string seeds, or for saving and restoring the state of the generator.
    //
    // On Chrome, this prng benchmarks about 2.1 times slower than
    // Javascript's built-in Math.random().

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this;

      // Set up generator function.
      me.next = function() {
        var w = me.w,
            X = me.X, i = me.i, t, v;
        // Update Weyl generator.
        me.w = w = (w + 0x61c88647) | 0;
        // Update xor generator.
        v = X[(i + 34) & 127];
        t = X[i = ((i + 1) & 127)];
        v ^= v << 13;
        t ^= t << 17;
        v ^= v >>> 15;
        t ^= t >>> 12;
        // Update Xor generator array state.
        v = X[i] = v ^ t;
        me.i = i;
        // Result is the combination.
        return (v + (w ^ (w >>> 16))) | 0;
      };

      function init(me, seed) {
        var t, v, i, j, w, X = [], limit = 128;
        if (seed === (seed | 0)) {
          // Numeric seeds initialize v, which is used to generates X.
          v = seed;
          seed = null;
        } else {
          // String seeds are mixed into v and X one character at a time.
          seed = seed + '\0';
          v = 0;
          limit = Math.max(limit, seed.length);
        }
        // Initialize circular array and weyl value.
        for (i = 0, j = -32; j < limit; ++j) {
          // Put the unicode characters into the array, and shuffle them.
          if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
          // After 32 shuffles, take v as the starting w value.
          if (j === 0) w = v;
          v ^= v << 10;
          v ^= v >>> 15;
          v ^= v << 4;
          v ^= v >>> 13;
          if (j >= 0) {
            w = (w + 0x61c88647) | 0;     // Weyl.
            t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
            i = (0 == t) ? i + 1 : 0;     // Count zeroes.
          }
        }
        // We have detected all zeroes; make the key nonzero.
        if (i >= 128) {
          X[(seed && seed.length || 0) & 127] = -1;
        }
        // Run the generator 512 times to further mix the state before using it.
        // Factoring this as a function slows the main generator, so it is just
        // unrolled here.  The weyl generator is not advanced while warming up.
        i = 127;
        for (j = 4 * 128; j > 0; --j) {
          v = X[(i + 34) & 127];
          t = X[i = ((i + 1) & 127)];
          v ^= v << 13;
          t ^= t << 17;
          v ^= v >>> 15;
          t ^= t >>> 12;
          X[i] = v ^ t;
        }
        // Storing state as object members is faster than using closure variables.
        me.w = w;
        me.X = X;
        me.i = i;
      }

      init(me, seed);
    }

    function copy(f, t) {
      t.i = f.i;
      t.w = f.w;
      t.X = f.X.slice();
      return t;
    }
    function impl(seed, opts) {
      if (seed == null) seed = +(new Date);
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (state.X) copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xor4096 = impl;
    }

    })(
      commonjsGlobal,                                     // window object or global
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(xor4096$3));

    var tychei$3 = {exports: {}};

    (function (module) {
    // A Javascript implementaion of the "Tyche-i" prng algorithm by
    // Samuel Neves and Filipe Araujo.
    // See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this, strseed = '';

      // Set up generator function.
      me.next = function() {
        var b = me.b, c = me.c, d = me.d, a = me.a;
        b = (b << 25) ^ (b >>> 7) ^ c;
        c = (c - d) | 0;
        d = (d << 24) ^ (d >>> 8) ^ a;
        a = (a - b) | 0;
        me.b = b = (b << 20) ^ (b >>> 12) ^ c;
        me.c = c = (c - d) | 0;
        me.d = (d << 16) ^ (c >>> 16) ^ a;
        return me.a = (a - b) | 0;
      };

      /* The following is non-inverted tyche, which has better internal
       * bit diffusion, but which is about 25% slower than tyche-i in JS.
      me.next = function() {
        var a = me.a, b = me.b, c = me.c, d = me.d;
        a = (me.a + me.b | 0) >>> 0;
        d = me.d ^ a; d = d << 16 ^ d >>> 16;
        c = me.c + d | 0;
        b = me.b ^ c; b = b << 12 ^ d >>> 20;
        me.a = a = a + b | 0;
        d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
        me.c = c = c + d | 0;
        b = b ^ c;
        return me.b = (b << 7 ^ b >>> 25);
      }
      */

      me.a = 0;
      me.b = 0;
      me.c = 2654435769 | 0;
      me.d = 1367130551;

      if (seed === Math.floor(seed)) {
        // Integer seed.
        me.a = (seed / 0x100000000) | 0;
        me.b = seed | 0;
      } else {
        // String seed.
        strseed += seed;
      }

      // Mix in string seed, then discard an initial batch of 64 values.
      for (var k = 0; k < strseed.length + 20; k++) {
        me.b ^= strseed.charCodeAt(k) | 0;
        me.next();
      }
    }

    function copy(f, t) {
      t.a = f.a;
      t.b = f.b;
      t.c = f.c;
      t.d = f.d;
      return t;
    }
    function impl(seed, opts) {
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.tychei = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(tychei$3));

    var seedrandom$3 = {exports: {}};

    /*
    Copyright 2014 David Bau.

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    */

    (function (module) {
    (function (pool, math) {
    //
    // The following constants are related to IEEE 754 limits.
    //
    var global = this,
        width = 256,        // each RC4 output is 0 <= x < 256
        chunks = 6,         // at least six RC4 outputs for each double
        digits = 52,        // there are 52 significant digits in a double
        rngname = 'random', // rngname: name for Math.random and Math.seedrandom
        startdenom = math.pow(width, chunks),
        significance = math.pow(2, digits),
        overflow = significance * 2,
        mask = width - 1,
        nodecrypto;         // node.js crypto module, initialized at the bottom.

    //
    // seedrandom()
    // This is the seedrandom function described above.
    //
    function seedrandom(seed, options, callback) {
      var key = [];
      options = (options == true) ? { entropy: true } : (options || {});

      // Flatten the seed string or build one from local entropy if needed.
      var shortseed = mixkey(flatten(
        options.entropy ? [seed, tostring(pool)] :
        (seed == null) ? autoseed() : seed, 3), key);

      // Use the seed to initialize an ARC4 generator.
      var arc4 = new ARC4(key);

      // This function returns a random double in [0, 1) that contains
      // randomness in every bit of the mantissa of the IEEE 754 value.
      var prng = function() {
        var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
            d = startdenom,                 //   and denominator d = 2 ^ 48.
            x = 0;                          //   and no 'extra last byte'.
        while (n < significance) {          // Fill up all significant digits by
          n = (n + x) * width;              //   shifting numerator and
          d *= width;                       //   denominator and generating a
          x = arc4.g(1);                    //   new least-significant-byte.
        }
        while (n >= overflow) {             // To avoid rounding up, before adding
          n /= 2;                           //   last byte, shift everything
          d /= 2;                           //   right using integer math until
          x >>>= 1;                         //   we have exactly the desired bits.
        }
        return (n + x) / d;                 // Form the number within [0, 1).
      };

      prng.int32 = function() { return arc4.g(4) | 0; };
      prng.quick = function() { return arc4.g(4) / 0x100000000; };
      prng.double = prng;

      // Mix the randomness into accumulated entropy.
      mixkey(tostring(arc4.S), pool);

      // Calling convention: what to return as a function of prng, seed, is_math.
      return (options.pass || callback ||
          function(prng, seed, is_math_call, state) {
            if (state) {
              // Load the arc4 state from the given state if it has an S array.
              if (state.S) { copy(state, arc4); }
              // Only provide the .state method if requested via options.state.
              prng.state = function() { return copy(arc4, {}); };
            }

            // If called as a method of Math (Math.seedrandom()), mutate
            // Math.random because that is how seedrandom.js has worked since v1.0.
            if (is_math_call) { math[rngname] = prng; return seed; }

            // Otherwise, it is a newer calling convention, so return the
            // prng directly.
            else return prng;
          })(
      prng,
      shortseed,
      'global' in options ? options.global : (this == math),
      options.state);
    }
    math['seed' + rngname] = seedrandom;

    //
    // ARC4
    //
    // An ARC4 implementation.  The constructor takes a key in the form of
    // an array of at most (width) integers that should be 0 <= x < (width).
    //
    // The g(count) method returns a pseudorandom integer that concatenates
    // the next (count) outputs from ARC4.  Its return value is a number x
    // that is in the range 0 <= x < (width ^ count).
    //
    function ARC4(key) {
      var t, keylen = key.length,
          me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

      // The empty key [] is treated as [0].
      if (!keylen) { key = [keylen++]; }

      // Set up S using the standard key scheduling algorithm.
      while (i < width) {
        s[i] = i++;
      }
      for (i = 0; i < width; i++) {
        s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
        s[j] = t;
      }

      // The "g" method returns the next (count) outputs as one number.
      (me.g = function(count) {
        // Using instance members instead of closure state nearly doubles speed.
        var t, r = 0,
            i = me.i, j = me.j, s = me.S;
        while (count--) {
          t = s[i = mask & (i + 1)];
          r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
        }
        me.i = i; me.j = j;
        return r;
        // For robust unpredictability, the function call below automatically
        // discards an initial batch of values.  This is called RC4-drop[256].
        // See http://google.com/search?q=rsa+fluhrer+response&btnI
      })(width);
    }

    //
    // copy()
    // Copies internal state of ARC4 to or from a plain object.
    //
    function copy(f, t) {
      t.i = f.i;
      t.j = f.j;
      t.S = f.S.slice();
      return t;
    }
    //
    // flatten()
    // Converts an object tree to nested arrays of strings.
    //
    function flatten(obj, depth) {
      var result = [], typ = (typeof obj), prop;
      if (depth && typ == 'object') {
        for (prop in obj) {
          try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
        }
      }
      return (result.length ? result : typ == 'string' ? obj : obj + '\0');
    }

    //
    // mixkey()
    // Mixes a string seed into a key that is an array of integers, and
    // returns a shortened string seed that is equivalent to the result key.
    //
    function mixkey(seed, key) {
      var stringseed = seed + '', smear, j = 0;
      while (j < stringseed.length) {
        key[mask & j] =
          mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
      }
      return tostring(key);
    }

    //
    // autoseed()
    // Returns an object for autoseeding, using window.crypto and Node crypto
    // module if available.
    //
    function autoseed() {
      try {
        var out;
        if (nodecrypto && (out = nodecrypto.randomBytes)) {
          // The use of 'out' to remember randomBytes makes tight minified code.
          out = out(width);
        } else {
          out = new Uint8Array(width);
          (global.crypto || global.msCrypto).getRandomValues(out);
        }
        return tostring(out);
      } catch (e) {
        var browser = global.navigator,
            plugins = browser && browser.plugins;
        return [+new Date, global, plugins, global.screen, tostring(pool)];
      }
    }

    //
    // tostring()
    // Converts an array of charcodes to a string
    //
    function tostring(a) {
      return String.fromCharCode.apply(0, a);
    }

    //
    // When seedrandom.js is loaded, we immediately mix a few bits
    // from the built-in RNG into the entropy pool.  Because we do
    // not want to interfere with deterministic PRNG state later,
    // seedrandom will not call math.random on its own again after
    // initialization.
    //
    mixkey(math.random(), pool);

    //
    // Nodejs and AMD support: export the implementation as a module using
    // either convention.
    //
    if (module.exports) {
      module.exports = seedrandom;
      // When in node.js, try using crypto package for autoseeding.
      try {
        nodecrypto = require('crypto');
      } catch (ex) {}
    }

    // End anonymous scope, and pass initial values.
    })(
      [],     // pool: entropy pool starts empty
      Math    // math: package containing random, pow, and seedrandom
    );
    }(seedrandom$3));

    // A library of seedable RNGs implemented in Javascript.
    //
    // Usage:
    //
    // var seedrandom = require('seedrandom');
    // var random = seedrandom(1); // or any seed.
    // var x = random();       // 0 <= x < 1.  Every bit is random.
    // var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

    // alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
    // Period: ~2^116
    // Reported to pass all BigCrush tests.
    var alea$2 = alea$3.exports;

    // xor128, a pure xor-shift generator by George Marsaglia.
    // Period: 2^128-1.
    // Reported to fail: MatrixRank and LinearComp.
    var xor128$2 = xor128$3.exports;

    // xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
    // Period: 2^192-2^32
    // Reported to fail: CollisionOver, SimpPoker, and LinearComp.
    var xorwow$2 = xorwow$3.exports;

    // xorshift7, by François Panneton and Pierre L'ecuyer, takes
    // a different approach: it adds robustness by allowing more shifts
    // than Marsaglia's original three.  It is a 7-shift generator
    // with 256 bits, that passes BigCrush with no systmatic failures.
    // Period 2^256-1.
    // No systematic BigCrush failures reported.
    var xorshift7$2 = xorshift7$3.exports;

    // xor4096, by Richard Brent, is a 4096-bit xor-shift with a
    // very long period that also adds a Weyl generator. It also passes
    // BigCrush with no systematic failures.  Its long period may
    // be useful if you have many generators and need to avoid
    // collisions.
    // Period: 2^4128-2^32.
    // No systematic BigCrush failures reported.
    var xor4096$2 = xor4096$3.exports;

    // Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
    // number generator derived from ChaCha, a modern stream cipher.
    // https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
    // Period: ~2^127
    // No systematic BigCrush failures reported.
    var tychei$2 = tychei$3.exports;

    // The original ARC4-based prng included in this library.
    // Period: ~2^1600
    var sr$1 = seedrandom$3.exports;

    sr$1.alea = alea$2;
    sr$1.xor128 = xor128$2;
    sr$1.xorwow = xorwow$2;
    sr$1.xorshift7 = xorshift7$2;
    sr$1.xor4096 = xor4096$2;
    sr$1.tychei = tychei$2;

    var seedrandom$2 = sr$1;

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // https://en.wikipedia.org/wiki/Marsaglia_polar_method
    class MPRandGauss {
        constructor(mean, stdDeviation, dtype, truncated, seed) {
            this.mean = mean;
            this.stdDev = stdDeviation;
            this.dtype = dtype;
            this.nextVal = NaN;
            this.truncated = truncated;
            if (this.truncated) {
                this.upper = this.mean + this.stdDev * 2;
                this.lower = this.mean - this.stdDev * 2;
            }
            const seedValue = seed ? seed : Math.random();
            this.random = seedrandom$2.alea(seedValue.toString());
        }
        /** Returns next sample from a Gaussian distribution. */
        nextValue() {
            if (!isNaN(this.nextVal)) {
                const value = this.nextVal;
                this.nextVal = NaN;
                return value;
            }
            let resultX, resultY;
            let isValid = false;
            while (!isValid) {
                let v1, v2, s;
                do {
                    v1 = 2 * this.random() - 1;
                    v2 = 2 * this.random() - 1;
                    s = v1 * v1 + v2 * v2;
                } while (s >= 1 || s === 0);
                const mul = Math.sqrt(-2.0 * Math.log(s) / s);
                resultX = this.mean + this.stdDev * v1 * mul;
                resultY = this.mean + this.stdDev * v2 * mul;
                if (!this.truncated || this.isValidTruncated(resultX)) {
                    isValid = true;
                }
            }
            if (!this.truncated || this.isValidTruncated(resultY)) {
                this.nextVal = this.convertValue(resultY);
            }
            return this.convertValue(resultX);
        }
        /** Handles proper rounding for non-floating-point numbers. */
        convertValue(value) {
            if (this.dtype == null || this.dtype === 'float32') {
                return value;
            }
            return Math.round(value);
        }
        /** Returns true if less than 2-standard-deviations from the mean. */
        isValidTruncated(value) {
            return value <= this.upper && value >= this.lower;
        }
    }
    // Marsaglia, George, and Wai Wan Tsang. 2000. "A Simple Method for Generating
    // Gamma Variables."
    class RandGamma {
        constructor(alpha, beta, dtype, seed) {
            this.alpha = alpha;
            this.beta = 1 / beta; // convert rate to scale parameter
            this.dtype = dtype;
            const seedValue = seed ? seed : Math.random();
            this.randu = seedrandom$2.alea(seedValue.toString());
            this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());
            if (alpha < 1) {
                this.d = alpha + (2 / 3);
            }
            else {
                this.d = alpha - (1 / 3);
            }
            this.c = 1 / Math.sqrt(9 * this.d);
        }
        /** Returns next sample from a gamma distribution. */
        nextValue() {
            let x2, v0, v1, x, u, v;
            while (true) {
                do {
                    x = this.randn.nextValue();
                    v = 1 + (this.c * x);
                } while (v <= 0);
                v *= v * v;
                x2 = x * x;
                v0 = 1 - (0.331 * x2 * x2);
                v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));
                u = this.randu();
                if (u < v0 || Math.log(u) < v1) {
                    break;
                }
            }
            v = (1 / this.beta) * this.d * v;
            if (this.alpha < 1) {
                v *= Math.pow(this.randu(), 1 / this.alpha);
            }
            return this.convertValue(v);
        }
        /** Handles proper rounding for non-floating-point numbers. */
        convertValue(value) {
            if (this.dtype === 'float32') {
                return value;
            }
            return Math.round(value);
        }
    }
    class UniformRandom {
        constructor(min = 0, max = 1, dtype, seed) {
            /** Handles proper rounding for non floating point numbers. */
            this.canReturnFloat = () => (this.dtype == null || this.dtype === 'float32');
            this.min = min;
            this.range = max - min;
            this.dtype = dtype;
            if (seed == null) {
                seed = Math.random();
            }
            if (typeof seed === 'number') {
                seed = seed.toString();
            }
            if (!this.canReturnFloat() && this.range <= 1) {
                throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);
            }
            this.random = seedrandom$2.alea(seed);
        }
        convertValue(value) {
            if (this.canReturnFloat()) {
                return value;
            }
            return Math.round(value);
        }
        nextValue() {
            return this.convertValue(this.min + this.range * this.random());
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with values sampled from a gamma distribution.
     *
     * ```js
     * tf.randomGamma([2, 2], 1).print();
     * ```
     *
     * @param shape An array of integers defining the output tensor shape.
     * @param alpha The shape parameter of the gamma distribution.
     * @param beta The inverse scale parameter of the gamma distribution. Defaults
     *     to 1.
     * @param dtype The data type of the output. Defaults to float32.
     * @param seed The seed for the random number generator.
     *
     * @doc {heading: 'Tensors', subheading: 'Random'}
     */
    function randomGamma_(shape, alpha, beta = 1, dtype = 'float32', seed) {
        if (beta == null) {
            beta = 1;
        }
        if (dtype == null) {
            dtype = 'float32';
        }
        if (dtype !== 'float32' && dtype !== 'int32') {
            throw new Error(`Unsupported data type ${dtype}`);
        }
        const rgamma = new RandGamma(alpha, beta, dtype, seed);
        const res = buffer(shape, dtype);
        for (let i = 0; i < res.values.length; i++) {
            res.values[i] = rgamma.nextValue();
        }
        return res.toTensor();
    }
    const randomGamma = op({ randomGamma_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with values sampled from a normal distribution.
     *
     * ```js
     * tf.randomNormal([2, 2]).print();
     * ```
     *
     * @param shape An array of integers defining the output tensor shape.
     * @param mean The mean of the normal distribution.
     * @param stdDev The standard deviation of the normal distribution.
     * @param dtype The data type of the output.
     * @param seed The seed for the random number generator.
     *
     * @doc {heading: 'Tensors', subheading: 'Random'}
     */
    function randomNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
        if (dtype != null && dtype === 'bool') {
            throw new Error(`Unsupported data type ${dtype}`);
        }
        const randGauss = new MPRandGauss(mean, stdDev, dtype, false /* truncated */, seed);
        const res = buffer(shape, dtype);
        for (let i = 0; i < res.values.length; i++) {
            res.values[i] = randGauss.nextValue();
        }
        return res.toTensor();
    }
    const randomNormal = op({ randomNormal_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with values sampled from a uniform distribution.
     *
     * The generated values follow a uniform distribution in the range [minval,
     * maxval). The lower bound minval is included in the range, while the upper
     * bound maxval is excluded.
     *
     * ```js
     * tf.randomUniform([2, 2]).print();
     * ```
     *
     * @param shape An array of integers defining the output tensor shape.
     * @param minval The lower bound on the range of random values to generate.
     *   Defaults to 0.
     * @param maxval The upper bound on the range of random values to generate.
     *   Defaults to 1.
     * @param dtype The data type of the output tensor. Defaults to 'float32'.
     *
     * @doc {heading: 'Tensors', subheading: 'Random'}
     */
    function randomUniform_(shape, minval = 0, maxval = 1, dtype = 'float32', seed) {
        const res = buffer(shape, dtype);
        const random = new UniformRandom(minval, maxval, null, seed);
        for (let i = 0; i < res.values.length; i++) {
            res.values[i] = random.nextValue();
        }
        return res.toTensor();
    }
    const randomUniform = op({ randomUniform_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.
     *
     * The tensor is a is half-open interval meaning it includes start, but
     * excludes stop. Decrementing ranges and negative step values are also
     * supported.sv
     *
     *
     * ```js
     * tf.range(0, 9, 2).print();
     * ```
     *
     * @param start An integer start value
     * @param stop An integer stop value
     * @param step An integer increment (will default to 1 or -1)
     * @param dtype The data type of the output tensor. Defaults to 'float32'.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function range$2(start, stop, step = 1, dtype = 'float32') {
        if (step === 0) {
            throw new Error('Cannot have a step of zero');
        }
        const attrs = { start, stop, step, dtype };
        return ENGINE.runKernel(Range, {} /* inputs */, attrs);
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the real part of a complex (or real) tensor.
     *
     * Given a tensor input, this operation returns a tensor of type float that is
     * the real part of each element in input considered as a complex number.
     *
     * If the input is real, it simply makes a clone.
     *
     * ```js
     * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
     * tf.real(x).print();
     * ```
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function real_(input) {
        const $input = convertToTensor(input, 'input', 'real');
        const inputs = { input: $input };
        return ENGINE.runKernel(Real, inputs);
    }
    const real$2 = op({ real_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes reciprocal of x element-wise: `1 / x`
     *
     * ```js
     * const x = tf.tensor1d([0, 1, 2]);
     *
     * x.reciprocal().print();  // or tf.reciprocal(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function reciprocal_(x) {
        const $x = convertToTensor(x, 'x', 'reciprocal');
        const inputs = { x: $x };
        return ENGINE.runKernel(Reciprocal, inputs);
    }
    const reciprocal$2 = op({ reciprocal_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes rectified linear element-wise: `max(x, 0)`.
     *
     * ```js
     * const x = tf.tensor1d([-1, 2, -3, 4]);
     *
     * x.relu().print();  // or tf.relu(x)
     * ```
     * @param x The input tensor. If the dtype is `bool`, the output dtype will be
     *     `int32'.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function relu_(x) {
        const $x = convertToTensor(x, 'x', 'relu');
        const inputs = { x: $x };
        return ENGINE.runKernel(Relu, inputs);
    }
    const relu$2 = op({ relu_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.
     *
     * ```js
     * const x = tf.tensor1d([-1, 2, -3, 8]);
     *
     * x.relu6().print();  // or tf.relu6(x)
     * ```
     * @param x The input tensor. If the dtype is `bool`, the output dtype will be
     *     `int32'.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function relu6_(x) {
        const $x = convertToTensor(x, 'x', 'relu6');
        const inputs = { x: $x };
        return ENGINE.runKernel(Relu6, inputs);
    }
    const relu6$2 = op({ relu6_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Reverses a `tf.Tensor` along a specified axis.
     *
     * Also available are stricter rank-specific methods that assert that `x` is
     * of the given rank:
     *   - `tf.reverse1d`
     *   - `tf.reverse2d`
     *   - `tf.reverse3d`
     *   - `tf.reverse4d`
     *
     * Except `tf.reverse1d` (which does not have axis param), all methods have
     * same signature as this method.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3, 4]);
     *
     * x.reverse().print();
     * ```
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * const axis = 1;
     * x.reverse(axis).print();
     * ```
     * @param x The input tensor to be reversed.
     * @param axis The set of dimensions to reverse. Must be in the
     *     range [-rank(x), rank(x)). Defaults to all axes.
     *
     * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
     */
    function reverse_(x, axis) {
        const $x = convertToTensor(x, 'x', 'reverse');
        const inputs = { x: $x };
        const attrs = { dims: axis };
        return ENGINE.runKernel(Reverse, inputs, attrs);
    }
    const reverse$2 = op({ reverse_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Reverses a `tf.Tensor1D`.
     *
     * @param x The input tensor.
     */
    function reverse1d_(x) {
        const $x = convertToTensor(x, 'x', 'reverse');
        assert($x.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);
        return reverse$2($x, 0);
    }
    const reverse1d = op({ reverse1d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Reverses a `tf.Tensor2D` along a specified axis.
     *
     * @param x The input tensor.
     * @param axis The set of dimensions to reverse. Must be in the
     *     range [-rank(x), rank(x)). Defaults to all axes.
     */
    function reverse2d_(x, axis) {
        const $x = convertToTensor(x, 'x', 'reverse');
        assert($x.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);
        return reverse$2($x, axis);
    }
    const reverse2d = op({ reverse2d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Reverses a `tf.Tensor3D` along a specified axis.
     *
     * @param x The input tensor.
     * @param axis The set of dimensions to reverse. Must be in the
     *     range [-rank(x), rank(x)). Defaults to all axes.
     */
    function reverse3d_(x, axis) {
        const $x = convertToTensor(x, 'x', 'reverse');
        assert($x.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);
        return reverse$2($x, axis);
    }
    const reverse3d = op({ reverse3d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Reverses a `tf.Tensor4D` along a specified axis.
     *
     * @param x The input tensor.
     * @param axis The set of dimensions to reverse. Must be in the
     *     range [-rank(x), rank(x)). Defaults to all axes.
     */
    function reverse4d_(x, axis) {
        const $x = convertToTensor(x, 'x', 'reverse');
        assert($x.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);
        return reverse$2($x, axis);
    }
    const reverse4d = op({ reverse4d_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes round of input `tf.Tensor` element-wise: `round(x)`.
     * It implements banker's rounding.
     *
     * ```js
     * const x = tf.tensor1d([.6, 1.1, -3.3]);
     *
     * x.round().print();  // or tf.round(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function round_(x) {
        const $x = convertToTensor(x, 'x', 'round');
        const inputs = { x: $x };
        return ENGINE.runKernel(Round, inputs);
    }
    const round$2 = op({ round_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes reciprocal of square root of the input `tf.Tensor` element-wise:
     * `y = 1 / sqrt(x)`
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 4, -1]);
     *
     * x.rsqrt().print();  // or tf.rsqrt(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function rsqrt_(x) {
        const $x = convertToTensor(x, 'x', 'rsqrt', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Rsqrt, inputs);
    }
    const rsqrt$2 = op({ rsqrt_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.
     *
     * The same functionality can be achieved with `tf.tensor`, but in general
     * we recommend using `tf.scalar` as it makes the code more readable.
     *
     * ```js
     * tf.scalar(3.14).print();
     * ```
     *
     * @param value The value of the scalar.
     * @param dtype The data type.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function scalar(value, dtype) {
        if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&
            dtype !== 'complex64') {
            throw new Error('Error creating a new Scalar: value must be a primitive ' +
                '(number|boolean|string)');
        }
        if (dtype === 'string' && isTypedArray(value) &&
            !(value instanceof Uint8Array)) {
            throw new Error('When making a scalar from encoded string, ' +
                'the value must be `Uint8Array`.');
        }
        const shape = [];
        const inferredShape = [];
        return makeTensor(value, shape, inferredShape, dtype);
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes scaled exponential linear element-wise.
     *
     * `x < 0 ? scale * alpha * (exp(x) - 1) : x`
     *
     * ```js
     * const x = tf.tensor1d([-1, 2, -3, 4]);
     *
     * x.selu().print();  // or tf.selu(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function selu_(x) {
        const $x = convertToTensor(x, 'x', 'selu');
        const inputs = { x: $x };
        return ENGINE.runKernel(Selu, inputs);
    }
    const selu$2 = op({ selu_ });

    /**
     * 2-D convolution with separable filters.
     *
     * Performs a depthwise convolution that acts separately on channels followed
     * by a pointwise convolution that mixes channels. Note that this is
     * separability between dimensions [1, 2] and 3, not spatial separability
     * between dimensions 1 and 2.
     *
     * See
     * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](
     *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)
     * for more details.
     *
     * @param x The input tensor, of rank 4 or rank 3, of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
     * assumed.
     * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape
     *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is
     *     the filter used in the first step.
     * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape
     *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is
     *     the filter used in the second step.
     * @param strides The strides of the convolution: `[strideHeight,
     * strideWidth]`. If strides is a single number, then `strideHeight ==
     * strideWidth`.
     * @param pad The type of padding algorithm.
     *   - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *   - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     *   - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
     *     in which we sample input values across the height and width dimensions
     *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
     *     number, then `dilationHeight == dilationWidth`. If it is greater than
     *     1, then all values of `strides` must be 1.
     * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
     *     "NHWC". Specify the data format of the input and output data. With the
     *     default format "NHWC", the data is stored in the order of: [batch,
     *     height, width, channels]. Only "NHWC" is currently supported.
     *
     * @doc {heading: 'Operations', subheading: 'Convolution'}
     */
    function separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [1, 1], dataFormat = 'NHWC') {
        const $x = convertToTensor(x, 'x', 'separableConv2d');
        const $depthwiseFilter = convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');
        const $pointwiseFilter = convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');
        let x4D = $x;
        let reshapedTo4D = false;
        if ($x.rank === 3) {
            reshapedTo4D = true;
            x4D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        }
        if (dataFormat === 'NCHW') {
            throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' +
                'NHWC is supported');
        }
        assert(x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got ` +
            `rank ${x4D.rank}.`);
        assert($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +
            `got rank ${$depthwiseFilter.rank}.`);
        assert($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +
            `got rank ${$depthwiseFilter.rank}.`);
        assert($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter ` +
            ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);
        assert($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise ` +
            `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);
        const inChannels = $depthwiseFilter.shape[2];
        const channelMultiplier = $depthwiseFilter.shape[3];
        assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter ` +
            `must be ${inChannels * channelMultiplier}, ` +
            `but got ${$pointwiseFilter.shape[2]}.`);
        const depthwise = depthwiseConv2d$1(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);
        const pointwiseStride = 1;
        const res = conv2d$2(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    const separableConv2d = op({ separableConv2d_ });

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the difference between two lists of numbers.
     *
     * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`
     * that represents all values that are in `x` but not in `y`. The returned
     * Tensor `out` is sorted in the same order that the numbers appear in `x`
     * (duplicates are preserved). This operation also returns a Tensor indices that
     * represents the position of each out element in `x`. In other words:
     *
     * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`
     *
     * ```js
     * const x = [1, 2, 3, 4, 5, 6];
     * const y = [1, 3, 5];
     *
     * const [out, indices] = await tf.setdiff1dAsync(x, y);
     * out.print(); // [2, 4, 6]
     * indices.print(); // [1, 3, 5]
     * ```
     *
     * @param x 1-D Tensor. Values to keep.
     * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the
     *     output.
     * @returns Promise of Tensor tuple [out, indices].
     *  out: Tensor with the same type as x.
     *  indices: A Tensor of type int32.
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    async function setdiff1dAsync_(x, y) {
        const $x = convertToTensor(x, 'x', 'setdiff1d');
        const $y = convertToTensor(y, 'y', 'setdiff1d');
        assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);
        assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);
        assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);
        const xVals = await $x.data();
        const yVals = await $y.data();
        const ySet = new Set(yVals);
        let outputSize = 0;
        for (let i = 0; i < xVals.length; i++) {
            if (!ySet.has(xVals[i])) {
                outputSize++;
            }
        }
        const buffer = new TensorBuffer([outputSize], $x.dtype);
        const indices = new TensorBuffer([outputSize], 'int32');
        for (let i = 0, p = 0; i < xVals.length; i++) {
            if (!ySet.has(xVals[i])) {
                buffer.values[p] = xVals[i];
                indices.values[p] = i;
                p++;
            }
        }
        return [buffer.toTensor(), indices.toTensor()];
    }
    const setdiff1dAsync = setdiff1dAsync_;

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns an element-wise indication of the sign of a number.
     *
     * ```js
     * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);
     *
     * x.sign().print();  // or tf.sign(x)
     * ```
     * @param x The input Tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function sign_(x) {
        const $x = convertToTensor(x, 'x', 'sign');
        const inputs = { x: $x };
        return ENGINE.runKernel(Sign, inputs);
    }
    const sign$2 = op({ sign_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes sin of the input Tensor element-wise: `sin(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
     *
     * x.sin().print();  // or tf.sin(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function sin_(x) {
        const $x = convertToTensor(x, 'x', 'sin', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Sin, inputs);
    }
    const sin$2 = op({ sin_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, 1, -1, .7]);
     *
     * x.sinh().print();  // or tf.sinh(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function sinh_(x) {
        const $x = convertToTensor(x, 'x', 'sinh');
        const inputs = { x: $x };
        return ENGINE.runKernel(Sinh, inputs);
    }
    const sinh$2 = op({ sinh_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Extracts a 1D slice from 1D array starting at coordinates `begin` and is
     * of length `size`. See `slice` for details.
     */
    function slice1d_(x, begin, size) {
        const $x = convertToTensor(x, 'x', 'slice1d');
        assert($x.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);
        return slice$2($x, [begin], [size]);
    }
    const slice1d = op({ slice1d_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Extracts a 2D slice from a 2D array starting at coordinates `begin` and
     * is of size `size`. See `slice` for details.
     */
    function slice2d_(x, begin, size) {
        const $x = convertToTensor(x, 'x', 'slice2d');
        assert($x.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);
        return slice$2($x, begin, size);
    }
    const slice2d = op({ slice2d_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Extracts a 3D slice from a 3D array starting at coordinates `begin` and
     * is of size `size`. See `slice` for details.
     */
    function slice3d_(x, begin, size) {
        const $x = convertToTensor(x, 'x', 'slice3d');
        assert($x.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);
        return slice$2($x, begin, size);
    }
    const slice3d = op({ slice3d_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Extracts a 4D slice from a 4D array starting at coordinates `begin` and
     * is of size `size`. See `slice` for details.
     */
    function slice4d_(x, begin, size) {
        const $x = convertToTensor(x, 'x', 'slice4d');
        assert($x.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);
        return slice$2($x, begin, size);
    }
    const slice4d = op({ slice4d_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the softmax normalized vector given the logits.
     *
     * ```js
     * const a = tf.tensor1d([1, 2, 3]);
     *
     * a.softmax().print();  // or tf.softmax(a)
     * ```
     *
     * ```js
     * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
     *
     * a.softmax().print();  // or tf.softmax(a)
     * ```
     *
     * @param logits The logits array.
     * @param dim The dimension softmax would be performed on. Defaults to `-1`
     *     which indicates the last dimension.
     *
     * @doc {heading: 'Operations', subheading: 'Normalization'}
     */
    function softmax_(logits, dim = -1) {
        const $logits = convertToTensor(logits, 'logits', 'softmax', 'float32');
        if (dim === -1) {
            dim = $logits.rank - 1;
        }
        if (dim !== $logits.rank - 1) {
            throw Error('Softmax along a non-last dimension is not yet supported. ' +
                `Logits was rank ${$logits.rank} and dim was ${dim}`);
        }
        const inputs = { logits: $logits };
        const attrs = { dim };
        return ENGINE.runKernel(Softmax, inputs, attrs);
    }
    const softmax$2 = op({ softmax_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Fast Fourier transform.
     *
     * Computes the 1-dimensional discrete Fourier transform over the inner-most
     * dimension of input.
     *
     * ```js
     * const real = tf.tensor1d([1, 2, 3]);
     * const imag = tf.tensor1d([1, 2, 3]);
     * const x = tf.complex(real, imag);
     *
     * x.fft().print();  // tf.spectral.fft(x).print();
     * ```
     * @param input The complex input to compute an fft over.
     *
     * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
     */
    function fft_(input) {
        assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.fft() must be complex64 ` +
            `but got ${input.dtype}.`);
        const inputs = { input };
        return ENGINE.runKernel(FFT, inputs);
    }
    const fft$2 = op({ fft_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Inverse fast Fourier transform.
     *
     * Computes the inverse 1-dimensional discrete Fourier transform over the
     * inner-most dimension of input.
     *
     * ```js
     * const real = tf.tensor1d([1, 2, 3]);
     * const imag = tf.tensor1d([1, 2, 3]);
     * const x = tf.complex(real, imag);
     *
     * x.ifft().print();  // tf.spectral.ifft(x).print();
     * ```
     * @param input The complex input to compute an ifft over.
     *
     * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
     */
    function ifft_(input) {
        assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` +
            `but got ${input.dtype}.`);
        const inputs = { input };
        return ENGINE.runKernel(IFFT, inputs);
    }
    const ifft$2 = op({ ifft_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Inversed real value input fast Fourier transform.
     *
     * Computes the 1-dimensional inversed discrete Fourier transform over the
     * inner-most dimension of the real input.
     *
     * ```js
     * const real = tf.tensor1d([1, 2, 3]);
     * const imag = tf.tensor1d([0, 0, 0]);
     * const x = tf.complex(real, imag);
     *
     * x.irfft().print();
     * ```
     * @param input The real value input to compute an irfft over.
     *
     * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
     */
    function irfft_(input) {
        const innerDimensionSize = input.shape[input.shape.length - 1];
        const batch = input.size / innerDimensionSize;
        let ret;
        if (innerDimensionSize <= 2) {
            const complexInput = reshape$2(input, [batch, innerDimensionSize]);
            ret = ifft$2(complexInput);
        }
        else {
            // The length of unique components of the DFT of a real-valued signal
            // is 2 * (input_len - 1)
            const outputShape = [batch, 2 * (innerDimensionSize - 1)];
            const realInput = reshape$2(real$2(input), [batch, innerDimensionSize]);
            const imagInput = reshape$2(imag$2(input), [batch, innerDimensionSize]);
            const realConjugate = reverse$2(slice$2(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);
            const imagConjugate = mul(reverse$2(slice$2(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), scalar(-1));
            const r = concat$2([realInput, realConjugate], 1);
            const i = concat$2([imagInput, imagConjugate], 1);
            const complexInput = reshape$2(complex$2(r, i), [outputShape[0], outputShape[1]]);
            ret = ifft$2(complexInput);
        }
        ret = real$2(ret);
        // reshape the result if the input is 3D tensor.
        if (input.rank === 3 && input.shape[0] !== 0) {
            const temp = ret;
            const batch = input.shape[0];
            ret = reshape$2(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);
            temp.dispose();
        }
        return ret;
    }
    const irfft = op({ irfft_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Splits a `tf.Tensor` into sub tensors.
     *
     * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`
     * into `numOrSizeSplits` smaller tensors.
     * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.
     *
     * If `numOrSizeSplits` is a number array, splits `x` into
     * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the
     * same size as `x` except along dimension `axis` where the size is
     * `numOrSizeSplits[i]`.
     *
     * ```js
     * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);
     * const [a, b] = tf.split(x, 2, 1);
     * a.print();
     * b.print();
     *
     * const [c, d, e] = tf.split(x, [1, 2, 1], 1);
     * c.print();
     * d.print();
     * e.print();
     * ```
     *
     * @param x The input tensor to split.
     * @param numOrSizeSplits Either an integer indicating the number of
     * splits along the axis or an array of integers containing the sizes of
     * each output tensor along the axis. If a number then it must evenly divide
     * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.
     * Can contain one -1 indicating that dimension is to be inferred.
     * @param axis The dimension along which to split. Defaults to 0 (the first
     * dim).
     *
     * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
     */
    function split_(x, numOrSizeSplits, axis = 0) {
        const $x = convertToTensor(x, 'x', 'split');
        const inputs = { x: $x };
        const attr = { numOrSizeSplits, axis };
        return ENGINE.runKernel(SplitV, inputs, attr);
    }
    const split$1 = op({ split_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Real value input fast Fourier transform.
     *
     * Computes the 1-dimensional discrete Fourier transform over the
     * inner-most dimension of the real input.
     *
     * ```js
     * const real = tf.tensor1d([1, 2, 3]);
     *
     * real.rfft().print();
     * ```
     * @param input The real value input to compute an rfft over.
     *
     * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
     */
    function rfft_(input, fftLength) {
        assert(input.dtype === 'float32', () => `The dtype for rfft() must be real value but got ${input.dtype}`);
        let innerDimensionSize = input.shape[input.shape.length - 1];
        const batch = input.size / innerDimensionSize;
        let adjustedInput;
        if (fftLength != null && fftLength < innerDimensionSize) {
            // Need to crop
            const begin = input.shape.map(v => 0);
            const size = input.shape.map(v => v);
            size[input.shape.length - 1] = fftLength;
            adjustedInput = slice$2(input, begin, size);
            innerDimensionSize = fftLength;
        }
        else if (fftLength != null && fftLength > innerDimensionSize) {
            // Need to pad with zeros
            const zerosShape = input.shape.map(v => v);
            zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;
            adjustedInput = concat$2([input, zeros$1(zerosShape)], input.shape.length - 1);
            innerDimensionSize = fftLength;
        }
        else {
            adjustedInput = input;
        }
        // Complement the input with zero imaginary numbers.
        const zerosInput = zerosLike$2(adjustedInput);
        const complexInput = reshape$2(complex$2(adjustedInput, zerosInput), [batch, innerDimensionSize]);
        const ret = fft$2(complexInput);
        // Exclude complex conjugations. These conjugations are put symmetrically.
        const half = Math.floor(innerDimensionSize / 2) + 1;
        const realValues = real$2(ret);
        const imagValues = imag$2(ret);
        const realComplexConjugate = split$1(realValues, [half, innerDimensionSize - half], realValues.shape.length - 1);
        const imagComplexConjugate = split$1(imagValues, [half, innerDimensionSize - half], imagValues.shape.length - 1);
        const outputShape = adjustedInput.shape.slice();
        outputShape[adjustedInput.shape.length - 1] = half;
        return reshape$2(complex$2(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);
    }
    const rfft = op({ rfft_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 4, -1]);
     *
     * x.sqrt().print();  // or tf.sqrt(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function sqrt_(x) {
        const $x = convertToTensor(x, 'x', 'sqrt', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Sqrt, inputs);
    }
    const sqrt$2 = op({ sqrt_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns (a - b) * (a - b) element-wise.
     * Supports broadcasting.
     *
     * ```js
     * const a = tf.tensor1d([1, 4, 3, 16]);
     * const b = tf.tensor1d([1, 2, 9, 4]);
     *
     * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
     * ```
     *
     * ```js
     * // Broadcast squared difference  a with b.
     * const a = tf.tensor1d([2, 4, 6, 8]);
     * const b = tf.scalar(5);
     *
     * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
     * ```
     *
     * @param a The first tensor.
     * @param b The second tensor. Must have the same type as `a`.
     *
     * @doc {heading: 'Operations', subheading: 'Arithmetic'}
     */
    function squaredDifference_(a, b) {
        let $a = convertToTensor(a, 'a', 'squaredDifference');
        let $b = convertToTensor(b, 'b', 'squaredDifference');
        [$a, $b] = makeTypesMatch($a, $b);
        assertAndGetBroadcastShape($a.shape, $b.shape);
        const inputs = { a: $a, b: $b };
        const attrs = {};
        return ENGINE.runKernel(SquaredDifference, inputs, attrs);
    }
    const squaredDifference$2 = op({ squaredDifference_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Removes dimensions of size 1 from the shape of a `tf.Tensor`.
     *
     * ```js
     * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);
     * x.squeeze().print();
     * ```
     *
     * @param x The input tensor to be squeezed.
     * @param axis An optional list of numbers. If specified, only
     *     squeezes the dimensions listed. The dimension index starts at 0. It
     * is an error to squeeze a dimension that is not 1.
     *
     * @doc {heading: 'Tensors', subheading: 'Transformations'}
     */
    function squeeze_(x, axis) {
        const $x = convertToTensor(x, 'x', 'squeeze');
        return reshape$2($x, squeezeShape($x.shape, axis).newShape);
    }
    const squeeze = op({ squeeze_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.
     *
     * ```js
     * const a = tf.tensor1d([1, 2]);
     * const b = tf.tensor1d([3, 4]);
     * const c = tf.tensor1d([5, 6]);
     * tf.stack([a, b, c]).print();
     * ```
     *
     * @param tensors A list of tensor objects with the same shape and dtype.
     * @param axis The axis to stack along. Defaults to 0 (the first dim).
     *
     * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
     */
    function stack_(tensors, axis = 0) {
        const $tensors = convertToTensorArray(tensors, 'tensors', 'stack', 'string_or_numeric');
        assert($tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');
        if ($tensors.length > 0) {
            assert(axis <= $tensors[0].rank, () => 'Axis must be <= rank of the tensor');
        }
        const inputs = $tensors;
        const attrs = { axis };
        return ENGINE.runKernel(Pack, inputs, attrs);
    }
    const stack = op({ stack_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`
     *
     * ```js
     * const x = tf.tensor1d([0, 2, -1, -3]);
     *
     * x.step(.5).print();  // or tf.step(x, .5)
     * ```
     * @param x The input tensor.
     * @param alpha The gradient when input is negative.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function step_(x, alpha = 0.0) {
        const $x = convertToTensor(x, 'x', 'step');
        const inputs = { x: $x };
        const attrs = { alpha };
        return ENGINE.runKernel(Step, inputs, attrs);
    }
    const step$2 = op({ step_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Extracts a strided slice of a tensor.
     *
     * Roughly speaking, this op extracts a slice of size (end-begin)/stride from
     * the given input tensor (x). Starting at the location specified by begin the
     * slice continues by adding stride to the index until all dimensions are not
     * less than end. Note that a stride can be negative, which causes a reverse
     * slice.
     *
     * ```js
     * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],
     *    [3, 2, 3]);
     * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]
     * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],
     *                                                     // [4, 4, 4]]]
     * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],
     *                                                     // [3, 3, 3]]]
     * ```
     *
     * @param x The tensor to stride slice.
     * @param begin The coordinates to start the slice from.
     * @param end: The coordinates to end the slice at.
     * @param strides: The size of the slice.
     * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored
     *      and the fullest possible range in that dimension is used instead.
     * @param endMask: If the ith bit of endMask is set, end[i] is ignored
     *      and the fullest possible range in that dimension is used instead.
     * @param shrinkAxisMask: a bitmask where bit i implies that
     * the ith specification should shrink the dimensionality. begin and end must
     * imply a slice of size 1 in the dimension.
     *
     * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
     */
    function stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {
        const $x = convertToTensor(x, 'x', 'stridedSlice', 'string_or_numeric');
        const inputs = { x: $x };
        const attrs = {
            begin,
            end,
            strides,
            beginMask,
            endMask,
            ellipsisMask,
            newAxisMask,
            shrinkAxisMask
        };
        return ENGINE.runKernel(StridedSlice, inputs, attrs);
    }
    const stridedSlice$2 = op({ stridedSlice_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`
     *
     * ```js
     * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
     *
     * x.tan().print();  // or tf.tan(x)
     * ```
     * @param x The input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Basic math'}
     */
    function tan_(x) {
        const $x = convertToTensor(x, 'x', 'tan', 'float32');
        const inputs = { x: $x };
        return ENGINE.runKernel(Tan, inputs);
    }
    const tan$2 = op({ tan_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.
     *
     * The same functionality can be achieved with `tf.tensor`, but in general
     * we recommend using `tf.tensor1d` as it makes the code more readable.
     *
     * ```js
     * tf.tensor1d([1, 2, 3]).print();
     * ```
     *
     * @param values The values of the tensor. Can be array of numbers,
     *     or a `TypedArray`.
     * @param dtype The data type.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function tensor1d(values, dtype) {
        assertNonNull(values);
        const inferredShape = inferShape(values, dtype);
        if (inferredShape.length !== 1) {
            throw new Error('tensor1d() requires values to be a flat/TypedArray');
        }
        const shape = null;
        return makeTensor(values, shape, inferredShape, dtype);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.
     *
     * The same functionality can be achieved with `tf.tensor`, but in general
     * we recommend using `tf.tensor2d` as it makes the code more readable.
     *
     *  ```js
     * // Pass a nested array.
     * tf.tensor2d([[1, 2], [3, 4]]).print();
     * ```
     * ```js
     * // Pass a flat array and specify a shape.
     * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();
     * ```
     *
     * @param values The values of the tensor. Can be nested array of numbers,
     *     or a flat array, or a `TypedArray`.
     * @param shape The shape of the tensor. If not provided, it is inferred from
     *     `values`.
     * @param dtype The data type.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function tensor2d(values, shape, dtype) {
        assertNonNull(values);
        if (shape != null && shape.length !== 2) {
            throw new Error('tensor2d() requires shape to have two numbers');
        }
        const inferredShape = inferShape(values, dtype);
        if (inferredShape.length !== 2 && inferredShape.length !== 1) {
            throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor2d() requires shape to be provided when `values` ' +
                'are a flat/TypedArray');
        }
        return makeTensor(values, shape, inferredShape, dtype);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.
     *
     * The same functionality can be achieved with `tf.tensor`, but in general
     * we recommend using `tf.tensor4d` as it makes the code more readable.
     *
     *  ```js
     * // Pass a nested array.
     * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();
     * ```
     * ```js
     * // Pass a flat array and specify a shape.
     * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();
     * ```
     *
     * @param values The values of the tensor. Can be nested array of numbers,
     *     or a flat array, or a `TypedArray`.
     * @param shape The shape of the tensor. Optional. If not provided,
     *   it is inferred from `values`.
     * @param dtype The data type.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function tensor4d(values, shape, dtype) {
        assertNonNull(values);
        if (shape != null && shape.length !== 4) {
            throw new Error('tensor4d() requires shape to have four numbers');
        }
        const inferredShape = inferShape(values, dtype);
        if (inferredShape.length !== 4 && inferredShape.length !== 1) {
            throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor4d() requires shape to be provided when `values` ' +
                'are a flat array');
        }
        return makeTensor(values, shape, inferredShape, dtype);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.
     *
     * The same functionality can be achieved with `tf.tensor`, but in general
     * we recommend using `tf.tensor5d` as it makes the code more readable.
     *
     *  ```js
     * // Pass a nested array.
     * tf.tensor5d([[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]).print();
     * ```
     * ```js
     * // Pass a flat array and specify a shape.
     * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();
     * ```
     *
     * @param values The values of the tensor. Can be nested array of numbers,
     *     or a flat array, or a `TypedArray`.
     * @param shape The shape of the tensor. Optional. If not provided,
     *   it is inferred from `values`.
     * @param dtype The data type.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function tensor5d(values, shape, dtype) {
        assertNonNull(values);
        if (shape != null && shape.length !== 5) {
            throw new Error('tensor5d() requires shape to have five numbers');
        }
        const inferredShape = inferShape(values, dtype);
        if (inferredShape.length !== 5 && inferredShape.length !== 1) {
            throw new Error('tensor5d() requires values to be ' +
                'number[][][][][] or flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor5d() requires shape to be provided when `values` ' +
                'are a flat array');
        }
        return makeTensor(values, shape, inferredShape, dtype);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.
     *
     * The same functionality can be achieved with `tf.tensor`, but in general
     * we recommend using `tf.tensor6d` as it makes the code more readable.
     *
     *  ```js
     * // Pass a nested array.
     * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();
     * ```
     * ```js
     * // Pass a flat array and specify a shape.
     * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();
     * ```
     *
     * @param values The values of the tensor. Can be nested array of numbers,
     *     or a flat array, or a `TypedArray`.
     * @param shape The shape of the tensor. Optional. If not provided,
     *   it is inferred from `values`.
     * @param dtype The data type.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function tensor6d(values, shape, dtype) {
        assertNonNull(values);
        if (shape != null && shape.length !== 6) {
            throw new Error('tensor6d() requires shape to have six numbers');
        }
        const inferredShape = inferShape(values, dtype);
        if (inferredShape.length !== 6 && inferredShape.length !== 1) {
            throw new Error('tensor6d() requires values to be number[][][][][][] or ' +
                'flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor6d() requires shape to be provided when `values` ' +
                'are a flat array');
        }
        shape = shape ||
            inferredShape;
        return makeTensor(values, shape, inferredShape, dtype);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Finds the values and indices of the `k` largest entries along the last
     * dimension.
     *
     * If the input is a vector (rank=1), finds the k largest entries in the vector
     * and outputs their values and indices as vectors. Thus values[j] is the j-th
     * largest entry in input, and its index is indices[j].
     * For higher rank inputs, computes the top k entries along the last dimension.
     *
     * If two elements are equal, the lower-index element appears first.
     *
     * ```js
     * const a = tf.tensor2d([[1, 5], [4, 3]]);
     * const {values, indices} = tf.topk(a);
     * values.print();
     * indices.print();
     * ```
     * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.
     * @param k Number of top elements to look for along the last dimension.
     * @param sorted If true, the resulting `k` elements will be sorted by the
     *     values in descending order.
     *
     * @doc {heading: 'Operations', subheading: 'Evaluation'}
     */
    function topk_(x, k = 1, sorted = true) {
        const $x = convertToTensor(x, 'x', 'topk');
        if ($x.rank === 0) {
            throw new Error('topk() expects the input to be of rank 1 or higher');
        }
        const lastDim = $x.shape[$x.shape.length - 1];
        if (k < 0) {
            throw new Error(`'k' passed to topk() must be >= 0 but got ${k}`);
        }
        if (k > lastDim) {
            throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` +
                `but got ${k}`);
        }
        const inputs = { x: $x };
        const attrs = { k, sorted };
        const [values, indices] = ENGINE.runKernel(TopK, inputs, attrs);
        return { values, indices };
    }
    const topk = op({ topk_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a `tf.Tensor` with values sampled from a truncated normal
     * distribution.
     *
     * ```js
     * tf.truncatedNormal([2, 2]).print();
     * ```
     *
     * The generated values follow a normal distribution with specified mean and
     * standard deviation, except that values whose magnitude is more than 2
     * standard deviations from the mean are dropped and re-picked.
     *
     * @param shape An array of integers defining the output tensor shape.
     * @param mean The mean of the normal distribution.
     * @param stdDev The standard deviation of the normal distribution.
     * @param dtype The data type of the output tensor.
     * @param seed The seed for the random number generator.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
        if (dtype != null && dtype === 'bool') {
            throw new Error(`Unsupported data type $ { dtype }`);
        }
        const randGauss = new MPRandGauss(mean, stdDev, dtype, true /* truncated */, seed);
        const res = buffer(shape, dtype);
        for (let i = 0; i < res.values.length; i++) {
            res.values[i] = randGauss.nextValue();
        }
        return res.toTensor();
    }
    const truncatedNormal = op({ truncatedNormal_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Finds unique elements along an axis of a tensor.
     *
     * It returns a tensor `values` containing all of the unique elements along the
     * `axis` of the given tensor `x` in the same order that they occur along the
     * `axis` in `x`; `x` does not need to be sorted. It also returns a tensor
     * `indices` the same size as the number of the elements in `x` along the `axis`
     * dimension. It contains the index in the unique output `values`.
     *
     * ```js
     * // A 1-D tensor
     * const a = tf.tensor1d([1, 1, 2, 4, 4, 4, 7, 8, 8]);
     * const {values, indices} = tf.unique(a);
     * values.print();   // [1, 2, 4, 7, 8,]
     * indices.print();  // [0, 0, 1, 2, 2, 2, 3, 4, 4]
     * ```
     *
     * ```js
     * // A 2-D tensor with axis=0
     * //
     * // 'a' is: [[1, 0, 0],
     * //          [1, 0, 0],
     * //          [2, 0, 0]]
     * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
     * const {values, indices} = tf.unique(a, 0)
     * values.print();   // [[1, 0, 0],
     *                   //  [2, 0, 0]]
     * indices.print();  // [0, 0, 1]
     * ```
     *
     * ```js
     * // A 2-D tensor with axis=1
     * //
     * // 'a' is: [[1, 0, 0],
     * //          [1, 0, 0],
     * //          [2, 0, 0]]
     * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
     * const {values, indices} = tf.unique(a, 1)
     * values.print();   // [[1, 0],
     *                   //  [1, 0],
     *                   //  [2, 0]]
     * indices.print();  // [0, 1, 1]
     * ```
     * @param x A tensor (int32, string, bool).
     * @param axis The axis of the tensor to find the unique elements.
     * @returns [uniqueElements, indices] (see above for details)
     *
     * @doc {heading: 'Operations', subheading: 'Evaluation'}
     */
    function unique_(x, axis = 0) {
        const $x = convertToTensor(x, 'x', 'unique', 'string_or_numeric');
        assert($x.rank > 0, () => 'The input tensor must be at least 1D');
        const inputs = { x: $x };
        const attrs = { axis };
        const [values, indices] = ENGINE.runKernel(Unique, inputs, attrs);
        return { values, indices };
    }
    const unique$2 = op({ unique_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the sum along segments of a `tf.Tensor`.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3, 4]);
     * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');
     * const numSegments = 3;
     *
     * x.unsortedSegmentSum(segmentIds, numSegments).print()
     * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)
     * ```
     * @param x The `tf.Tensor` that will be summed along its segments.
     * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s
     * dimension along the `axis`.  Maps each element of `x` to a segment.
     * @param numSegments The number of distinct `segmentIds`.
     *
     * @doc {heading: 'Operations', subheading: 'Segment'}
     */
    function unsortedSegmentSum_(x, segmentIds, numSegments) {
        const $x = convertToTensor(x, 'x', 'unsortedSegmentSum');
        const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');
        assert(isInt(numSegments), () => 'numSegments must be of dtype int');
        const inputs = { x: $x, segmentIds: $segmentIds };
        const attrs = { numSegments };
        return ENGINE.runKernel(UnsortedSegmentSum, inputs, attrs);
    }
    const unsortedSegmentSum$2 = op({ unsortedSegmentSum_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.
     *
     * ```js
     * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     *
     * tf.unstack(a).forEach(tensor => tensor.print());
     * ```
     *
     * @param x A tensor object.
     * @param axis The axis to unstack along. Defaults to 0 (the first dim).
     *
     * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
     */
    function unstack_(x, axis = 0) {
        const $x = convertToTensor(x, 'x', 'unstack', 'string_or_numeric');
        assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);
        const inputs = { value: $x };
        const attrs = { axis };
        return ENGINE.runKernel(Unpack, inputs, attrs);
    }
    const unstack = op({ unstack_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a new variable with the provided initial value.
     * ```js
     * const x = tf.variable(tf.tensor([1, 2, 3]));
     * x.assign(tf.tensor([4, 5, 6]));
     *
     * x.print();
     * ```
     *
     * @param initialValue Initial value for the tensor.
     * @param trainable If true, optimizers are allowed to update it.
     * @param name Name of the variable. Defaults to a unique id.
     * @param dtype If set, initialValue will be converted to the given type.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    function variable(initialValue, trainable = true, name, dtype) {
        return ENGINE.makeVariable(initialValue, trainable, name, dtype);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function whereImpl$2(condShape, condVals) {
        const indices = [];
        for (let i = 0; i < condVals.length; i++) {
            if (condVals[i]) {
                indices.push(i);
            }
        }
        const inBuffer = buffer(condShape, 'int32');
        const out = buffer([indices.length, condShape.length], 'int32');
        for (let i = 0; i < indices.length; i++) {
            const loc = inBuffer.indexToLoc(indices[i]);
            const offset = i * condShape.length;
            out.values.set(loc, offset);
        }
        return out.toTensor();
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns the coordinates of true elements of condition.
     *
     * The coordinates are returned in a 2-D tensor where the first dimension (rows)
     * represents the number of true elements, and the second dimension (columns)
     * represents the coordinates of the true elements. Keep in mind, the shape of
     * the output tensor can vary depending on how many true values there are in
     * input. Indices are output in row-major order. The resulting tensor has the
     * shape `[numTrueElems, condition.rank]`.
     *
     * This is analogous to calling the python `tf.where(cond)` without an x or y.
     *
     * ```js
     * const cond = tf.tensor1d([false, false, true], 'bool');
     * const result = await tf.whereAsync(cond);
     * result.print();
     * ```
     *
     * @doc {heading: 'Operations', subheading: 'Logical'}
     */
    async function whereAsync_(condition) {
        const $condition = convertToTensor(condition, 'condition', 'whereAsync', 'bool');
        const vals = await $condition.data();
        const res = whereImpl$2($condition.shape, vals);
        if (condition !== $condition) {
            $condition.dispose();
        }
        return res;
    }
    const whereAsync = whereAsync_;

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Apply boolean mask to tensor.
     *
     * ```js
     * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);
     * const mask = tf.tensor1d([1, 0, 1], 'bool');
     * const result = await tf.booleanMaskAsync(tensor, mask);
     * result.print();
     * ```
     *
     * @param tensor N-D tensor.
     * @param mask K-D boolean tensor, K <= N and K must be known statically.
     * @param axis A 0-D int Tensor representing the axis in tensor to mask from.
     *     By default, axis is 0 which will mask from the first dimension.
     *     Otherwise K + axis <= N.
     *
     * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
     */
    async function booleanMaskAsync_(tensor, mask, axis) {
        const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');
        const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');
        const axisFrom = axis == null ? 0 : axis;
        const maskDim = $mask.rank;
        const tensorShape = $tensor.shape;
        assert(maskDim > 0, () => 'mask cannot be scalar');
        assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);
        let leadingSize = 1;
        for (let i = axisFrom; i < axisFrom + maskDim; i++) {
            leadingSize *= tensorShape[i];
        }
        const targetTensorShape = tensorShape.slice(0, axisFrom)
            .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));
        const reshapedTensor = reshape$2($tensor, targetTensorShape);
        const reshapedMask = reshape$2($mask, [-1]);
        const positivePositions = await whereAsync(reshapedMask);
        const indices = squeeze(positivePositions, [1]);
        const res = gather(reshapedTensor, indices, axisFrom);
        // Ensure no memory leak.
        if (tensor !== $tensor) {
            $tensor.dispose();
        }
        if (mask !== $mask) {
            $mask.dispose();
        }
        indices.dispose();
        reshapedTensor.dispose();
        reshapedMask.dispose();
        positivePositions.dispose();
        return res;
    }
    const booleanMaskAsync = booleanMaskAsync_;

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the norm of scalar, vectors, and matrices.
     * This function can compute several different vector norms (the 1-norm, the
     * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)
     * and matrix norms (Frobenius, 1-norm, and inf-norm).
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 3, 4]);
     *
     * x.norm().print();  // or tf.norm(x)
     * ```
     *
     * @param x The input array.
     * @param ord Optional. Order of the norm. Supported norm types are
     * following:
     *
     *  | ord        | norm for matrices         | norm for vectors
     *  |------------|---------------------------|---------------------
     *  |'euclidean' |Frobenius norm             |2-norm
     *  |'fro'       |Frobenius norm	           |
     *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))
     *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))
     *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))
     *  |2           |                           |sum(abs(x)^2)^1/2*
     *
     * @param axis Optional. If axis is null (the default), the input is
     * considered a vector and a single vector norm is computed over the entire
     * set of values in the Tensor, i.e. norm(x, ord) is equivalent
     * to norm(x.reshape([-1]), ord). If axis is a integer, the input
     * is considered a batch of vectors, and axis determines the axis in x
     * over which to compute vector norms. If axis is a 2-tuple of integer it is
     * considered a batch of matrices and axis determines the axes in NDArray
     * over which to compute a matrix norm.
     * @param keepDims Optional. If true, the norm have the same dimensionality
     * as the input.
     *
     * @doc {heading: 'Operations', subheading: 'Matrices'}
     */
    function norm_(x, ord = 'euclidean', axis = null, keepDims = false) {
        x = convertToTensor(x, 'x', 'norm');
        const norm = normImpl(x, ord, axis);
        let keepDimsShape = norm.shape;
        if (keepDims) {
            const axes = parseAxisParam(axis, x.shape);
            keepDimsShape = expandShapeToKeepDim(norm.shape, axes);
        }
        return reshape$2(norm, keepDimsShape);
    }
    function normImpl(x, p, axis = null) {
        if (x.rank === 0) {
            return abs$2(x);
        }
        // consider vector when no axis is specified
        if (x.rank !== 1 && axis === null) {
            return normImpl(reshape$2(x, [-1]), p, axis);
        }
        // vector
        if (x.rank === 1 || typeof axis === 'number' ||
            Array.isArray(axis) && axis.length === 1) {
            if (p === 1) {
                return sum$2(abs$2(x), axis);
            }
            if (p === Infinity) {
                return max$2(abs$2(x), axis);
            }
            if (p === -Infinity) {
                return min$2(abs$2(x), axis);
            }
            if (p === 'euclidean' || p === 2) {
                // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2
                return sqrt$2(sum$2(pow$2(abs$2(x), scalar(2, 'int32')), axis));
            }
            throw new Error(`Error in norm: invalid ord value: ${p}`);
        }
        // matrix (assumption axis[0] < axis[1])
        if (Array.isArray(axis) && axis.length === 2) {
            if (p === 1) {
                return max$2(sum$2(abs$2(x), axis[0]), axis[1] - 1);
            }
            if (p === Infinity) {
                return max$2(sum$2(abs$2(x), axis[1]), axis[0]);
            }
            if (p === -Infinity) {
                return min$2(sum$2(abs$2(x), axis[1]), axis[0]);
            }
            if (p === 'fro' || p === 'euclidean') {
                // norm(x) = sqrt(sum(pow(x, 2)))
                return sqrt$2(sum$2(square$1(x), axis));
            }
            throw new Error(`Error in norm: invalid ord value: ${p}`);
        }
        throw new Error(`Error in norm: invalid axis: ${axis}`);
    }
    const norm = op({ norm_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Compute the moving average of a variable.
     *
     * Without zeroDebias, the moving average operation is defined by:
     *   `v += delta`
     * where
     *   `delta = (1 - decay) * (x - v)`
     *
     * With zeroDebias (default), the `delta` term is scaled to debias the
     * effect of the (assumed) zero-initialization of `v`.
     *   `delta /= (1 - decay ^ step)`
     *
     * For more details on the zero-debiasing algorithm, see:
     *   https://arxiv.org/abs/1412.6980
     *
     * Note that this function is completely stateless and does not keep track of
     * step count. The step count needs to be maintained by the caller and passed
     * in as `step`.
     *
     * @param v The current moving average value.
     * @param x New input value, must have the same shape and dtype as `v`.
     * @param decay The decay factor. Typical values are 0.95 and 0.99.
     * @param step Step count.
     * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).
     * @returns The new moving average value.
     *
     * @doc {heading: 'Operations', subheading: 'Moving Average'}
     */
    function movingAverage_(v, x, decay, step, zeroDebias = true) {
        const $v = convertToTensor(v, 'v', 'movingAverage');
        const $x = convertToTensor(x, 'x', 'movingAverage');
        const $decay = convertToTensor(decay, 'decay', 'movingAverage');
        assertTypesMatch($v, $x);
        assert(arraysEqual($v.shape, $x.shape), () => 'Shape mismatch in v and x');
        const one = scalar(1);
        const oneMinusDecay = sub$2(one, $decay);
        let update = mul(sub$2($x, $v), oneMinusDecay);
        if (zeroDebias) {
            assert(step != null, () => 'When using zeroDebias: true, step is required.');
            const $step = convertToTensor(step, 'step', 'movingAverage');
            update = div$1(update, sub$2(one, pow$2($decay, $step)));
        }
        return add$1($v, update);
    }
    const movingAverage = op({ movingAverage_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates a new tensor by applying sparse updates to individual
     * values or slices within a zero tensor of the given shape tensor according to
     * indices. This operator is the inverse of the `tf.gatherND` operator which
     * extracts values or slices from a given tensor.
     *
     * ```js
     * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');
     * const updates = tf.tensor1d([9, 10, 11, 12]);
     * const shape = [8];
     * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]
     * ```
     *
     * @param indices The tensor contains the indices into the output tensor.
     * @param updates The tensor contains the value for the indices.
     * @param shape: The shape of the output tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
     */
    function scatterND_(indices, updates, shape) {
        const $indices = convertToTensor(indices, 'indices', 'scatterND', 'int32');
        const $updates = convertToTensor(updates, 'updates', 'scatterND');
        validateInput$1($updates, $indices, shape);
        const inputs = { indices: $indices, updates: $updates };
        const attrs = { shape };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return ENGINE.runKernel(ScatterNd, inputs, attrs);
    }
    const scatterND = op({ scatterND_ });

    /**
     * Validate sparseToDense inputs.
     *
     * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
     * sparseIndices[i] contains the complete index where sparseValues[i] will be
     * placed.
     * @param sparseValues A 0-D or 1-D Tensor. Values
     * corresponding to each row of sparseIndices, or a scalar value to be used for
     * all sparse indices.
     * @param outputShape number[]. Shape of the dense output tensor.
     * @param validateIndices boolean. indice validation is not supported, error
     * will be thrown if it is set.
     */
    function validateInput(sparseIndices, sparseValues, outputShape, defaultValues) {
        if (sparseIndices.dtype !== 'int32') {
            throw new Error('tf.sparseToDense() expects the indices to be int32 type,' +
                ` but the dtype was ${sparseIndices.dtype}.`);
        }
        if (sparseIndices.rank > 2) {
            throw new Error('sparseIndices should be a scalar, vector, or matrix,' +
                ` but got shape ${sparseIndices.shape}.`);
        }
        const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;
        const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;
        if (outputShape.length !== numDims) {
            throw new Error('outputShape has incorrect number of elements:,' +
                ` ${outputShape.length}, should be: ${numDims}.`);
        }
        const numValues = sparseValues.size;
        if (!(sparseValues.rank === 0 ||
            sparseValues.rank === 1 && numValues === numElems)) {
            throw new Error('sparseValues has incorrect shape ' +
                `${sparseValues.shape}, should be [] or [${numElems}]`);
        }
        if (sparseValues.dtype !== defaultValues.dtype) {
            throw new Error('sparseValues.dtype must match defaultValues.dtype');
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Converts a sparse representation into a dense tensor.
     *
     * Builds an array dense with shape outputShape such that:
     *
     * // If sparseIndices is scalar
     * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)
     *
     * // If sparseIndices is a vector, then for each i
     * dense[sparseIndices[i]] = sparseValues[i]
     *
     * // If sparseIndices is an n by d matrix, then for each i in [0, n)
     * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]
     * All other values in dense are set to defaultValue. If sparseValues is a
     * scalar, all sparse indices are set to this single value.
     *
     * If indices are repeated the final value is summed over all values for those
     * indices.
     *
     * ```js
     * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');
     * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');
     * const shape = [8];
     * tf.sparseToDense(indices, values, shape).print();
     * ```
     *
     * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
     * sparseIndices[i] contains the complete index where sparseValues[i] will be
     * placed.
     * @param sparseValues A 0-D or 1-D Tensor. Values
     * corresponding to each row of sparseIndices, or a scalar value to be used for
     * all sparse indices.
     * @param outputShape Shape of the dense output tensor. the type is inferred.
     * @param defaultValue Scalar. Value to set for indices not specified in
     * sparseIndices. Defaults to zero.
     *
     * @doc {heading: 'Operations', subheading: 'Normalization'}
     */
    function sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue = 0) {
        const $sparseIndices = convertToTensor(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');
        const $sparseValues = convertToTensor(sparseValues, 'sparseValues', 'sparseToDense');
        const $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);
        validateInput($sparseIndices, $sparseValues, outputShape, $defaultValue);
        const inputs = {
            sparseIndices: $sparseIndices,
            sparseValues: $sparseValues,
            defaultValue: $defaultValue
        };
        const attrs = { outputShape };
        return ENGINE.runKernel(SparseToDense, inputs, attrs);
    }
    const sparseToDense$2 = op({ sparseToDense_ });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Gather slices from input tensor into a Tensor with shape specified by
     * `indices`.
     *
     * `indices` is an K-dimensional integer tensor, best thought of as a
     * (K-1)-dimensional tensor of indices into input, where each element defines a
     * slice of input:
     * output[\\(i_0, ..., i_{K-2}\\)] = input[indices[\\(i_0, ..., i_{K-2}\\)]]
     *
     * Whereas in `tf.gather`, `indices` defines slices into the first dimension of
     * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions
     * of input, where N = indices.shape[-1].
     *
     * The last dimension of indices can be at most the rank of input:
     * indices.shape[-1] <= input.rank
     *
     * The last dimension of `indices` corresponds to elements
     * (if indices.shape[-1] == input.rank) or slices
     * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of
     * input.
     * The output tensor has shape
     * indices.shape[:-1] + input.shape[indices.shape[-1]:]
     *
     * Note that on CPU, if an out of bound index is found, an error is returned. On
     * GPU, if an out of bound index is found, a 0 is stored in the corresponding
     * output value.
     *
     * ```js
     * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');
     * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);
     * tf.gatherND(input, indices).print() // [10, 11]
     * ```
     *
     * @param x The tensor from which to gather values.
     * @param indices Index tensor, must be of type int32.
     *
     * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
     */
    function gatherND_(x, indices) {
        const $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');
        const $x = convertToTensor(x, 'x', 'gatherND', 'string_or_numeric');
        const inputs = { params: $x, indices: $indices };
        return ENGINE.runKernel(GatherNd, inputs);
    }
    const gatherND = op({ gatherND_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Normalize noise shape based on provided tensor and noise shape.
     *
     * @param x Tensor.
     * @param noiseShape The shape for the randomly generated keep/drop flags, as
     *   an array of numbers. Optional.
     * @returns Normalized noise shape.
     */
    function getNoiseShape(x, noiseShape) {
        if (noiseShape == null) {
            return x.shape.slice();
        }
        if (arraysEqual(x.shape, noiseShape)) {
            return noiseShape;
        }
        if (x.shape.length === noiseShape.length) {
            const newDimension = [];
            for (let i = 0; i < x.shape.length; i++) {
                if (noiseShape[i] == null && x.shape[i] != null) {
                    newDimension.push(x.shape[i]);
                }
                else {
                    newDimension.push(noiseShape[i]);
                }
            }
            return newDimension;
        }
        return noiseShape;
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes dropout.
     *
     * ```js
     * const x = tf.tensor1d([1, 2, 2, 1]);
     * const rate = 0.75;
     * const output = tf.dropout(x, rate);
     * output.print();
     * ```
     *
     * @param x A floating point Tensor or TensorLike.
     * @param rate A float in the range [0, 1). The probability that each element
     *   of x is discarded.
     * @param noiseShape An array of numbers of type int32, representing the
     * shape for randomly generated keep/drop flags. If the noiseShape has null
     * value, it will be automatically replaced with the x's relative dimension
     * size. Optional.
     * @param seed Used to create random seeds. Optional.
     * @returns A Tensor of the same shape of x.
     *
     * @doc {heading: 'Operations', subheading: 'Dropout'}
     */
    function dropout_(x, rate, noiseShape, seed) {
        const $x = convertToTensor(x, 'x', 'dropout');
        assert($x.dtype === 'float32', () => `x has to be a floating point tensor since it's going to be ` +
            `scaled, but got a ${$x.dtype} tensor instead.`);
        assert(rate >= 0 && rate < 1, () => `rate must be a float in the range [0, 1), but got ${rate}.`);
        if (rate === 0) {
            return x instanceof Tensor ? $x.clone() : $x;
        }
        const $noiseShape = getNoiseShape($x, noiseShape);
        const keepProb = 1 - rate;
        const multiplier = div$1(floor$2(add$1(randomUniform($noiseShape, 0, 1, 'float32', seed), keepProb)), keepProb);
        return mul($x, multiplier);
    }
    const dropout = op({ dropout_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function enclosingPowerOfTwo(value) {
        // Return 2**N for integer N such that 2**N >= value.
        return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));
    }
    function cosineWindow(windowLength, a, b) {
        const even = 1 - windowLength % 2;
        const newValues = new Float32Array(windowLength);
        for (let i = 0; i < windowLength; ++i) {
            const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);
            newValues[i] = a - b * Math.cos(cosArg);
        }
        return tensor1d(newValues, 'float32');
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Returns whether the targets are in the top K predictions.
     *
     * ```js
     * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);
     * const targets = tf.tensor1d([2, 0]);
     * const precision = await tf.inTopKAsync(predictions, targets);
     * precision.print();
     * ```
     * @param predictions 2-D or higher `tf.Tensor` with last dimension being
     *     at least `k`.
     * @param targets 1-D or higher `tf.Tensor`.
     * @param k Optional Number of top elements to look at for computing precision,
     *     default to 1.
     *
     * @doc {heading: 'Operations', subheading: 'Evaluation'}
     */
    async function inTopKAsync_(predictions, targets, k = 1) {
        const $predictions = convertToTensor(predictions, 'predictions', 'inTopK');
        const $targets = convertToTensor(targets, 'targets', 'inTopK');
        assert($predictions.rank > 1, () => 'inTopK() expects the predictions to be of rank 2 or higher, ' +
            `but got ${$predictions.rank}`);
        assert($predictions.rank - 1 === $targets.rank, () => `predictions rank should be 1 larger than ` +
            `targets rank, but got predictions rank ` +
            `${$predictions.rank} and targets rank ${$targets.rank}`);
        assertShapesMatch($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, `predictions's shape should be align with the targets' shape, ` +
            'except the last dimension.');
        const lastDim = $predictions.shape[$predictions.shape.length - 1];
        assert(k > 0 && k <= lastDim, () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` +
            `dimension (${lastDim}), but got ${k}`);
        const predictionsVals = await $predictions.data();
        const targetsVals = await $targets.data();
        // Reshape predictionsVals into a 2d tensor [batch, lastDim]
        // and look up topK along lastDim.
        const [batch, size] = [predictionsVals.length / lastDim, lastDim];
        const precision = getTypedArrayFromDType('bool', batch);
        for (let b = 0; b < batch; b++) {
            const offset = b * size;
            const vals = predictionsVals.subarray(offset, offset + size);
            const valAndInd = [];
            for (let i = 0; i < vals.length; i++) {
                valAndInd.push({ value: vals[i], index: i });
            }
            valAndInd.sort((a, b) => b.value - a.value);
            precision[b] = 0;
            for (let i = 0; i < k; i++) {
                if (valAndInd[i].index === targetsVals[b]) {
                    precision[b] = 1;
                    break;
                }
            }
        }
        if (predictions !== $predictions) {
            $predictions.dispose();
        }
        if (targets !== $targets) {
            $targets.dispose();
        }
        // Output precision has the same shape as targets.
        return tensor(precision, $targets.shape, 'bool');
    }
    const inTopKAsync = inTopKAsync_;

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the derivative of the filter of a 2D convolution.
     *
     * @param x The input tensor, of rank 4 or rank 3 of shape
     *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.
     * @param dy The dy image, of rank 4 or rank 3, of shape
     *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.
     * @param filterShape The shape of the filter, length 4,
     *     [filterHeight, filterWidth, inDepth, outDepth].
     * @param strides The strides of the convolution: [strideHeight,
     * strideWidth].
     * @param pad A string from: 'same', 'valid'. The type of padding algorithm
     *     used in the forward prop of the op.
     * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
     *     "NHWC". Specify the data format of the input and output data. With the
     *     default format "NHWC", the data is stored in the order of: [batch,
     *     height, width, channels].
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     */
    function conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {
        let x4D = x;
        if (x.rank === 3) {
            x4D = reshape$2(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
        }
        let dy4D = dy;
        if (dy4D.rank === 3) {
            dy4D = reshape$2(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
        }
        assert(x4D.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +
            `${x4D.shape}.`);
        assert(dy4D.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +
            `${dy4D.shape}.`);
        assert(filterShape.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +
            `${filterShape}.`);
        const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
        const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
        assert(inDepth === filterShape[2], () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +
            `match input depth in filter (${filterShape[2]}.`);
        assert(outDepth === filterShape[3], () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +
            `match output depth for filter (${filterShape[3]}).`);
        checkPadOnDimRoundingMode('conv2dDerFilter', pad, dimRoundingMode);
        const inputs = { x: x4D, dy: dy4D };
        const attrs = { strides, pad, dataFormat, dimRoundingMode, filterShape };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return ENGINE.runKernel(Conv2DBackpropFilter, inputs, attrs);
    }
    const conv2DBackpropFilter$2 = op({ conv2DBackpropFilter_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Returns gradient for fused activation.
    function getFusedDyActivation(dy, y, activation) {
        if (activation == null || activation === 'linear') {
            return dy;
        }
        if (activation === 'relu') {
            return mul(dy, step$2(y));
        }
        throw new Error(`Cannot compute gradient for fused activation ${activation}.`);
    }
    // Returns gradient for fused bias.
    function getFusedBiasGradient(bias, dyActivation) {
        let res = dyActivation;
        const reduceAxes = getReductionAxes(bias.shape, dyActivation.shape);
        if (reduceAxes.length > 0) {
            res = sum$2(res, reduceAxes);
        }
        return reshape$2(res, bias.shape);
    }
    function applyActivation$1(x, activation, preluActivationWeights, leakyreluAlpha) {
        if (activation === 'linear') {
            return x;
        }
        else if (activation === 'relu') {
            return relu$2(x);
        }
        else if (activation === 'elu') {
            return elu$2(x);
        }
        else if (activation === 'relu6') {
            return relu6$2(x);
        }
        else if (activation === 'prelu') {
            return prelu$2(x, preluActivationWeights);
        }
        else if (activation === 'leakyrelu') {
            return leakyRelu$2(x, leakyreluAlpha);
        }
        else if (activation === 'sigmoid') {
            return sigmoid$2(x);
        }
        throw new Error(`Unknown fused activation ${activation}.`);
    }
    // Whether we should call fused ops.
    const shouldFuse = (gradientDepth, activation) => {
        const gradientMode = gradientDepth > 0;
        return !gradientMode || activation === 'linear';
    };

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes a 2D convolution over the input x, optionally fused with adding a
     * bias and applying an activation.
     *
     * ```js
     * const inputDepth = 2;
     * const inShape = [2, 2, 2, inputDepth];
     * const outputDepth = 2;
     * const fSize = 1;
     * const pad = 0;
     * const strides = 1;
     *
     * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
     * 16], inShape);
     * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,
     * outputDepth]);
     *
     * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',
     * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();
     * ```
     *
     * @param obj An object with the following properties:
     * @param x The input tensor, of rank 4 or rank 3, of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
     * assumed.
     * @param filter The filter, rank 4, of shape
     *     `[filterHeight, filterWidth, inDepth, outDepth]`.
     * @param strides The strides of the convolution: `[strideHeight,
     * strideWidth]`.
     * @param pad The type of padding algorithm.
     *   - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *   - `valid` output will be smaller than input if filter is larger
     *       than 1x1.
     *   - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to
     *     "NHWC". Specify the data format of the input and output data. With the
     *     default format "NHWC", the data is stored in the order of: [batch,
     *     height, width, channels]. Only "NHWC" is currently supported.
     * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
     *     in which we sample input values across the height and width dimensions
     *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
     *     number, then `dilationHeight == dilationWidth`. If it is greater than
     *     1, then all values of `strides` must be 1.
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     * @param bias Tensor to be added to the result.
     * @param activation Name of activation kernel (defaults to `linear`) to be
     *     applied
     *      after biasAdd.
     * @param preluActivationWeights Tensor of prelu weights to be applied as part
     *     of a `prelu` activation, typically the same shape as `x`.
     * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`
     *     activation.
     */
    function fusedConv2d_({ x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode, bias, activation = 'linear', preluActivationWeights, leakyreluAlpha }) {
        activation = activation || 'linear';
        if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {
            let result = conv2d$2(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
            if (bias != null) {
                result = add$1(result, bias);
            }
            return applyActivation$1(result, activation, preluActivationWeights, leakyreluAlpha);
        }
        const $x = convertToTensor(x, 'x', 'conv2d', 'float32');
        const $filter = convertToTensor(filter, 'filter', 'conv2d', 'float32');
        let x4D = $x;
        let reshapedTo4D = false;
        if ($x.rank === 3) {
            reshapedTo4D = true;
            x4D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        }
        assert(x4D.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ` +
            `${x4D.rank}.`);
        assert($filter.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ` +
            `${$filter.rank}.`);
        checkPadOnDimRoundingMode('fused conv2d', pad, dimRoundingMode);
        assert(x4D.shape[3] === $filter.shape[2], () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` +
            `input depth for filter ${$filter.shape[2]}.`);
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' +
            `Got strides ${strides} and dilations '${dilations}'`);
        assert(dataFormat === 'NHWC', () => `Error in conv2d: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);
        const convInfo = computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);
        let $bias;
        if (bias != null) {
            $bias = convertToTensor(bias, 'bias', 'fused conv2d');
            [$bias] = makeTypesMatch($bias, $x);
            assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
        }
        let $preluActivationWeights;
        if (preluActivationWeights != null) {
            $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused conv2d');
        }
        const grad = (dy, saved) => {
            const [$filter, x4D, y, $bias] = saved;
            const dyActivation = getFusedDyActivation(dy, y, activation);
            assert(tupleValuesAreOne(dilations), () => 'Error in gradient of fused conv2D: ' +
                `dilation rates greater than 1 ` +
                `are not yet supported in gradients. Got dilations '${dilations}'`);
            const xDer = conv2DBackpropInput$2(x4D.shape, dyActivation, $filter, strides, pad);
            const filterDer = conv2DBackpropFilter$2(x4D, dyActivation, $filter.shape, strides, pad);
            const der = [xDer, filterDer];
            if ($bias != null) {
                const biasDer = getFusedBiasGradient($bias, dyActivation);
                der.push(biasDer);
            }
            return der;
        };
        const inputs = {
            x: x4D,
            filter: $filter,
            bias: $bias,
            preluActivationWeights: $preluActivationWeights
        };
        const attrs = {
            strides,
            pad,
            dataFormat,
            dilations,
            dimRoundingMode,
            activation,
            leakyreluAlpha
        };
        // Depending on the the params passed in we will have different number of
        // inputs and thus a a different number of elements in the gradient.
        if (bias == null) {
            const customOp = customGrad((x4D, filter, save) => {
                let res = 
                // tslint:disable-next-line: no-unnecessary-type-assertion
                ENGINE.runKernel(FusedConv2D, inputs, attrs);
                save([filter, x4D, res]);
                if (reshapedTo4D) {
                    // tslint:disable-next-line: no-unnecessary-type-assertion
                    res = reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
                }
                return { value: res, gradFunc: grad };
            });
            return customOp(x4D, $filter);
        }
        else {
            const customOpWithBias = customGrad((x4D, filter, bias, save) => {
                let res = ENGINE.runKernel(FusedConv2D, inputs, attrs);
                save([filter, x4D, res, bias]);
                if (reshapedTo4D) {
                    // tslint:disable-next-line: no-unnecessary-type-assertion
                    res = reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
                }
                return { value: res, gradFunc: grad };
            });
            return customOpWithBias(x4D, $filter, $bias);
        }
    }
    const conv2d$1 = op({ fusedConv2d_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, strides, pad, dilations = [1, 1], dimRoundingMode) {
        let x4D = x;
        if (x.rank === 3) {
            x4D = reshape$2(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
        }
        let dy4D = dy;
        if (dy4D.rank === 3) {
            dy4D = reshape$2(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
        }
        const inputs = { x: x4D, dy: dy4D };
        const attrs = { strides, pad, dimRoundingMode, dilations, filterShape };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        return ENGINE.runKernel(DepthwiseConv2dNativeBackpropFilter, inputs, attrs);
    }
    const depthwiseConv2dNativeBackpropFilter$2 = op({ depthwiseConv2dNativeBackpropFilter_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, strides, pad, dilations = [1, 1], dimRoundingMode) {
        let dy4D = dy;
        let reshapedTo4D = false;
        if (dy.rank === 3) {
            reshapedTo4D = true;
            dy4D = reshape$2(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
        }
        const inputs = { dy: dy4D, filter };
        const attrs = { strides, pad, dimRoundingMode, dilations, inputShape: xShape };
        const res = 
        // tslint:disable-next-line: no-unnecessary-type-assertion
        ENGINE.runKernel(DepthwiseConv2dNativeBackpropInput, inputs, attrs);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    const depthwiseConv2dNativeBackpropInput$2 = op({ depthwiseConv2dNativeBackpropInput_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes depthwise 2D convolution, optionally fused with adding a
     * bias and applying an activation.
     *
     * Given a 4D `input` array and a `filter` array of shape
     * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
     * `inChannels` convolutional filters of depth 1, this op applies a
     * different filter to each input channel (expanding from 1 channel to
     * `channelMultiplier` channels for each), then concatenates the results
     * together. The output has `inChannels * channelMultiplier` channels.
     *
     * See
     * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
     *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
     * for more details.
     *
     * @param obj An object with the following properties:
     * @param x The input tensor, of rank 4 or rank 3, of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
     * assumed.
     * @param filter The filter tensor, rank 4, of shape
     *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
     * @param strides The strides of the convolution: `[strideHeight,
     * strideWidth]`. If strides is a single number, then `strideHeight ==
     * strideWidth`.
     * @param pad The type of padding algorithm.
     *   - `same` and stride 1: output will be of same size as input,
     *       regardless of filter size.
     *   - `valid`: output will be smaller than input if filter is larger
     *       than 1x1.
     *   - For more info, see this guide:
     *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
     *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
     * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
     *     in which we sample input values across the height and width dimensions
     *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
     *     number, then `dilationHeight == dilationWidth`. If it is greater than
     *     1, then all values of `strides` must be 1.
     * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
     *     "NHWC". Specify the data format of the input and output data. With the
     *     default format "NHWC", the data is stored in the order of: [batch,
     *     height, width, channels]. Only "NHWC" is currently supported.
     * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
     *     provided, it will default to truncate.
     * @param bias Tensor to be added to the result.
     * @param activation Name of activation kernel (defaults to `linear`).
     * @param preluActivationWeights Tensor of prelu weights to be applied as part
     *     of a `prelu` activation, typically the same shape as `x`.
     * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`
     *     activation.
     */
    function fusedDepthwiseConv2d_({ x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode, bias, activation = 'linear', preluActivationWeights, leakyreluAlpha }) {
        if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {
            let result = depthwiseConv2d$1(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
            if (bias != null) {
                result = add$1(result, bias);
            }
            return applyActivation$1(result, activation, preluActivationWeights, leakyreluAlpha);
        }
        const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');
        const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');
        let x4D = $x;
        let reshapedTo4D = false;
        if ($x.rank === 3) {
            reshapedTo4D = true;
            x4D = reshape$2($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        }
        assert(x4D.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` +
            `rank ${x4D.rank}.`);
        assert($filter.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, ` +
            `but got rank ${$filter.rank}.`);
        assert(x4D.shape[3] === $filter.shape[2], () => `Error in fused depthwiseConv2d: number of input channels ` +
            `(${x4D.shape[3]}) must match the inChannels dimension in ` +
            `filter ${$filter.shape[2]}.`);
        if (dilations == null) {
            dilations = [1, 1];
        }
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in fused depthwiseConv2d: Either strides or dilations must ' +
            `be 1. Got strides ${strides} and dilations '${dilations}'`);
        checkPadOnDimRoundingMode('fused depthwiseConv2d', pad, dimRoundingMode);
        const convInfo = computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
        let $bias;
        if (bias != null) {
            $bias = convertToTensor(bias, 'bias', 'fused conv2d');
            [$bias] = makeTypesMatch($bias, $x);
            assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
        }
        let $preluActivationWeights;
        if (preluActivationWeights != null) {
            $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');
        }
        const grad = (dy, saved) => {
            assert(tupleValuesAreOne(dilations), () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' +
                `greater than 1 are not yet supported. Got dilations ` +
                `'${dilations}'`);
            const [$filter, x4D, y, bias] = saved;
            const dyActivation = getFusedDyActivation(dy, y, activation);
            const xDer = depthwiseConv2dNativeBackpropInput$2(x4D.shape, dyActivation, $filter, strides, pad, dilations, dimRoundingMode);
            const filterDer = depthwiseConv2dNativeBackpropFilter$2(x4D, dyActivation, $filter.shape, strides, pad, dilations, dimRoundingMode);
            if (bias != null) {
                const biasDer = getFusedBiasGradient($bias, dyActivation);
                return [xDer, filterDer, biasDer];
            }
            return [xDer, filterDer];
        };
        const inputs = {
            x: x4D,
            filter: $filter,
            bias: $bias,
            preluActivationWeights: $preluActivationWeights
        };
        const attrs = {
            strides,
            pad,
            dataFormat,
            dilations,
            dimRoundingMode,
            activation,
            leakyreluAlpha
        };
        // Depending on the the params passed in we will have different number of
        // inputs and thus a a different number of elements in the gradient.
        if (bias == null) {
            const customOp = customGrad((x4D, filter, save) => {
                // tslint:disable-next-line: no-unnecessary-type-assertion
                let res = ENGINE.runKernel(FusedDepthwiseConv2D, inputs, attrs);
                save([filter, x4D, res]);
                if (reshapedTo4D) {
                    // tslint:disable-next-line: no-unnecessary-type-assertion
                    res = reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
                }
                return { value: res, gradFunc: grad };
            });
            return customOp(x4D, $filter);
        }
        else {
            const customOpWithBias = customGrad((x4D, filter, bias, save) => {
                // tslint:disable-next-line: no-unnecessary-type-assertion
                let res = ENGINE.runKernel(FusedDepthwiseConv2D, inputs, attrs);
                save([filter, x4D, res, bias]);
                if (reshapedTo4D) {
                    // tslint:disable-next-line: no-unnecessary-type-assertion
                    res = reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
                }
                return { value: res, gradFunc: grad };
            });
            return customOpWithBias(x4D, $filter, $bias);
        }
    }
    const depthwiseConv2d = op({ fusedDepthwiseConv2d_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the dot product of two matrices with optional activation and bias.
     *
     * ```js
     * const a = tf.tensor2d([-1, -2], [1, 2]);
     * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
     * const bias = tf.tensor2d([1, 2], [1, 2]);
     *
     * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();
     * ```
     *
     * @param obj An object with the following properties:
     * - `a` First matrix in dot product operation.
     * - `b` Second matrix in dot product operation.
     * - `transposeA` If true, `a` is transposed before multiplication.
     * - `transposeB` If true, `b` is transposed before multiplication.
     * - `bias` Matrix to be added to the result.
     * - `activation` Name of activation kernel (defaults to `linear`).
     * - `preluActivationWeights` Tensor of prelu weights.
     * - `leakyreluAlpha` Alpha of leakyrelu.
     */
    function fusedMatMul_({ a, b, transposeA = false, transposeB = false, bias, activation = 'linear', preluActivationWeights, leakyreluAlpha, }) {
        if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {
            let result = matMul$1(a, b, transposeA, transposeB);
            if (bias != null) {
                result = add$1(result, bias);
            }
            return applyActivation$1(result, activation, preluActivationWeights, leakyreluAlpha);
        }
        let $a = convertToTensor(a, 'a', 'fused matMul');
        let $b = convertToTensor(b, 'b', 'fused matMul');
        [$a, $b] = makeTypesMatch($a, $b);
        const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
        const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
        const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
        const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
        const outerDimsA = $a.shape.slice(0, -2);
        const outerDimsB = $b.shape.slice(0, -2);
        const batchDimA = sizeFromShape(outerDimsA);
        const batchDimB = sizeFromShape(outerDimsB);
        assert(innerShapeA === innerShapeB, () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` +
            `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +
            `${$b.shape} and transposeA=${transposeA}` +
            ` and transposeB=${transposeB} must match.`);
        const outShapeOuterDims = assertAndGetBroadcastShape($a.shape.slice(0, -2), $b.shape.slice(0, -2));
        const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);
        const a3D = transposeA ?
            reshape$2($a, [batchDimA, innerShapeA, outerShapeA]) :
            reshape$2($a, [batchDimA, outerShapeA, innerShapeA]);
        const b3D = transposeB ?
            reshape$2($b, [batchDimB, outerShapeB, innerShapeB]) :
            reshape$2($b, [batchDimB, innerShapeB, outerShapeB]);
        let $bias;
        if (bias != null) {
            $bias = convertToTensor(bias, 'bias', 'fused matMul');
            [$bias] = makeTypesMatch($bias, $a);
            assertAndGetBroadcastShape(outShape, $bias.shape);
        }
        let $preluActivationWeights;
        if (preluActivationWeights != null) {
            $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused matMul');
        }
        const grad = (dy, saved) => {
            const [a3D, b3D, y, $bias] = saved;
            // we reshape dy because the result of the forward is not
            // necessarily going to be a 3d tensor due to a reshape done at the end of
            // the customOp.
            const dyActivation = getFusedDyActivation(reshape$2(dy, y.shape), y, activation);
            let aDer;
            let bDer;
            if (!transposeA && !transposeB) {
                aDer = matMul$1(dyActivation, b3D, false, true);
                bDer = matMul$1(a3D, dyActivation, true, false);
            }
            else if (!transposeA && transposeB) {
                aDer = matMul$1(dyActivation, b3D, false, false);
                bDer = matMul$1(dyActivation, a3D, true, false);
            }
            else if (transposeA && !transposeB) {
                aDer = matMul$1(b3D, dyActivation, false, true);
                bDer = matMul$1(a3D, dyActivation, false, false);
            }
            else {
                aDer = matMul$1(b3D, dyActivation, true, true);
                bDer = matMul$1(dyActivation, a3D, true, true);
            }
            if (bias != null) {
                const biasDer = getFusedBiasGradient($bias, dyActivation);
                return [aDer, bDer, biasDer];
            }
            else {
                return [aDer, bDer];
            }
        };
        const inputs = {
            a: a3D,
            b: b3D,
            bias: $bias,
            preluActivationWeights: $preluActivationWeights
        };
        const attrs = { transposeA, transposeB, activation, leakyreluAlpha };
        // Depending on the the params passed in we will have different number of
        // inputs and thus a a different number of elements in the gradient.
        if (bias == null) {
            const customOp = customGrad((a3D, b3D, save) => {
                const res = 
                // tslint:disable-next-line: no-unnecessary-type-assertion
                ENGINE.runKernel(_FusedMatMul, inputs, attrs);
                save([a3D, b3D, res]);
                return { value: reshape$2(res, outShape), gradFunc: grad };
            });
            return customOp(a3D, b3D);
        }
        else {
            const customOpWithBias = customGrad((a3D, b3D, $bias, save) => {
                const res = 
                // tslint:disable-next-line: no-unnecessary-type-assertion
                ENGINE.runKernel(_FusedMatMul, inputs, attrs);
                save([a3D, b3D, res, $bias]);
                return { value: reshape$2(res, outShape), gradFunc: grad };
            });
            return customOpWithBias(a3D, b3D, $bias);
        }
    }
    const matMul = op({ fusedMatMul_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */

    var fused_ops = /*#__PURE__*/Object.freeze({
        __proto__: null,
        conv2d: conv2d$1,
        depthwiseConv2d: depthwiseConv2d,
        matMul: matMul
    });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Generate a hamming window.
     *
     * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
     *
     * ```js
     * tf.signal.hammingWindow(10).print();
     * ```
     * @param The length of window
     *
     * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
     */
    function hammingWindow_(windowLength) {
        return cosineWindow(windowLength, 0.54, 0.46);
    }
    const hammingWindow = op({ hammingWindow_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Generate a Hann window.
     *
     * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
     *
     * ```js
     * tf.signal.hannWindow(10).print();
     * ```
     * @param The length of window
     *
     * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
     */
    function hannWindow_(windowLength) {
        return cosineWindow(windowLength, 0.5, 0.5);
    }
    const hannWindow = op({ hannWindow_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Expands input into frames of frameLength.
     * Slides a window size with frameStep.
     *
     * ```js
     * tf.signal.frame([1, 2, 3], 2, 1).print();
     * ```
     * @param signal The input tensor to be expanded
     * @param frameLength Length of each frame
     * @param frameStep The frame hop size in samples.
     * @param padEnd Whether to pad the end of signal with padValue.
     * @param padValue An number to use where the input signal does
     *     not exist when padEnd is True.
     *
     * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
     */
    function frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {
        let start = 0;
        const output = [];
        while (start + frameLength <= signal.size) {
            output.push(slice$2(signal, start, frameLength));
            start += frameStep;
        }
        if (padEnd) {
            while (start < signal.size) {
                const padLen = (start + frameLength) - signal.size;
                const pad = concat$2([
                    slice$2(signal, start, frameLength - padLen), fill$2([padLen], padValue)
                ]);
                output.push(pad);
                start += frameStep;
            }
        }
        if (output.length === 0) {
            return tensor2d([], [0, frameLength]);
        }
        return reshape$2(concat$2(output), [output.length, frameLength]);
    }
    const frame = op({ frame_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the Short-time Fourier Transform of signals
     * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform
     *
     * ```js
     * const input = tf.tensor1d([1, 1, 1, 1, 1])
     * tf.signal.stft(input, 3, 1).print();
     * ```
     * @param signal 1-dimensional real value tensor.
     * @param frameLength The window length of samples.
     * @param frameStep The number of samples to step.
     * @param fftLength The size of the FFT to apply.
     * @param windowFn A callable that takes a window length and returns 1-d tensor.
     *
     * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
     */
    function stft_(signal, frameLength, frameStep, fftLength, windowFn = hannWindow) {
        if (fftLength == null) {
            fftLength = enclosingPowerOfTwo(frameLength);
        }
        const framedSignal = frame(signal, frameLength, frameStep);
        const windowedSignal = mul(framedSignal, windowFn(frameLength));
        return rfft(windowedSignal, fftLength);
    }
    const stft = op({ stft_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Extracts crops from the input image tensor and resizes them using bilinear
     * sampling or nearest neighbor sampling (possibly with aspect ratio change)
     * to a common output size specified by cropSize.
     *
     * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,
     *     where imageHeight and imageWidth must be positive, specifying the
     *     batch of images from which to take crops
     * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is
     *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized
     *     coordinates of the box in the boxInd[i]'th image in the batch
     * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range
     *     `[0, batch)` that specifies the image that the `i`-th box refers to.
     * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`
     *     specifying the size to which all crops are resized to.
     * @param method Optional string from `'bilinear' | 'nearest'`,
     *     defaults to bilinear, which specifies the sampling method for resizing
     * @param extrapolationValue A threshold for deciding when to remove boxes based
     *     on score. Defaults to 0.
     * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    function cropAndResize_(image, boxes, boxInd, cropSize, method = 'bilinear', extrapolationValue = 0) {
        const $image = convertToTensor(image, 'image', 'cropAndResize');
        const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');
        const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');
        const numBoxes = $boxes.shape[0];
        assert($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' +
            `but got rank ${$image.rank}.`);
        assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +
            `but had shape ${$boxes.shape}.`);
        assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +
            `but had shape ${$boxes.shape}.`);
        assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` +
            `length ${cropSize.length}.`);
        assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);
        assert(method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);
        const inputs = { image: $image, boxes: $boxes, boxInd: $boxInd };
        const attrs = { method, extrapolationValue, cropSize };
        const res = ENGINE.runKernel(CropAndResize, inputs, attrs);
        return res;
    }
    const cropAndResize$2 = op({ cropAndResize_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Flips the image left to right. Currently available in the CPU, WebGL, and
     * WASM backends.
     *
     * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
     */
    /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
    function flipLeftRight_(image) {
        const $image = convertToTensor(image, 'image', 'flipLeftRight', 'float32');
        assert($image.rank === 4, () => 'Error in flipLeftRight: image must be rank 4,' +
            `but got rank ${$image.rank}.`);
        const inputs = { image: $image };
        const res = ENGINE.runKernel(FlipLeftRight, inputs, {});
        return res;
    }
    const flipLeftRight = op({ flipLeftRight_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Converts images from grayscale to RGB format.
     *
     * @param image A grayscale tensor to convert. The `image`'s last dimension must
     *     be size 1 with at least a two-dimensional shape.
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    function grayscaleToRGB_(image) {
        const $image = convertToTensor(image, 'image', 'grayscaleToRGB');
        const lastDimsIdx = $image.rank - 1;
        const lastDims = $image.shape[lastDimsIdx];
        assert($image.rank >= 2, () => 'Error in grayscaleToRGB: images must be at least rank 2, ' +
            `but got rank ${$image.rank}.`);
        assert(lastDims === 1, () => 'Error in grayscaleToRGB: last dimension of a grayscale image ' +
            `should be size 1, but got size ${lastDims}.`);
        const reps = new Array($image.rank);
        reps.fill(1, 0, lastDimsIdx);
        reps[lastDimsIdx] = 3;
        return tile$2($image, reps);
    }
    const grayscaleToRGB = op({ grayscaleToRGB_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Rotates the input image tensor counter-clockwise with an optional offset
     * center of rotation. Currently available in the CPU, WebGL, and WASM backends.
     *
     * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
     * @param radians The amount of rotation.
     * @param fillValue The value to fill in the empty space leftover
     *     after rotation. Can be either a single grayscale value (0-255), or an
     *     array of three numbers `[red, green, blue]` specifying the red, green,
     *     and blue channels. Defaults to `0` (black).
     * @param center The center of rotation. Can be either a single value (0-1), or
     *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates
     *     the image around its center).
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    function rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {
        const $image = convertToTensor(image, 'image', 'rotateWithOffset', 'float32');
        assert($image.rank === 4, () => 'Error in rotateWithOffset: image must be rank 4,' +
            `but got rank ${$image.rank}.`);
        const inputs = { image: $image };
        const attrs = { radians, fillValue, center };
        const res = ENGINE.runKernel(RotateWithOffset, inputs, attrs);
        return res;
    }
    const rotateWithOffset = op({ rotateWithOffset_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
        if (iouThreshold == null) {
            iouThreshold = 0.5;
        }
        if (scoreThreshold == null) {
            scoreThreshold = Number.NEGATIVE_INFINITY;
        }
        if (softNmsSigma == null) {
            softNmsSigma = 0.0;
        }
        const numBoxes = boxes.shape[0];
        maxOutputSize = Math.min(maxOutputSize, numBoxes);
        assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);
        assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);
        assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);
        assert(scores.rank === 1, () => 'scores must be a 1D tensor');
        assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +
            `but was ${scores.shape[0]}`);
        assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);
        return { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Performs non maximum suppression of bounding boxes based on
     * iou (intersection over union).
     *
     * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
     *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
     *     the bounding box.
     * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
     * @param maxOutputSize The maximum number of boxes to be selected.
     * @param iouThreshold A float representing the threshold for deciding whether
     *     boxes overlap too much with respect to IOU. Must be between [0, 1].
     *     Defaults to 0.5 (50% box overlap).
     * @param scoreThreshold A threshold for deciding when to remove boxes based
     *     on score. Defaults to -inf, which means any score is accepted.
     * @return A 1D tensor with the selected box indices.
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    function nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
        const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression', 'float32');
        const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression', 'float32');
        const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
        maxOutputSize = inputs.maxOutputSize;
        iouThreshold = inputs.iouThreshold;
        scoreThreshold = inputs.scoreThreshold;
        const attrs = { maxOutputSize, iouThreshold, scoreThreshold };
        return ENGINE.runKernel(NonMaxSuppressionV3, { boxes: $boxes, scores: $scores }, attrs);
    }
    const nonMaxSuppression = op({ nonMaxSuppression_ });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Inserts a value into a sorted array. This method allows duplicate, meaning it
     * allows inserting duplicate value, in which case, the element will be inserted
     * at the lowest index of the value.
     * @param arr The array to modify.
     * @param element The element to insert.
     * @param comparator Optional. If no comparator is specified, elements are
     * compared using array_util.defaultComparator, which is suitable for Strings
     * and Numbers in ascending arrays. If the array contains multiple instances of
     * the target value, the left-most instance will be returned. To provide a
     * comparator, it should take 2 arguments to compare and return a negative,
     * zero, or a positive number.
     */
    function binaryInsert(arr, element, comparator) {
        const index = binarySearch(arr, element, comparator);
        const insertionPoint = index < 0 ? -(index + 1) : index;
        arr.splice(insertionPoint, 0, element);
    }
    /**
     * Searches the array for the target using binary search, returns the index
     * of the found element, or position to insert if element not found. If no
     * comparator is specified, elements are compared using array_
     * util.defaultComparator, which is suitable for Strings and Numbers in
     * ascending arrays. If the array contains multiple instances of the target
     * value, the left-most instance will be returned.
     * @param arr The array to be searched in.
     * @param target The target to be searched for.
     * @param comparator Should take 2 arguments to compare and return a negative,
     *    zero, or a positive number.
     * @return Lowest index of the target value if found, otherwise the insertion
     *    point where the target should be inserted, in the form of
     *    (-insertionPoint - 1).
     */
    function binarySearch(arr, target, comparator) {
        return binarySearch_(arr, target, comparator || defaultComparator);
    }
    /**
     * Compares its two arguments for order.
     * @param a The first element to be compared.
     * @param b The second element to be compared.
     * @return A negative number, zero, or a positive number as the first
     *     argument is less than, equal to, or greater than the second.
     */
    function defaultComparator(a, b) {
        return a > b ? 1 : a < b ? -1 : 0;
    }
    function binarySearch_(arr, target, comparator) {
        let left = 0;
        let right = arr.length;
        let middle = 0;
        let found = false;
        while (left < right) {
            middle = left + ((right - left) >>> 1);
            const compareResult = comparator(target, arr[middle]);
            if (compareResult > 0) {
                left = middle + 1;
            }
            else {
                right = middle;
                // If compareResult is 0, the value is found. We record it is found,
                // and then keep looking because there may be duplicate.
                found = !compareResult;
            }
        }
        return found ? left : -left - 1;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function nonMaxSuppressionV3Impl$2(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
        return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */);
    }
    function nonMaxSuppressionV4Impl$2(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {
        return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */, false /* returnScoresTensor */, padToMaxOutputSize /* padToMaxOutputSize */, true
        /* returnValidOutputs */ );
    }
    function nonMaxSuppressionV5Impl$2(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
        return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true /* returnScoresTensor */);
    }
    function nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {
        // The list is sorted in ascending order, so that we can always pop the
        // candidate with the largest score in O(1) time.
        const candidates = [];
        for (let i = 0; i < scores.length; i++) {
            if (scores[i] > scoreThreshold) {
                candidates.push({ score: scores[i], boxIndex: i, suppressBeginIndex: 0 });
            }
        }
        candidates.sort(ascendingComparator);
        // If softNmsSigma is 0, the outcome of this algorithm is exactly same as
        // before.
        const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;
        const selectedIndices = [];
        const selectedScores = [];
        while (selectedIndices.length < maxOutputSize && candidates.length > 0) {
            const candidate = candidates.pop();
            const { score: originalScore, boxIndex, suppressBeginIndex } = candidate;
            if (originalScore < scoreThreshold) {
                break;
            }
            // Overlapping boxes are likely to have similar scores, therefore we
            // iterate through the previously selected boxes backwards in order to
            // see if candidate's score should be suppressed. We use
            // suppressBeginIndex to track and ensure a candidate can be suppressed
            // by a selected box no more than once. Also, if the overlap exceeds
            // iouThreshold, we simply ignore the candidate.
            let ignoreCandidate = false;
            for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {
                const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);
                if (iou >= iouThreshold) {
                    ignoreCandidate = true;
                    break;
                }
                candidate.score =
                    candidate.score * suppressWeight(iouThreshold, scale, iou);
                if (candidate.score <= scoreThreshold) {
                    break;
                }
            }
            // At this point, if `candidate.score` has not dropped below
            // `scoreThreshold`, then we know that we went through all of the
            // previous selections and can safely update `suppressBeginIndex` to the
            // end of the selected array. Then we can re-insert the candidate with
            // the updated score and suppressBeginIndex back in the candidate list.
            // If on the other hand, `candidate.score` has dropped below the score
            // threshold, we will not add it back to the candidates list.
            candidate.suppressBeginIndex = selectedIndices.length;
            if (!ignoreCandidate) {
                // Candidate has passed all the tests, and is not suppressed, so
                // select the candidate.
                if (candidate.score === originalScore) {
                    selectedIndices.push(boxIndex);
                    selectedScores.push(candidate.score);
                }
                else if (candidate.score > scoreThreshold) {
                    // Candidate's score is suppressed but is still high enough to be
                    // considered, so add back to the candidates list.
                    binaryInsert(candidates, candidate, ascendingComparator);
                }
            }
        }
        // NonMaxSuppressionV4 feature: padding output to maxOutputSize.
        const validOutputs = selectedIndices.length;
        const elemsToPad = maxOutputSize - validOutputs;
        if (padToMaxOutputSize && elemsToPad > 0) {
            selectedIndices.push(...new Array(elemsToPad).fill(0));
            selectedScores.push(...new Array(elemsToPad).fill(0.0));
        }
        const result = { selectedIndices };
        if (returnScoresTensor) {
            result['selectedScores'] = selectedScores;
        }
        if (returnValidOutputs) {
            result['validOutputs'] = validOutputs;
        }
        return result;
    }
    function intersectionOverUnion(boxes, i, j) {
        const iCoord = boxes.subarray(i * 4, i * 4 + 4);
        const jCoord = boxes.subarray(j * 4, j * 4 + 4);
        const yminI = Math.min(iCoord[0], iCoord[2]);
        const xminI = Math.min(iCoord[1], iCoord[3]);
        const ymaxI = Math.max(iCoord[0], iCoord[2]);
        const xmaxI = Math.max(iCoord[1], iCoord[3]);
        const yminJ = Math.min(jCoord[0], jCoord[2]);
        const xminJ = Math.min(jCoord[1], jCoord[3]);
        const ymaxJ = Math.max(jCoord[0], jCoord[2]);
        const xmaxJ = Math.max(jCoord[1], jCoord[3]);
        const areaI = (ymaxI - yminI) * (xmaxI - xminI);
        const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);
        if (areaI <= 0 || areaJ <= 0) {
            return 0.0;
        }
        const intersectionYmin = Math.max(yminI, yminJ);
        const intersectionXmin = Math.max(xminI, xminJ);
        const intersectionYmax = Math.min(ymaxI, ymaxJ);
        const intersectionXmax = Math.min(xmaxI, xmaxJ);
        const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *
            Math.max(intersectionXmax - intersectionXmin, 0.0);
        return intersectionArea / (areaI + areaJ - intersectionArea);
    }
    // A Gaussian penalty function, this method always returns values in [0, 1].
    // The weight is a function of similarity, the more overlap two boxes are, the
    // smaller the weight is, meaning highly overlapping boxe will be significantly
    // penalized. On the other hand, a non-overlapping box will not be penalized.
    function suppressWeight(iouThreshold, scale, iou) {
        const weight = Math.exp(scale * iou * iou);
        return iou <= iouThreshold ? weight : 0.0;
    }
    function ascendingComparator(c1, c2) {
        // For objects with same scores, we make the object with the larger index go
        // first. In an array that pops from the end, this means that the object with
        // the smaller index will be popped first. This ensures the same output as
        // the TensorFlow python version.
        return (c1.score - c2.score) ||
            ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Performs non maximum suppression of bounding boxes based on
     * iou (intersection over union).
     *
     * This is the async version of `nonMaxSuppression`
     *
     * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
     *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
     *     the bounding box.
     * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
     * @param maxOutputSize The maximum number of boxes to be selected.
     * @param iouThreshold A float representing the threshold for deciding whether
     *     boxes overlap too much with respect to IOU. Must be between [0, 1].
     *     Defaults to 0.5 (50% box overlap).
     * @param scoreThreshold A threshold for deciding when to remove boxes based
     *     on score. Defaults to -inf, which means any score is accepted.
     * @return A 1D tensor with the selected box indices.
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    async function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
        const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');
        const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');
        const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
        maxOutputSize = inputs.maxOutputSize;
        iouThreshold = inputs.iouThreshold;
        scoreThreshold = inputs.scoreThreshold;
        const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);
        const boxesVals = boxesAndScores[0];
        const scoresVals = boxesAndScores[1];
        // We call a cpu based impl directly with the typedarray data  here rather
        // than a kernel because all kernels are synchronous (and thus cannot await
        // .data()).
        const { selectedIndices } = nonMaxSuppressionV3Impl$2(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
        if ($boxes !== boxes) {
            $boxes.dispose();
        }
        if ($scores !== scores) {
            $scores.dispose();
        }
        return tensor1d(selectedIndices, 'int32');
    }
    const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Performs non maximum suppression of bounding boxes based on
     * iou (intersection over union).
     *
     * This op also supports a Soft-NMS mode (c.f.
     * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
     * of other overlapping boxes, therefore favoring different regions of the image
     * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
     * parameter to be larger than 0.
     *
     * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
     *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
     *     the bounding box.
     * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
     * @param maxOutputSize The maximum number of boxes to be selected.
     * @param iouThreshold A float representing the threshold for deciding whether
     *     boxes overlap too much with respect to IOU. Must be between [0, 1].
     *     Defaults to 0.5 (50% box overlap).
     * @param scoreThreshold A threshold for deciding when to remove boxes based
     *     on score. Defaults to -inf, which means any score is accepted.
     * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
     *     When sigma is 0, it falls back to nonMaxSuppression.
     * @return A map with the following properties:
     *     - selectedIndices: A 1D tensor with the selected box indices.
     *     - selectedScores: A 1D tensor with the corresponding scores for each
     *       selected box.
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    function nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
        const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');
        const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');
        const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
        maxOutputSize = params.maxOutputSize;
        iouThreshold = params.iouThreshold;
        scoreThreshold = params.scoreThreshold;
        softNmsSigma = params.softNmsSigma;
        const inputs = { boxes: $boxes, scores: $scores };
        const attrs = { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const result = ENGINE.runKernel(NonMaxSuppressionV5, inputs, attrs);
        return { selectedIndices: result[0], selectedScores: result[1] };
    }
    const nonMaxSuppressionWithScore = op({ nonMaxSuppressionWithScore_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Asynchronously performs non maximum suppression of bounding boxes based on
     * iou (intersection over union).
     *
     * This op also supports a Soft-NMS mode (c.f.
     * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
     * of other overlapping boxes, therefore favoring different regions of the image
     * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
     * parameter to be larger than 0.
     *
     * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
     *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
     *     the bounding box.
     * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
     * @param maxOutputSize The maximum number of boxes to be selected.
     * @param iouThreshold A float representing the threshold for deciding whether
     *     boxes overlap too much with respect to IOU. Must be between [0, 1].
     *     Defaults to 0.5 (50% box overlap).
     * @param scoreThreshold A threshold for deciding when to remove boxes based
     *     on score. Defaults to -inf, which means any score is accepted.
     * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
     *     When sigma is 0, it falls back to nonMaxSuppression.
     * @return A map with the following properties:
     *     - selectedIndices: A 1D tensor with the selected box indices.
     *     - selectedScores: A 1D tensor with the corresponding scores for each
     *       selected box.
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    async function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
        const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');
        const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');
        const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
        maxOutputSize = params.maxOutputSize;
        iouThreshold = params.iouThreshold;
        scoreThreshold = params.scoreThreshold;
        softNmsSigma = params.softNmsSigma;
        const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);
        const boxesVals = boxesAndScores[0];
        const scoresVals = boxesAndScores[1];
        // We call a cpu based impl directly with the typedarray data  here rather
        // than a kernel because all kernels are synchronous (and thus cannot await
        // .data()).
        const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl$2(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
        if ($boxes !== boxes) {
            $boxes.dispose();
        }
        if ($scores !== scores) {
            $scores.dispose();
        }
        return {
            selectedIndices: tensor1d(selectedIndices, 'int32'),
            selectedScores: tensor1d(selectedScores)
        };
    }
    const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Asynchronously performs non maximum suppression of bounding boxes based on
     * iou (intersection over union), with an option to pad results.
     *
     * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
     *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
     *     the bounding box.
     * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
     * @param maxOutputSize The maximum number of boxes to be selected.
     * @param iouThreshold A float representing the threshold for deciding whether
     *     boxes overlap too much with respect to IOU. Must be between [0, 1].
     *     Defaults to 0.5 (50% box overlap).
     * @param scoreThreshold A threshold for deciding when to remove boxes based
     *     on score. Defaults to -inf, which means any score is accepted.
     * @param padToMaxOutputSize Defalts to false. If true, size of output
     *     `selectedIndices` is padded to maxOutputSize.
     * @return A map with the following properties:
     *     - selectedIndices: A 1D tensor with the selected box indices.
     *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
     *       are valid. Valid elements occur first, then padding.
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    function nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
        const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');
        const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');
        const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);
        const $maxOutputSize = params.maxOutputSize;
        const $iouThreshold = params.iouThreshold;
        const $scoreThreshold = params.scoreThreshold;
        const inputs = { boxes: $boxes, scores: $scores };
        const attrs = {
            maxOutputSize: $maxOutputSize,
            iouThreshold: $iouThreshold,
            scoreThreshold: $scoreThreshold,
            padToMaxOutputSize
        };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const result = ENGINE.runKernel(NonMaxSuppressionV4, inputs, attrs);
        return { selectedIndices: result[0], validOutputs: result[1] };
    }
    const nonMaxSuppressionPadded = op({ nonMaxSuppressionPadded_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Asynchronously performs non maximum suppression of bounding boxes based on
     * iou (intersection over union), with an option to pad results.
     *
     * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
     *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
     *     the bounding box.
     * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
     * @param maxOutputSize The maximum number of boxes to be selected.
     * @param iouThreshold A float representing the threshold for deciding whether
     *     boxes overlap too much with respect to IOU. Must be between [0, 1].
     *     Defaults to 0.5 (50% box overlap).
     * @param scoreThreshold A threshold for deciding when to remove boxes based
     *     on score. Defaults to -inf, which means any score is accepted.
     * @param padToMaxOutputSize Defalts to false. If true, size of output
     *     `selectedIndices` is padded to maxOutputSize.
     * @return A map with the following properties:
     *     - selectedIndices: A 1D tensor with the selected box indices.
     *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
     *       are valid. Valid elements occur first, then padding.
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    async function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
        const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');
        const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');
        const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);
        const $maxOutputSize = params.maxOutputSize;
        const $iouThreshold = params.iouThreshold;
        const $scoreThreshold = params.scoreThreshold;
        const [boxesVals, scoresVals] = await Promise.all([$boxes.data(), $scores.data()]);
        // We call a cpu based impl directly with the typedarray data here rather
        // than a kernel because all kernels are synchronous (and thus cannot await
        // .data()).
        const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl$2(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);
        if ($boxes !== boxes) {
            $boxes.dispose();
        }
        if ($scores !== scores) {
            $scores.dispose();
        }
        return {
            selectedIndices: tensor1d(selectedIndices, 'int32'),
            validOutputs: scalar(validOutputs, 'int32')
        };
    }
    const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Bilinear resize a single 3D image or a batch of 3D images to a new shape.
     *
     * @param images The images, of rank 4 or rank 3, of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
     * @param size The new shape `[newHeight, newWidth]` to resize the
     *     images to. Each channel is resized individually.
     * @param alignCorners Defaults to `false`. If true, rescale
     *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
     *     corners of images and resized images. If false, rescale by
     *     `new_height / height`. Treat similarly the width dimension.
     * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers
     *     are at 0.5, which would make the floating point coordinates of the top
     *     left pixel 0.5, 0.5.
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    function resizeBilinear_(images, size, alignCorners = false, halfPixelCenters = false) {
        const $images = convertToTensor(images, 'images', 'resizeBilinear');
        assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +
            `rank ${$images.rank}.`);
        assert(size.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ` +
            `${size}.`);
        assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeBilinear: If halfPixelCenters is true, ` +
            `alignCorners must be false.`);
        let batchImages = $images;
        let reshapedTo4D = false;
        if ($images.rank === 3) {
            reshapedTo4D = true;
            batchImages = reshape$2($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);
        }
        const inputs = { images: batchImages };
        const attrs = { alignCorners, halfPixelCenters, size };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(ResizeBilinear, inputs, attrs);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    const resizeBilinear$2 = op({ resizeBilinear_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * NearestNeighbor resize a batch of 3D images to a new shape.
     *
     * @param images The images, of rank 4 or rank 3, of shape
     *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
     * @param size The new shape `[newHeight, newWidth]` to resize the
     *     images to. Each channel is resized individually.
     * @param alignCorners Defaults to False. If true, rescale
     *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
     *     corners of images and resized images. If false, rescale by
     *     `new_height / height`. Treat similarly the width dimension.
     * @param halfPixelCenters Defaults to `false`. Whether to assumes pixels are of
     *      half the actual dimensions, and yields more accurate resizes. This flag
     *      would also make the floating point coordinates of the top left pixel
     *      0.5, 0.5.
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    function resizeNearestNeighbor_(images, size, alignCorners = false, halfPixelCenters = false) {
        const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');
        assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +
            `rank ${$images.rank}.`);
        assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +
            `${size}.`);
        assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');
        assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` +
            `alignCorners must be false.`);
        let batchImages = $images;
        let reshapedTo4D = false;
        if ($images.rank === 3) {
            reshapedTo4D = true;
            batchImages = reshape$2($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);
        }
        const inputs = { images: batchImages };
        const attrs = { alignCorners, halfPixelCenters, size };
        // tslint:disable-next-line: no-unnecessary-type-assertion
        const res = ENGINE.runKernel(ResizeNearestNeighbor, inputs, attrs);
        if (reshapedTo4D) {
            return reshape$2(res, [res.shape[1], res.shape[2], res.shape[3]]);
        }
        return res;
    }
    const resizeNearestNeighbor$2 = op({ resizeNearestNeighbor_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Performs image binarization with corresponding threshold
     * (depends on the method)value, which creates a binary image from a grayscale.
     * @param image 3d tensor of shape [imageHeight,imageWidth, depth],
     * where imageHeight and imageWidth must be positive.The image color
     * range should be [0, 255].
     * @param method Optional string from `'binary' | 'otsu'`
     * which specifies the method for thresholding. Defaults to 'binary'.
     * @param inverted Optional boolean whichspecifies
     * if colours should be inverted. Defaults to false.
     * @param threshValue Optional number which defines threshold value from 0 to 1.
     * Defaults to 0.5.
     * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which
     * contains binarized image.
     */
    function threshold_(image, method = 'binary', inverted = false, threshValue = 0.5) {
        const $image = convertToTensor(image, 'image', 'threshold');
        /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.
        Reference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */
        const RED_INTENCITY_COEF = 0.2989;
        const GREEN_INTENCITY_COEF = 0.5870;
        const BLUE_INTENCITY_COEF = 0.1140;
        const totalPixelsInImage = $image.shape[0] * $image.shape[1];
        let $threshold = mul(tensor1d([threshValue]), 255);
        let r, g, b, grayscale;
        assert($image.rank === 3, () => 'Error in threshold: image must be rank 3,' +
            `but got rank ${$image.rank}.`);
        assert($image.shape[2] === 3 || $image.shape[2] === 1, () => 'Error in threshold: ' +
            'image color channel must be equal to 3 or 1' +
            `but got ${$image.shape[2]}.`);
        assert($image.dtype === 'int32' || $image.dtype === 'float32', () => 'Error in dtype: image dtype must be int32 or float32,' +
            `but got dtype ${$image.dtype}.`);
        assert(method === 'otsu' || method === 'binary', () => `Method must be binary or otsu, but was ${method}`);
        if ($image.shape[2] === 3) {
            [r, g, b] = split$1($image, [1, 1, 1], -1);
            const $r = mul(r, RED_INTENCITY_COEF);
            const $g = mul(g, GREEN_INTENCITY_COEF);
            const $b = mul(b, BLUE_INTENCITY_COEF);
            grayscale = add$1(add$1($r, $g), $b);
        }
        else {
            grayscale = image;
        }
        if (method === 'otsu') {
            const $histogram = bincount$2(cast$2(round$2(grayscale), 'int32'), tensor([]), 256);
            $threshold = otsu($histogram, totalPixelsInImage);
        }
        const invCondition = inverted ?
            lessEqual$2(grayscale, $threshold) : greater$2(grayscale, $threshold);
        const result = cast$2(mul(invCondition, 255), 'int32');
        return result;
    }
    function otsu(histogram, total) {
        let bestThresh = tensor1d([-1]);
        let bestInBetVar = tensor1d([0]);
        let cInBetVar = tensor1d([0]);
        let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;
        for (let index = 0; index < histogram.size - 1; index++) {
            classFirst = slice$2(histogram, 0, index + 1);
            classSecond = slice$2(histogram, index + 1);
            weightForeground = div$1(sum$2(classFirst), total);
            weightBack = div$1(sum$2(classSecond), total);
            const meanFirstDivA = sum$2(mul(classFirst, range$2(0, classFirst.size)));
            meanFirst = div$1(meanFirstDivA, sum$2(classFirst));
            const meanSecFill = fill$2(classSecond.shape, classFirst.size);
            const meanSecAdd = add$1(range$2(0, classSecond.size), meanSecFill);
            const meanSecMul = mul(classSecond, (meanSecAdd));
            meanSec = div$1(sum$2(meanSecMul), sum$2(classSecond));
            const cInBetVarSubA = sub$2(meanFirst, meanSec);
            const cInBetVarSubB = sub$2(meanFirst, meanSec);
            const cInBetVarMul = mul(weightForeground, weightBack);
            cInBetVar = mul(mul(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);
            const condition = greater$2(cInBetVar, bestInBetVar);
            bestInBetVar = where(condition, cInBetVar, bestInBetVar);
            bestThresh = where(condition, tensor1d([index]), bestThresh);
        }
        return bestThresh;
    }
    const threshold$1 = op({ threshold_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Applies the given transform(s) to the image(s).
     *
     * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
     * @param transforms Projective transform matrix/matrices. A tensor1d of length
     *     8 or tensor of size N x 8. If one row of transforms is [a0, a1, a2, b0
     *     b1, b2, c0, c1], then it maps the output point (x, y) to a transformed
     *     input point (x', y') = ((a0 x + a1 y + a2) / k, (b0 x + b1 y + b2) / k),
     *     where k = c0 x + c1 y + 1. The transforms are inverted compared to the
     *     transform mapping input points to output points.
     * @param interpolation Interpolation mode.
     *     Supported values: 'nearest', 'bilinear'. Default to 'nearest'.
     * @param fillMode Points outside the boundaries of the input are filled
     *     according to the given mode, one of 'constant', 'reflect', 'wrap',
     *     'nearest'. Default to 'constant'.
     *     'reflect': (d c b a | a b c d | d c b a ) The input is extended by
     *     reflecting about the edge of the last pixel.
     *     'constant': (k k k k | a b c d | k k k k) The input is extended by
     *     filling all values beyond the edge with the same constant value k.
     *     'wrap': (a b c d | a b c d | a b c d) The input is extended by
     *     wrapping around to the opposite edge.
     *     'nearest': (a a a a | a b c d | d d d d) The input is extended by
     *     the nearest pixel.
     * @param fillValue A float represents the value to be filled outside the
     *     boundaries when fillMode is 'constant'.
     * @param Output dimension after the transform, [height, width]. If undefined,
     *     output is the same size as input image.
     *
     * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
     */
    function transform_(image, transforms, interpolation = 'nearest', fillMode = 'constant', fillValue = 0, outputShape) {
        const $image = convertToTensor(image, 'image', 'transform', 'float32');
        const $transforms = convertToTensor(transforms, 'transforms', 'transform', 'float32');
        assert($image.rank === 4, () => 'Error in transform: image must be rank 4,' +
            `but got rank ${$image.rank}.`);
        assert($transforms.rank === 2 &&
            ($transforms.shape[0] === $image.shape[0] ||
                $transforms.shape[0] === 1) &&
            $transforms.shape[1] === 8, () => `Error in transform: Input transform should be batch x 8 or 1 x 8`);
        assert(outputShape == null || outputShape.length === 2, () => 'Error in transform: outputShape must be [height, width] or null, ' +
            `but got ${outputShape}.`);
        const inputs = { image: $image, transforms: $transforms };
        const attrs = { interpolation, fillMode, fillValue, outputShape };
        return ENGINE.runKernel(Transform, inputs, attrs);
    }
    const transform$2 = op({ transform_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Copy a tensor setting everything outside a central band in each innermost
     * matrix to zero.
     *
     * The band part is computed as follows: Assume input has `k` dimensions
     * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where
     * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.
     * The indicator function
     * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`
     * `&& (num_upper < 0 || (n-m) <= num_upper)`
     *
     * ```js
     * const x = tf.tensor2d([[ 0,  1,  2, 3],
     *                        [-1,  0,  1, 2],
     *                        [-2, -1,  0, 1],
     *                        [-3, -2, -1, 0]]);
     * let y = tf.linalg.bandPart(x, 1, -1);
     * y.print(); // [[ 0,  1,  2, 3],
     *            //  [-1,  0,  1, 2],
     *            //  [ 0, -1,  0, 1],
     *            //  [ 0, 0 , -1, 0]]
     * let z = tf.linalg.bandPart(x, 2, 1);
     * z.print(); // [[ 0,  1,  0, 0],
     *            //  [-1,  0,  1, 0],
     *            //  [-2, -1,  0, 1],
     *            //  [ 0, -2, -1, 0]]
     * ```
     *
     * @param x Rank `k` tensor
     * @param numLower Number of subdiagonals to keep.
     *   If negative, keep entire lower triangle.
     * @param numUpper Number of subdiagonals to keep.
     *   If negative, keep entire upper triangle.
     * @returns Rank `k` tensor of the same shape as input.
     *   The extracted banded tensor.
     *
     * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
     */
    function bandPart_(a, numLower, numUpper) {
        assert(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);
        assert(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);
        const $a = convertToTensor(a, 'a', 'bandPart');
        assert($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);
        const shape = $a.shape;
        const [M, N] = $a.shape.slice(-2);
        if (!(numLower <= M)) {
            throw new Error(`bandPart(): numLower (${numLower})` +
                ` must not be greater than the number of rows (${M}).`);
        }
        if (!(numUpper <= N)) {
            throw new Error(`bandPart(): numUpper (${numUpper})` +
                ` must not be greater than the number of columns (${N}).`);
        }
        if (numLower < 0) {
            numLower = M;
        }
        if (numUpper < 0) {
            numUpper = N;
        }
        const i = reshape$2(range$2(0, M, 1, 'int32'), [-1, 1]);
        const j = range$2(0, N, 1, 'int32');
        const ij = sub$2(i, j);
        const inBand = logicalAnd$2(lessEqual$2(ij, scalar(+numLower, 'int32')), greaterEqual$2(ij, scalar(-numUpper, 'int32')));
        const zero = zeros$1([M, N], $a.dtype);
        return reshape$2(stack(unstack(reshape$2($a, [-1, M, N]))
            .map(mat => where(inBand, mat, zero))), shape);
    }
    const bandPart = op({ bandPart_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Gram-Schmidt orthogonalization.
     *
     * ```js
     * const x = tf.tensor2d([[1, 2], [3, 4]]);
     * let y = tf.linalg.gramSchmidt(x);
     * y.print();
     * console.log('Othogonalized:');
     * y.dot(y.transpose()).print();  // should be nearly the identity matrix.
     * console.log('First row direction maintained:');
     * const data = await y.array();
     * console.log(data[0][1] / data[0][0]);  // should be nearly 2.
     * ```
     *
     * @param xs The vectors to be orthogonalized, in one of the two following
     *   formats:
     *   - An Array of `tf.Tensor1D`.
     *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows
     *     of `xs`.
     *   In each case, all the vectors must have the same length and the length
     *   must be greater than or equal to the number of vectors.
     * @returns The orthogonalized and normalized vectors or matrix.
     *   Orthogonalization means that the vectors or the rows of the matrix
     *   are orthogonal (zero inner products). Normalization means that each
     *   vector or each row of the matrix has an L2 norm that equals `1`.
     *
     * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
     */
    function gramSchmidt_(xs) {
        let inputIsTensor2D;
        if (Array.isArray(xs)) {
            inputIsTensor2D = false;
            assert(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' +
                'empty');
            const dim = xs[0].shape[0];
            for (let i = 1; i < xs.length; ++i) {
                assert(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +
                    `(${xs[i].shape[0]} vs. ${dim})`);
            }
        }
        else {
            inputIsTensor2D = true;
            xs = split$1(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));
        }
        assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` +
            `number of dimensions (${xs[0].shape[0]}).`);
        const ys = [];
        const xs1d = xs;
        for (let i = 0; i < xs.length; ++i) {
            ys.push(ENGINE.tidy(() => {
                let x = xs1d[i];
                if (i > 0) {
                    for (let j = 0; j < i; ++j) {
                        const proj = mul(sum$2(mul(ys[j], x)), ys[j]);
                        x = sub$2(x, proj);
                    }
                }
                return div$1(x, norm(x, 'euclidean'));
            }));
        }
        if (inputIsTensor2D) {
            return stack(ys, 0);
        }
        else {
            return ys;
        }
    }
    const gramSchmidt = op({ gramSchmidt_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Compute QR decomposition of m-by-n matrix using Householder transformation.
     *
     * Implementation based on
     *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]
     * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)
     *
     * ```js
     * const a = tf.tensor2d([[1, 2], [3, 4]]);
     * let [q, r] = tf.linalg.qr(a);
     * console.log('Q');
     * q.print();
     * console.log('R');
     * r.print();
     * console.log('Orthogonalized');
     * q.dot(q.transpose()).print()  // should be nearly the identity matrix.
     * console.log('Reconstructed');
     * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];
     * ```
     *
     * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose
     *   it has the shape `[..., M, N]`.
     * @param fullMatrices An optional boolean parameter. Defaults to `false`.
     *   If `true`, compute full-sized `Q`. If `false` (the default),
     *   compute only the leading N columns of `Q` and `R`.
     * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,
     *   i.e., its columns all have unit norm and are mutually orthogonal.
     *   If `M >= N`,
     *     If `fullMatrices` is `false` (default),
     *       - `Q` has a shape of `[..., M, N]`,
     *       - `R` has a shape of `[..., N, N]`.
     *     If `fullMatrices` is `true` (default),
     *       - `Q` has a shape of `[..., M, M]`,
     *       - `R` has a shape of `[..., M, N]`.
     *   If `M < N`,
     *     - `Q` has a shape of `[..., M, M]`,
     *     - `R` has a shape of `[..., M, N]`.
     * @throws If the rank of `x` is less than 2.
     *
     * @doc {heading:'Operations',
     *       subheading:'Linear Algebra',
     *       namespace:'linalg'}
     */
    function qr_(x, fullMatrices = false) {
        assert(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);
        if (x.rank === 2) {
            return qr2d(x, fullMatrices);
        }
        else {
            // Rank > 2.
            // TODO(cais): Below we split the input into individual 2D tensors,
            //   perform QR decomposition on them and then stack the results back
            //   together. We should explore whether this can be parallelized.
            const outerDimsProd = x.shape.slice(0, x.shape.length - 2)
                .reduce((value, prev) => value * prev);
            const x2ds = unstack(reshape$2(x, [
                outerDimsProd, x.shape[x.shape.length - 2],
                x.shape[x.shape.length - 1]
            ]), 0);
            const q2ds = [];
            const r2ds = [];
            x2ds.forEach(x2d => {
                const [q2d, r2d] = qr2d(x2d, fullMatrices);
                q2ds.push(q2d);
                r2ds.push(r2d);
            });
            const q = reshape$2(stack(q2ds, 0), x.shape);
            const r = reshape$2(stack(r2ds, 0), x.shape);
            return [q, r];
        }
    }
    function qr2d(x, fullMatrices = false) {
        return ENGINE.tidy(() => {
            assert(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);
            const m = x.shape[0];
            const n = x.shape[1];
            let q = eye(m); // Orthogonal transform so far.
            let r = clone(x); // Transformed matrix so far.
            const one2D = tensor2d([[1]], [1, 1]);
            let w = clone(one2D);
            const iters = m >= n ? n : m;
            for (let j = 0; j < iters; ++j) {
                // This tidy within the for-loop ensures we clean up temporary
                // tensors as soon as they are no longer needed.
                const rTemp = r;
                const wTemp = w;
                const qTemp = q;
                [w, r, q] = ENGINE.tidy(() => {
                    // Find H = I - tau * w * w', to put zeros below R(j, j).
                    const rjEnd1 = slice$2(r, [j, j], [m - j, 1]);
                    const normX = norm(rjEnd1);
                    const rjj = slice$2(r, [j, j], [1, 1]);
                    // The sign() function returns 0 on 0, which causes division by zero.
                    const s = where(greater$2(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));
                    const u1 = sub$2(rjj, mul(s, normX));
                    const wPre = div$1(rjEnd1, u1);
                    if (wPre.shape[0] === 1) {
                        w = clone(one2D);
                    }
                    else {
                        w = concat$2([
                            one2D,
                            slice$2(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])
                        ], 0);
                    }
                    const tau = neg$2(div$1(matMul$1(s, u1), normX));
                    // -- R := HR, Q := QH.
                    const rjEndAll = slice$2(r, [j, 0], [m - j, n]);
                    const tauTimesW = mul(tau, w);
                    const wT = transpose$2(w);
                    if (j === 0) {
                        r = sub$2(rjEndAll, matMul$1(tauTimesW, matMul$1(wT, rjEndAll)));
                    }
                    else {
                        const rTimesTau = sub$2(rjEndAll, matMul$1(tauTimesW, matMul$1(wT, rjEndAll)));
                        r = concat$2([slice$2(r, [0, 0], [j, n]), rTimesTau], 0);
                    }
                    const tawTimesWT = transpose$2(tauTimesW);
                    const qAllJEnd = slice$2(q, [0, j], [m, q.shape[1] - j]);
                    if (j === 0) {
                        q = sub$2(qAllJEnd, matMul$1(matMul$1(qAllJEnd, w), tawTimesWT));
                    }
                    else {
                        const qTimesTau = sub$2(qAllJEnd, matMul$1(matMul$1(qAllJEnd, w), tawTimesWT));
                        q = concat$2([slice$2(q, [0, 0], [m, j]), qTimesTau], 1);
                    }
                    return [w, r, q];
                });
                dispose([rTemp, wTemp, qTemp]);
            }
            if (!fullMatrices && m > n) {
                q = slice$2(q, [0, 0], [m, n]);
                r = slice$2(r, [0, 0], [n, n]);
            }
            return [q, r];
        });
    }
    const qr = op({ qr_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    var Reduction;
    (function (Reduction) {
        Reduction[Reduction["NONE"] = 0] = "NONE";
        Reduction[Reduction["MEAN"] = 1] = "MEAN";
        Reduction[Reduction["SUM"] = 2] = "SUM";
        Reduction[Reduction["SUM_BY_NONZERO_WEIGHTS"] = 3] = "SUM_BY_NONZERO_WEIGHTS";
    })(Reduction || (Reduction = {}));

    /**
     * Computes the weighted loss between two tensors.
     *
     * @param losses Tensor of shape `[batch_size, d1, ... dN]`.
     * @param weights Tensor whose rank is either 0, or the same rank as
     *    `losses`, and must be broadcastable to `losses` (i.e., all
     *    dimensions must be either `1`, or the same as the corresponding
     *    `losses` dimension).
     *
     * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
     */
    function computeWeightedLoss_(losses, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
        const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');
        let $weights = null;
        if (weights != null) {
            $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');
        }
        const weightedLoss = ($weights == null) ? $losses : mul($losses, $weights);
        if (reduction === Reduction.NONE) {
            return weightedLoss;
        }
        if (reduction === Reduction.SUM) {
            return sum$2(weightedLoss);
        }
        if (reduction === Reduction.MEAN) {
            if ($weights == null) {
                return mean$1(weightedLoss);
            }
            else {
                const broadcastFactor = $losses.size / $weights.size;
                const result = div$1(sum$2(weightedLoss), sum$2($weights));
                return broadcastFactor > 1 ? div$1(result, scalar(broadcastFactor)) :
                    result;
            }
        }
        if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {
            if ($weights == null) {
                return div$1(sum$2(weightedLoss), scalar($losses.size));
            }
            else {
                const broadcastedWeights = mul($weights, ones($losses.shape));
                const numNonZeros = cast$2(sum$2(notEqual$2(broadcastedWeights, scalar(0))), 'float32');
                return div$1(sum$2(weightedLoss), numNonZeros);
            }
        }
        throw Error(`Unknown reduction: ${reduction}`);
    }
    const computeWeightedLoss = op({ computeWeightedLoss_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the absolute difference loss between two tensors.
     *
     * @param labels The ground truth output tensor, same dimensions as
     *    'predictions'.
     * @param predictions The predicted outputs.
     * @param weights Tensor whose rank is either 0, or the same rank as
     *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
     *    must be either `1`, or the same as the corresponding `losses`
     *    dimension).
     * @param reduction Type of reduction to apply to loss. Should be of type
     *    `Reduction`
     *
     * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
     */
    function absoluteDifference_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
        const $labels = convertToTensor(labels, 'labels', 'absoluteDifference');
        const $predictions = convertToTensor(predictions, 'predictions', 'absoluteDifference');
        let $weights = null;
        if (weights != null) {
            $weights = convertToTensor(weights, 'weights', 'absoluteDifference');
        }
        assertShapesMatch($labels.shape, $predictions.shape, 'Error in absoluteDifference: ');
        const losses = abs$2(sub$2($labels, $predictions));
        return computeWeightedLoss(losses, $weights, reduction);
    }
    const absoluteDifference = op({ absoluteDifference_ });

    /**
     * Computes the cosine distance loss between two tensors.
     *
     * @param labels The ground truth output tensor, same dimensions as
     *    'predictions'.
     * @param predictions The predicted outputs.
     * @param axis The dimension along which the cosine distance is computed.
     * @param weights Tensor whose rank is either 0, or the same rank as
     *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
     *    must be either `1`, or the same as the corresponding `losses`
     *    dimension).
     * @param reduction Type of reduction to apply to loss. Should be of type
     *    `Reduction`
     *
     * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
     */
    function cosineDistance_(labels, predictions, axis, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
        const $labels = convertToTensor(labels, 'labels', 'cosineDistance');
        const $predictions = convertToTensor(predictions, 'predictions', 'cosineDistance');
        let $weights = null;
        if (weights != null) {
            $weights = convertToTensor(weights, 'weights', 'cosineDistance');
        }
        assertShapesMatch($labels.shape, $predictions.shape, 'Error in cosineDistance: ');
        const one = scalar(1);
        const losses = sub$2(one, sum$2(mul($labels, $predictions), axis, true));
        return computeWeightedLoss(losses, $weights, reduction);
    }
    const cosineDistance = op({ cosineDistance_ });

    /**
     * Computes the Hinge loss between two tensors.
     *
     * @param labels The ground truth output tensor, same dimensions as
     *    'predictions'.
     * @param predictions The predicted outputs.
     * @param weights Tensor whose rank is either 0, or the same rank as
     *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
     *    must be either `1`, or the same as the corresponding `losses`
     *    dimension).
     * @param reduction Type of reduction to apply to loss. Should be of type
     *    `Reduction`
     *
     * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
     */
    function hingeLoss_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
        let $labels = convertToTensor(labels, 'labels', 'hingeLoss');
        const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');
        let $weights = null;
        if (weights != null) {
            $weights = convertToTensor(weights, 'weights', 'hingeLoss');
        }
        assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');
        const one = scalar(1);
        // Convert binary labels to (-1, 1)
        $labels = sub$2(mul(scalar(2), $labels), one);
        const losses = relu$2(sub$2(one, mul($labels, $predictions)));
        return computeWeightedLoss(losses, $weights, reduction);
    }
    const hingeLoss = op({ hingeLoss_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the huber loss between two tensors.
     *
     * @param labels The ground truth output tensor, same dimensions as
     *    'predictions'.
     * @param predictions The predicted outputs.
     * @param weights Tensor whose rank is either 0, or the same rank as
     *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
     *    must be either `1`, or the same as the corresponding `losses`
     *    dimension).
     * @param delta Point where huber loss changes from quadratic to linear.
     * @param reduction Type of reduction to apply to loss. Should be of type
     *    `Reduction`.
     *
     * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
     */
    function huberLoss_(labels, predictions, weights, delta = 1.0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
        const $labels = convertToTensor(labels, 'labels', 'huberLoss');
        const $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');
        let $weights = null;
        if (weights != null) {
            $weights = convertToTensor(weights, 'weights', 'huberLoss');
        }
        assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');
        const deltaScalar = scalar(delta);
        const error = abs$2(sub$2($predictions, $labels));
        const quadratic = minimum$2(error, deltaScalar);
        const linear = sub$2(error, quadratic);
        const losses = add$1(mul(scalar(0.5), square$1(quadratic)), mul(deltaScalar, linear));
        return computeWeightedLoss(losses, $weights, reduction);
    }
    const huberLoss = op({ huberLoss_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the log loss between two tensors.
     *
     * @param labels The ground truth output tensor, same dimensions as
     *    'predictions'.
     * @param predictions The predicted outputs.
     * @param weights Tensor whose rank is either 0, or the same rank as
     *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
     *    must be either `1`, or the same as the corresponding `losses`
     *    dimension).
     * @param epsilon A small increment to avoid taking log of zero
     * @param reduction Type of reduction to apply to loss. Should be of type
     *    `Reduction`
     *
     * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
     */
    function logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
        const $labels = convertToTensor(labels, 'labels', 'logLoss');
        const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');
        let $weights = null;
        if (weights != null) {
            $weights = convertToTensor(weights, 'weights', 'logLoss');
        }
        assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');
        const one = scalar(1);
        const epsilonScalar = scalar(epsilon);
        const l1 = neg$2(mul($labels, log$2(add$1($predictions, epsilonScalar))));
        const l2 = mul(sub$2(one, $labels), log$2(add$1(sub$2(one, $predictions), epsilonScalar)));
        const losses = sub$2(l1, l2);
        return computeWeightedLoss(losses, $weights, reduction);
    }
    const logLoss = op({ logLoss_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the mean squared error between two tensors.
     *
     * @param labels The ground truth output tensor, same dimensions as
     *    'predictions'.
     * @param predictions The predicted outputs.
     * @param weights Tensor whose rank is either 0, or the same rank as
     *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
     *    must be either `1`, or the same as the corresponding `losses`
     *    dimension).
     * @param reduction Type of reduction to apply to loss. Should be of type
     *    `Reduction`
     *
     * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
     */
    function meanSquaredError_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
        const $labels = convertToTensor(labels, 'labels', 'meanSquaredError');
        const $predictions = convertToTensor(predictions, 'predictions', 'meanSquaredError');
        let $weights = null;
        if (weights != null) {
            $weights = convertToTensor(weights, 'weights', 'meanSquaredError');
        }
        assertShapesMatch($labels.shape, $predictions.shape, 'Error in meanSquaredError: ');
        const losses = squaredDifference$2($labels, $predictions);
        return computeWeightedLoss(losses, $weights, reduction);
    }
    const meanSquaredError = op({ meanSquaredError_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sigmoidCrossEntropyWithLogits_(labels, logits) {
        const $labels = convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');
        const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');
        assertShapesMatch($labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');
        /**
         * Implementation Details:
         *
         * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
         *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
         *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
         *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
         *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
         *   = (1 - z) * x + log(1 + exp(-x))
         *   = x - x * z + log(1 + exp(-x))
         *
         *   For x < 0, to avoid overflow in exp(-x), we reformulate the above
         *     x - x * z + log(1 + exp(-x))
         *   = log(exp(x)) - x * z + log(1 + exp(-x))
         *   = - x * z + log(1 + exp(x))
         *
         * Hence, to ensure stability and avoid overflow, the implementation uses
         * this equivalent formulation:
         *     max(x, 0) - x * z + log(1 + exp(-abs(x)))
         */
        const maxOutput = relu$2($logits);
        const outputXTarget = mul($logits, $labels);
        const sigmoidOutput = log1p$2(exp$2(neg$2(abs$2($logits))));
        return add$1(sub$2(maxOutput, outputXTarget), sigmoidOutput);
    }
    /**
     * Computes the sigmoid cross entropy loss between two tensors.
     *
     * If labelSmoothing is nonzero, smooth the labels towards 1/2:
     *
     *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)
     *                         + 0.5 * labelSmoothing
     *
     * @param multiClassLabels The ground truth output tensor of shape
     * [batch_size, num_classes], same dimensions as 'predictions'.
     * @param logits The predicted outputs.
     * @param weights Tensor whose rank is either 0, or the same rank as
     *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
     *    must be either `1`, or the same as the corresponding `losses`
     *    dimension).
     * @param labelSmoothing If greater than 0, then smooth the labels.
     * @param reduction Type of reduction to apply to loss. Should be of type
     *    `Reduction`
     *
     * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
     */
    function sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
        let $multiClassLabels = convertToTensor(multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');
        const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');
        let $weights = null;
        if (weights != null) {
            $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');
        }
        assertShapesMatch($multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');
        if (labelSmoothing > 0) {
            const labelSmoothingScalar = scalar(labelSmoothing);
            const one = scalar(1);
            const half = scalar(0.5);
            $multiClassLabels =
                add$1(mul($multiClassLabels, sub$2(one, labelSmoothingScalar)), mul(half, labelSmoothingScalar));
        }
        const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);
        return computeWeightedLoss(losses, $weights, reduction);
    }
    const sigmoidCrossEntropy = op({ sigmoidCrossEntropy_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes softmax cross entropy between logits and labels.
     *
     * Measures the probability error in discrete classification tasks in which
     * the classes are mutually exclusive (each entry is in exactly one class).
     * For example, each CIFAR-10 image is labeled with one and only one label: an
     * image can be a dog or a truck, but not both.
     *
     * `NOTE`: While the classes are mutually exclusive, their probabilities need
     * not be. All that is required is that each row of labels is a valid
     * probability distribution. If they are not, the computation of the gradient
     * will be incorrect.
     *
     * `WARNING`: This op expects unscaled logits, since it performs a softmax on
     * logits internally for efficiency. Do not call this op with the output of
     * softmax, as it will produce incorrect results.
     *
     * logits and labels must have the same shape, e.g. [batch_size, num_classes]
     * and the same dtype.
     * @param labels The labels array.
     * @param logits The logits array.
     * @param dim The dimension softmax would be performed on. Defaults to `-1`
     *     which indicates the last dimension.
     */
    function softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {
        if (dim === -1) {
            dim = logits.rank - 1;
        }
        if (dim !== logits.rank - 1) {
            throw Error(`Softmax cross entropy along a non-last dimension is not yet ` +
                `supported. Labels / logits was rank ${logits.rank} ` +
                `and dim was ${dim}`);
        }
        // Use a custom gradient for numerical stability.
        const customOp = customGrad((labels, logits, save) => {
            // Reference:
            //   1. http://cs231n.github.io/linear-classify/#softmax
            //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/
            const keepDims = true;
            const lse = logSumExp(logits, [dim], keepDims);
            const logResult = sub$2(cast$2(logits, 'float32'), lse);
            save([labels, logResult]);
            const costVector = neg$2(mul(logResult, labels));
            const value = sum$2(costVector, [dim]);
            const gradFunc = (dy, saved) => {
                const [labels, logResult] = saved;
                const dyShape = expandShapeToKeepDim(dy.shape, [dim]);
                return [
                    mul(reshape$2(dy, dyShape), sub$2(cast$2(labels, 'float32'), exp$2(logResult))),
                    mul(reshape$2(dy, dyShape), sub$2(exp$2(logResult), cast$2(labels, 'float32'))),
                ];
            };
            return { value, gradFunc };
        });
        return customOp(labels, logits);
    }
    /**
     * Computes the softmax cross entropy loss between two tensors.
     *
     * If labelSmoothing is nonzero, smooth the labels towards 1/2:
     *
     *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)
     *                         + labelSmoothing / numClasses
     *
     * @param onehotLabels One hot encoded labels
     *    [batch_size, num_classes], same dimensions as 'predictions'.
     * @param logits The predicted outputs.
     * @param weights Tensor whose rank is either 0, or 1, and must be
     *    broadcastable to `loss`  of shape [batch_size]
     * @param labelSmoothing If greater than 0, then smooth the labels.
     * @param reduction Type of reduction to apply to loss. Should be of type
     *    `Reduction`
     *
     * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
     */
    function softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {
        let $onehotLabels = convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');
        const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');
        let $weights = null;
        if (weights != null) {
            $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');
        }
        assertShapesMatch($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');
        if (labelSmoothing > 0) {
            const labelSmoothingScalar = scalar(labelSmoothing);
            const one = scalar(1);
            const numClasses = scalar($onehotLabels.shape[1]);
            $onehotLabels =
                add$1(mul($onehotLabels, sub$2(one, labelSmoothingScalar)), div$1(labelSmoothingScalar, numClasses));
        }
        const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);
        return computeWeightedLoss(losses, $weights, reduction);
    }
    const softmaxCrossEntropy = op({ softmaxCrossEntropy_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * The input SparseTensor is represented via the map of inputs {`indices`,
     * `values`, `denseShape`}. The output SparseTensor has the same `denseShape`
     * but with indices `outputIndices` and values `outputValues`. This op inserts a
     * single entry for every row that doesn't have any values. The index is created
     * as `[row, 0, ..., 0]` and the inserted value is `defaultValue`.
     *
     * For example, suppose `spInput` has shape [5, 6] and non-empty values:
     * [0, 1]: a
     * [0, 3]: b
     * [2, 0]: c
     * [3, 1]: d
     *
     * Rows 1 and 4 are empty, so the output will be of shape [5, 6] with values:
     * [0, 1]: a
     * [0, 3]: b
     * [1, 0]: `defaultValue`
     * [2, 0]: c
     * [3, 1]: d
     * [4, 0]: `defaultValue`
     *
     * The output SparseTensor will be in row-major order and will have the same
     * shape as the input.
     *
     * This op also returns an indicator vector shaped [dense_shape[0]] such that
     * emptyRowIndicator[i] = True iff row i was an empty row.
     *
     * And a reverse index map vector shaped [indices.shape[0]] that is used during
     * backpropagation, reverseIndexMap[i] = outi s.t. indices[i, j] ==
     * outputIndices[outi, j] for all j
     *
     * ```js
     * const result = tf.sparse.sparseFillEmptyRows(
     *   [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]],
     *   [0, 10, 13, 14, 32, 33], [5, 6], -1);
     * console.log(result);
     * result['outputIndices'].print(); // [[0, 0], [1, 0], [1, 3], [1, 4],
     *                                  //  [2, 0], [3, 2], [3, 3], [4, 0]]
     * result['outputValues'].print(); // [0, 10, 13, 14,-1, 32, 33, -1]
     * result['emptyRowIndicator'].print(); // [false, false, true, false, true]
     * result['reverseIndexMap'].print(); // [0, 1, 2, 3, 5, 6]
     * ```
     * @param indices: 2-D. the indices of the sparse tensor.
     * @param values: 1-D. the values of the sparse tensor.
     * @param denseShape: 1-D. the shape of the sparse tensor.
     * @param defaultValue: 0-D. default value to insert into location [row, 0, ...,
     *     0] for rows missing from the input sparse tensor.
     * @return A map with the following properties:
     *     - outputIndices
     *     - outputValues: 1-D. the values of the filled sparse tensor.
     *     - emptyRowIndicator: 1-D. whether the dense row was missing in the input
     * sparse tensor.
     *     - reverseIndexMap: 1-D. a map from the input indices to the output
     * indices.
     * @doc {heading: 'Operations', subheading: 'Sparse'}
     */
    function sparseFillEmptyRows_(indices, values, denseShape, defaultValue) {
        const $indices = convertToTensor(indices, 'indices', 'sparseFillEmptyRows', 'int32');
        const $values = convertToTensor(values, 'values', 'sparseFillEmptyRows');
        const $denseShape = convertToTensor(denseShape, 'denseShape', 'sparseFillEmptyRows', 'int32');
        const $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'sparseFillEmptyRows', $values.dtype);
        if ($indices.rank !== 2) {
            throw new Error(`Indices should be Tensor2D but received shape
        ${$indices.shape}`);
        }
        if ($values.rank !== 1) {
            throw new Error(`Values should be Tensor1D but received shape ${$values.shape}`);
        }
        if ($denseShape.rank !== 1) {
            throw new Error(`Dense shape should be Tensor1D but received shape ${$denseShape.shape}`);
        }
        if ($defaultValue.rank !== 0) {
            throw new Error(`Default value should be a scalar but received shape ${$defaultValue.shape}`);
        }
        const inputs = {
            indices: $indices,
            values: $values,
            denseShape: $denseShape,
            defaultValue: $defaultValue
        };
        const result = ENGINE.runKernel(SparseFillEmptyRows, inputs);
        return {
            outputIndices: result[0],
            outputValues: result[1],
            emptyRowIndicator: result[2],
            reverseIndexMap: result[3]
        };
    }
    const sparseFillEmptyRows$2 = op({ sparseFillEmptyRows_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * This operation has the same semantics as reshape on the represented dense
     * tensor. The `inputIndices` are recomputed based on the requested `newShape`.
     * If one component of `newShape` is the special value -1, the size of that
     * dimension is computed so that the total dense size remains constant. At most
     * one component of `newShape` can be -1. The number of dense elements implied
     * by `newShape` must be the same as the number of dense elements originally
     * implied by `inputShape`. Reshaping does not affect the order of values in the
     * SparseTensor. If the input tensor has rank R_in and N non-empty values, and
     * `newShape` has length R_out, then `inputIndices` has shape [N, R_in],
     * `inputShape` has length R_in, `outputIndices` has shape [N, R_out], and
     * `outputShape` has length R_out.
     *
     * ```js
     * const result = tf.sparse.sparseReshape(
     *   [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 2, 3]],
     *   [2, 3, 6], [9, -1]);
     * console.log(result);
     * result['outputIndices'].print(); //[[0, 0], [0, 1], [1, 2], [4, 2], [8, 1]]
     * result['outputShape'].print(); // [9, 4]
     * ```
     * @param inputIndices: 2-D. N x R_in matrix with the indices of non-empty
     * values in a SparseTensor.
     * @param inputShape: 1-D. R_in Tensor1D with the input SparseTensor's dense
     * shape.
     * @param newShape: 1-D. R_out Tensor1D with the requested new dense shape.
     * @return A map with the following properties:
     *     - outputIndices: 2-D. N x R_out matrix with the updated indices of
     *       non-empty values in the output SparseTensor.
     *     - outputShape: 1-D. R_out vector with the full dense shape of the output
     *       SparseTensor. This is the same as newShape but with any -1 dimensions
     *        filled in.
     * @doc {heading: 'Operations', subheading: 'Sparse'}
     */
    function sparseReshape_(inputIndices, inputShape, newShape) {
        const $inputIndices = convertToTensor(inputIndices, 'inputIndices', 'sparseReshape', 'int32');
        const $inputShape = convertToTensor(inputShape, 'inputShape', 'sparseReshape', 'int32');
        const $newShape = convertToTensor(newShape, 'newShape', 'sparseReshape', 'int32');
        if ($inputIndices.rank !== 2) {
            throw new Error(`Input indices should be Tensor2D but received shape
        ${$inputIndices.shape}`);
        }
        if ($inputShape.rank !== 1) {
            throw new Error(`Input shape should be Tensor1D but received shape ${$inputShape.shape}`);
        }
        if ($newShape.rank !== 1) {
            throw new Error(`New shape should be Tensor1D but received shape ${$newShape.shape}`);
        }
        const inputs = {
            inputIndices: $inputIndices,
            inputShape: $inputShape,
            newShape: $newShape
        };
        const result = ENGINE.runKernel(SparseReshape, inputs);
        return { outputIndices: result[0], outputShape: result[1] };
    }
    const sparseReshape$2 = op({ sparseReshape_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the mean along sparse segments of a tensor.
     *
     * ```js
     * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [6,7,8,9]]);
     * // Select two rows, one segment.
     * const result1 = tf.sparse.sparseSegmentMean(c,
     *                                           tf.tensor1d([0, 1], 'int32'),
     *                                           tf.tensor1d([0, 0], 'int32'));
     * result1.print(); // [[0, 0, 0, 0]]
     *
     * // Select two rows, two segments.
     * const result2 = tf.sparse.sparseSegmentMean(c,
     *                                             tf.tensor1d([0, 1], 'int32'),
     *                                             tf.tensor1d([0, 1], 'int32'));
     * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]
     *
     * // Select all rows, two segments.
     * const result3 = tf.sparse.sparseSegmentMean(c,
     *                                             tf.tensor1d([0, 1, 2], 'int32'),
     *                                             tf.tensor1d([0, 1, 1], 'int32'));
     * result3.print(); // [[1.0, 2.0, 3.0, 4.0], [2.5, 2.5, 2.5, 2.5]]
     * ```
     * @param data: A Tensor of at least one dimension with data that will be
     *     assembled in the output.
     * @param indices: A 1-D Tensor with indices into data. Has same rank as
     *     segmentIds.
     * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values
     *     should be sorted and can be repeated.
     * @return Has same shape as data, except for dimension 0 which has equal to
     *         the number of segments.
     *
     * @doc {heading: 'Operations', subheading: 'Sparse'}
     */
    function sparseSegmentMean_(data, indices, segmentIds) {
        const $data = convertToTensor(data, 'data', 'sparseSegmentMean');
        const $indices = convertToTensor(indices, 'indices', 'sparseSegmentMean', 'int32');
        const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentMean', 'int32');
        if ($data.rank < 1) {
            throw new Error(`Data should be at least 1 dimensional but received scalar`);
        }
        if ($indices.rank !== 1) {
            throw new Error(`Indices should be Tensor1D but received shape
          ${$indices.shape}`);
        }
        if ($segmentIds.rank !== 1) {
            throw new Error(`Segment ids should be Tensor1D but received shape
          ${$segmentIds.shape}`);
        }
        const inputs = {
            data: $data,
            indices: $indices,
            segmentIds: $segmentIds
        };
        return ENGINE.runKernel(SparseSegmentMean, inputs);
    }
    const sparseSegmentMean$2 = op({ sparseSegmentMean_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Computes the sum along sparse segments of a tensor.
     *
     * ```js
     * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]]);
     * // Select two rows, one segment.
     * const result1 = tf.sparse.sparseSegmentSum(c,
     *                                           tf.tensor1d([0, 1], 'int32'),
     *                                           tf.tensor1d([0, 0], 'int32'));
     * result1.print(); // [[0, 0, 0, 0]]
     *
     * // Select two rows, two segment.
     * const result2 = tf.sparse.sparseSegmentSum(c,
     *                                           tf.tensor1d([0, 1], 'int32'),
     *                                           tf.tensor1d([0, 1], 'int32'));
     * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]
     *
     * // Select all rows, two segments.
     * const result3 = tf.sparse.sparseSegmentSum(c,
     *                                           tf.tensor1d([0, 1, 2], 'int32'),
     *                                           tf.tensor1d([0, 0, 1], 'int32'));
     * result3.print(); // [[0, 0, 0, 0], [5, 6, 7, 8]]
     * ```
     * @param data: A Tensor of at least one dimension with data that will be
     *     assembled in the output.
     * @param indices: A 1-D Tensor with indices into data. Has same rank as
     *     segmentIds.
     * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values
     *     should be sorted and can be repeated.
     * @return Has same shape as data, except for dimension 0 which has equal to
     *         the number of segments.
     *
     * @doc {heading: 'Operations', subheading: 'Sparse'}
     */
    function sparseSegmentSum_(data, indices, segmentIds) {
        const $data = convertToTensor(data, 'data', 'sparseSegmentSum');
        const $indices = convertToTensor(indices, 'indices', 'sparseSegmentSum', 'int32');
        const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentSum', 'int32');
        if ($data.rank < 1) {
            throw new Error(`Data should be at least 1 dimensional but received scalar`);
        }
        if ($indices.rank !== 1) {
            throw new Error(`Indices should be Tensor1D but received shape
         ${$indices.shape}`);
        }
        if ($segmentIds.rank !== 1) {
            throw new Error(`Segment ids should be Tensor1D but received shape
         ${$segmentIds.shape}`);
        }
        const inputs = {
            data: $data,
            indices: $indices,
            segmentIds: $segmentIds
        };
        return ENGINE.runKernel(SparseSegmentSum, inputs);
    }
    const sparseSegmentSum$2 = op({ sparseSegmentSum_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Creates ngrams from ragged string data.
     *
     * This op accepts a ragged tensor with 1 ragged dimension containing only
     * strings and outputs a ragged tensor with 1 ragged dimension containing ngrams
     * of that string, joined along the innermost axis.
     *
     * ```js
     * const result = tf.string.stringNGrams(
     *   ['a', 'b', 'c', 'd'], tf.tensor1d([0, 2, 4], 'int32'),
     *   '|', [1, 2], 'LP', 'RP', -1, false);
     * result['nGrams'].print(); // ['a', 'b', 'LP|a', 'a|b', 'b|RP',
     *                           //  'c', 'd', 'LP|c', 'c|d', 'd|RP']
     * result['nGramsSplits'].print(); // [0, 5, 10]
     * ```
     * @param data: The values tensor of the ragged string tensor to make ngrams out
     *     of. Must be a 1D string tensor.
     * @param dataSplits: The splits tensor of the ragged string tensor to make
     *     ngrams out of.
     * @param separator: The string to append between elements of the token. Use ""
     *     for no separator.
     * @param nGramWidths: The sizes of the ngrams to create.
     * @param leftPad: The string to use to pad the left side of the ngram sequence.
     *     Only used if pad_width !== 0.
     * @param rightPad: The string to use to pad the right side of the ngram
     *     sequence. Only used if pad_width !== 0.
     * @param padWidth: The number of padding elements to add to each side of each
     *     sequence. Note that padding will never be greater than `nGramWidths`-1
     *     regardless of this value. If `padWidth`=-1 , then add max(`nGramWidths)-1
     *     elements.
     * @param preserveShortSequences: If true, then ensure that at least one ngram
     *     is generated for each input sequence. In particular, if an input sequence
     *     is shorter than min(ngramWidth) + 2*padWidth, then generate a single
     *     ngram containing the entire sequence. If false, then no ngrams are
     *     generated for these short input sequences.
     * @return A map with the following properties:
     *     - nGrams: The values tensor of the output ngrams ragged tensor.
     *     - nGramsSplits: The splits tensor of the output ngrams ragged tensor.
     *
     * @doc {heading: 'Operations', subheading: 'String'}
     */
    function stringNGrams_(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {
        const $data = convertToTensor(data, 'data', 'stringNGrams', 'string');
        if ($data.dtype !== 'string') {
            throw new Error('Data must be of datatype string');
        }
        if ($data.shape.length !== 1) {
            throw new Error(`Data must be a vector, saw: ${$data.shape}`);
        }
        const $dataSplits = convertToTensor(dataSplits, 'dataSplits', 'stringNGrams');
        if ($dataSplits.dtype !== 'int32') {
            throw new Error('Data splits must be of datatype int32');
        }
        const attrs = {
            separator,
            nGramWidths,
            leftPad,
            rightPad,
            padWidth,
            preserveShortSequences
        };
        const inputs = { data: $data, dataSplits: $dataSplits };
        const result = ENGINE.runKernel(StringNGrams, inputs, attrs);
        return { nGrams: result[0], nGramsSplits: result[1] };
    }
    const stringNGrams$2 = op({ stringNGrams_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Split elements of `input` based on `delimiter` into a SparseTensor .
     *
     * Let N be the size of source (typically N will be the batch size). Split each
     * element of `input` based on `delimiter` and return a SparseTensor containing
     * the splitted tokens. Empty tokens are ignored if `skipEmpty` is set to True.
     *
     * `delimiter` can be empty, or a string of split characters. If `delimiter` is
     * an empty string, each element of `input` is split into individual
     * character strings. Otherwise every character of `delimiter` is a potential
     * split point.
     *
     * ```js
     * const result = tf.string.stringSplit(['hello world',  'a b c'], ' ');
     * result['indices'].print(); // [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]]
     * result['values'].print(); // ['hello', 'world', 'a', 'b', 'c']
     * result['shape'].print(); // [2, 3]
     * ```
     * @param input: 1-D. Strings to split.
     * @param delimiter: 0-D. Delimiter characters, or empty string.
     * @param skipEmpty: Optional. If true, skip the empty strings from the result.
     *     Defaults to true.
     * @return A map with the following properties:
     *     - indices: A dense matrix of int32 representing the indices of the sparse
     *       tensor.
     *     - values: A vector of strings corresponding to the splited values.
     *     - shape: a length-2 vector of int32 representing the shape of the sparse
     * tensor, where the first value is N and the second value is the maximum number
     * of tokens in a single input entry.
     *
     * @doc {heading: 'Operations', subheading: 'String'}
     */
    function stringSplit_(input, delimiter, skipEmpty = true) {
        const $input = convertToTensor(input, 'input', 'stringSplit', 'string');
        const $delimiter = convertToTensor(delimiter, 'delimiter', 'stringSplit', 'string');
        if ($input.rank !== 1) {
            throw new Error(`Input should be Tensor1D but received shape ${$input.shape}`);
        }
        if ($delimiter.rank !== 0) {
            throw new Error(`Delimiter should be a scalar but received shape ${$delimiter.shape}`);
        }
        const attrs = { skipEmpty };
        const inputs = { input: $input, delimiter: $delimiter };
        const result = ENGINE.runKernel(StringSplit, inputs, attrs);
        return { indices: result[0], values: result[1], shape: result[2] };
    }
    const stringSplit$2 = op({ stringSplit_ });

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Converts each string in the input Tensor to its hash mod by a number of
     * buckets.
     *
     * The hash function is deterministic on the content of the string within the
     * process and will never change. However, it is not suitable for cryptography.
     * This function may be used when CPU time is scarce and inputs are trusted or
     * unimportant. There is a risk of adversaries constructing inputs that all hash
     * to the same bucket.
     *
     * ```js
     * const result = tf.string.stringToHashBucketFast(
     *   ['Hello', 'TensorFlow', '2.x'], 3);
     * result.print(); // [0, 2, 2]
     * ```
     * @param input: The strings to assign a hash bucket.
     * @param numBuckets: The number of buckets.
     * @return A Tensor of the same shape as the input tensor.
     *
     * @doc {heading: 'Operations', subheading: 'String'}
     */
    function stringToHashBucketFast_(input, numBuckets) {
        const $input = convertToTensor(input, 'input', 'stringToHashBucketFast', 'string');
        const attrs = { numBuckets };
        if (numBuckets <= 0) {
            throw new Error(`Number of buckets must be at least 1`);
        }
        const inputs = { input: $input };
        return ENGINE.runKernel(StringToHashBucketFast, inputs, attrs);
    }
    const stringToHashBucketFast$2 = op({ stringToHashBucketFast_ });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const spectral = {
        fft: fft$2,
        ifft: ifft$2,
        rfft,
        irfft
    };
    const signal = {
        hammingWindow,
        hannWindow,
        frame,
        stft,
    };
    const image = {
        flipLeftRight,
        grayscaleToRGB,
        resizeNearestNeighbor: resizeNearestNeighbor$2,
        resizeBilinear: resizeBilinear$2,
        rotateWithOffset,
        cropAndResize: cropAndResize$2,
        nonMaxSuppression,
        nonMaxSuppressionAsync,
        nonMaxSuppressionWithScore,
        nonMaxSuppressionWithScoreAsync,
        nonMaxSuppressionPadded,
        nonMaxSuppressionPaddedAsync,
        threshold: threshold$1,
        transform: transform$2
    };
    const linalg = {
        bandPart,
        gramSchmidt,
        qr
    };
    const losses = {
        absoluteDifference,
        computeWeightedLoss,
        cosineDistance,
        hingeLoss,
        huberLoss,
        logLoss,
        meanSquaredError,
        sigmoidCrossEntropy,
        softmaxCrossEntropy
    };
    const sparse = {
        sparseFillEmptyRows: sparseFillEmptyRows$2,
        sparseReshape: sparseReshape$2,
        sparseSegmentMean: sparseSegmentMean$2,
        sparseSegmentSum: sparseSegmentSum$2
    };
    // tslint:disable-next-line:variable-name
    const string = {
        stringNGrams: stringNGrams$2,
        stringSplit: stringSplit$2,
        stringToHashBucketFast: stringToHashBucketFast$2
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */
    class Optimizer extends Serializable {
        /**
         * Executes `f()` and minimizes the scalar output of `f()` by computing
         * gradients of y with respect to the list of trainable variables provided by
         * `varList`. If no list is provided, it defaults to all trainable variables.
         *
         * @param f The function to execute and whose output to minimize.
         * @param returnCost Whether to return the scalar cost value produced by
         * executing `f()`.
         * @param varList An optional list of variables to update. If specified, only
         * the trainable variables in varList will be updated by minimize. Defaults to
         * all trainable variables.
         *
         * @doc {heading: 'Training', subheading: 'Optimizers'}
         */
        minimize(f, returnCost = false, varList) {
            const { value, grads } = this.computeGradients(f, varList);
            if (varList != null) {
                const gradArray = varList.map(v => ({ name: v.name, tensor: grads[v.name] }));
                this.applyGradients(gradArray);
            }
            else {
                this.applyGradients(grads);
            }
            // Dispose gradients.
            dispose(grads);
            if (returnCost) {
                return value;
            }
            else {
                value.dispose();
                return null;
            }
        }
        /**
         * The number of iterations that this optimizer instance has been invoked for.
         */
        get iterations() {
            if (this.iterations_ == null) {
                this.iterations_ = 0;
            }
            return this.iterations_;
        }
        incrementIterations() {
            this.iterations_ = this.iterations + 1;
        }
        /**
         * Executes f() and computes the gradient of the scalar output of f() with
         * respect to the list of trainable variables provided by `varList`. If no
         * list is provided, it defaults to all trainable variables.
         *
         * @param f The function to execute and whose output to use for computing
         * gradients with respect to variables.
         * @param varList An optional list of variables to compute gradients with
         * respect to. If specified, only the trainable variables in varList will have
         * gradients computed with respect to. Defaults to all trainable variables.
         *
         * @doc {heading: 'Training', subheading: 'Optimizers'}
         */
        computeGradients(f, varList) {
            return variableGrads(f, varList);
        }
        /**
         * Dispose the variables (if any) owned by this optimizer instance.
         */
        dispose() {
            if (this.iterations_ != null) {
                dispose(this.iterations_);
            }
        }
        async saveIterations() {
            if (this.iterations_ == null) {
                this.iterations_ = 0;
            }
            return {
                name: 'iter',
                // TODO(cais): Use 'int64' type when available.
                tensor: scalar(this.iterations_, 'int32')
            };
        }
        async getWeights() {
            throw new Error('getWeights() is not implemented for this optimizer yet.');
        }
        async setWeights(weightValues) {
            throw new Error(`setWeights() is not implemented for this optimizer class ` +
                `${this.getClassName()}`);
        }
        /**
         * Extract the first element of the weight values and set it
         * as the iterations counter variable of this instance of optimizer.
         *
         * @param weightValues
         * @returns Weight values with the first element consumed and excluded.
         */
        async extractIterations(weightValues) {
            this.iterations_ = (await weightValues[0].tensor.data())[0];
            return weightValues.slice(1);
        }
    }
    Object.defineProperty(Optimizer, Symbol.hasInstance, {
        value: (instance) => {
            return instance.minimize != null && instance.computeGradients != null &&
                instance.applyGradients != null;
        }
    });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /** @doclink Optimizer */
    class AdadeltaOptimizer extends Optimizer {
        constructor(learningRate, rho, epsilon = null) {
            super();
            this.learningRate = learningRate;
            this.rho = rho;
            this.epsilon = epsilon;
            this.accumulatedGrads = [];
            this.accumulatedUpdates = [];
            if (epsilon == null) {
                this.epsilon = ENGINE.backend.epsilon();
            }
        }
        applyGradients(variableGradients) {
            const variableNames = Array.isArray(variableGradients) ?
                variableGradients.map(item => item.name) :
                Object.keys(variableGradients);
            variableNames.forEach((name, i) => {
                const value = ENGINE.registeredVariables[name];
                const trainable = false;
                if (this.accumulatedGrads[i] == null) {
                    this.accumulatedGrads[i] = {
                        originalName: `${name}/accum_grad`,
                        variable: tidy(() => zerosLike$2(value).variable(trainable))
                    };
                }
                if (this.accumulatedUpdates[i] == null) {
                    this.accumulatedUpdates[i] = {
                        originalName: `${name}/accum_var`,
                        variable: tidy(() => zerosLike$2(value).variable(trainable))
                    };
                }
                const gradient = Array.isArray(variableGradients) ?
                    variableGradients[i].tensor :
                    variableGradients[name];
                if (gradient == null) {
                    return;
                }
                const accumulatedGrad = this.accumulatedGrads[i].variable;
                const accumulatedUpdate = this.accumulatedUpdates[i].variable;
                tidy(() => {
                    const newAccumulatedGrad = add$1(mul(accumulatedGrad, this.rho), mul(square$1(gradient), 1 - this.rho));
                    const updates = mul(div$1(sqrt$2(add$1(accumulatedUpdate, this.epsilon)), sqrt$2(add$1(accumulatedGrad, this.epsilon))), gradient);
                    const newAccumulatedUpdate = add$1(mul(accumulatedUpdate, this.rho), mul(square$1(updates), 1 - this.rho));
                    accumulatedGrad.assign(newAccumulatedGrad);
                    accumulatedUpdate.assign(newAccumulatedUpdate);
                    const newValue = add$1(mul(updates, -this.learningRate), value);
                    value.assign(newValue);
                });
            });
            this.incrementIterations();
        }
        dispose() {
            if (this.accumulatedUpdates != null) {
                dispose(this.accumulatedGrads.map(v => v.variable));
                dispose(this.accumulatedUpdates.map(v => v.variable));
            }
        }
        async getWeights() {
            // Order matters for Python compatibility.
            const variables = [...this.accumulatedGrads, ...this.accumulatedUpdates];
            return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));
        }
        async setWeights(weightValues) {
            weightValues = await this.extractIterations(weightValues);
            const variableCount = weightValues.length / 2;
            const trainable = false;
            this.accumulatedGrads =
                weightValues.slice(0, variableCount).map(v => ({
                    originalName: v.name,
                    variable: v.tensor.variable(trainable)
                }));
            this.accumulatedUpdates =
                weightValues.slice(variableCount, variableCount * 2)
                    .map(v => ({
                    originalName: v.name,
                    variable: v.tensor.variable(trainable)
                }));
        }
        getConfig() {
            return {
                'learningRate': this.learningRate,
                'rho': this.rho,
                'epsilon': this.epsilon
            };
        }
        /** @nocollapse */
        static fromConfig(cls, config) {
            return new cls(config['learningRate'], config['rho'], config['epsilon']);
        }
    }
    /** @nocollapse */
    AdadeltaOptimizer.className = 'Adadelta'; // Name matters for Python compatibility.
    registerClass(AdadeltaOptimizer);

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /** @doclink Optimizer */
    class AdagradOptimizer extends Optimizer {
        constructor(learningRate, initialAccumulatorValue = 0.1) {
            super();
            this.learningRate = learningRate;
            this.initialAccumulatorValue = initialAccumulatorValue;
            this.accumulatedGrads = [];
        }
        applyGradients(variableGradients) {
            const variableNames = Array.isArray(variableGradients) ?
                variableGradients.map(item => item.name) :
                Object.keys(variableGradients);
            variableNames.forEach((name, i) => {
                const value = ENGINE.registeredVariables[name];
                if (this.accumulatedGrads[i] == null) {
                    const trainable = false;
                    this.accumulatedGrads[i] = {
                        originalName: `${name}/accumulator`,
                        variable: tidy(() => fill$2(value.shape, this.initialAccumulatorValue)
                            .variable(trainable))
                    };
                }
                const gradient = Array.isArray(variableGradients) ?
                    variableGradients[i].tensor :
                    variableGradients[name];
                if (gradient == null) {
                    return;
                }
                const accumulatedGrad = this.accumulatedGrads[i].variable;
                tidy(() => {
                    const newAccumulatedGrad = add$1(accumulatedGrad, square$1(gradient));
                    accumulatedGrad.assign(newAccumulatedGrad);
                    const newValue = add$1(mul(div$1(gradient, sqrt$2(add$1(newAccumulatedGrad, ENGINE.backend.epsilon()))), -this.learningRate), value);
                    value.assign(newValue);
                });
            });
            this.incrementIterations();
        }
        dispose() {
            if (this.accumulatedGrads != null) {
                dispose(this.accumulatedGrads.map(v => v.variable));
            }
        }
        async getWeights() {
            // Order matters for Python compatibility.
            return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({ name: v.originalName, tensor: v.variable })));
        }
        async setWeights(weightValues) {
            weightValues = await this.extractIterations(weightValues);
            const trainable = false;
            this.accumulatedGrads = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));
        }
        getConfig() {
            return {
                'learningRate': this.learningRate,
                'initialAccumulatorValue': this.initialAccumulatorValue,
            };
        }
        /** @nocollapse */
        static fromConfig(cls, config) {
            return new cls(config['learningRate'], config['initialAccumulatorValue']);
        }
    }
    /** @nocollapse */
    AdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.
    registerClass(AdagradOptimizer);

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class AdamOptimizer extends Optimizer {
        constructor(learningRate, beta1, beta2, epsilon = null) {
            super();
            this.learningRate = learningRate;
            this.beta1 = beta1;
            this.beta2 = beta2;
            this.epsilon = epsilon;
            this.accumulatedFirstMoment = [];
            this.accumulatedSecondMoment = [];
            tidy(() => {
                // accB* will be updated by batch.
                this.accBeta1 = scalar(beta1).variable();
                this.accBeta2 = scalar(beta2).variable();
            });
            if (epsilon == null) {
                this.epsilon = ENGINE.backend.epsilon();
            }
        }
        applyGradients(variableGradients) {
            const varNames = Array.isArray(variableGradients) ?
                variableGradients.map(v => v.name) :
                Object.keys(variableGradients);
            tidy(() => {
                const oneMinusAccBeta1 = sub$2(1, this.accBeta1);
                const oneMinusAccBeta2 = sub$2(1, this.accBeta2);
                varNames.forEach((name, i) => {
                    const value = ENGINE.registeredVariables[name];
                    const trainable = false;
                    if (this.accumulatedFirstMoment[i] == null) {
                        this.accumulatedFirstMoment[i] = {
                            originalName: `${name}/m`,
                            variable: tidy(() => zerosLike$2(value).variable(trainable))
                        };
                    }
                    if (this.accumulatedSecondMoment[i] == null) {
                        this.accumulatedSecondMoment[i] = {
                            originalName: `${name}/v`,
                            variable: tidy(() => zerosLike$2(value).variable(trainable))
                        };
                    }
                    const gradient = Array.isArray(variableGradients) ?
                        variableGradients[i].tensor :
                        variableGradients[name];
                    if (gradient == null) {
                        return;
                    }
                    const firstMoment = this.accumulatedFirstMoment[i].variable;
                    const secondMoment = this.accumulatedSecondMoment[i].variable;
                    const newFirstMoment = add$1(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));
                    const newSecondMoment = add$1(mul(secondMoment, this.beta2), mul(square$1(gradient), 1 - this.beta2));
                    const biasCorrectedFirstMoment = div$1(newFirstMoment, oneMinusAccBeta1);
                    const biasCorrectedSecondMoment = div$1(newSecondMoment, oneMinusAccBeta2);
                    firstMoment.assign(newFirstMoment);
                    secondMoment.assign(newSecondMoment);
                    const newValue = add$1(mul(div$1(biasCorrectedFirstMoment, add$1(sqrt$2(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);
                    value.assign(newValue);
                });
                this.accBeta1.assign(mul(this.accBeta1, this.beta1));
                this.accBeta2.assign(mul(this.accBeta2, this.beta2));
            });
            this.incrementIterations();
        }
        dispose() {
            this.accBeta1.dispose();
            this.accBeta2.dispose();
            if (this.accumulatedFirstMoment != null) {
                dispose(this.accumulatedFirstMoment.map(v => v.variable));
            }
            if (this.accumulatedSecondMoment != null) {
                dispose(this.accumulatedSecondMoment.map(v => v.variable));
            }
        }
        async getWeights() {
            // Order matters for Python compatibility.
            const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
            return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));
        }
        async setWeights(weightValues) {
            weightValues = await this.extractIterations(weightValues);
            tidy(() => {
                this.accBeta1.assign(pow$2(this.beta1, this.iterations_ + 1));
                this.accBeta2.assign(pow$2(this.beta2, this.iterations_ + 1));
            });
            const variableCount = weightValues.length / 2;
            const trainable = false;
            this.accumulatedFirstMoment =
                weightValues.slice(0, variableCount).map(v => ({
                    originalName: v.name,
                    variable: v.tensor.variable(trainable)
                }));
            this.accumulatedSecondMoment =
                weightValues.slice(variableCount, variableCount * 2)
                    .map(v => ({
                    originalName: v.name,
                    variable: v.tensor.variable(trainable)
                }));
        }
        getConfig() {
            return {
                'learningRate': this.learningRate,
                'beta1': this.beta1,
                'beta2': this.beta2,
                'epsilon': this.epsilon,
            };
        }
        /** @nocollapse */
        static fromConfig(cls, config) {
            return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);
        }
    }
    /** @nocollapse */
    AdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.
    registerClass(AdamOptimizer);

    /**
    * @license
    * Copyright 2018 Google LLC. All Rights Reserved.
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * =============================================================================
    */
    class AdamaxOptimizer extends Optimizer {
        constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {
            super();
            this.learningRate = learningRate;
            this.beta1 = beta1;
            this.beta2 = beta2;
            this.epsilon = epsilon;
            this.decay = decay;
            this.accumulatedFirstMoment = [];
            this.accumulatedWeightedInfNorm = [];
            tidy(() => {
                this.iteration = scalar(0).variable();
                this.accBeta1 = scalar(beta1).variable();
            });
            if (epsilon == null) {
                this.epsilon = ENGINE.backend.epsilon();
            }
        }
        applyGradients(variableGradients) {
            const variableNames = Array.isArray(variableGradients) ?
                variableGradients.map(item => item.name) :
                Object.keys(variableGradients);
            tidy(() => {
                const oneMinusAccBeta1 = sub$2(1, this.accBeta1);
                const lr = div$1(-this.learningRate, add$1(mul(this.iteration, this.decay), 1));
                variableNames.forEach((name, i) => {
                    const value = ENGINE.registeredVariables[name];
                    const trainable = false;
                    if (this.accumulatedFirstMoment[i] == null) {
                        this.accumulatedFirstMoment[i] = {
                            originalName: `${name}/m`,
                            variable: zerosLike$2(value).variable(trainable)
                        };
                    }
                    if (this.accumulatedWeightedInfNorm[i] == null) {
                        this.accumulatedWeightedInfNorm[i] = {
                            originalName: `${name}/v`,
                            variable: zerosLike$2(value).variable(trainable)
                        };
                    }
                    const gradient = Array.isArray(variableGradients) ?
                        variableGradients[i].tensor :
                        variableGradients[name];
                    if (gradient == null) {
                        return;
                    }
                    const firstMoment = this.accumulatedFirstMoment[i].variable;
                    const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;
                    const newFirstMoment = add$1(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));
                    const ut0 = mul(weightedInfNorm, this.beta2);
                    const ut1 = abs$2(gradient);
                    const newWeightedInfNorm = maximum$2(ut0, ut1);
                    firstMoment.assign(newFirstMoment);
                    weightedInfNorm.assign(newWeightedInfNorm);
                    const newValue = add$1(mul(div$1(lr, oneMinusAccBeta1), div$1(newFirstMoment, add$1(newWeightedInfNorm, this.epsilon))), value);
                    value.assign(newValue);
                });
                this.iteration.assign(add$1(this.iteration, 1));
                this.accBeta1.assign(mul(this.accBeta1, this.beta1));
            });
            this.incrementIterations();
        }
        dispose() {
            this.accBeta1.dispose();
            this.iteration.dispose();
            if (this.accumulatedFirstMoment != null) {
                dispose(this.accumulatedFirstMoment.map(v => v.variable));
            }
            if (this.accumulatedWeightedInfNorm != null) {
                dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));
            }
        }
        async getWeights() {
            throw new Error('getWeights() is not implemented for Adamax yet.');
        }
        async setWeights(weightValues) {
            throw new Error('setWeights() is not implemented for Adamax yet.');
        }
        getConfig() {
            return {
                'learningRate': this.learningRate,
                'beta1': this.beta1,
                'beta2': this.beta2,
                'epsilon': this.epsilon,
                'decay': this.decay
            };
        }
        /** @nocollapse */
        static fromConfig(cls, config) {
            return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);
        }
    }
    /** @nocollapse */
    AdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.
    registerClass(AdamaxOptimizer);

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /** @doclink Optimizer */
    class SGDOptimizer extends Optimizer {
        constructor(learningRate) {
            super();
            this.learningRate = learningRate;
            this.setLearningRate(learningRate);
        }
        applyGradients(variableGradients) {
            const varNames = Array.isArray(variableGradients) ?
                variableGradients.map(v => v.name) :
                Object.keys(variableGradients);
            varNames.forEach((name, i) => {
                const gradient = Array.isArray(variableGradients) ?
                    variableGradients[i].tensor :
                    variableGradients[name];
                if (gradient == null) {
                    return;
                }
                const value = ENGINE.registeredVariables[name];
                tidy(() => {
                    const newValue = add$1(mul(this.c, gradient), value);
                    value.assign(newValue);
                });
            });
            this.incrementIterations();
        }
        /**
         * Sets the learning rate of the optimizer.
         */
        setLearningRate(learningRate) {
            this.learningRate = learningRate;
            if (this.c != null) {
                this.c.dispose();
            }
            this.c = keep(scalar(-learningRate));
        }
        dispose() {
            this.c.dispose();
        }
        async getWeights() {
            return [await this.saveIterations()];
        }
        async setWeights(weightValues) {
            weightValues = await this.extractIterations(weightValues);
            if (weightValues.length !== 0) {
                throw new Error('SGD optimizer does not have settable weights.');
            }
        }
        getConfig() {
            return { 'learningRate': this.learningRate };
        }
        /** @nocollapse */
        static fromConfig(cls, config) {
            return new cls(config['learningRate']);
        }
    }
    /** @nocollapse */
    SGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.
    registerClass(SGDOptimizer);

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /** @doclink Optimizer */
    class MomentumOptimizer extends SGDOptimizer {
        constructor(learningRate, momentum, useNesterov = false) {
            super(learningRate);
            this.learningRate = learningRate;
            this.momentum = momentum;
            this.useNesterov = useNesterov;
            this.accumulations = [];
            this.m = scalar(this.momentum);
        }
        applyGradients(variableGradients) {
            const variableNames = Array.isArray(variableGradients) ?
                variableGradients.map(item => item.name) :
                Object.keys(variableGradients);
            variableNames.forEach((name, i) => {
                const value = ENGINE.registeredVariables[name];
                if (this.accumulations[i] == null) {
                    const trainable = false;
                    this.accumulations[i] = {
                        originalName: `${name}/momentum`,
                        variable: tidy(() => zerosLike$2(value).variable(trainable))
                    };
                }
                const accumulation = this.accumulations[i].variable;
                const gradient = Array.isArray(variableGradients) ?
                    variableGradients[i].tensor :
                    variableGradients[name];
                if (gradient == null) {
                    return;
                }
                tidy(() => {
                    let newValue;
                    const newAccumulation = add$1(mul(this.m, accumulation), gradient);
                    if (this.useNesterov) {
                        newValue = add$1(mul(this.c, add$1(gradient, mul(newAccumulation, this.m))), value);
                    }
                    else {
                        newValue = add$1(mul(this.c, newAccumulation), value);
                    }
                    accumulation.assign(newAccumulation);
                    value.assign(newValue);
                });
            });
            this.incrementIterations();
        }
        dispose() {
            this.m.dispose();
            if (this.accumulations != null) {
                dispose(this.accumulations.map(v => v.variable));
            }
        }
        /**
         * Sets the momentum of the optimizer.
         *
         * @param momentum
         */
        setMomentum(momentum) {
            this.momentum = momentum;
        }
        async getWeights() {
            // Order matters for Python compatibility.
            return [await this.saveIterations()].concat(this.accumulations.map(v => ({ name: v.originalName, tensor: v.variable })));
        }
        async setWeights(weightValues) {
            weightValues = await this.extractIterations(weightValues);
            const trainable = false;
            this.accumulations = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));
        }
        getConfig() {
            return {
                'learningRate': this.learningRate,
                'momentum': this.momentum,
                'useNesterov': this.useNesterov
            };
        }
        /** @nocollapse */
        static fromConfig(cls, config) {
            return new cls(config['learningRate'], config['momentum'], config['useNesterov']);
        }
    }
    /** @nocollapse */
    MomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.
    registerClass(MomentumOptimizer);

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /** @doclink Optimizer */
    class RMSPropOptimizer extends Optimizer {
        constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false) {
            super();
            this.learningRate = learningRate;
            this.decay = decay;
            this.momentum = momentum;
            this.epsilon = epsilon;
            this.accumulatedMeanSquares = [];
            this.accumulatedMoments = [];
            this.accumulatedMeanGrads = [];
            this.centered = centered;
            if (epsilon == null) {
                this.epsilon = ENGINE.backend.epsilon();
            }
            if (learningRate == null) {
                throw new Error(`learningRate for RMSPropOptimizer must be defined.`);
            }
        }
        applyGradients(variableGradients) {
            const variableNames = Array.isArray(variableGradients) ?
                variableGradients.map(item => item.name) :
                Object.keys(variableGradients);
            variableNames.forEach((name, i) => {
                const value = ENGINE.registeredVariables[name];
                const trainable = false;
                if (this.accumulatedMeanSquares[i] == null) {
                    this.accumulatedMeanSquares[i] = {
                        originalName: `${name}/rms`,
                        variable: tidy(() => zerosLike$2(value).variable(trainable))
                    };
                }
                if (this.accumulatedMoments[i] == null) {
                    this.accumulatedMoments[i] = {
                        originalName: `${name}/momentum`,
                        variable: tidy(() => zerosLike$2(value).variable(trainable))
                    };
                }
                if (this.accumulatedMeanGrads[i] == null && this.centered) {
                    this.accumulatedMeanGrads[i] = {
                        originalName: `${name}/mg`,
                        variable: tidy(() => zerosLike$2(value).variable(trainable))
                    };
                }
                const gradient = Array.isArray(variableGradients) ?
                    variableGradients[i].tensor :
                    variableGradients[name];
                if (gradient == null) {
                    return;
                }
                const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;
                const accumulatedMoments = this.accumulatedMoments[i].variable;
                tidy(() => {
                    const newAccumulatedMeanSquare = add$1(mul(accumulatedMeanSquare, this.decay), mul(square$1(gradient), 1 - this.decay));
                    if (this.centered) {
                        const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;
                        // Centered gradient
                        const newAccumulatedMeanGrad = add$1(mul(accumulatedMeanGrad, this.decay), mul(gradient, 1 - this.decay));
                        const gradContribution = div$1(mul(gradient, this.learningRate), sqrt$2(sub$2(newAccumulatedMeanSquare, add$1(square$1(newAccumulatedMeanGrad), this.epsilon))));
                        const newAccumulatedMoments = add$1(mul(accumulatedMoments, this.momentum), gradContribution);
                        accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
                        accumulatedMeanGrad.assign(newAccumulatedMeanGrad);
                        accumulatedMoments.assign(newAccumulatedMoments);
                        const newValue = sub$2(value, newAccumulatedMoments);
                        value.assign(newValue);
                    }
                    else {
                        // Plain gradient
                        const newAccumulatedMeanSquare = add$1(mul(accumulatedMeanSquare, this.decay), mul(square$1(gradient), 1 - this.decay));
                        const newAccumulatedMoments = add$1(mul(accumulatedMoments, this.momentum), div$1(mul(gradient, this.learningRate), sqrt$2(add$1(newAccumulatedMeanSquare, this.epsilon))));
                        accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
                        accumulatedMoments.assign(newAccumulatedMoments);
                        const newValue = sub$2(value, newAccumulatedMoments);
                        value.assign(newValue);
                    }
                });
            });
            this.incrementIterations();
        }
        dispose() {
            if (this.accumulatedMeanSquares != null) {
                dispose(this.accumulatedMeanSquares.map(v => v.variable));
            }
            if (this.accumulatedMeanGrads != null && this.centered) {
                dispose(this.accumulatedMeanGrads.map(v => v.variable));
            }
            if (this.accumulatedMoments != null) {
                dispose(this.accumulatedMoments.map(v => v.variable));
            }
        }
        async getWeights() {
            // Order matters for Python compatibility.
            const variables = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
            if (this.centered) {
                variables.push(...this.accumulatedMeanGrads);
            }
            return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));
        }
        async setWeights(weightValues) {
            weightValues = await this.extractIterations(weightValues);
            const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;
            const trainable = false;
            this.accumulatedMeanSquares =
                weightValues.slice(0, variableCount).map(v => ({
                    originalName: v.name,
                    variable: v.tensor.variable(trainable)
                }));
            this.accumulatedMoments =
                weightValues.slice(variableCount, variableCount * 2)
                    .map(v => ({
                    originalName: v.name,
                    variable: v.tensor.variable(trainable)
                }));
            if (this.centered) {
                this.accumulatedMeanGrads =
                    weightValues.slice(variableCount * 2, variableCount * 3)
                        .map(v => ({
                        originalName: v.name,
                        variable: v.tensor.variable(trainable)
                    }));
            }
        }
        getConfig() {
            return {
                'learningRate': this.learningRate,
                'decay': this.decay,
                'momentum': this.momentum,
                'epsilon': this.epsilon,
                'centered': this.centered
            };
        }
        /** @nocollapse */
        static fromConfig(cls, config) {
            return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);
        }
    }
    /** @nocollapse */
    RMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.
    registerClass(RMSPropOptimizer);

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class OptimizerConstructors {
        /**
         * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
         *
         * ```js
         * // Fit a quadratic function by learning the coefficients a, b, c.
         * const xs = tf.tensor1d([0, 1, 2, 3]);
         * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
         *
         * const a = tf.scalar(Math.random()).variable();
         * const b = tf.scalar(Math.random()).variable();
         * const c = tf.scalar(Math.random()).variable();
         *
         * // y = a * x^2 + b * x + c.
         * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
         * const loss = (pred, label) => pred.sub(label).square().mean();
         *
         * const learningRate = 0.01;
         * const optimizer = tf.train.sgd(learningRate);
         *
         * // Train the model.
         * for (let i = 0; i < 10; i++) {
         *   optimizer.minimize(() => loss(f(xs), ys));
         * }
         *
         * // Make predictions.
         * console.log(
         *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
         * const preds = f(xs).dataSync();
         * preds.forEach((pred, i) => {
         *   console.log(`x: ${i}, pred: ${pred}`);
         * });
         * ```
         *
         * @param learningRate The learning rate to use for the SGD algorithm.
         *
         * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
         */
        static sgd(learningRate) {
            return new SGDOptimizer(learningRate);
        }
        /**
         * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
         * descent.
         *
         * See
         * [http://proceedings.mlr.press/v28/sutskever13.pdf](
         * http://proceedings.mlr.press/v28/sutskever13.pdf)
         *
         * @param learningRate The learning rate to use for the Momentum gradient
         * descent algorithm.
         * @param momentum The momentum to use for the momentum gradient descent
         * algorithm.
         *
         * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
         */
        static momentum(learningRate, momentum, useNesterov = false) {
            return new MomentumOptimizer(learningRate, momentum, useNesterov);
        }
        /**
         * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
         * descent. This implementation uses plain momentum and is not centered
         * version of RMSProp.
         *
         * See
         * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
         * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
         *
         * @param learningRate The learning rate to use for the RMSProp gradient
         * descent algorithm.
         * @param decay The discounting factor for the history/coming gradient.
         * @param momentum The momentum to use for the RMSProp gradient descent
         * algorithm.
         * @param epsilon Small value to avoid zero denominator.
         * @param centered If true, gradients are normalized by the estimated
         * variance of the gradient.
         *
         * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
         */
        static rmsprop(learningRate, decay = .9, momentum = 0.0, epsilon = null, centered = false) {
            return new RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered);
        }
        /**
         * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
         * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
         *
         * @param learningRate The learning rate to use for the Adam gradient
         * descent algorithm.
         * @param beta1 The exponential decay rate for the 1st moment estimates.
         * @param beta2 The exponential decay rate for the 2nd moment estimates.
         * @param epsilon A small constant for numerical stability.
         *
         * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
         */
        static adam(learningRate = 0.001, beta1 = 0.9, beta2 = 0.999, epsilon = null) {
            return new AdamOptimizer(learningRate, beta1, beta2, epsilon);
        }
        /**
         * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
         * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
         *
         * @param learningRate The learning rate to use for the Adadelta gradient
         * descent algorithm.
         * @param rho The learning rate decay over each update.
         * @param epsilon A constant epsilon used to better condition the grad
         * update.
         *
         * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
         */
        static adadelta(learningRate = .001, rho = .95, epsilon = null) {
            return new AdadeltaOptimizer(learningRate, rho, epsilon);
        }
        /**
         * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
         * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
         *
         * @param learningRate The learning rate to use for the Adamax gradient
         * descent algorithm.
         * @param beta1 The exponential decay rate for the 1st moment estimates.
         * @param beta2 The exponential decay rate for the 2nd moment estimates.
         * @param epsilon A small constant for numerical stability.
         * @param decay The learning rate decay over each update.
         *
         * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
         */
        static adamax(learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon = null, decay = 0.0) {
            return new AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);
        }
        /**
         * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
         * See
         * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
         * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
         * or
         * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
         * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
         *
         * @param learningRate The learning rate to use for the Adagrad gradient
         * descent algorithm.
         * @param initialAccumulatorValue Starting value for the accumulators, must be
         * positive.
         *
         * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
         */
        static adagrad(learningRate, initialAccumulatorValue = 0.1) {
            return new AdagradOptimizer(learningRate, initialAccumulatorValue);
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const train = {
        sgd: OptimizerConstructors.sgd,
        momentum: OptimizerConstructors.momentum,
        adadelta: OptimizerConstructors.adadelta,
        adagrad: OptimizerConstructors.adagrad,
        rmsprop: OptimizerConstructors.rmsprop,
        adamax: OptimizerConstructors.adamax,
        adam: OptimizerConstructors.adam
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const delayCallback = (() => {
        if (typeof requestAnimationFrame !== 'undefined') {
            return requestAnimationFrame;
        }
        else if (typeof setImmediate !== 'undefined') {
            return setImmediate;
        }
        return (f) => f(); // no delays
    })();
    /**
     * Returns a promise that resolve when a requestAnimationFrame has completed.
     *
     * On Node.js this uses setImmediate instead of requestAnimationFrame.
     *
     * This is simply a sugar method so that users can do the following:
     * `await tf.nextFrame();`
     *
     * @doc {heading: 'Performance', subheading: 'Timing'}
     */
    function nextFrame() {
        return new Promise(resolve => delayCallback(() => resolve()));
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function assertParamsConsistent(shapes, axis) {
        const rank = shapes[0].length;
        shapes.forEach((shape, i) => {
            assert(shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +
                `as the rank of the rest (${rank})`);
        });
        assert(axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);
        const firstShape = shapes[0];
        shapes.forEach((shape, i) => {
            for (let r = 0; r < rank; r++) {
                assert((r === axis) || (shape[r] === firstShape[r]), () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +
                    `does not match the shape of the rest (${firstShape}) ` +
                    `along the non-concatenated axis ${i}.`);
            }
        });
    }
    function computeOutShape$1(shapes, axis) {
        const outputShape = shapes[0].slice();
        for (let i = 1; i < shapes.length; i++) {
            outputShape[axis] += shapes[i][axis];
        }
        return outputShape;
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const PARALLELIZE_THRESHOLD = 30;
    function computeOptimalWindowSize(inSize) {
        if (inSize <= PARALLELIZE_THRESHOLD) {
            return inSize;
        }
        return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Returns the image center in pixels.
    function getImageCenter(center, imageHeight, imageWidth) {
        const centerX = imageWidth * (typeof center === 'number' ? center : center[0]);
        const centerY = imageHeight * (typeof center === 'number' ? center : center[1]);
        return [centerX, centerY];
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Gets the new shape of the input Tensor after it's been reshaped
     * to:
     * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),
     * inputShape[1], ..., inputShape[N-1]]
     *
     * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
     */
    function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {
        let reshaped = [];
        if (batchToSpace) {
            reshaped = reshaped.concat(blockShape.slice(0));
            reshaped.push(inputShape[0] / prod);
            reshaped = reshaped.concat(inputShape.slice(1));
        }
        else {
            reshaped = reshaped.concat(inputShape[0]);
            const spatialLength = blockShape.length;
            for (let i = 0; i < spatialLength; ++i) {
                reshaped =
                    reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);
            }
            reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));
        }
        return reshaped;
    }
    /**
     * Gets the permutation that will transpose the dimensions of the
     * reshaped tensor to shape:
     *
     * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,
     * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
     *
     * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
     */
    function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {
        const permuted = [];
        if (batchToSpace) {
            permuted.push(blockShapeRank);
            for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {
                if (i <= 2 * blockShapeRank) {
                    permuted.push(i);
                    permuted.push(i - (blockShapeRank + 1));
                }
                else {
                    permuted.push(i);
                }
            }
        }
        else {
            const permutedBeforeBatch = [];
            const permutedAfterBatch = [];
            for (let i = 1; i < reshapedRank; ++i) {
                if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {
                    permutedAfterBatch.push(i);
                }
                else {
                    permutedBeforeBatch.push(i);
                }
            }
            permuted.push(...permutedBeforeBatch);
            permuted.push(0);
            permuted.push(...permutedAfterBatch);
        }
        return permuted;
    }
    /**
     * Gets the shape of the reshaped and permuted input Tensor before any cropping
     * is applied.  The new shape will be:
     *
     * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,
     * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
     *
     * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
     */
    function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {
        const reshapedPermuted = [];
        if (batchToSpace) {
            reshapedPermuted.push(inputShape[0] / prod);
        }
        else {
            reshapedPermuted.push(inputShape[0] * prod);
        }
        for (let i = 1; i < inputShape.length; ++i) {
            if (i <= blockShape.length) {
                if (batchToSpace) {
                    reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);
                }
                else {
                    reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);
                }
            }
            else {
                reshapedPermuted.push(inputShape[i]);
            }
        }
        return reshapedPermuted;
    }
    /**
     * Converts the crops argument into the beginning coordinates of a slice
     * operation.
     */
    function getSliceBeginCoords(crops, blockShape) {
        const sliceBeginCoords = [0];
        for (let i = 0; i < blockShape; ++i) {
            sliceBeginCoords.push(crops[i][0]);
        }
        return sliceBeginCoords;
    }
    /**
     * Converts the crops argument into the size of a slice operation.  When
     * combined with getSliceBeginCoords this function allows the reshaped and
     * permuted Tensor to be cropped to its final output shape of:
     *
     * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,
     * inputShape[M] * blockShape[M-1] -crops[M-1,0] -
     * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]
     *
     * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
     */
    function getSliceSize(uncroppedShape, crops, blockShape) {
        const sliceSize = uncroppedShape.slice(0, 1);
        for (let i = 0; i < blockShape; ++i) {
            sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);
        }
        return sliceSize;
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const SELU_SCALEALPHA = 1.7580993408473768599402175208123;
    const SELU_SCALE = 1.0507009873554804934193349852946;

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ERF_P = 0.3275911;
    const ERF_A1 = 0.254829592;
    const ERF_A2 = -0.284496736;
    const ERF_A3 = 1.421413741;
    const ERF_A4 = -1.453152027;
    const ERF_A5 = 1.061405429;

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Merges real and imaginary Float32Arrays into a single complex Float32Array.
     *
     * The memory layout is interleaved as follows:
     * real: [r0, r1, r2]
     * imag: [i0, i1, i2]
     * complex: [r0, i0, r1, i1, r2, i2]
     *
     * This is the inverse of splitRealAndImagArrays.
     *
     * @param real The real values of the complex tensor values.
     * @param imag The imag values of the complex tensor values.
     * @returns A complex tensor as a Float32Array with merged values.
     */
    function mergeRealAndImagArrays(real, imag) {
        if (real.length !== imag.length) {
            throw new Error(`Cannot merge real and imag arrays of different lengths. real:` +
                `${real.length}, imag: ${imag.length}.`);
        }
        const result = new Float32Array(real.length * 2);
        for (let i = 0; i < result.length; i += 2) {
            result[i] = real[i / 2];
            result[i + 1] = imag[i / 2];
        }
        return result;
    }
    /**
     * Splits a complex Float32Array into real and imag parts.
     *
     * The memory layout is interleaved as follows:
     * complex: [r0, i0, r1, i1, r2, i2]
     * real: [r0, r1, r2]
     * imag: [i0, i1, i2]
     *
     * This is the inverse of mergeRealAndImagArrays.
     *
     * @param complex The complex tensor values.
     * @returns An object with real and imag Float32Array components of the complex
     *     tensor.
     */
    function splitRealAndImagArrays(complex) {
        const real = new Float32Array(complex.length / 2);
        const imag = new Float32Array(complex.length / 2);
        for (let i = 0; i < complex.length; i += 2) {
            real[i / 2] = complex[i];
            imag[i / 2] = complex[i + 1];
        }
        return { real, imag };
    }
    /**
     * Extracts even indexed complex values in the given array.
     * @param complex The complex tensor values
     */
    function complexWithEvenIndex(complex) {
        const len = Math.ceil(complex.length / 4);
        const real = new Float32Array(len);
        const imag = new Float32Array(len);
        for (let i = 0; i < complex.length; i += 4) {
            real[Math.floor(i / 4)] = complex[i];
            imag[Math.floor(i / 4)] = complex[i + 1];
        }
        return { real, imag };
    }
    /**
     * Extracts odd indexed comple values in the given array.
     * @param complex The complex tensor values
     */
    function complexWithOddIndex(complex) {
        const len = Math.floor(complex.length / 4);
        const real = new Float32Array(len);
        const imag = new Float32Array(len);
        for (let i = 2; i < complex.length; i += 4) {
            real[Math.floor(i / 4)] = complex[i];
            imag[Math.floor(i / 4)] = complex[i + 1];
        }
        return { real, imag };
    }
    /**
     * Get the map representing a complex value in the given array.
     * @param complex The complex tensor values.
     * @param index An index of the target complex value.
     */
    function getComplexWithIndex(complex, index) {
        const real = complex[index * 2];
        const imag = complex[index * 2 + 1];
        return { real, imag };
    }
    /**
     * Insert a given complex value into the TypedArray.
     * @param data The array in which the complex value is inserted.
     * @param c The complex value to be inserted.
     * @param index An index of the target complex value.
     */
    function assignToTypedArray(data, real, imag, index) {
        data[index * 2] = real;
        data[index * 2 + 1] = imag;
    }
    /**
     * Make the list of exponent terms used by FFT.
     */
    function exponents(n, inverse) {
        const real = new Float32Array(n / 2);
        const imag = new Float32Array(n / 2);
        for (let i = 0; i < Math.ceil(n / 2); i++) {
            const x = (inverse ? 2 : -2) * Math.PI * (i / n);
            real[i] = Math.cos(x);
            imag[i] = Math.sin(x);
        }
        return { real, imag };
    }
    /**
     * Make the exponent term used by FFT.
     */
    function exponent(k, n, inverse) {
        const x = (inverse ? 2 : -2) * Math.PI * (k / n);
        const real = Math.cos(x);
        const imag = Math.sin(x);
        return { real, imag };
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ARROW = '->';
    const ARROW_REGEX = /->/g;
    const COMMA = ',';
    const ELLIPSIS = '...';
    /**
     * Parse an equation for einsum.
     *
     * @param equation The einsum equation (e.g., "ij,jk->ik").
     * @param numTensors Number of tensors provided along with `equation`. Used to
     *   check matching number of input tensors.
     * @returns An object consisting of the following fields:
     *   - allDims: all dimension names as strings.
     *   - summedDims: a list of all dimensions being summed over, as indices to
     *     the elements of `allDims`.
     *   - idDims: indices of the dimensions in each input tensor, as indices to
     *     the elements of `allDims.
     */
    function decodeEinsumEquation(equation, numTensors) {
        equation = equation.replace(/\s/g, ''); // Remove witespace in equation.
        const numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) /
            ARROW.length;
        if (numArrows < 1) {
            throw new Error('Equations without an arrow are not supported.');
        }
        else if (numArrows > 1) {
            throw new Error(`Equation must contain exactly one arrow ("${ARROW}").`);
        }
        const [inputString, outputString] = equation.split(ARROW);
        assert(inputString.indexOf(ELLIPSIS) === -1, () => `The ellipsis notation ("${ELLIPSIS}") is not supported yet.`);
        const inputTerms = inputString.split(COMMA);
        const numInputs = inputTerms.length;
        if (numTensors !== numInputs) {
            throw new Error(`Expected ${numInputs} input tensors, received ${numTensors}`);
        }
        if (numInputs > 2) {
            throw new Error('Support for more than 2 input tensors is not implemented yet.');
        }
        const allDims = [];
        for (let i = 0; i < outputString.length; ++i) {
            const dimName = outputString[i];
            if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {
                throw new Error(`Output subscripts contain the label ${dimName} ` +
                    `not present in the input subscripts.`);
            }
            if (allDims.indexOf(dimName) === -1) {
                allDims.push(dimName);
            }
        }
        for (let i = 0; i < inputString.length; ++i) {
            const dimName = inputString[i];
            if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {
                allDims.push(dimName);
            }
        }
        const idDims = new Array(inputTerms.length);
        for (let i = 0; i < numInputs; ++i) {
            if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {
                throw new Error(`Found duplicate axes in input component ${inputTerms[i]}. ` +
                    `Support for duplicate axes in input is not implemented yet.`);
            }
            idDims[i] = [];
            for (let j = 0; j < inputTerms[i].length; ++j) {
                idDims[i].push(allDims.indexOf(inputTerms[i][j]));
            }
        }
        const numDims = allDims.length; // Number of unique dimensions.
        const numOutDims = outputString.length; // Number of output dimensions.
        const summedDims = []; // Dimensions being summed over.
        for (let i = numOutDims; i < numDims; ++i) {
            summedDims.push(i);
        }
        return { allDims, summedDims, idDims };
    }
    /**
     * Get the permutation for a given input tensor.
     *
     * @param nDims Total number of dimension of all tensors involved in the einsum
     *   operation.
     * @param idDims Dimension indices involve in the tensor in question.
     * @returns An object consisting of the following fields:
     *   - permutationIndices: Indices to permute the axes of the tensor with.
     *   - expandDims: Indices to the dimension that need to be expanded from the
     *     tensor after permutation.
     */
    function getEinsumPermutation(nDims, idDims) {
        let permutationIndices = new Array(nDims);
        permutationIndices.fill(-1);
        for (let i = 0; i < idDims.length; ++i) {
            permutationIndices[idDims[i]] = i;
        }
        const expandDims = [];
        for (let i = 0; i < nDims; ++i) {
            if (permutationIndices[i] === -1) {
                expandDims.push(i);
            }
        }
        permutationIndices = permutationIndices.filter(d => d !== -1);
        return { permutationIndices, expandDims };
    }
    /**
     * Checks that the dimension sizes from different input tensors match the
     * equation.
     */
    function checkEinsumDimSizes(nDims, idDims, tensors) {
        const dimSizes = new Array(nDims);
        for (let i = 0; i < tensors.length; ++i) {
            const shape = tensors[i].shape;
            for (let j = 0; j < idDims[i].length; ++j) {
                if (dimSizes[idDims[i][j]] === undefined) {
                    dimSizes[idDims[i][j]] = shape[j];
                }
                else {
                    assert(dimSizes[idDims[i][j]] === shape[j], () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +
                        `of input shaped ${JSON.stringify(shape)}, ` +
                        `but got dimension ${shape[j]}`);
                }
            }
        }
    }
    /**
     * Gets path of computation for einsum.
     *
     * @param summedDims indices to the dimensions being summed over.
     * @param idDims A look up table for the dimensions present in each input
     *     tensor. Each consituent array contains indices for the dimensions in the
     *     corresponding input tensor.
     *
     * @return A map with two fields:
     *   - path: The path of computation, with each element indicating the dimension
     *     being summed over after the element-wise multiplication in that step.
     *   - steps: With the same length as `path`. Each element contains the indices
     *     to the input tensors being used for element-wise multiplication in the
     *     corresponding step.
     */
    function getEinsumComputePath(summedDims, idDims) {
        const path = summedDims;
        const steps = [];
        let nSteps = 0;
        if (summedDims.length === 0) {
            // Einsum that involes no summing: e.g., transpose and outer product.
            path.push(-1);
        }
        nSteps = summedDims.length + 1;
        for (let i = 0; i < nSteps; ++i) {
            steps.push([]);
        }
        const computedTermIndices = [];
        for (let i = 0; i < path.length; ++i) {
            const summedDim = path[i];
            const termIndices = findTermsWithDim(idDims, summedDim);
            for (const termIndex of termIndices) {
                if (computedTermIndices.indexOf(termIndex) === -1) {
                    steps[i].push(termIndex);
                    computedTermIndices.push(termIndex);
                }
            }
        }
        return { path, steps };
    }
    /** Determines if an axes permutation is the identity permutation. */
    function isIdentityPermutation(perm) {
        return perm.every((dim, index) => dim === index);
    }
    function findTermsWithDim(idDims, dim) {
        const termIndices = [];
        for (let i = 0; i < idDims.length; ++i) {
            if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {
                termIndices.push(i);
            }
        }
        return termIndices;
    }

    /**
     * Prepare the split size array. When the input is a number, the axis is evenly
     * divided among the split size. When the input contains the negative value, the
     * rest of the axis is allocated toward that.
     */
    function prepareSplitSize(x, numOrSizeSplits, axis = 0) {
        let splitSizes = [];
        if (typeof (numOrSizeSplits) === 'number') {
            assert(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');
            splitSizes =
                new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);
        }
        else {
            const numOfNegs = numOrSizeSplits.reduce((count, value) => {
                if (value === -1) {
                    count += 1;
                }
                return count;
            }, 0);
            assert(numOfNegs <= 1, () => 'There should be only one negative value in split array.');
            const negIndex = numOrSizeSplits.indexOf(-1);
            // Allow the number of split array to be -1, which indicates the rest
            // of dimension is allocated to that split.
            if (negIndex !== -1) {
                const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);
                numOrSizeSplits[negIndex] = x.shape[axis] - total;
            }
            assert(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');
            splitSizes = numOrSizeSplits;
        }
        return splitSizes;
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Generates sparse fill empty rows indices, dense shape mismatch error message.
     *
     * @param indicesLength The first dimension of indices.
     */
    function getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesLength) {
        return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${indicesLength}`;
    }
    /**
     * Generates sparse fill empty rows negative index error message.
     *
     * @param index The index with a negative value.
     * @param value The negative value.
     */
    function getSparseFillEmptyRowsNegativeIndexErrorMessage(index, value) {
        return `indices(${index}, 0) is invalid: ${value} < 0`;
    }
    /**
     * Generates sparse fill empty rows out of range index error message.
     *
     * @param index The index with an out of range value.
     * @param value The out of range value.
     * @param limit The upper limit for indices.
     */
    function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(index, value, limit) {
        return `indices(${index}, 0) is invalid: ${value} >= ${limit}`;
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Generates sparse reshape multiple negative 1 output dimension error message.
     *
     * @param dim1 The first dimension with a negative 1 value.
     * @param dim2 The second dimension with a negative 1 value.
     */
    function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(dim1, dim2) {
        return `only one output dimension may be -1, not both ${dim1} and ${dim2}`;
    }
    /**
     * Generates sparse reshape negative output dimension error message.
     *
     * @param dim The dimension with a negative value.
     * @param value The negative value.
     */
    function getSparseReshapeNegativeOutputDimErrorMessage(dim, value) {
        return `size ${dim} must be non-negative, not ${value}`;
    }
    /**
     * Generates sparse reshape empty tensor zero output dimension error message.
     *
     */
    function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage() {
        return 'reshape cannot infer the missing input size for an empty tensor ' +
            'unless all specified input sizes are non-zero';
    }
    /**
     * Generates sparse reshape input output multiple mismatch error message.
     *
     * @param inputShape the input shape.
     * @param outputShape the requested output shape.
     */
    function getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape) {
        const inputSize = sizeFromShape(inputShape);
        const outputSize = sizeFromShape(outputShape);
        return `Input to reshape is a SparseTensor with ${inputSize}
  dense values, but the requested shape requires a multiple of ${outputSize}. inputShape=${inputShape} outputShape= ${outputShape}`;
    }
    /**
     * Generates sparse reshape input output inequality error message.
     *
     * @param inputShape the input shape.
     * @param outputShape the requested output shape.
     */
    function getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape) {
        const inputSize = sizeFromShape(inputShape);
        const outputSize = sizeFromShape(outputShape);
        return `Input to reshape is a tensor with ${inputSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`;
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Generates sparse segment reduction negative segment ids error message.
     *
     */
    function getSparseSegmentReductionNegativeSegmentIdsErrorMessage() {
        return `segment ids must be >= 0`;
    }
    /**
     * Generates sparse segment reduction non increasing segment ids error message.
     *
     */
    function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage() {
        return `segment ids are not increasing`;
    }
    /**
     * Generates sparse segment reduction segment id out of range error message.
     *
     * @param segmentId The segment id index that is out of range.
     * @param outputRows Upper bound of valid segment id values.
     */
    function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(segmentId, outputRows) {
        return `Segment id ${segmentId} out of range [0, ${outputRows}), possibly because segmentIds input is not sorted.`;
    }
    /**
     * Generates sparse segment reduction input indice out of range error message.
     *
     * @param index The index that holds the out of range value.
     * @param indexValue The value that is out of range.
     * @param inputRows Upper bound of valid index values.
     */
    function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(index, indexValue, inputRows) {
        return `Bad: indices[${index}] == ${indexValue} out of range [0, ${inputRows})`;
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function segOpComputeOptimalWindowSize(inSize, numSegments) {
        let done = false;
        let res;
        if (inSize <= PARALLELIZE_THRESHOLD) {
            res = inSize;
            done = true;
        }
        else {
            res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));
        }
        while (!done) {
            if (res > numSegments || res === inSize) {
                done = true;
            }
            else {
                res = nearestDivisor(inSize, res + 1);
            }
        }
        return res;
    }
    function computeOutShape(aShape, axis, numSegments) {
        const outShape = [];
        const rank = aShape.length;
        for (let dim = 0; dim < rank; dim++) {
            if (dim !== axis) {
                outShape.push(aShape[dim]);
            }
            else {
                outShape.push(numSegments);
            }
        }
        return outShape;
    }
    function collectGatherOpShapeInfo(x, indices, axis, batchDims) {
        const indicesRank = indices.shape.length;
        const xRank = x.shape.length;
        if (batchDims !== 0) {
            if (batchDims < -indicesRank || batchDims > indicesRank) {
                throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);
            }
        }
        if (batchDims < 0) {
            batchDims += indicesRank;
        }
        if (batchDims > xRank) {
            throw new Error(`batchDims (${batchDims}) must be less than rank(x) (
    ${xRank}).`);
        }
        if (axis < batchDims) {
            throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);
        }
        for (let i = 0; i < batchDims; ++i) {
            if (x.shape[i] !== indices.shape[i]) {
                throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);
            }
        }
        const dimSize = x.shape[axis];
        const outputShape = [];
        let batchSize = 1;
        let outerSize = 1;
        let sliceSize = 1;
        for (let i = 0; i < batchDims; ++i) {
            outputShape.push(x.shape[i]);
            batchSize *= x.shape[i];
        }
        for (let i = batchDims; i < axis; i++) {
            outputShape.push(x.shape[i]);
            outerSize *= x.shape[i];
        }
        for (let i = batchDims; i < indicesRank; i++) {
            outputShape.push(indices.shape[i]);
        }
        for (let i = axis + 1; i < xRank; i++) {
            outputShape.push(x.shape[i]);
            sliceSize *= x.shape[i];
        }
        return { batchSize, sliceSize, outerSize, dimSize, outputShape };
    }

    var segment_util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        segOpComputeOptimalWindowSize: segOpComputeOptimalWindowSize,
        computeOutShape: computeOutShape,
        collectGatherOpShapeInfo: collectGatherOpShapeInfo
    });

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function fromUint8ToStringArray(vals) {
        try {
            // Decode the bytes into string.
            return vals.map(val => decodeString(val));
        }
        catch (err) {
            throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${err}`);
        }
    }
    function fromStringArrayToUint8(strings) {
        return strings.map(s => encodeString(s));
    }

    var backend_util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        slice_util: slice_util,
        segment_util: segment_util,
        fromUint8ToStringArray: fromUint8ToStringArray,
        fromStringArrayToUint8: fromStringArrayToUint8,
        upcastType: upcastType,
        axesAreInnerMostDims: axesAreInnerMostDims,
        combineLocations: combineLocations,
        computeOutAndReduceShapes: computeOutAndReduceShapes,
        expandShapeToKeepDim: expandShapeToKeepDim,
        assertAxesAreInnerMostDims: assertAxesAreInnerMostDims,
        getAxesPermutation: getAxesPermutation,
        getUndoAxesPermutation: getUndoAxesPermutation,
        getInnerMostAxes: getInnerMostAxes,
        getBroadcastDims: getBroadcastDims$1,
        getReductionAxes: getReductionAxes,
        assertAndGetBroadcastShape: assertAndGetBroadcastShape,
        assertParamsConsistent: assertParamsConsistent,
        computeOutShape: computeOutShape$1,
        computeDilation2DInfo: computeDilation2DInfo,
        computePool2DInfo: computePool2DInfo,
        computePool3DInfo: computePool3DInfo,
        computeConv2DInfo: computeConv2DInfo,
        computeConv3DInfo: computeConv3DInfo,
        computeDefaultPad: computeDefaultPad,
        tupleValuesAreOne: tupleValuesAreOne,
        eitherStridesOrDilationsAreOne: eitherStridesOrDilationsAreOne,
        convertConv2DDataFormat: convertConv2DDataFormat,
        checkPadOnDimRoundingMode: checkPadOnDimRoundingMode,
        getFusedDyActivation: getFusedDyActivation,
        getFusedBiasGradient: getFusedBiasGradient,
        applyActivation: applyActivation$1,
        shouldFuse: shouldFuse,
        PARALLELIZE_THRESHOLD: PARALLELIZE_THRESHOLD,
        computeOptimalWindowSize: computeOptimalWindowSize,
        getImageCenter: getImageCenter,
        getReshaped: getReshaped,
        getPermuted: getPermuted,
        getReshapedPermuted: getReshapedPermuted,
        getSliceBeginCoords: getSliceBeginCoords,
        getSliceSize: getSliceSize,
        prepareAndValidate: prepareAndValidate,
        validateUpdateShape: validateUpdateShape,
        validateInput: validateInput$1,
        calculateShapes: calculateShapes,
        SELU_SCALEALPHA: SELU_SCALEALPHA,
        SELU_SCALE: SELU_SCALE,
        ERF_P: ERF_P,
        ERF_A1: ERF_A1,
        ERF_A2: ERF_A2,
        ERF_A3: ERF_A3,
        ERF_A4: ERF_A4,
        ERF_A5: ERF_A5,
        warn: warn,
        log: log$3,
        mergeRealAndImagArrays: mergeRealAndImagArrays,
        splitRealAndImagArrays: splitRealAndImagArrays,
        complexWithEvenIndex: complexWithEvenIndex,
        complexWithOddIndex: complexWithOddIndex,
        getComplexWithIndex: getComplexWithIndex,
        assignToTypedArray: assignToTypedArray,
        exponents: exponents,
        exponent: exponent,
        decodeEinsumEquation: decodeEinsumEquation,
        getEinsumPermutation: getEinsumPermutation,
        checkEinsumDimSizes: checkEinsumDimSizes,
        getEinsumComputePath: getEinsumComputePath,
        isIdentityPermutation: isIdentityPermutation,
        prepareSplitSize: prepareSplitSize,
        getSparseFillEmptyRowsIndicesDenseShapeMismatch: getSparseFillEmptyRowsIndicesDenseShapeMismatch,
        getSparseFillEmptyRowsNegativeIndexErrorMessage: getSparseFillEmptyRowsNegativeIndexErrorMessage,
        getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: getSparseFillEmptyRowsOutOfRangeIndexErrorMessage,
        getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: getSparseReshapeMultipleNegativeOneOutputDimErrorMessage,
        getSparseReshapeNegativeOutputDimErrorMessage: getSparseReshapeNegativeOutputDimErrorMessage,
        getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: getSparseReshapeEmptyTensorZeroOutputDimErrorMessage,
        getSparseReshapeInputOutputMultipleErrorMessage: getSparseReshapeInputOutputMultipleErrorMessage,
        getSparseReshapeInputOutputMismatchErrorMessage: getSparseReshapeInputOutputMismatchErrorMessage,
        getSparseSegmentReductionNegativeSegmentIdsErrorMessage: getSparseSegmentReductionNegativeSegmentIdsErrorMessage,
        getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage,
        getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage,
        getSparseSegmentReductionIndicesOutOfRangeErrorMessage: getSparseSegmentReductionIndicesOutOfRangeErrorMessage
    });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */

    var kernel_impls = /*#__PURE__*/Object.freeze({
        __proto__: null,
        nonMaxSuppressionV3Impl: nonMaxSuppressionV3Impl$2,
        nonMaxSuppressionV4Impl: nonMaxSuppressionV4Impl$2,
        nonMaxSuppressionV5Impl: nonMaxSuppressionV5Impl$2,
        whereImpl: whereImpl$2
    });

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */

    var tf = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdadeltaOptimizer: AdadeltaOptimizer,
        AdagradOptimizer: AdagradOptimizer,
        AdamOptimizer: AdamOptimizer,
        AdamaxOptimizer: AdamaxOptimizer,
        MomentumOptimizer: MomentumOptimizer,
        Optimizer: Optimizer,
        OptimizerConstructors: OptimizerConstructors,
        RMSPropOptimizer: RMSPropOptimizer,
        SGDOptimizer: SGDOptimizer,
        Tensor: Tensor,
        TensorBuffer: TensorBuffer,
        Variable: Variable,
        get Rank () { return Rank; },
        sumOutType: sumOutType,
        upcastType: upcastType,
        get Reduction () { return Reduction; },
        customGrad: customGrad,
        grad: grad,
        grads: grads,
        valueAndGrad: valueAndGrad,
        valueAndGrads: valueAndGrads,
        variableGrads: variableGrads,
        Environment: Environment,
        env: env,
        get ENV () { return ENV$2; },
        nextFrame: nextFrame,
        KernelBackend: KernelBackend,
        DataStorage: DataStorage,
        abs: abs$2,
        acos: acos$2,
        acosh: acosh$2,
        add: add$1,
        addN: addN$2,
        all: all$2,
        any: any$2,
        argMax: argMax$2,
        argMin: argMin$2,
        asin: asin$2,
        asinh: asinh$2,
        atan: atan$2,
        atan2: atan2$2,
        atanh: atanh$2,
        avgPool: avgPool$2,
        avgPool3d: avgPool3d,
        basicLSTMCell: basicLSTMCell,
        batchToSpaceND: batchToSpaceND$2,
        batchNorm: batchNorm$2,
        batchNorm2d: batchNorm2d,
        batchNorm3d: batchNorm3d,
        batchNorm4d: batchNorm4d,
        bincount: bincount$2,
        broadcastArgs: broadcastArgs$2,
        broadcastTo: broadcastTo,
        buffer: buffer,
        cast: cast$2,
        ceil: ceil$2,
        clipByValue: clipByValue$2,
        clone: clone,
        complex: complex$2,
        concat: concat$2,
        concat1d: concat1d,
        concat2d: concat2d,
        concat3d: concat3d,
        concat4d: concat4d,
        conv1d: conv1d,
        conv2d: conv2d$2,
        conv2dTranspose: conv2dTranspose,
        conv3d: conv3d,
        conv3dTranspose: conv3dTranspose,
        cos: cos$2,
        cosh: cosh$2,
        cumsum: cumsum$2,
        denseBincount: denseBincount$2,
        depthToSpace: depthToSpace$2,
        depthwiseConv2d: depthwiseConv2d$1,
        diag: diag$2,
        dilation2d: dilation2d,
        div: div$1,
        divNoNan: divNoNan,
        dot: dot,
        einsum: einsum$2,
        elu: elu$2,
        equal: equal$2,
        erf: erf$2,
        exp: exp$2,
        expandDims: expandDims$2,
        expm1: expm1$2,
        eye: eye,
        fill: fill$2,
        floor: floor$2,
        floorDiv: floorDiv$2,
        gather: gather,
        greater: greater$2,
        greaterEqual: greaterEqual$2,
        imag: imag$2,
        isFinite: isFinite$3,
        isInf: isInf$2,
        isNaN: isNaN$3,
        leakyRelu: leakyRelu$2,
        less: less$2,
        lessEqual: lessEqual$2,
        linspace: linspace,
        localResponseNormalization: localResponseNormalization,
        log: log$2,
        log1p: log1p$2,
        logSigmoid: logSigmoid,
        logSoftmax: logSoftmax,
        logSumExp: logSumExp,
        logicalAnd: logicalAnd$2,
        logicalNot: logicalNot$2,
        logicalOr: logicalOr$2,
        logicalXor: logicalXor,
        matMul: matMul$1,
        max: max$2,
        maxPool: maxPool$2,
        maxPool3d: maxPool3d$1,
        maxPoolWithArgmax: maxPoolWithArgmax,
        maximum: maximum$2,
        mean: mean$1,
        meshgrid: meshgrid,
        min: min$2,
        minimum: minimum$2,
        mirrorPad: mirrorPad$1,
        mod: mod$2,
        moments: moments,
        mul: mul,
        multiRNNCell: multiRNNCell,
        multinomial: multinomial$2,
        neg: neg$2,
        notEqual: notEqual$2,
        oneHot: oneHot$2,
        ones: ones,
        onesLike: onesLike$2,
        outerProduct: outerProduct,
        pad: pad,
        pad1d: pad1d,
        pad2d: pad2d,
        pad3d: pad3d,
        pad4d: pad4d,
        pool: pool$1,
        pow: pow$2,
        prelu: prelu$2,
        print: print,
        prod: prod$2,
        rand: rand,
        randomGamma: randomGamma,
        randomNormal: randomNormal,
        randomUniform: randomUniform,
        range: range$2,
        real: real$2,
        reciprocal: reciprocal$2,
        relu: relu$2,
        relu6: relu6$2,
        reshape: reshape$2,
        reverse: reverse$2,
        reverse1d: reverse1d,
        reverse2d: reverse2d,
        reverse3d: reverse3d,
        reverse4d: reverse4d,
        round: round$2,
        rsqrt: rsqrt$2,
        scalar: scalar,
        selu: selu$2,
        separableConv2d: separableConv2d,
        setdiff1dAsync: setdiff1dAsync,
        sigmoid: sigmoid$2,
        sign: sign$2,
        sin: sin$2,
        sinh: sinh$2,
        slice: slice$2,
        slice1d: slice1d,
        slice2d: slice2d,
        slice3d: slice3d,
        slice4d: slice4d,
        softmax: softmax$2,
        softplus: softplus$2,
        spaceToBatchND: spaceToBatchND$2,
        fft: fft$2,
        ifft: ifft$2,
        irfft: irfft,
        rfft: rfft,
        split: split$1,
        sqrt: sqrt$2,
        square: square$1,
        squaredDifference: squaredDifference$2,
        squeeze: squeeze,
        stack: stack,
        step: step$2,
        stridedSlice: stridedSlice$2,
        sub: sub$2,
        sum: sum$2,
        tan: tan$2,
        tanh: tanh$2,
        tensor: tensor,
        tensor1d: tensor1d,
        tensor2d: tensor2d,
        tensor3d: tensor3d,
        tensor4d: tensor4d,
        tensor5d: tensor5d,
        tensor6d: tensor6d,
        tile: tile$2,
        topk: topk,
        truncatedNormal: truncatedNormal,
        unique: unique$2,
        unsortedSegmentSum: unsortedSegmentSum$2,
        unstack: unstack,
        variable: variable,
        where: where,
        whereAsync: whereAsync,
        zeros: zeros$1,
        zerosLike: zerosLike$2,
        op: op,
        OP_SCOPE_SUFFIX: OP_SCOPE_SUFFIX,
        booleanMaskAsync: booleanMaskAsync,
        transpose: transpose$2,
        norm: norm,
        movingAverage: movingAverage,
        scatterND: scatterND,
        sparseToDense: sparseToDense$2,
        gatherND: gatherND,
        dropout: dropout,
        enclosingPowerOfTwo: enclosingPowerOfTwo,
        cosineWindow: cosineWindow,
        inTopKAsync: inTopKAsync,
        image: image,
        linalg: linalg,
        losses: losses,
        spectral: spectral,
        fused: fused_ops,
        signal: signal,
        sparse: sparse,
        string: string,
        train: train,
        enableProdMode: enableProdMode,
        enableDebugMode: enableDebugMode,
        disableDeprecationWarnings: disableDeprecationWarnings,
        deprecationWarn: deprecationWarn,
        disposeVariables: disposeVariables,
        engine: engine,
        memory: memory,
        profile: profile,
        tidy: tidy,
        dispose: dispose,
        keep: keep,
        time: time,
        setBackend: setBackend,
        ready: ready,
        getBackend: getBackend,
        removeBackend: removeBackend,
        findBackend: findBackend,
        findBackendFactory: findBackendFactory,
        registerBackend: registerBackend,
        backend: backend,
        setPlatform: setPlatform,
        getKernel: getKernel,
        getGradient: getGradient,
        getKernelsForBackend: getKernelsForBackend,
        registerKernel: registerKernel,
        registerGradient: registerGradient,
        unregisterKernel: unregisterKernel,
        unregisterGradient: unregisterGradient,
        copyRegisteredKernels: copyRegisteredKernels,
        Abs: Abs,
        Acos: Acos,
        Acosh: Acosh,
        Add: Add,
        AddN: AddN,
        All: All,
        Any: Any,
        ArgMax: ArgMax,
        ArgMin: ArgMin,
        Asin: Asin,
        Asinh: Asinh,
        Atan: Atan,
        Atanh: Atanh,
        Atan2: Atan2,
        AvgPool: AvgPool,
        AvgPoolGrad: AvgPoolGrad,
        AvgPool3D: AvgPool3D,
        AvgPool3DGrad: AvgPool3DGrad,
        BatchMatMul: BatchMatMul,
        BatchToSpaceND: BatchToSpaceND,
        Bincount: Bincount,
        BroadcastTo: BroadcastTo,
        BroadcastArgs: BroadcastArgs,
        Cast: Cast,
        Ceil: Ceil,
        ClipByValue: ClipByValue,
        Complex: Complex,
        ComplexAbs: ComplexAbs,
        Concat: Concat,
        Conv2D: Conv2D,
        Conv2DBackpropFilter: Conv2DBackpropFilter,
        Conv2DBackpropInput: Conv2DBackpropInput,
        Conv3D: Conv3D,
        Conv3DBackpropFilterV2: Conv3DBackpropFilterV2,
        Conv3DBackpropInputV2: Conv3DBackpropInputV2,
        Cos: Cos,
        Cosh: Cosh,
        Cumsum: Cumsum,
        CropAndResize: CropAndResize,
        DenseBincount: DenseBincount,
        DepthToSpace: DepthToSpace,
        DepthwiseConv2dNative: DepthwiseConv2dNative,
        DepthwiseConv2dNativeBackpropFilter: DepthwiseConv2dNativeBackpropFilter,
        DepthwiseConv2dNativeBackpropInput: DepthwiseConv2dNativeBackpropInput,
        Diag: Diag,
        Dilation2D: Dilation2D,
        Dilation2DBackpropInput: Dilation2DBackpropInput,
        Dilation2DBackpropFilter: Dilation2DBackpropFilter,
        RealDiv: RealDiv,
        Einsum: Einsum,
        Elu: Elu,
        EluGrad: EluGrad,
        Erf: Erf,
        Equal: Equal,
        Exp: Exp,
        ExpandDims: ExpandDims,
        Expm1: Expm1,
        FFT: FFT,
        Fill: Fill,
        FlipLeftRight: FlipLeftRight,
        Floor: Floor,
        FloorDiv: FloorDiv,
        FusedBatchNorm: FusedBatchNorm,
        GatherV2: GatherV2,
        GatherNd: GatherNd,
        Greater: Greater,
        GreaterEqual: GreaterEqual,
        Identity: Identity,
        IFFT: IFFT,
        Imag: Imag,
        IsFinite: IsFinite,
        IsInf: IsInf,
        IsNan: IsNan,
        LeakyRelu: LeakyRelu,
        Less: Less,
        LessEqual: LessEqual,
        LinSpace: LinSpace,
        Log: Log,
        Log1p: Log1p,
        LogicalAnd: LogicalAnd,
        LogicalNot: LogicalNot,
        LogicalOr: LogicalOr,
        LogSoftmax: LogSoftmax,
        LRN: LRN,
        LRNGrad: LRNGrad,
        Max: Max,
        Maximum: Maximum,
        MaxPool: MaxPool,
        MaxPoolGrad: MaxPoolGrad,
        MaxPool3D: MaxPool3D,
        MaxPool3DGrad: MaxPool3DGrad,
        MaxPoolWithArgmax: MaxPoolWithArgmax,
        Mean: Mean,
        Min: Min,
        Minimum: Minimum,
        MirrorPad: MirrorPad,
        Mod: Mod,
        Multinomial: Multinomial,
        Multiply: Multiply,
        Neg: Neg,
        NotEqual: NotEqual,
        NonMaxSuppressionV3: NonMaxSuppressionV3,
        NonMaxSuppressionV4: NonMaxSuppressionV4,
        NonMaxSuppressionV5: NonMaxSuppressionV5,
        OnesLike: OnesLike,
        OneHot: OneHot,
        Pack: Pack,
        PadV2: PadV2,
        Pool: Pool,
        Pow: Pow,
        Prelu: Prelu,
        Prod: Prod,
        Range: Range,
        Real: Real,
        Reciprocal: Reciprocal,
        Relu: Relu,
        Reshape: Reshape,
        ResizeNearestNeighbor: ResizeNearestNeighbor,
        ResizeNearestNeighborGrad: ResizeNearestNeighborGrad,
        ResizeBilinear: ResizeBilinear,
        ResizeBilinearGrad: ResizeBilinearGrad,
        Relu6: Relu6,
        Reverse: Reverse,
        Round: Round,
        Rsqrt: Rsqrt,
        ScatterNd: ScatterNd,
        Select: Select,
        Selu: Selu,
        Slice: Slice,
        Sin: Sin,
        Sinh: Sinh,
        Sign: Sign,
        Sigmoid: Sigmoid,
        Softplus: Softplus,
        Sqrt: Sqrt,
        Sum: Sum,
        SpaceToBatchND: SpaceToBatchND,
        SplitV: SplitV,
        Softmax: Softmax,
        SparseFillEmptyRows: SparseFillEmptyRows,
        SparseReshape: SparseReshape,
        SparseSegmentMean: SparseSegmentMean,
        SparseSegmentSum: SparseSegmentSum,
        SparseToDense: SparseToDense,
        SquaredDifference: SquaredDifference,
        Square: Square,
        StridedSlice: StridedSlice,
        StringNGrams: StringNGrams,
        StringSplit: StringSplit,
        StringToHashBucketFast: StringToHashBucketFast,
        Sub: Sub,
        Tan: Tan,
        Tanh: Tanh,
        Tile: Tile,
        TopK: TopK,
        Transform: Transform,
        Transpose: Transpose,
        Unique: Unique,
        Unpack: Unpack,
        UnsortedSegmentSum: UnsortedSegmentSum,
        ZerosLike: ZerosLike,
        Step: Step,
        FromPixels: FromPixels,
        RotateWithOffset: RotateWithOffset,
        _FusedMatMul: _FusedMatMul,
        FusedConv2D: FusedConv2D,
        FusedDepthwiseConv2D: FusedDepthwiseConv2D,
        version_core: version,
        browser: browser,
        io: io,
        math: math,
        serialization: serialization,
        test_util: test_util,
        util: util,
        backend_util: backend_util,
        broadcast_util: broadcast_util,
        tensor_util: tensor_util,
        slice_util: slice_util,
        gather_util: gather_nd_util,
        scatter_util: scatter_nd_util,
        device_util: device_util,
        kernel_impls: kernel_impls
    });

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function assertNotComplex$1(tensor, opName) {
        if (!Array.isArray(tensor)) {
            tensor = [tensor];
        }
        tensor.forEach(t => {
            if (t != null) {
                assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors in the CPU backend.`);
            }
        });
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const whereImpl$1 = whereImpl$2;
    class MathBackendCPU extends KernelBackend {
        constructor() {
            super();
            this.blockSize = 48;
            this.firstUse = true;
            this.data = new DataStorage(this, engine());
        }
        nextDataId() {
            return MathBackendCPU.nextDataId++;
        }
        write(values, shape, dtype) {
            if (this.firstUse) {
                this.firstUse = false;
                if (env().get('IS_NODE')) {
                    warn('\n============================\n' +
                        'Hi there 👋. Looks like you are running TensorFlow.js in ' +
                        'Node.js. To speed things up dramatically, install our node ' +
                        'backend, which binds to TensorFlow C++, by running ' +
                        'npm i @tensorflow/tfjs-node, ' +
                        'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +
                        'Then call require(\'@tensorflow/tfjs-node\'); (-gpu ' +
                        'suffix for CUDA) at the start of your program. ' +
                        'Visit https://github.com/tensorflow/tfjs-node for more details.' +
                        '\n============================');
                }
            }
            const dataId = { id: this.nextDataId() };
            this.data.set(dataId, { values, dtype, refCount: 1 });
            return dataId;
        }
        /**
         * Create a data bucket in cpu backend.
         * @param shape Shape of the `TensorInfo`.
         * @param dtype DType of the `TensorInfo`.
         * @param values The value of the `TensorInfo` stored as a flattened array.
         */
        makeTensorInfo(shape, dtype, values) {
            let outId;
            if (dtype === 'string' && values != null && values.length > 0 &&
                isString(values[0])) {
                const encodedValues = values.map(d => encodeString(d));
                outId = this.write(encodedValues, shape, dtype);
            }
            else {
                outId = this.write(values, shape, dtype);
            }
            return { dataId: outId, shape, dtype };
        }
        /** Return refCount of a `TensorData`. */
        refCount(dataId) {
            if (this.data.has(dataId)) {
                const tensorData = this.data.get(dataId);
                return tensorData.refCount;
            }
            return 0;
        }
        /** Increase refCount of a `TensorData`. */
        incRef(dataId) {
            const tensorData = this.data.get(dataId);
            tensorData.refCount++;
        }
        /** Decrease refCount of a `TensorData`. */
        decRef(dataId) {
            if (this.data.has(dataId)) {
                const tensorData = this.data.get(dataId);
                tensorData.refCount--;
            }
        }
        move(dataId, values, shape, dtype, refCount) {
            this.data.set(dataId, { values, dtype, refCount });
        }
        numDataIds() {
            return this.data.numDataIds();
        }
        async read(dataId) {
            return this.readSync(dataId);
        }
        readSync(dataId) {
            const { dtype, complexTensorInfos } = this.data.get(dataId);
            if (dtype === 'complex64') {
                const realValues = this.readSync(complexTensorInfos.real.dataId);
                const imagValues = this.readSync(complexTensorInfos.imag.dataId);
                return mergeRealAndImagArrays(realValues, imagValues);
            }
            return this.data.get(dataId).values;
        }
        bufferSync(t) {
            const data = this.readSync(t.dataId);
            let decodedData = data;
            if (t.dtype === 'string') {
                try {
                    // Decode the bytes into string.
                    decodedData = data.map(d => decodeString(d));
                }
                catch (_a) {
                    throw new Error('Failed to decode encoded string bytes into utf-8');
                }
            }
            return buffer(t.shape, t.dtype, decodedData);
        }
        makeOutput(values, shape, dtype) {
            const dataId = this.write(values, shape, dtype);
            return engine().makeTensorFromDataId(dataId, shape, dtype, this);
        }
        /**
         * Dispose the memory if the dataId has 0 refCount. Return true if the memory
         * is released or memory is not managed in this backend, false if memory is
         * not cleared.
         * @param dataId
         * @oaram force Optional, remove the data regardless of refCount
         */
        disposeData(dataId, force = false) {
            if (this.data.has(dataId)) {
                this.data.get(dataId).refCount--;
                if (!force && this.data.get(dataId).refCount > 0) {
                    return false;
                }
                const { complexTensorInfos } = this.data.get(dataId);
                if (complexTensorInfos != null) {
                    this.disposeData(complexTensorInfos.real.dataId, true);
                    this.disposeData(complexTensorInfos.imag.dataId, true);
                }
                this.data.delete(dataId);
            }
            return true;
        }
        disposeIntermediateTensorInfo(tensorInfo) {
            this.disposeData(tensorInfo.dataId);
        }
        async time(f) {
            const start = now();
            f();
            const kernelMs = now() - start;
            return { kernelMs };
        }
        memory() {
            return {
                // Unreliable due to automatic gc. The numbers above are cumulative.
                unreliable: true,
                reasons: ['The reported memory is an upper bound. Due to automatic garbage ' +
                        'collection, the true allocated memory may be less.']
            };
        }
        where(condition) {
            assertNotComplex$1([condition], 'where');
            const condVals = this.readSync(condition.dataId);
            return whereImpl$1(condition.shape, condVals);
        }
        dispose() { }
        floatPrecision() {
            return 32;
        }
        /** Returns the smallest representable number.  */
        epsilon() {
            return super.epsilon();
        }
    }
    MathBackendCPU.nextDataId = 0;

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function simpleAbsImpl(vals) {
        const resultValues = new Float32Array(vals.length);
        for (let i = 0; i < vals.length; ++i) {
            resultValues[i] = Math.abs(vals[i]);
        }
        return resultValues;
    }
    const abs$1 = (args) => {
        const { x } = args.inputs;
        const cpuBackend = args.backend;
        assertNotComplex$1(x, 'abs');
        let resultValues = new Float32Array(sizeFromShape(x.shape));
        const values = cpuBackend.data.get(x.dataId).values;
        resultValues = simpleAbsImpl(values);
        return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);
    };
    const absConfig$1 = {
        kernelName: Abs,
        backendName: 'cpu',
        kernelFunc: abs$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Template that creates implementation for binary ops. Supports broadcast.
     */
    function createSimpleBinaryKernelImpl(op) {
        return (aShape, bShape, aVals, bVals, dtype) => {
            const newShape = assertAndGetBroadcastShape(aShape, bShape);
            const resultRank = newShape.length;
            const resultStrides = computeStrides(newShape);
            const resultSize = sizeFromShape(newShape);
            const result = getTypedArrayFromDType(dtype, resultSize);
            const aRank = aShape.length;
            const bRank = bShape.length;
            const aStrides = computeStrides(aShape);
            const bStrides = computeStrides(bShape);
            const aBroadcastDims = getBroadcastDims$1(aShape, newShape);
            const bBroadcastDims = getBroadcastDims$1(bShape, newShape);
            if (aBroadcastDims.length + bBroadcastDims.length === 0) {
                for (let i = 0; i < result.length; ++i) {
                    result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);
                }
            }
            else {
                for (let i = 0; i < result.length; ++i) {
                    const loc = indexToLoc(i, resultRank, resultStrides);
                    const aLoc = loc.slice(-aRank);
                    aBroadcastDims.forEach(d => aLoc[d] = 0);
                    const aIndex = locToIndex(aLoc, aRank, aStrides);
                    const bLoc = loc.slice(-bRank);
                    bBroadcastDims.forEach(d => bLoc[d] = 0);
                    const bIndex = locToIndex(bLoc, bRank, bStrides);
                    result[i] = op(aVals[aIndex], bVals[bIndex]);
                }
            }
            return [result, newShape];
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function complex$1(args) {
        const { inputs, backend } = args;
        const { real, imag } = inputs;
        const realVals = backend.data.get(real.dataId).values;
        const imagVals = backend.data.get(imag.dataId).values;
        const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');
        const complex = backend.data.get(complexInfo.dataId);
        // The complex tensor owns the underlying real and imag tensorInfos, only the
        // complex tensor tracks refCount, when complexData is disposed the
        // underlying tensorData will be disposed.
        complex.complexTensorInfos = {
            real: backend.makeTensorInfo(real.shape, 'float32', realVals),
            imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)
        };
        return complexInfo;
    }
    const complexConfig$1 = {
        kernelName: Complex,
        backendName: 'cpu',
        kernelFunc: complex$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Generates a tensorInfo with all zeros value.
     * @param backend cpu backend.
     * @param shape Shape for the zeros tensor.
     * @param dtype Optional. If set, the result has this dtype.
     */
    function zeros(backend, shape, dtype = 'float32') {
        if (dtype === 'complex64') {
            const real = zeros(backend, shape, 'float32');
            const imag = zeros(backend, shape, 'float32');
            return complex$1({ inputs: { real, imag }, backend });
        }
        const values = makeZerosTypedArray(sizeFromShape(shape), dtype);
        return backend.makeTensorInfo(shape, dtype, values);
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function identity$1(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        backend.incRef(x.dataId);
        return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };
    }
    const identityConfig$1 = {
        kernelName: Identity,
        backendName: 'cpu',
        kernelFunc: identity$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function real$1(args) {
        const { inputs, backend } = args;
        const { input } = inputs;
        const real = backend.data.get(input.dataId).complexTensorInfos.real;
        const realVal = backend.data.get(real.dataId).values;
        // When complex tensor is disposed, its underlying parts will be disposed too.
        // Make new tensor out of the real value of the complex. This makes sure the
        // value is still accessible even if complex tensor is disposed.
        return backend.makeTensorInfo(real.shape, real.dtype, realVal);
    }
    const realConfig$1 = {
        kernelName: Real,
        backendName: 'cpu',
        kernelFunc: real$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function cast$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { dtype } = attrs;
        // Casting to complex64.
        if (dtype === 'complex64') {
            if (x.dtype === 'complex64') {
                return identity$1({ inputs: { x }, backend });
            }
            const zerosTensorInfo = zeros(backend, x.shape, x.dtype);
            const floatX = cast$1({ inputs: { x }, backend, attrs: { dtype: 'float32' } });
            const result = complex$1({ inputs: { real: floatX, imag: zerosTensorInfo }, backend });
            backend.disposeIntermediateTensorInfo(zerosTensorInfo);
            backend.disposeIntermediateTensorInfo(floatX);
            return result;
        }
        // Casting from complex64
        if (x.dtype === 'complex64') {
            const realPart = real$1({ inputs: { input: x }, backend });
            const result = cast$1({ inputs: { x: realPart }, backend, attrs: { dtype } });
            backend.disposeIntermediateTensorInfo(realPart);
            return result;
        }
        if (!hasEncodingLoss(x.dtype, dtype)) {
            // We don't change the underlying data, since we cast to higher
            // precision.
            const result = identity$1({ inputs: { x }, backend });
            return { dataId: result.dataId, shape: result.shape, dtype };
        }
        if (dtype === 'int32') {
            const values = backend.data.get(x.dataId).values;
            const resultValues = Int32Array.from(values);
            return backend.makeTensorInfo(x.shape, 'int32', resultValues);
        }
        if (dtype === 'bool') {
            // This is essentially the result of notEqual(x, 0). We avoid using
            // kernel notEqual to avoid circular dependency, i.e. binary_utils ->
            // cast -> notEqual -> binary_utils.
            const xVals = backend.data.get(x.dataId).values;
            const zero = toTypedArray([0], x.dtype);
            const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');
            return backend.makeTensorInfo(resultShape, 'bool', resultData);
        }
        throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);
    }
    const castConfig$1 = {
        kernelName: Cast,
        backendName: 'cpu',
        kernelFunc: cast$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Template that creates a `KernelFunc` for binary ops.
     * @param name Kernel name.
     * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.
     * @param binaryKernelComplexImpl Optional. If exists, represents a
     *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype
     *     is `complex64`.
     * @param dtype Optional. If set, the result has this dtype. Otherwise, the
     *     result has the same dtype as the first input. This is mainly used in
     *     comparison kernels, such as Equal, Less, Greater, etc.
     */
    function binaryKernelFunc$1(name, simpleImpl, complexImpl, dtype) {
        if (complexImpl == null) {
            return ({ inputs, backend }) => {
                const { a, b } = inputs;
                const cpuBackend = backend;
                assertNotComplex$1([a, b], name);
                const aVals = cpuBackend.data.get(a.dataId).values;
                const bVals = cpuBackend.data.get(b.dataId).values;
                const decodedAVals = a.dtype === 'string' ?
                    // tslint:disable-next-line: no-any
                    fromUint8ToStringArray(aVals) :
                    aVals;
                const decodedBVals = a.dtype === 'string' ?
                    // tslint:disable-next-line: no-any
                    fromUint8ToStringArray(bVals) :
                    bVals;
                const $dtype = dtype || a.dtype;
                const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);
                return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);
            };
        }
        return ({ inputs, backend }) => {
            const { a, b } = inputs;
            const cpuBackend = backend;
            if (a.dtype === 'complex64' || b.dtype === 'complex64') {
                const $aComplex = cast$1({ inputs: { x: a }, backend: cpuBackend, attrs: { dtype: 'complex64' } });
                const $aComplexVals = cpuBackend.data.get($aComplex.dataId);
                const aReal = $aComplexVals.complexTensorInfos.real;
                const aImag = $aComplexVals.complexTensorInfos.imag;
                const aRealVals = cpuBackend.data.get(aReal.dataId).values;
                const aImagVals = cpuBackend.data.get(aImag.dataId).values;
                const $bComplex = cast$1({ inputs: { x: b }, backend: cpuBackend, attrs: { dtype: 'complex64' } });
                const $bComplexVals = cpuBackend.data.get($bComplex.dataId);
                const bReal = $bComplexVals.complexTensorInfos.real;
                const bImag = $bComplexVals.complexTensorInfos.imag;
                const bRealVals = cpuBackend.data.get(bReal.dataId).values;
                const bImagVals = cpuBackend.data.get(bImag.dataId).values;
                const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);
                const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);
                const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);
                const result = complex$1({ inputs: { real: resultReal, imag: resultImag }, backend: cpuBackend });
                cpuBackend.disposeIntermediateTensorInfo($aComplex);
                cpuBackend.disposeIntermediateTensorInfo($bComplex);
                cpuBackend.disposeIntermediateTensorInfo(resultReal);
                cpuBackend.disposeIntermediateTensorInfo(resultImag);
                return result;
            }
            else {
                const aVals = cpuBackend.data.get(a.dataId).values;
                const bVals = cpuBackend.data.get(b.dataId).values;
                const $dtype = dtype || a.dtype;
                const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);
                return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);
            }
        };
    }
    /**
     * Template that creates the complex type implementation for binary ops.
     * Supports broadcast.
     */
    function createComplexBinaryKernelImpl(op) {
        return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {
            const resultShape = assertAndGetBroadcastShape(aShape, bShape);
            const resultSize = sizeFromShape(resultShape);
            const resultRank = resultShape.length;
            const resultStrides = computeStrides(resultShape);
            const resultRealVals = getTypedArrayFromDType('float32', resultSize);
            const resultImagVals = getTypedArrayFromDType('float32', resultSize);
            const aBroadcastDims = getBroadcastDims$1(aShape, resultShape);
            const bBroadcastDims = getBroadcastDims$1(bShape, resultShape);
            const aVals = mergeRealAndImagArrays(aRealVals, aImagVals);
            const bVals = mergeRealAndImagArrays(bRealVals, bImagVals);
            const aRank = aShape.length;
            const aStrides = computeStrides(aShape);
            const bRank = bShape.length;
            const bStrides = computeStrides(bShape);
            if (aBroadcastDims.length + bBroadcastDims.length === 0) {
                for (let i = 0; i < resultRealVals.length; i++) {
                    const aIdx = i % aVals.length;
                    const bIdx = i % bVals.length;
                    const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);
                    resultRealVals[i] = result.real;
                    resultImagVals[i] = result.imag;
                }
            }
            else {
                for (let i = 0; i < resultRealVals.length; i++) {
                    const loc = indexToLoc(i, resultRank, resultStrides);
                    const aLoc = loc.slice(-aRank);
                    aBroadcastDims.forEach(d => aLoc[d] = 0);
                    const aIndex = locToIndex(aLoc, aRank, aStrides);
                    const bLoc = loc.slice(-bRank);
                    bBroadcastDims.forEach(d => bLoc[d] = 0);
                    const bIndex = locToIndex(bLoc, bRank, bStrides);
                    const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);
                    resultRealVals[i] = opResult.real;
                    resultImagVals[i] = opResult.imag;
                }
            }
            return [resultRealVals, resultImagVals, resultShape];
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));
    const addComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {
        return { real: aReal + bReal, imag: aImag + bImag };
    }));
    const add = binaryKernelFunc$1(Add, addImpl, addComplexImpl);
    const addConfig$1 = {
        kernelName: Add,
        backendName: 'cpu',
        kernelFunc: add
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {
        const weightsSize = sizeFromShape(weightsShape);
        const outVals = makeZerosTypedArray(size, weightsDtype);
        for (let i = 0; i < xVals.length; i++) {
            const value = xVals[i];
            if (value < 0) {
                throw new Error('Input x must be non-negative!');
            }
            if (value >= size) {
                continue;
            }
            if (weightsSize > 0) {
                outVals[value] += weightsVals[i];
            }
            else {
                outVals[value] += 1;
            }
        }
        return outVals;
    }
    function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {
        const numRows = xBuf.shape[0];
        const numCols = xBuf.shape[1];
        const outBuf = buffer([numRows, size], weightsBuf.dtype);
        for (let i = 0; i < numRows; i++) {
            for (let j = 0; j < numCols; j++) {
                const value = xBuf.get(i, j);
                if (value < 0) {
                    throw new Error('Input x must be non-negative!');
                }
                if (value >= size) {
                    continue;
                }
                if (binaryOutput) {
                    outBuf.set(1, i, value);
                }
                else {
                    if (weightsBuf.size > 0) {
                        outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);
                    }
                    else {
                        outBuf.set(outBuf.get(i, value) + 1, i, value);
                    }
                }
            }
        }
        return outBuf;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Template that creates implementation for unary op.
     */
    function createSimpleUnaryImpl(op) {
        return (values, dtype, attrs) => {
            const newValues = getTypedArrayFromDType(dtype, values.length);
            for (let i = 0; i < values.length; ++i) {
                newValues[i] = op(values[i], attrs);
            }
            return newValues;
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Template that creates a `KernelFunc` for unary ops.
     * @param name Kernel name.
     * @param op A `SimpleUnaryOperation` for the kernel.
     * @param dtype Optional. If set, the result has this dtype. Otherwise, the
     *     result has the same dtype as the input. This is mainly used in certain
     *     kernels that return bool type, such as isFinite, isInf, etc.
     */
    function unaryKernelFunc$1(name, op, dtype) {
        return ({ inputs, attrs, backend }) => {
            const { x } = inputs;
            assertNotComplex$1(x, name);
            if (x.dtype === 'string' || dtype === 'string') {
                throw new Error('unaryKernelFunc does not support string input/output');
            }
            const cpuBackend = backend;
            const values = cpuBackend.data.get(x.dataId).values;
            const xSize = sizeFromShape(x.shape);
            const $dtype = dtype || x.dtype;
            const newValues = getArrayFromDType($dtype, xSize);
            for (let i = 0; i < xSize; ++i) {
                newValues[i] = op(values[i], attrs);
            }
            return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);
        };
    }
    /**
     * Template that creates a `KernelFunc` for unary ops from the given
     * `SimpleUnaryImpl`..
     * @param name Kernel name.
     * @param unaryImpl A `SimpleUnaryImpl` that implements the op.
     * @param dtype Optional. If set, the result has this dtype. Otherwise, the
     *     result has the same dtype as the input. This is mainly used in certain
     *     kernels that return bool type, such as isFinite, isInf, etc.
     */
    function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {
        return ({ inputs, attrs, backend }) => {
            const { x } = inputs;
            assertNotComplex$1(x, name);
            if (x.dtype === 'string' || dtype === 'string') {
                throw new Error('unaryKernelFunc does not support string input/output');
            }
            const cpuBackend = backend;
            const values = cpuBackend.data.get(x.dataId).values;
            const $dtype = dtype || x.dtype;
            const newValues = unaryImpl(values, $dtype, attrs);
            return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));
    const ceil$1 = unaryKernelFuncFromImpl(Ceil, ceilImpl);
    const ceilConfig$1 = {
        kernelName: Ceil,
        backendName: 'cpu',
        kernelFunc: ceil$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function concatImpl$1(inputs, outShape, dtype, simplyConcat) {
        const outVals = getArrayFromDType(dtype, sizeFromShape(outShape));
        if (simplyConcat && dtype !== 'string') {
            // Use built-in TypedArray.set() method for speed.
            let offset = 0;
            inputs.forEach(input => {
                const size = sizeFromShape(input.shape);
                outVals.set(input.vals, offset);
                offset += size;
            });
        }
        else {
            let colOffset = 0;
            inputs.forEach(input => {
                const decodedData = dtype === 'string' ?
                    fromUint8ToStringArray(input.vals) :
                    input.vals;
                let tIdx = 0;
                for (let row = 0; row < input.shape[0]; ++row) {
                    const resIdx = row * outShape[1] + colOffset;
                    for (let col = 0; col < input.shape[1]; ++col) {
                        outVals[resIdx + col] = decodedData[tIdx++];
                    }
                }
                colOffset += input.shape[1];
            });
        }
        return outVals;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const equalImpl = createSimpleBinaryKernelImpl((a, b) => (a === b) ? 1 : 0);
    const equal$1 = binaryKernelFunc$1(Equal, equalImpl, null /* complexImpl */, 'bool');
    const equalConfig$1 = {
        kernelName: Equal,
        backendName: 'cpu',
        kernelFunc: equal$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));
    const exp$1 = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');
    const expConfig$1 = {
        kernelName: Exp,
        backendName: 'cpu',
        kernelFunc: exp$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));
    const expm1$1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);
    const expm1Config$1 = {
        kernelName: Expm1,
        backendName: 'cpu',
        kernelFunc: expm1$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));
    const floor$1 = unaryKernelFuncFromImpl(Floor, floorImpl);
    const floorConfig$1 = {
        kernelName: Floor,
        backendName: 'cpu',
        kernelFunc: floor$1,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {
        const outBuf = buffer([numSlices, sliceSize], dtype);
        for (let i = 0; i < numSlices; i++) {
            const index = [];
            let flattenIndex = 0;
            for (let j = 0; j < sliceRank; j++) {
                const dim = indicesData[i * sliceRank + j];
                flattenIndex += dim * strides[j];
                index.push(dim);
            }
            if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {
                throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);
            }
            for (let k = 0; k < sliceSize; k++) {
                outBuf.values[i * sliceSize + k] =
                    paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));
            }
        }
        return outBuf;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {
        const outBuf = buffer(flattenOutputShape, xBuf.dtype);
        for (let i = 0; i < outBuf.size; ++i) {
            const newLoc = outBuf.indexToLoc(i);
            const originalLoc = newLoc.slice();
            const batchIdx = originalLoc[0];
            const indicesIdx = originalLoc[2];
            const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);
            originalLoc[2] = indicesBuf.values[indicesIndex];
            const originalIndex = xBuf.locToIndex(originalLoc);
            if (0 <= originalIndex && originalIndex < xBuf.values.length) {
                outBuf.values[i] = xBuf.values[originalIndex];
            } // Else, index is out of bounds, so leave the default zero val in outBuf.
        }
        return outBuf;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const greaterImpl = createSimpleBinaryKernelImpl((a, b) => (a > b) ? 1 : 0);
    const greater$1 = binaryKernelFunc$1(Greater, greaterImpl, null /* complexImpl */, 'bool');
    const greaterConfig$1 = {
        kernelName: Greater,
        backendName: 'cpu',
        kernelFunc: greater$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const greaterEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a >= b) ? 1 : 0);
    const greaterEqual$1 = binaryKernelFunc$1(GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');
    const greaterEqualConfig$1 = {
        kernelName: GreaterEqual,
        backendName: 'cpu',
        kernelFunc: greaterEqual$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const lessImpl = createSimpleBinaryKernelImpl((a, b) => (a < b) ? 1 : 0);
    const less$1 = binaryKernelFunc$1(Less, lessImpl, null /* complexImpl */, 'bool');
    const lessConfig$1 = {
        kernelName: Less,
        backendName: 'cpu',
        kernelFunc: less$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const lessEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a <= b) ? 1 : 0);
    const lessEqual$1 = binaryKernelFunc$1(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');
    const lessEqualConfig$1 = {
        kernelName: LessEqual,
        backendName: 'cpu',
        kernelFunc: lessEqual$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function linSpaceImpl(start, stop, num) {
        const step = (stop - start) / (num - 1);
        const values = makeZerosTypedArray(num, 'float32');
        values[0] = start;
        for (let i = 1; i < values.length; i++) {
            values[i] = values[i - 1] + step;
        }
        return values;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));
    const log$1 = unaryKernelFuncFromImpl(Log, logImpl);
    const logConfig$1 = {
        kernelName: Log,
        backendName: 'cpu',
        kernelFunc: log$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxImpl$1(aVals, reduceSize, outShape, dtype) {
        const vals = getTypedArrayFromDType(dtype, sizeFromShape(outShape));
        for (let i = 0; i < vals.length; ++i) {
            const offset = i * reduceSize;
            let max = aVals[offset];
            for (let j = 0; j < reduceSize; ++j) {
                const value = aVals[offset + j];
                if (Number.isNaN(value) ||
                    value > max) { // comparison with NaN always return false
                    max = value;
                }
            }
            vals[i] = max;
        }
        return vals;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const maximumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.max(aValue, bValue)));
    const maximum$1 = binaryKernelFunc$1(Maximum, maximumImpl);
    const maximumConfig$1 = {
        kernelName: Maximum,
        backendName: 'cpu',
        kernelFunc: maximum$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const minimumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.min(aValue, bValue)));
    const minimum$1 = binaryKernelFunc$1(Minimum, minimumImpl);
    const minimumConfig$1 = {
        kernelName: Minimum,
        backendName: 'cpu',
        kernelFunc: minimum$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const multiplyImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));
    const multiplyComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {
        return {
            real: aReal * bReal - aImag * bImag,
            imag: aReal * bImag + aImag * bReal
        };
    }));
    const multiply$1 = binaryKernelFunc$1(Multiply, multiplyImpl, multiplyComplexImpl);
    const multiplyConfig$1 = {
        kernelName: Multiply,
        backendName: 'cpu',
        kernelFunc: multiply$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function negImpl(xVals, xShape, xDtype) {
        const minusOne = createScalarValue(-1, xDtype);
        return multiplyImpl([], xShape, minusOne, xVals, xDtype);
    }
    function neg$1(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        assertNotComplex$1(x, 'neg');
        const xVals = backend.data.get(x.dataId).values;
        const [res, newShape] = negImpl(xVals, x.shape, x.dtype);
        return backend.makeTensorInfo(newShape, x.dtype, res);
    }
    const negConfig$1 = {
        kernelName: Neg,
        backendName: 'cpu',
        kernelFunc: neg$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const notEqualImpl = createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));
    const notEqual$1 = binaryKernelFunc$1(NotEqual, notEqualImpl, null /* complexOp */, 'bool');
    const notEqualConfig$1 = {
        kernelName: NotEqual,
        backendName: 'cpu',
        kernelFunc: notEqual$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function transposeImpl$1(xVals, xShape, dtype, perm, newShape) {
        const xRank = xShape.length;
        const xSize = sizeFromShape(xShape);
        const xStrides = computeStrides(xShape);
        const newStrides = computeStrides(newShape);
        const result = getTypedArrayFromDType(dtype, sizeFromShape(newShape));
        for (let i = 0; i < xSize; ++i) {
            const loc = indexToLoc(i, xRank, xStrides);
            // Permute location.
            const newLoc = new Array(loc.length);
            for (let i = 0; i < newLoc.length; i++) {
                newLoc[i] = loc[perm[i]];
            }
            const newIndex = locToIndex(newLoc, xRank, newStrides);
            result[newIndex] = xVals[i];
        }
        return result;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function transpose$1(args) {
        const { inputs, attrs, backend } = args;
        const { x } = inputs;
        const { perm } = attrs;
        assertNotComplex$1(x, 'transpose');
        const xRank = x.shape.length;
        const newShape = new Array(xRank);
        for (let i = 0; i < newShape.length; i++) {
            newShape[i] = x.shape[perm[i]];
        }
        const values = backend.data.get(x.dataId).values;
        const result = transposeImpl$1(values, x.shape, x.dtype, perm, newShape);
        const dataId = backend.write(result, newShape, x.dtype);
        return { dataId, shape: newShape, dtype: x.dtype };
    }
    const transposeConfig$1 = {
        kernelName: Transpose,
        backendName: 'cpu',
        kernelFunc: transpose$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function prodImpl(xShape, xDtype, xVals, reductionAxes) {
        const [outShape, reduceShape] = computeOutAndReduceShapes(xShape, reductionAxes);
        const outDtype = upcastType(xDtype, 'int32');
        const outVals = makeZerosTypedArray(sizeFromShape(outShape), outDtype);
        const reduceSize = sizeFromShape(reduceShape);
        for (let i = 0; i < outVals.length; ++i) {
            const offset = i * reduceSize;
            let prod = 1;
            for (let j = 0; j < reduceSize; ++j) {
                prod *= xVals[offset + j];
            }
            outVals[i] = prod;
        }
        return { outVals, outShape, outDtype };
    }
    function prod$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        assertNotComplex$1(x, 'prod');
        const xRank = x.shape.length;
        const axes = parseAxisParam(axis, x.shape);
        const permutation = getAxesPermutation(axes, xRank);
        let reductionAxes = axes;
        let permutedX = x;
        const intermediateTensorInfos = [];
        if (permutation != null) {
            permutedX = transpose$1({ inputs: { x }, backend, attrs: { perm: permutation } });
            intermediateTensorInfos.push(permutedX);
            reductionAxes = getInnerMostAxes(reductionAxes.length, xRank);
        }
        const xVals = backend.data.get(permutedX.dataId).values;
        const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);
        let resultShape = outShape;
        if (keepDims) {
            resultShape = expandShapeToKeepDim(outShape, axes);
        }
        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return backend.makeTensorInfo(resultShape, outDtype, outVals);
    }
    const prodConfig$1 = {
        kernelName: Prod,
        backendName: 'cpu',
        kernelFunc: prod$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function rangeImpl(start, stop, step, dtype) {
        const sameStartStop = start === stop;
        const increasingRangeNegativeStep = start < stop && step < 0;
        const decreasingRangePositiveStep = stop < start && step > 1;
        if (sameStartStop || increasingRangeNegativeStep ||
            decreasingRangePositiveStep) {
            return makeZerosTypedArray(0, dtype);
        }
        const numElements = Math.abs(Math.ceil((stop - start) / step));
        const values = makeZerosTypedArray(numElements, dtype);
        if (stop < start && step === 1) {
            // Auto adjust the step's sign if it hasn't been set
            // (or was set to 1)
            step = -1;
        }
        values[0] = start;
        for (let i = 1; i < values.length; i++) {
            values[i] = values[i - 1] + step;
        }
        return values;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));
    const rsqrt$1 = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);
    const rsqrtConfig$1 = {
        kernelName: Rsqrt,
        backendName: 'cpu',
        kernelFunc: rsqrt$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const sigmoidImpl = createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));
    const sigmoid$1 = unaryKernelFunc$1(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));
    const sigmoidConfig$1 = {
        kernelName: Sigmoid,
        backendName: 'cpu',
        kernelFunc: sigmoid$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sliceImpl(vals, begin, size, shape, dtype) {
        const isContinous = isSliceContinous(shape, begin, size);
        const length = sizeFromShape(size);
        const xStrides = computeStrides(shape);
        if (isContinous) {
            const flatOffset = computeFlatOffset(begin, xStrides);
            if (dtype === 'string') {
                return vals.slice(flatOffset, flatOffset + length);
            }
            return vals.subarray(flatOffset, flatOffset + length);
        }
        const decodedData = dtype === 'string' ?
            fromUint8ToStringArray(vals) :
            vals;
        const inBuf = buffer(shape, dtype, decodedData);
        const outBuf = buffer(size, dtype);
        for (let i = 0; i < outBuf.size; ++i) {
            const outLoc = outBuf.indexToLoc(i);
            const inLoc = outLoc.map((idx, j) => idx + begin[j]);
            outBuf.set(inBuf.get(...inLoc), ...outLoc);
        }
        if (dtype === 'string') {
            return fromStringArrayToUint8(outBuf.values);
        }
        return outBuf.values;
    }
    function slice$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { begin, size } = attrs;
        assertNotComplex$1(x, 'slice');
        const [$begin, $size] = parseSliceParams(x, begin, size);
        assertParamsValid(x, $begin, $size);
        const vals = backend.data.get(x.dataId).values;
        const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);
        return backend.makeTensorInfo($size, x.dtype, outVals);
    }
    const sliceConfig$1 = {
        kernelName: Slice,
        backendName: 'cpu',
        kernelFunc: slice$1
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {
        const indicesCount = indicesShape[0];
        const denseRows = denseShape[0];
        const emptyRowIndicator = new Array(denseRows);
        const reverseIndexMap = new Array(indicesCount);
        const rank = indicesShape[1];
        if (denseRows === 0) {
            if (indicesCount !== 0) {
                throw new Error(getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesCount));
            }
            const outputIndices = getArrayFromDType(indicesDType, 0);
            const outputValues = getArrayFromDType(valuesDType, 0);
            return [
                outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap
            ];
        }
        let rowsAreOrdered = true;
        let lastIndicesRow = 0;
        const csrOffset = new Array(denseRows).fill(0);
        for (let i = 0; i < indicesCount; ++i) {
            // indices is a 2d tensor with shape of [N, rank]
            const row = indices[i * rank];
            if (row < 0) {
                throw new Error(getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));
            }
            if (row >= denseRows) {
                throw new Error(getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(i, row, denseRows));
            }
            ++csrOffset[row];
            rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);
            lastIndicesRow = row;
        }
        let allRowsFull = true;
        for (let row = 0; row < denseRows; ++row) {
            // csrOffset here describes the number of elements in this dense row
            const rowEmpty = (csrOffset[row] === 0);
            emptyRowIndicator[row] = rowEmpty;
            allRowsFull = allRowsFull && !rowEmpty;
            // In filled version, each row has at least one element.
            csrOffset[row] = Math.max(csrOffset[row], 1);
            // Update csrOffset to represent the number of elements up to and
            // including denseRows + 1:
            //  csrOffset[0] == #{elements of row 0}
            //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}
            //  ..
            //  csrOffset[i] == starting index for elements in row i + 1.
            if (row > 0) {
                csrOffset[row] += csrOffset[row - 1];
            }
        }
        if (allRowsFull && rowsAreOrdered) {
            const outputIndices = indices;
            const outputValues = values;
            for (let i = 0; i < indicesCount; ++i) {
                reverseIndexMap[i] = i;
            }
            return [
                outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,
                reverseIndexMap
            ];
        }
        else {
            const fullIndicesCount = csrOffset[denseRows - 1];
            const outputIndices = getArrayFromDType(indicesDType, fullIndicesCount * rank);
            const outputValues = getArrayFromDType(valuesDType, fullIndicesCount);
            const filledCount = new Array(denseRows).fill(0);
            // Fill in values for rows that are not missing
            for (let i = 0; i < indicesCount; ++i) {
                // indices is a 2d tensor with shape of [N, rank]
                const row = indices[i * rank];
                const offset = filledCount[row];
                const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;
                filledCount[row]++; // Increment the filled count for this row.
                for (let j = 0; j < rank; ++j) {
                    // indices and outputIndices are 2d tensors with shape of [N, rank]
                    outputIndices[outputI * rank + j] = indices[i * rank + j];
                }
                outputValues[outputI] = values[i];
                // We'll need this reverse index map to backprop correctly.
                reverseIndexMap[i] = outputI;
            }
            // Fill in values for rows that are missing
            for (let row = 0; row < denseRows; ++row) {
                const rowCount = filledCount[row];
                if (rowCount === 0) { // We haven't filled this row
                    const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];
                    // Remaining index values were set to zero already.
                    // Just need to set the row index in the right location.
                    // outputIndices is a 2d tensor with shape of [N, rank]
                    outputIndices[startingIndex * rank + 0] = row;
                    for (let col = 1; col < rank; ++col) {
                        outputIndices[startingIndex * rank + col] = 0;
                    }
                    outputValues[startingIndex] = defaultValue;
                }
            }
            return [
                outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,
                reverseIndexMap
            ];
        }
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {
        const denseSize = sizeFromShape(inputShape);
        const nnz = inputIndicesShape[0];
        const outputRank = targetShape.length;
        // Compute the output shape. Determine product of specified dimensions, and
        // find the index of the unspecified one.
        const outputShape = [];
        let product = 1;
        let unknownIndex = -1;
        for (let d = 0; d < outputRank; ++d) {
            const size = targetShape[d];
            if (size === -1) {
                if (unknownIndex !== -1) {
                    throw new Error(getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(unknownIndex, d));
                }
                unknownIndex = d;
                outputShape.push(1);
            }
            else {
                if (size < 0) {
                    throw new Error(getSparseReshapeNegativeOutputDimErrorMessage(d, size));
                }
                product *= size;
                outputShape.push(size);
            }
        }
        if (unknownIndex !== -1) {
            if (product <= 0) {
                throw new Error(getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());
            }
            const missing = Math.trunc(denseSize / product);
            if (product * missing !== denseSize) {
                throw new Error(getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape));
            }
            outputShape[unknownIndex] = missing;
        }
        const outputSize = sizeFromShape(outputShape);
        if (outputSize !== denseSize) {
            throw new Error(getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape));
        }
        const inputRank = inputShape.length;
        const inputStrides = [];
        if (inputRank > 0) {
            inputStrides[inputRank - 1] = 1;
            for (let d = inputRank - 2; d >= 0; --d) {
                inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];
            }
        }
        const outputStrides = [];
        if (outputRank > 0) {
            outputStrides[outputRank - 1] = 1;
            for (let d = outputRank - 2; d >= 0; --d) {
                outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];
            }
        }
        const newIndices = getArrayFromDType(inputDType, nnz * outputRank);
        for (let i = 0; i < nnz; ++i) {
            let id = 0;
            for (let j = 0; j < inputRank; ++j) {
                // inputIndices is a 2d tensor with shape of [nnz, inputRank]
                id += inputIndices[i * inputRank + j] * inputStrides[j];
            }
            for (let j = 0; j < outputRank; ++j) {
                // newIndices is a 2d tensor with shape of [nnz, outputRank]
                newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);
                id %= outputStrides[j];
            }
        }
        return [newIndices, [nnz, outputRank], outputShape];
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseSegmentReductionImpl(input, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {
        const numIndices = indices.length;
        // Flatten the array to two dimensions
        const inputFlat = [inputShape[0], input.length / inputShape[0]];
        const numCol = inputFlat[1];
        // Note that the current implementation assumes that segmentIds values are
        // sorted.
        const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;
        const outputRows = lastSegmentIdPlusOne;
        if (outputRows < 0) {
            throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
        }
        const outputShape = inputShape.slice();
        outputShape[0] = outputRows;
        const outputLength = outputShape.reduce((product, value) => product * value, 1);
        // Output array is initialized with the value 0 by default.
        const output = getArrayFromDType(inputDType, outputLength);
        // Note that we do not initialize the output buffer with a default value, so
        // we need to explicitly set missing indices to the default value.
        if (numIndices === 0) {
            if (outputRows > 0) {
                output.fill(defaultValue);
            }
            return [output, outputShape];
        }
        if (outputRows <= 0) {
            throw new Error(getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
        }
        let start = 0, end = 1;
        // Index from which the output is not initialized.
        let uninitializedIndex = 0;
        let outIndex = segmentIds[start];
        while (true) {
            // We initialize nextIndex to 0 to avoid may be uninitialized warning
            let nextIndex = 0;
            if (end < numIndices) {
                nextIndex = segmentIds[end];
                if (outIndex === nextIndex) {
                    ++end;
                    continue;
                }
                // We have a new segment here.  Verify that the segment ids are growing.
                if (outIndex >= nextIndex) {
                    throw new Error(getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());
                }
            }
            if (outIndex < 0 || outIndex >= outputRows) {
                throw new Error(getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(outIndex, outputRows));
            }
            // If there is a gap between two indices, we need to set that gap to the
            // default value.
            if (outIndex > uninitializedIndex) {
                output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);
            }
            for (let i = start; i < end; ++i) {
                const index = indices[i];
                if (index < 0 || index >= inputFlat[0]) {
                    throw new Error(getSparseSegmentReductionIndicesOutOfRangeErrorMessage(i, indices[i], inputFlat[0]));
                }
                for (let j = 0; j < numCol; j++) {
                    output[outIndex * numCol + j] += input[index * numCol + j];
                }
            }
            if (isMean) {
                for (let j = 0; j < numCol; j++) {
                    output[outIndex * numCol + j] /= end - start;
                }
            }
            start = end;
            ++end;
            uninitializedIndex = outIndex + 1;
            outIndex = nextIndex;
            if (end > numIndices) {
                break;
            }
        }
        // Fill the gap at the end with the default value.
        if (uninitializedIndex < outputRows) {
            output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);
        }
        return [output, outputShape];
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));
    const sqrt$1 = unaryKernelFunc$1(Sqrt, (xi) => Math.sqrt(xi));
    const sqrtConfig$1 = {
        kernelName: Sqrt,
        backendName: 'cpu',
        kernelFunc: sqrt$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {
        const diff = a - b;
        return diff * diff;
    }));
    const squaredDifference$1 = binaryKernelFunc$1(SquaredDifference, squaredDifferenceImpl);
    const squaredDifferenceConfig$1 = {
        kernelName: SquaredDifference,
        backendName: 'cpu',
        kernelFunc: squaredDifference$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function stridedSliceImpl(outShape, xBuf, strides, begin) {
        const outBuf = buffer(outShape, xBuf.dtype);
        for (let i = 0; i < outBuf.size; i++) {
            const loc = outBuf.indexToLoc(i);
            const newLoc = new Array(loc.length);
            for (let j = 0; j < newLoc.length; j++) {
                newLoc[j] = loc[j] * strides[j] + begin[j];
            }
            outBuf.set(xBuf.get(...newLoc), ...loc);
        }
        return outBuf;
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * The StringNGramsOp class creates ngrams from ragged string data.
     * The constructor contains all attributes related to the operation such as
     * padding widths and strings, and the compute function can be used to
     * compute the ngrams for different ragged tensor inputs.
     */
    class StringNGramsOp {
        constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {
            this.separator = encodeString(separator);
            this.nGramWidths = nGramWidths;
            this.leftPad = encodeString(leftPad);
            this.rightPad = encodeString(rightPad);
            this.padWidth = padWidth;
            this.preserveShort = preserveShortSequences;
        }
        getPadWidth(nGramWidth) {
            // Ngrams can be padded with either a fixed pad width or a dynamic pad
            // width depending on the 'padWidth' arg, but in no case should the padding
            // ever be wider than 'nGramWidth' - 1.
            return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);
        }
        getNumNGrams(length, nGramWidth) {
            const padWidth = this.getPadWidth(nGramWidth);
            return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);
        }
        createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {
            for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {
                const padWidth = this.getPadWidth(nGramWidth);
                const leftPadding = Math.max(0, padWidth - nGramIndex);
                const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));
                const numTokens = nGramWidth - (leftPadding + rightPadding);
                const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);
                // Calculate the total expected size of the nGram so we can reserve the
                // correct amount of space in the string.
                let nGramSize = 0;
                // Size of the left padding.
                nGramSize += leftPadding * this.leftPad.length;
                // Size of the tokens.
                for (let n = 0; n < numTokens; ++n) {
                    nGramSize += data[dataStartIndex + n].length;
                }
                // Size of the right padding.
                nGramSize += rightPadding * this.rightPad.length;
                // Size of the separators.
                const numSeparators = leftPadding + rightPadding + numTokens - 1;
                nGramSize += numSeparators * this.separator.length;
                // Build the nGram.
                output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);
                const nGram = output[outputStartIndex + nGramIndex];
                let nextNGramIndex = 0;
                const appendToNGram = (str) => str.forEach((value) => nGram[nextNGramIndex++] = value);
                for (let n = 0; n < leftPadding; ++n) {
                    appendToNGram(this.leftPad);
                    appendToNGram(this.separator);
                }
                // Only output first numTokens - 1 pairs of data and separator
                for (let n = 0; n < numTokens - 1; ++n) {
                    appendToNGram(data[dataStartIndex + n]);
                    appendToNGram(this.separator);
                }
                // Handle case when there are no tokens or no right padding as these
                // can result in consecutive separators.
                if (numTokens > 0) {
                    // If we have tokens, then output last and then pair each separator
                    // with the right padding that follows, to ensure nGram ends either with
                    // the token or with the right pad.
                    appendToNGram(data[dataStartIndex + numTokens - 1]);
                    for (let n = 0; n < rightPadding; ++n) {
                        appendToNGram(this.separator);
                        appendToNGram(this.rightPad);
                    }
                }
                else {
                    // If we don't have tokens, then the last item inserted into the nGram
                    // has been the separator from the left padding loop above. Hence,
                    // output right pad and separator and make sure to finish with a
                    // padding, not a separator.
                    for (let n = 0; n < rightPadding - 1; ++n) {
                        appendToNGram(this.rightPad);
                        appendToNGram(this.separator);
                    }
                    appendToNGram(this.rightPad);
                }
            }
        }
        // Data and splits together form the definition of the ragged tensor,
        // where data is 1 dimensional and contains the values of the tensor
        // and splits denotes the indices at which each row starts.
        compute(data, splits) {
            // Validate that the splits are valid indices into data, only if there are
            // splits specified.
            const inputDataSize = data.length;
            const splitsSize = splits.length;
            if (splitsSize > 0) {
                let prevSplit = splits[0];
                if (prevSplit !== 0) {
                    throw new Error(`First split value must be 0, got ${prevSplit}`);
                }
                for (let i = 1; i < splitsSize; ++i) {
                    let validSplits = splits[i] >= prevSplit;
                    validSplits = validSplits && (splits[i] <= inputDataSize);
                    if (!validSplits) {
                        throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);
                    }
                    prevSplit = splits[i];
                }
                if (prevSplit !== inputDataSize) {
                    throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);
                }
            }
            const numBatchItems = splitsSize - 1;
            const nGramsSplits = getArrayFromDType('int32', splitsSize);
            // If there is no data or size, return an empty ragged tensor.
            if (inputDataSize === 0 || splitsSize === 0) {
                const empty = new Array(inputDataSize);
                for (let i = 0; i <= numBatchItems; ++i) {
                    nGramsSplits[i] = 0;
                }
                return [empty, nGramsSplits];
            }
            nGramsSplits[0] = 0;
            for (let i = 1; i <= numBatchItems; ++i) {
                const length = splits[i] - splits[i - 1];
                let numNGrams = 0;
                this.nGramWidths.forEach((nGramWidth) => {
                    numNGrams += this.getNumNGrams(length, nGramWidth);
                });
                if (this.preserveShort && length > 0 && numNGrams === 0) {
                    numNGrams = 1;
                }
                nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;
            }
            const nGrams = new Array(nGramsSplits[numBatchItems]);
            for (let i = 0; i < numBatchItems; ++i) {
                const splitIndex = splits[i];
                let outputStartIdx = nGramsSplits[i];
                this.nGramWidths.forEach((nGramWidth) => {
                    const length = splits[i + 1] - splits[i];
                    const numNGrams = this.getNumNGrams(length, nGramWidth);
                    this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);
                    outputStartIdx += numNGrams;
                });
                // If we're preserving short sequences, check to see if no sequence was
                // generated by comparing the current output start idx to the original
                // one (nGramSplitsdata). If no ngrams were generated, then they will
                // be equal (since we increment outputStartIdx by numNGrams every
                // time we create a set of ngrams.)
                if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {
                    const dataLength = splits[i + 1] - splits[i];
                    // One legitimate reason to not have any ngrams when this.preserveShort
                    // is true is if the sequence itself is empty. In that case, move on.
                    if (dataLength === 0) {
                        continue;
                    }
                    // We don't have to worry about dynamic padding sizes here: if padding
                    // was dynamic, every sequence would have had sufficient padding to
                    // generate at least one nGram.
                    const nGramWidth = dataLength + 2 * this.padWidth;
                    const numNGrams = 1;
                    this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);
                }
            }
            return [nGrams, nGramsSplits];
        }
    }
    function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {
        return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences)
            .compute(data, dataSplits);
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function split(str, delimiters, skipEmpty, result) {
        if (!str.length) {
            return;
        }
        // When the delimiter is empty, the input is split into individual characters.
        if (delimiters.length === 0) {
            for (let i = 0; i < str.length; ++i) {
                result.push(str.subarray(i, i + 1));
            }
            return;
        }
        // When there is one delimiter, the input is split only at that delimiter.
        if (delimiters.length === 1) {
            const delimiter = delimiters[0];
            let f = str.indexOf(delimiter);
            while (f !== -1) {
                const token = str.subarray(0, f);
                if (!skipEmpty || token.length !== 0) {
                    result.push(token);
                }
                str = str.subarray(f + 1);
                f = str.indexOf(delimiter);
            }
            if (!skipEmpty || str.length !== 0) {
                result.push(str);
            }
            return;
        }
        // When there are multiple delimiters, the input is split at every instance
        // one of the delimiters appears.
        let tokenStart = 0;
        for (let i = 0; i < str.length + 1; i++) {
            if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {
                const token = str.subarray(tokenStart, i);
                if (!skipEmpty || token.length !== 0) {
                    result.push(token);
                }
                tokenStart = i + 1;
            }
        }
    }
    function stringSplitImpl(input, delimiter, skipEmpty) {
        const batchSize = input.length;
        // Empty delimiter means split the input character by character.
        const tokens = [];
        let outputSize = 0;
        let maxNumEntries = 0;
        const numIndices = new Array(batchSize);
        for (let i = 0; i < batchSize; ++i) {
            const prevTokensLength = tokens.length;
            split(input[i], delimiter, skipEmpty, tokens);
            const nEntries = tokens.length - prevTokensLength;
            numIndices[i] = nEntries;
            outputSize += nEntries;
            maxNumEntries = Math.max(maxNumEntries, nEntries);
        }
        const indices = getArrayFromDType('int32', outputSize * 2);
        const values = new Array(outputSize);
        const shape = [batchSize, maxNumEntries];
        let c = 0;
        for (let i = 0; i < batchSize; ++i) {
            for (let j = 0; j < numIndices[i]; ++j) {
                // indices is a 2d tensor with shape of [outputSize, 2]
                indices[c * 2] = i;
                indices[c * 2 + 1] = j;
                values[c] = tokens[c];
                ++c;
            }
        }
        return [indices, values, shape];
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function stringToHashBucketFastImpl(input, numBuckets) {
        const output = getArrayFromDType('int32', input.length);
        for (let i = 0; i < input.length; ++i) {
            output[i] =
                fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();
        }
        return output;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const subImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));
    const subComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {
        return { real: aReal - bReal, imag: aImag - bImag };
    }));
    const sub$1 = binaryKernelFunc$1(Sub, subImpl, subComplexImpl);
    const subConfig$1 = {
        kernelName: Sub,
        backendName: 'cpu',
        kernelFunc: sub$1
    };

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * An implementation of the tile kernel shared between webgl and cpu for string
     * tensors only.
     */
    function tileImpl(xBuf, reps) {
        const newShape = new Array(xBuf.rank);
        for (let i = 0; i < newShape.length; i++) {
            newShape[i] = xBuf.shape[i] * reps[i];
        }
        const result = buffer(newShape, xBuf.dtype);
        for (let i = 0; i < result.values.length; ++i) {
            const newLoc = result.indexToLoc(i);
            const originalLoc = new Array(xBuf.rank);
            for (let j = 0; j < originalLoc.length; j++) {
                originalLoc[j] = newLoc[j] % xBuf.shape[j];
            }
            const originalIndex = xBuf.locToIndex(originalLoc);
            result.values[i] = xBuf.values[originalIndex];
        }
        return result;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const comparePair = (a, b) => {
        const valueDiff = b.value - a.value;
        return valueDiff === 0 ? a.index - b.index : valueDiff;
    };
    /**
     * Partitions array where all elements smaller than the (k+1) smallest element
     * are found to the left of it, and all larger to the right of it.
     * Based on the Floyd-Rivest Algorithm, ref:
     * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm
     * @param array: Array to partition
     * @param left: Left index for the interval
     * @param right: Right index for the interval
     * @param k: Desired index value, where array[k] is the (k+1)th smallest element
     *           when left = 0
     */
    function select$2(array, k, left = 0, right = array.length - 1) {
        while (right > left) {
            // Use select recursively to sample a smaller set of size s
            // the arbitrary constants 600 and 0.5 are used in the original
            // version to minimize execution time.
            if (right - left > 600) {
                const n = right - left + 1;
                const i = k - left + 1;
                const z = Math.log(n);
                const s = 0.5 * Math.exp(2 * z / 3);
                const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);
                const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));
                const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));
                select$2(array, k, newLeft, newRight);
            }
            // partition the elements between left and right around t
            const t = array[k];
            let i = left;
            let j = right;
            swap(array, left, k);
            if (comparePair(array[right], t) > 0) {
                swap(array, left, right);
            }
            while (i < j) {
                swap(array, i, j);
                i++;
                j--;
                while (comparePair(array[i], t) < 0) {
                    i = i + 1;
                }
                while (comparePair(array[j], t) > 0) {
                    j = j - 1;
                }
            }
            if (comparePair(array[left], t) === 0) {
                swap(array, left, j);
            }
            else {
                j = j + 1;
                swap(array, j, right);
            }
            // Adjust left and right towards the boundaries of the subset
            // containing the (k - left + 1)th smallest element.
            if (j <= k) {
                left = j + 1;
            }
            if (k <= j) {
                right = j - 1;
            }
        }
    }
    function topKImpl(x, xShape, xDtype, k, sorted) {
        // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
        const lastDim = xShape[xShape.length - 1];
        const [batch, size] = [x.length / lastDim, lastDim];
        const allTopKVals = getTypedArrayFromDType(xDtype, batch * k);
        const allTopKIndices = getTypedArrayFromDType('int32', batch * k);
        for (let b = 0; b < batch; b++) {
            const offset = b * size;
            const vals = x.subarray(offset, offset + size);
            let valAndInd = new Array(vals.length);
            vals.forEach((value, index) => valAndInd[index] = { value, index });
            if (k < valAndInd.length) {
                select$2(valAndInd, k);
                valAndInd = valAndInd.slice(0, k);
            }
            if (sorted) {
                valAndInd.sort(comparePair);
            }
            const outOffset = b * k;
            const topKVals = allTopKVals.subarray(outOffset, outOffset + k);
            const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);
            for (let i = 0; i < k; i++) {
                topKVals[i] = valAndInd[i].value;
                topKIndices[i] = valAndInd[i].index;
            }
        }
        // Reshape back to the original input shape, except that the last
        // dimension is k.
        const outputShape = xShape.slice();
        outputShape[outputShape.length - 1] = k;
        return [
            buffer(outputShape, xDtype, allTopKVals),
            buffer(outputShape, 'int32', allTopKIndices)
        ];
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function uniqueImpl(values, axis, shape, dtype) {
        // Normalize and validate axis.
        const $axis = parseAxisParam(axis, shape)[0];
        // Calculate the new shape that is suitable for extracting data along the
        // given axis.
        //
        // The rank is 3.
        // The size of the 1st dimension is the size of all the axes < the given axis.
        // The size of the 2nd dimension is the same as the size of the given axis.
        // The size of the 3rd dimension is the size of all the axes > the given axis.
        //
        // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the
        // newShape would be: [2*3, 5, 4].
        //
        // Note that this is not the final output shape. This will be the shape for an
        // intermediate TensorBuffer (see inputBuffer below) to allow us to extract
        // values along the given axis. To demonstrate how it works, consider the
        // following example:
        //
        // Input: a 3D tensor, with shape [1, 2, 3]
        // [
        //   [
        //      [1,2,3],
        //      [4,5,6]
        //   ]
        // ]
        // Axis: 2 (the last axis).
        // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].
        //
        // For this example, newShape would be: [2, 3, 1], where 2 is calculated from
        // 1*2. The re-shaped data would look like:
        //
        // [
        //   [
        //     [1], [2], [3]
        //   ],
        //   [
        //     [4], [5], [6]
        //   ]
        // ]
        //
        // Then, we can construct a 3-level nested loop by the following dimension
        // order to extract the values along the axis (dimension1):
        // i: dimension1       // 0,1,2 (newShape[1])
        //   m: dimension0     // 0,1   (newShape[0])
        //     n: dimension2   // 0     (newShape[2])
        //
        //                       m, i, n
        //                      ---------
        // Iteration 0: data at [0, 0, 0] => "1"
        // Iteration 1: data at [1, 0, 0] => "4"
        // We got [1,4].
        // Iteration 2: data at [0, 1, 0] => "2"
        // Iteration 3: data at [1, 1, 0] => "5"
        // We got [2,5].
        // Iteration 4: data at [0, 2, 0] => "3"
        // Iteration 5: data at [1, 2, 0] => "6"
        // We got [3,6].
        const newShape = [1, shape[0], 1];
        for (let i = 0; i < $axis; i++) {
            newShape[0] *= shape[i];
        }
        newShape[1] = shape[$axis];
        for (let i = $axis + 1; i < shape.length; i++) {
            newShape[2] *= shape[i];
        }
        // A map from unique elements (their string representations) to their values
        // in "indices" (below).
        const uniqueElements = {};
        // The indices of each unique element in the original tensor along the given
        // axis. It is 1D and has the same size as the given axis.
        const indices = new Int32Array(shape[$axis]);
        // Create a buffer so we can easily extract value at a given location.
        const inputBuffer = new TensorBuffer(newShape, dtype, values);
        // The indices along the given axis that have unique elements. This is a
        // de-duped version of "indices" above.
        const uniqueIndices = [];
        const is1DTensor = newShape[0] === 1 && newShape[2] === 1;
        for (let i = 0; i < shape[$axis]; i++) {
            // Extract values along the axis.
            let element;
            if (is1DTensor) {
                // Fast path for 1D tensor input.
                element = values[i].toString();
            }
            else {
                const axisValues = [];
                for (let m = 0; m < newShape[0]; m++) {
                    for (let n = 0; n < newShape[2]; n++) {
                        axisValues.push(inputBuffer.get(m, i, n));
                    }
                }
                element = axisValues.join(',');
            }
            // Dedup and update various indices.
            if (uniqueElements[element] !== undefined) {
                indices[i] = uniqueElements[element];
            }
            else {
                const uniqueIndex = Object.keys(uniqueElements).length;
                uniqueElements[element] = uniqueIndex;
                indices[i] = uniqueIndex;
                uniqueIndices.push(i);
            }
        }
        // Now we know where each of the unique elements are located along the axis
        // (uniqueIndices). Extract them from input buffer and store them in the
        // output buffer.
        const outputTmpShape = newShape.slice();
        outputTmpShape[1] = Object.keys(uniqueElements).length;
        const outputBuffer = new TensorBuffer(outputTmpShape, dtype);
        uniqueIndices.forEach((uniqueElementIndex, i) => {
            for (let m = 0; m < newShape[0]; m++) {
                for (let n = 0; n < newShape[2]; n++) {
                    outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);
                }
            }
        });
        // The output shape can be calculated from the input shape with the size of
        // the given axis replaced by the number of unique elements along that axis.
        const outputShape = shape.slice();
        outputShape[$axis] = outputTmpShape[1];
        return {
            outputValues: outputBuffer.values,
            outputShape,
            indices,
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */

    var shared = /*#__PURE__*/Object.freeze({
        __proto__: null,
        simpleAbsImpl: simpleAbsImpl,
        addImpl: addImpl,
        bincountImpl: bincountImpl,
        bincountReduceImpl: bincountReduceImpl,
        ceilImpl: ceilImpl,
        concatImpl: concatImpl$1,
        equalImpl: equalImpl,
        expImpl: expImpl,
        expm1Impl: expm1Impl,
        floorImpl: floorImpl,
        gatherNdImpl: gatherNdImpl,
        gatherV2Impl: gatherV2Impl,
        greaterImpl: greaterImpl,
        greaterEqualImpl: greaterEqualImpl,
        lessImpl: lessImpl,
        lessEqualImpl: lessEqualImpl,
        linSpaceImpl: linSpaceImpl,
        logImpl: logImpl,
        maxImpl: maxImpl$1,
        maximumImpl: maximumImpl,
        minimumImpl: minimumImpl,
        multiplyImpl: multiplyImpl,
        negImpl: negImpl,
        notEqualImpl: notEqualImpl,
        prodImpl: prodImpl,
        rangeImpl: rangeImpl,
        rsqrtImpl: rsqrtImpl,
        sigmoidImpl: sigmoidImpl,
        sliceImpl: sliceImpl,
        sparseFillEmptyRowsImpl: sparseFillEmptyRowsImpl,
        sparseReshapeImpl: sparseReshapeImpl,
        sparseSegmentReductionImpl: sparseSegmentReductionImpl,
        sqrtImpl: sqrtImpl,
        squaredDifferenceImpl: squaredDifferenceImpl,
        stridedSliceImpl: stridedSliceImpl,
        stringNGramsImpl: stringNGramsImpl,
        stringSplitImpl: stringSplitImpl,
        stringToHashBucketFastImpl: stringToHashBucketFastImpl,
        subImpl: subImpl,
        tileImpl: tileImpl,
        topKImpl: topKImpl,
        transposeImpl: transposeImpl$1,
        uniqueImpl: uniqueImpl
    });

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Side effects for default initialization of MathBackendCPU
    registerBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const elu$1 = unaryKernelFunc$1(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));
    const eluConfig$1 = {
        kernelName: Elu,
        backendName: 'cpu',
        kernelFunc: elu$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function leakyRelu$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { alpha } = attrs;
        assertNotComplex$1([x], 'leakyRelu');
        const xSize = sizeFromShape(x.shape);
        const xVals = backend.data.get(x.dataId).values;
        const outVals = getTypedArrayFromDType('float32', xSize);
        for (let i = 0; i < xVals.length; i++) {
            outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];
        }
        return backend.makeTensorInfo(x.shape, 'float32', outVals);
    }
    const leakyReluConfig$1 = {
        kernelName: LeakyRelu,
        backendName: 'cpu',
        kernelFunc: leakyRelu$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const preluImpl = createSimpleBinaryKernelImpl((xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);
    function prelu$1(args) {
        const { inputs, backend } = args;
        const { x, alpha } = inputs;
        assertNotComplex$1([x, alpha], 'prelu');
        const aVals = backend.data.get(x.dataId).values;
        const bVals = backend.data.get(alpha.dataId).values;
        const [resultData, resultShape] = preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');
        return backend.makeTensorInfo(resultShape, 'float32', resultData);
    }
    const preluConfig$1 = {
        kernelName: Prelu,
        backendName: 'cpu',
        kernelFunc: prelu$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const relu$1 = unaryKernelFunc$1(Relu, (xi) => Math.max(0, xi));
    const reluConfig$1 = {
        kernelName: Relu,
        backendName: 'cpu',
        kernelFunc: relu$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const relu6$1 = unaryKernelFunc$1(Relu6, (xi) => Math.min(Math.max(0, xi), 6));
    const relu6Config$1 = {
        kernelName: Relu6,
        backendName: 'cpu',
        kernelFunc: relu6$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function applyActivation(backend, x, activation, preluActivationWeights, leakyreluAlpha) {
        if (activation === 'linear') {
            return identity$1({ inputs: { x }, backend });
        }
        else if (activation === 'relu') {
            return relu$1({ inputs: { x }, backend });
        }
        else if (activation === 'elu') {
            return elu$1({ inputs: { x }, backend });
        }
        else if (activation === 'relu6') {
            return relu6$1({ inputs: { x }, backend });
        }
        else if (activation === 'prelu') {
            return prelu$1({ inputs: { x, alpha: preluActivationWeights }, backend });
        }
        else if (activation === 'leakyrelu') {
            return leakyRelu$1({ inputs: { x }, backend, attrs: { alpha: leakyreluAlpha } });
        }
        else if (activation === 'sigmoid') {
            return sigmoid$1({ inputs: { x }, backend });
        }
        throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function reshape$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { shape } = attrs;
        const xSize = sizeFromShape(x.shape);
        const $shape = inferFromImplicitShape(shape, xSize);
        const $xSize = sizeFromShape($shape);
        assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +
            `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +
            `shape must have the same number of elements.`);
        backend.incRef(x.dataId);
        const xData = backend.data.get(x.dataId);
        if (xData.complexTensorInfos != null) {
            const real = xData.complexTensorInfos.real;
            const imag = xData.complexTensorInfos.imag;
            real.shape = $shape;
            imag.shape = $shape;
        }
        return { dataId: x.dataId, shape: $shape, dtype: x.dtype };
    }
    const reshapeConfig$1 = {
        kernelName: Reshape,
        backendName: 'cpu',
        kernelFunc: reshape$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function batchMatMul$1(args) {
        const { inputs, backend, attrs } = args;
        const { a, b } = inputs;
        const { transposeA, transposeB } = attrs;
        assertNotComplex$1([a, b], 'matMul');
        const aRank = a.shape.length;
        const bRank = b.shape.length;
        const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];
        const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];
        const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];
        const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];
        const outerDimsA = a.shape.slice(0, -2);
        const outerDimsB = b.shape.slice(0, -2);
        const batchDimA = sizeFromShape(outerDimsA);
        const batchDimB = sizeFromShape(outerDimsB);
        const outShapeOuterDims = assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));
        const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);
        assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +
            `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +
            `${b.shape} and transposeA=${transposeA}` +
            ` and transposeB=${transposeB} must match.`);
        const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :
            [batchDimA, outerShapeA, innerShapeA];
        const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :
            [batchDimB, innerShapeB, outerShapeB];
        // The rest of the implementation is designed to operate on rank-3 tensors
        const a3d = reshape$1({ inputs: { x: a }, backend, attrs: { shape: a3dShape } });
        const b3d = reshape$1({ inputs: { x: b }, backend, attrs: { shape: b3dShape } });
        const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];
        const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];
        const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];
        const batchDim = Math.max(batchDimA, batchDimB);
        const a3dValues = backend.data.get(a3d.dataId).values;
        const b3dValues = backend.data.get(b3d.dataId).values;
        const a3dStrides = computeStrides(a3d.shape);
        const b3dStrides = computeStrides(b3d.shape);
        const [aBatch, aOuterStep, aInnerStep] = transposeA ?
            [a3dStrides[0], 1, a3dStrides[1]] :
            [a3dStrides[0], a3dStrides[1], 1];
        const [bInnerStep, bOuterStep, bBatch] = transposeB ?
            [1, b3dStrides[1], b3dStrides[0]] :
            [b3dStrides[1], 1, b3dStrides[0]];
        const size = leftDim * rightDim;
        const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);
        const resVals = result.values;
        const blockSize = backend.blockSize;
        for (let bi = 0; bi < batchDim; bi++) {
            for (let i0 = 0; i0 < leftDim; i0 += blockSize) {
                for (let j0 = 0; j0 < rightDim; j0 += blockSize) {
                    for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {
                        // for when blockSize doesn't evenly divide the input
                        const iBlock = Math.min(i0 + blockSize, leftDim);
                        const jBlock = Math.min(j0 + blockSize, rightDim);
                        const kBlock = Math.min(k0 + blockSize, sharedDim);
                        for (let i = i0; i < iBlock; i++) {
                            for (let j = j0; j < jBlock; j++) {
                                let sum = 0.0;
                                for (let k = k0; k < kBlock; k++) {
                                    const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;
                                    const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;
                                    const aVal = a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];
                                    const bVal = b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];
                                    sum += aVal * bVal;
                                }
                                resVals[bi * size + (i * rightDim + j)] += sum;
                            }
                        }
                    }
                }
            }
        }
        backend.disposeIntermediateTensorInfo(a3d);
        backend.disposeIntermediateTensorInfo(b3d);
        // set correct shape on output.
        return backend.makeTensorInfo(outShape, result.dtype, result.values);
    }
    const batchMatMulConfig$1 = {
        kernelName: BatchMatMul,
        backendName: 'cpu',
        kernelFunc: batchMatMul$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function _fusedMatMul$1(args) {
        const { inputs, backend, attrs } = args;
        const { a, b, bias, preluActivationWeights } = inputs;
        const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;
        let current;
        let addRes;
        let activationRes;
        const intermediates = [];
        const matMulRes = batchMatMul$1({ inputs: { a, b }, attrs: { transposeA, transposeB }, backend });
        current = matMulRes;
        if (bias) {
            addRes = add({ inputs: { a: current, b: bias }, backend });
            intermediates.push(current);
            current = addRes;
        }
        if (activation) {
            activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);
            intermediates.push(current);
            current = activationRes;
        }
        for (const i of intermediates) {
            backend.disposeIntermediateTensorInfo(i);
        }
        return current;
    }
    const _fusedMatMulConfig$1 = {
        kernelName: _FusedMatMul,
        backendName: 'cpu',
        kernelFunc: _fusedMatMul$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const acos$1 = unaryKernelFunc$1(Acos, (xi) => Math.acos(xi));
    const acosConfig$1 = {
        kernelName: Acos,
        backendName: 'cpu',
        kernelFunc: acos$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const acosh$1 = unaryKernelFunc$1(Acosh, (xi) => Math.acosh(xi));
    const acoshConfig$1 = {
        kernelName: Acosh,
        backendName: 'cpu',
        kernelFunc: acosh$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function addN$1(args) {
        const { inputs, backend } = args;
        const tensors = inputs;
        assertNotComplex$1(inputs, 'addN');
        const vals = tensors.map(t => backend.data.get(t.dataId).values);
        const outBuf = buffer(tensors[0].shape, tensors[0].dtype);
        const outVals = outBuf.values;
        for (let i = 0; i < tensors.length; i++) {
            const currVals = vals[i];
            for (let j = 0; j < outVals.length; j++) {
                outVals[j] += currVals[j];
            }
        }
        return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
    }
    const addNConfig$1 = {
        kernelName: AddN,
        backendName: 'cpu',
        kernelFunc: addN$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function all$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        assertNotComplex$1(x, 'all');
        const origAxes = parseAxisParam(axis, x.shape);
        let axes = origAxes;
        const permutedAxes = getAxesPermutation(axes, x.shape.length);
        let $x = x;
        if (permutedAxes != null) {
            $x = transpose$1({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            axes = getInnerMostAxes(axes.length, x.shape.length);
        }
        assertAxesAreInnerMostDims('all', axes, $x.shape.length);
        const [outShape, reduceShape] = computeOutAndReduceShapes($x.shape, axes);
        const reduceSize = sizeFromShape(reduceShape);
        const vals = makeZerosTypedArray(sizeFromShape(outShape), $x.dtype);
        const aVals = backend.data.get($x.dataId).values;
        for (let i = 0; i < vals.length; ++i) {
            const offset = i * reduceSize;
            let all = aVals[offset];
            for (let j = 0; j < reduceSize; ++j) {
                const value = aVals[offset + j];
                all = all && value;
            }
            vals[i] = all;
        }
        if (permutedAxes != null) {
            backend.disposeIntermediateTensorInfo($x);
        }
        const result = backend.makeTensorInfo(outShape, $x.dtype, vals);
        if (keepDims) {
            const expandedShape = expandShapeToKeepDim(outShape, origAxes);
            const reshapedResult = reshape$1({ inputs: { x: result }, backend, attrs: { shape: expandedShape } });
            backend.disposeIntermediateTensorInfo(result);
            return reshapedResult;
        }
        return result;
    }
    const allConfig$1 = {
        kernelName: All,
        backendName: 'cpu',
        kernelFunc: all$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function any$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        assertNotComplex$1(x, 'any');
        const origAxes = parseAxisParam(axis, x.shape);
        let axes = origAxes;
        const permutedAxes = getAxesPermutation(axes, x.shape.length);
        let $x = x;
        if (permutedAxes != null) {
            $x = transpose$1({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            axes = getInnerMostAxes(axes.length, x.shape.length);
        }
        assertAxesAreInnerMostDims('any', axes, $x.shape.length);
        const [outShape, reduceShape] = computeOutAndReduceShapes($x.shape, axes);
        const reduceSize = sizeFromShape(reduceShape);
        const vals = makeZerosTypedArray(sizeFromShape(outShape), $x.dtype);
        const aVals = backend.data.get($x.dataId).values;
        for (let i = 0; i < vals.length; ++i) {
            const offset = i * reduceSize;
            let anyVal = aVals[offset];
            for (let j = 0; j < reduceSize; ++j) {
                const value = aVals[offset + j];
                anyVal = anyVal || value;
            }
            vals[i] = anyVal;
        }
        if (permutedAxes != null) {
            backend.disposeIntermediateTensorInfo($x);
        }
        const result = backend.makeTensorInfo(outShape, $x.dtype, vals);
        if (keepDims) {
            const expandedShape = expandShapeToKeepDim(outShape, origAxes);
            const reshapedResult = reshape$1({ inputs: { x: result }, backend, attrs: { shape: expandedShape } });
            backend.disposeIntermediateTensorInfo(result);
            return reshapedResult;
        }
        return result;
    }
    const anyConfig$1 = {
        kernelName: Any,
        backendName: 'cpu',
        kernelFunc: any$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function argMax$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis } = attrs;
        assertNotComplex$1(x, 'argMax');
        let axes = parseAxisParam(axis, x.shape);
        const permutedAxes = getAxesPermutation(axes, x.shape.length);
        let $x = x;
        const intermediateTensorInfos = [];
        if (permutedAxes != null) {
            $x = transpose$1({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            intermediateTensorInfos.push($x);
            axes = getInnerMostAxes(axes.length, $x.shape.length);
        }
        axes = [axes[0]];
        assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);
        const [outShape, reduceShape] = computeOutAndReduceShapes($x.shape, axes);
        const outSize = sizeFromShape(outShape);
        const vals = makeZerosTypedArray(outSize, 'int32');
        const reduceSize = sizeFromShape(reduceShape);
        const aVals = backend.data.get($x.dataId).values;
        for (let i = 0; i < vals.length; ++i) {
            const offset = i * reduceSize;
            let max = aVals[offset];
            let maxIndex = 0;
            for (let j = 0; j < reduceSize; ++j) {
                const value = aVals[offset + j];
                if (value > max) {
                    max = value;
                    maxIndex = j;
                }
            }
            vals[i] = maxIndex;
        }
        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return backend.makeTensorInfo(outShape, 'int32', vals);
    }
    const argMaxConfig$1 = {
        kernelName: ArgMax,
        backendName: 'cpu',
        kernelFunc: argMax$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function argMin$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis } = attrs;
        assertNotComplex$1(x, 'argMin');
        let axes = parseAxisParam(axis, x.shape);
        const permutedAxes = getAxesPermutation(axes, x.shape.length);
        let $x = x;
        const intermediateTensorInfos = [];
        if (permutedAxes != null) {
            $x = transpose$1({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            intermediateTensorInfos.push($x);
            axes = getInnerMostAxes(axes.length, $x.shape.length);
        }
        axes = [axes[0]];
        assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);
        const [outShape, reduceShape] = computeOutAndReduceShapes($x.shape, axes);
        const outSize = sizeFromShape(outShape);
        const vals = makeZerosTypedArray(outSize, 'int32');
        const reduceSize = sizeFromShape(reduceShape);
        const aVals = backend.data.get($x.dataId).values;
        for (let i = 0; i < vals.length; ++i) {
            const offset = i * reduceSize;
            let min = aVals[offset];
            let minIndex = 0;
            for (let j = 0; j < reduceSize; ++j) {
                const value = aVals[offset + j];
                if (value < min) {
                    min = value;
                    minIndex = j;
                }
            }
            vals[i] = minIndex;
        }
        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return backend.makeTensorInfo(outShape, 'int32', vals);
    }
    const argMinConfig$1 = {
        kernelName: ArgMin,
        backendName: 'cpu',
        kernelFunc: argMin$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const asin$1 = unaryKernelFunc$1(Asin, (xi) => Math.asin(xi));
    const asinConfig$1 = {
        kernelName: Asin,
        backendName: 'cpu',
        kernelFunc: asin$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const asinh$1 = unaryKernelFunc$1(Asinh, (xi) => Math.asinh(xi));
    const asinhConfig$1 = {
        kernelName: Asinh,
        backendName: 'cpu',
        kernelFunc: asinh$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const atan$1 = unaryKernelFunc$1(Atan, (xi) => Math.atan(xi));
    const atanConfig$1 = {
        kernelName: Atan,
        backendName: 'cpu',
        kernelFunc: atan$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const atan2Impl = createSimpleBinaryKernelImpl((aValue, bValue) => Math.atan2(aValue, bValue));
    const atan2$1 = binaryKernelFunc$1(Atan2, atan2Impl);
    const atan2Config$1 = {
        kernelName: Atan2,
        backendName: 'cpu',
        kernelFunc: atan2$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const atanh$1 = unaryKernelFunc$1(Atanh, (xi) => Math.atanh(xi));
    const atanhConfig$1 = {
        kernelName: Atanh,
        backendName: 'cpu',
        kernelFunc: atanh$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function pool(xValues, xShape, dtype, strides, convInfo, poolType) {
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :
            Number.POSITIVE_INFINITY);
        const output = buffer(convInfo.outShape, dtype);
        const outputVals = output.values;
        const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];
        const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];
        const outputColStrides = convInfo.outShape[3];
        for (let b = 0; b < convInfo.batchSize; ++b) {
            const outputBatchOffset = b * outputBatchStrides;
            const inputBatchOffset = b * strides[0];
            for (let d = 0; d < convInfo.inChannels; ++d) {
                for (let yR = 0; yR < convInfo.outHeight; ++yR) {
                    const xRCorner = yR * strideHeight - padTop;
                    const xRMin = Math.max(0, xRCorner);
                    const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);
                    const outputRowOffset = outputBatchOffset + yR * outputRowStrides;
                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {
                        const xCCorner = yC * strideWidth - padLeft;
                        const xCMin = Math.max(0, xCCorner);
                        const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);
                        let minMaxValue = initialValue;
                        let avgValue = 0;
                        let count = 0;
                        for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {
                            const xROffset = inputBatchOffset + xR * strides[1];
                            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {
                                const xCOffset = xROffset + xC * strides[2];
                                const pixel = xValues[xCOffset + d];
                                if ((poolType === 'max' && pixel > minMaxValue)) {
                                    minMaxValue = pixel;
                                }
                                else if (poolType === 'avg') {
                                    avgValue += pixel;
                                    count++;
                                }
                            }
                            if (isNaN(minMaxValue)) {
                                break;
                            }
                        }
                        const outputOffset = outputRowOffset + yC * outputColStrides + d;
                        outputVals[outputOffset] =
                            poolType === 'avg' ? avgValue / count : minMaxValue;
                    }
                }
            }
        }
        return output;
    }
    function maxPoolPositions(xValues, xShape, dtype, convInfo, flattenPositions = false, includeBatchInIndex = false) {
        const maxPositions = buffer(convInfo.outShape, 'int32');
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const xBuf = buffer(xShape, dtype, xValues);
        for (let b = 0; b < convInfo.batchSize; ++b) {
            for (let d = 0; d < convInfo.inChannels; ++d) {
                for (let yR = 0; yR < convInfo.outHeight; ++yR) {
                    const xRCorner = yR * strideHeight - padTop;
                    let xRMin = xRCorner;
                    while (xRMin < 0) {
                        xRMin += dilationHeight;
                    }
                    // const xRMin = Math.max(0, xRCorner);
                    const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);
                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {
                        const xCCorner = yC * strideWidth - padLeft;
                        let xCMin = xCCorner;
                        while (xCMin < 0) {
                            xCMin += dilationWidth;
                        }
                        const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);
                        let maxValue = Number.NEGATIVE_INFINITY;
                        let maxPosition = -1;
                        for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {
                            const wR = xR - xRCorner;
                            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {
                                const wC = xC - xCCorner;
                                const pixel = xBuf.get(b, xR, xC, d);
                                if (pixel > maxValue) {
                                    maxValue = pixel;
                                    if (flattenPositions) {
                                        maxPosition = includeBatchInIndex ?
                                            ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *
                                                convInfo.inChannels +
                                                d :
                                            (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;
                                    }
                                    else {
                                        maxPosition = wR * effectiveFilterWidth + wC;
                                    }
                                }
                            }
                        }
                        maxPositions.set(maxPosition, b, yR, yC, d);
                    }
                }
            }
        }
        return maxPositions;
    }
    function pool3d(xValues, xShape, dtype, strides, convInfo, poolType) {
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = convInfo.padInfo.front;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :
            Number.POSITIVE_INFINITY);
        const output = buffer(convInfo.outShape, dtype);
        const outputVals = output.values;
        const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *
            convInfo.outShape[3] * convInfo.outShape[4];
        const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];
        const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];
        const outputColStrides = convInfo.outShape[4];
        for (let batch = 0; batch < convInfo.batchSize; ++batch) {
            const outputBatchOffset = batch * outputBatchStrides;
            const inputBatchOffset = batch * strides[0];
            for (let channel = 0; channel < convInfo.inChannels; ++channel) {
                for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {
                    const xDepthCorner = yDepth * strideDepth - padFront;
                    let xDepthMin = xDepthCorner;
                    while (xDepthMin < 0) {
                        xDepthMin += dilationDepth;
                    }
                    const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);
                    const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;
                    for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {
                        const xRowCorner = yRow * strideHeight - padTop;
                        let xRowMin = xRowCorner;
                        while (xRowMin < 0) {
                            xRowMin += dilationHeight;
                        }
                        const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);
                        const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;
                        for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {
                            const xColCorner = yCol * strideWidth - padLeft;
                            let xColMin = xColCorner;
                            while (xColMin < 0) {
                                xColMin += dilationWidth;
                            }
                            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);
                            // Shader code begins
                            const outputColOffset = outputRowOffset + yCol * outputColStrides;
                            let minMaxValue = initialValue;
                            let avgValue = 0;
                            let count = 0;
                            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {
                                const xDepthOffset = inputBatchOffset + xDepth * strides[1];
                                for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {
                                    const xRowOffset = xDepthOffset + xRow * strides[2];
                                    for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {
                                        const xColOffset = xRowOffset + xCol * strides[3];
                                        const pixel = xValues[xColOffset + channel];
                                        if ((poolType === 'max' && pixel > minMaxValue)) {
                                            minMaxValue = pixel;
                                        }
                                        else if (poolType === 'avg') {
                                            avgValue += pixel;
                                            count++;
                                        }
                                        if (isNaN(minMaxValue)) {
                                            break;
                                        }
                                    }
                                    if (isNaN(minMaxValue)) {
                                        break;
                                    }
                                }
                                if (isNaN(minMaxValue)) {
                                    break;
                                }
                            }
                            const outputOffset = outputColOffset + channel;
                            outputVals[outputOffset] =
                                poolType === 'avg' ? avgValue / count : minMaxValue;
                        }
                    }
                }
            }
        }
        return output;
    }
    function maxPool3dPositions(xBuf, convInfo) {
        const maxPositions = buffer(convInfo.outShape, 'int32');
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = convInfo.padInfo.front;
        const padTop = convInfo.padInfo.top;
        const padLeft = convInfo.padInfo.left;
        for (let batch = 0; batch < convInfo.batchSize; ++batch) {
            for (let channel = 0; channel < convInfo.inChannels; ++channel) {
                for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {
                    const xDepthCorner = yDepth * strideDepth - padFront;
                    let xDepthMin = xDepthCorner;
                    while (xDepthMin < 0) {
                        xDepthMin += dilationDepth;
                    }
                    const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);
                    for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {
                        const xRowCorner = yRow * strideHeight - padTop;
                        let xRowMin = xRowCorner;
                        while (xRowMin < 0) {
                            xRowMin += dilationHeight;
                        }
                        const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);
                        for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {
                            const xColCorner = yCol * strideWidth - padLeft;
                            let xColMin = xColCorner;
                            while (xColMin < 0) {
                                xColMin += dilationWidth;
                            }
                            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);
                            // Shader code begins
                            let maxValue = Number.NEGATIVE_INFINITY;
                            let maxPosition = -1;
                            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {
                                const wDepth = xDepth - xDepthCorner;
                                for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {
                                    const wRow = xRow - xRowCorner;
                                    for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {
                                        const wCol = xCol - xColCorner;
                                        const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);
                                        if (pixel >= maxValue) {
                                            maxValue = pixel;
                                            maxPosition =
                                                wDepth * effectiveFilterHeight * effectiveFilterWidth +
                                                    wRow * effectiveFilterHeight + wCol;
                                        }
                                    }
                                }
                            }
                            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);
                        }
                    }
                }
            }
        }
        return maxPositions;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function avgPool$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        assertNotComplex$1(x, 'avgPool');
        const { filterSize, strides, pad, dimRoundingMode } = attrs;
        const dilations = 1;
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +
            `Got strides ${strides} and dilations '${dilations}'`);
        const convInfo = computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
        let res;
        if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&
            arraysEqual(convInfo.inShape, convInfo.outShape)) {
            res = identity$1({ inputs: { x }, backend });
        }
        else {
            const xValues = backend.data.get(x.dataId).values;
            const strides = computeStrides(x.shape);
            const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');
            res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);
        }
        return res;
    }
    const avgPoolConfig$1 = {
        kernelName: AvgPool,
        backendName: 'cpu',
        kernelFunc: avgPool$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function avgPool3D$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;
        assertNotComplex$1(x, 'avgPool3d');
        const convInfo = computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode, dataFormat);
        const xValues = backend.data.get(x.dataId).values;
        const outBuf = pool3d(xValues, x.shape, x.dtype, computeStrides(x.shape), convInfo, 'avg');
        return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);
    }
    const avgPool3DConfig$1 = {
        kernelName: AvgPool3D,
        backendName: 'cpu',
        kernelFunc: avgPool3D$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function avgPool3DGrad$1(args) {
        const { inputs, backend, attrs } = args;
        const { dy, input } = inputs;
        const { filterSize, strides, pad, dimRoundingMode } = attrs;
        assertNotComplex$1([dy, input], 'avgPool3DGrad');
        const convInfo = computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const filterDepth = convInfo.filterDepth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const dx = buffer(input.shape, 'float32');
        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);
        const dyBuf = backend.bufferSync(dy);
        for (let batch = 0; batch < convInfo.batchSize; ++batch) {
            for (let channel = 0; channel < convInfo.inChannels; ++channel) {
                for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {
                    for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {
                        for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {
                            // Shader code begins.
                            const dyDepthCorner = dxDepth - padFront;
                            const dyRowCorner = dxRow - padTop;
                            const dyColCorner = dxCol - padLeft;
                            let dotProd = 0;
                            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {
                                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;
                                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||
                                    Math.floor(dyDepth) !== dyDepth) {
                                    continue;
                                }
                                for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {
                                    const dyRow = (dyRowCorner + wRow) / strideHeight;
                                    if (dyRow < 0 || dyRow >= convInfo.outHeight ||
                                        Math.floor(dyRow) !== dyRow) {
                                        continue;
                                    }
                                    for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {
                                        const dyCol = (dyColCorner + wCol) / strideWidth;
                                        if (dyCol < 0 || dyCol >= convInfo.outWidth ||
                                            Math.floor(dyCol) !== dyCol) {
                                            continue;
                                        }
                                        const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                                        dotProd += pixel;
                                    }
                                }
                            }
                            dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);
                        }
                    }
                }
            }
        }
        return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
    }
    const avgPool3DGradConfig$1 = {
        kernelName: AvgPool3DGrad,
        backendName: 'cpu',
        kernelFunc: avgPool3DGrad$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function avgPoolGrad$1(args) {
        const { inputs, backend, attrs } = args;
        const { dy, input } = inputs;
        const x = input;
        assertNotComplex$1([dy, input], 'avgPoolGrad');
        const { filterSize, strides, pad } = attrs;
        const convInfo = computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const dx = buffer(x.shape, 'float32');
        const avgMultiplier = 1 / (filterHeight * filterWidth);
        const dyData = backend.data.get(dy.dataId).values;
        const dyBuf = buffer(dy.shape, 'float32', dyData);
        for (let b = 0; b < convInfo.batchSize; ++b) {
            for (let d = 0; d < convInfo.inChannels; ++d) {
                for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {
                    for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {
                        // Shader code begins.
                        const dyRCorner = dxR - padTop;
                        const dyCCorner = dxC - padLeft;
                        let dotProd = 0;
                        for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {
                            const dyR = (dyRCorner + wR) / strideHeight;
                            if (dyR < 0 || dyR >= convInfo.outHeight ||
                                Math.floor(dyR) !== dyR) {
                                continue;
                            }
                            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {
                                const dyC = (dyCCorner + wC) / strideWidth;
                                if (dyC < 0 || dyC >= convInfo.outWidth ||
                                    Math.floor(dyC) !== dyC) {
                                    continue;
                                }
                                const pixel = dyBuf.get(b, dyR, dyC, d);
                                dotProd += pixel;
                            }
                        }
                        dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);
                    }
                }
            }
        }
        return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
    }
    const avgPoolGradConfig$1 = {
        kernelName: AvgPoolGrad,
        backendName: 'cpu',
        kernelFunc: avgPoolGrad$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function batchNorm$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, scale, offset, mean, variance } = inputs;
        assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +
            'equal ranks.');
        assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +
            'equal ranks.');
        assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +
            'equal ranks.');
        assertNotComplex$1([x, mean, variance, scale, offset], 'batchNorm');
        let { varianceEpsilon } = attrs;
        if (varianceEpsilon == null) {
            varianceEpsilon = 0.001;
        }
        const xVals = backend.data.get(x.dataId).values;
        const mVals = backend.data.get(mean.dataId).values;
        const varVals = backend.data.get(variance.dataId).values;
        const sVals = scale ? backend.data.get(scale.dataId).values :
            new Float32Array([1]);
        const offVals = offset ?
            backend.data.get(offset.dataId).values :
            new Float32Array([0]);
        const outVals = new Float32Array(xVals.length);
        const offValsLength = offVals.length;
        const sValsLength = sVals.length;
        const varValsLength = varVals.length;
        const mValsLength = mVals.length;
        let offi = 0;
        let mi = 0;
        let si = 0;
        let vi = 0;
        for (let i = 0; i < xVals.length; ++i) {
            outVals[i] = offVals[offi++] +
                (xVals[i] - mVals[mi++]) * sVals[si++] /
                    Math.sqrt(varVals[vi++] + varianceEpsilon);
            if (offi >= offValsLength) {
                offi = 0;
            }
            if (mi >= mValsLength) {
                mi = 0;
            }
            if (si >= sValsLength) {
                si = 0;
            }
            if (vi >= varValsLength) {
                vi = 0;
            }
        }
        return backend.makeTensorInfo(x.shape, x.dtype, outVals);
    }
    const batchNormConfig$1 = {
        kernelName: FusedBatchNorm,
        backendName: 'cpu',
        kernelFunc: batchNorm$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function batchToSpaceND$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { blockShape, crops } = attrs;
        assertNotComplex$1([x], 'batchToSpaceND');
        const prod = blockShape.reduce((a, b) => a * b);
        const reshaped = getReshaped(x.shape, blockShape, prod);
        const permuted = getPermuted(reshaped.length, blockShape.length);
        const reshapedPermuted = getReshapedPermuted(x.shape, blockShape, prod);
        const sliceBeginCoords = getSliceBeginCoords(crops, blockShape.length);
        const sliceSize = getSliceSize(reshapedPermuted, crops, blockShape.length);
        const xReshaped = reshape$1({ inputs: { x }, backend, attrs: { shape: reshaped } });
        const xTransposed = transpose$1({ inputs: { x: xReshaped }, backend, attrs: { perm: permuted } });
        const xTransposedReshaped = reshape$1({ inputs: { x: xTransposed }, backend, attrs: { shape: reshapedPermuted } });
        const result = slice$1({
            inputs: { x: xTransposedReshaped },
            backend,
            attrs: { begin: sliceBeginCoords, size: sliceSize }
        });
        backend.disposeIntermediateTensorInfo(xReshaped);
        backend.disposeIntermediateTensorInfo(xTransposed);
        backend.disposeIntermediateTensorInfo(xTransposedReshaped);
        return result;
    }
    const batchToSpaceNDConfig$1 = {
        kernelName: BatchToSpaceND,
        backendName: 'cpu',
        kernelFunc: batchToSpaceND$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function bincount$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, weights } = inputs;
        const { size } = attrs;
        const xVals = backend.data.get(x.dataId).values;
        const weightsVals = backend.data.get(weights.dataId).values;
        const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);
        return backend.makeTensorInfo([size], weights.dtype, outVals);
    }
    const bincountConfig$1 = {
        kernelName: Bincount,
        backendName: 'cpu',
        kernelFunc: bincount$1
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function broadcastArgs$1(args) {
        const { inputs, backend } = args;
        const { s0, s1 } = inputs;
        const s0Vals = backend.data.get(s0.dataId).values;
        const s1Vals = backend.data.get(s1.dataId).values;
        const broadcastShape = assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));
        return backend.makeTensorInfo([broadcastShape.length], 'int32', Int32Array.from(broadcastShape));
    }
    const broadcastArgsConfig$1 = {
        kernelName: BroadcastArgs,
        backendName: 'cpu',
        kernelFunc: broadcastArgs$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const clipByValue$1 = unaryKernelFunc$1(ClipByValue, (xi, attrs) => {
        const clipAttrs = attrs;
        if (xi > clipAttrs.clipValueMax) {
            return clipAttrs.clipValueMax;
        }
        return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;
    });
    const clipByValueConfig$1 = {
        kernelName: ClipByValue,
        backendName: 'cpu',
        kernelFunc: clipByValue$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const complexAbs$1 = (args) => {
        const { x } = args.inputs;
        const cpuBackend = args.backend;
        const resultValues = new Float32Array(sizeFromShape(x.shape));
        const complexVals = cpuBackend.data.get(x.dataId);
        const real = complexVals.complexTensorInfos.real;
        const imag = complexVals.complexTensorInfos.imag;
        const realVals = cpuBackend.data.get(real.dataId).values;
        const imagVals = cpuBackend.data.get(imag.dataId).values;
        for (let i = 0; i < realVals.length; i++) {
            const real = realVals[i];
            const imag = imagVals[i];
            resultValues[i] = Math.hypot(real, imag);
        }
        return cpuBackend.makeOutput(resultValues, x.shape, 'float32');
    };
    const complexAbsConfig$1 = {
        kernelName: ComplexAbs,
        backendName: 'cpu',
        kernelFunc: complexAbs$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function imag$1(args) {
        const { inputs, backend } = args;
        const { input } = inputs;
        const imag = backend.data.get(input.dataId).complexTensorInfos.imag;
        const imagVal = backend.data.get(imag.dataId).values;
        // When complex tensor is disposed, its underlying parts will be disposed too.
        // Make new tensor out of the imag value of the complex. This makes sure the
        // value is still accessible even if complex tensor is disposed.
        return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);
    }
    const imagConfig$1 = {
        kernelName: Imag,
        backendName: 'cpu',
        kernelFunc: imag$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function concat$1(args) {
        const { inputs, backend, attrs } = args;
        const { axis } = attrs;
        const $axis = parseAxisParam(axis, inputs[0].shape)[0];
        let outShape = computeOutShape$1(inputs.map(t => t.shape), $axis);
        if (sizeFromShape(outShape) === 0) {
            return backend.makeTensorInfo(outShape, inputs[0].dtype, []);
        }
        // Keep only non-empty tensors (ignore tensors with 0 in their shape).
        const $inputs = inputs.filter(t => sizeFromShape(t.shape) > 0);
        if ($inputs.length === 1) {
            return identity$1({ inputs: { x: $inputs[0] }, backend });
        }
        const shapes = $inputs.map(t => t.shape);
        assertParamsConsistent(shapes, $axis);
        if ($inputs[0].dtype === 'complex64') {
            const reals = $inputs.map((t) => real$1({ inputs: { input: t }, backend }));
            const imags = $inputs.map((t) => imag$1({ inputs: { input: t }, backend }));
            const realConcated = concat$1({ inputs: reals, backend, attrs: { axis: $axis } });
            const imagConcated = concat$1({ inputs: imags, backend, attrs: { axis: $axis } });
            const result = complex$1({ inputs: { real: realConcated, imag: imagConcated }, backend });
            reals.forEach(r => backend.disposeIntermediateTensorInfo(r));
            imags.forEach(i => backend.disposeIntermediateTensorInfo(i));
            backend.disposeIntermediateTensorInfo(realConcated);
            backend.disposeIntermediateTensorInfo(imagConcated);
            return result;
        }
        // Any concat of n-dimensional tensors across any axis can be reduced to
        // a concatenation of two-dimensional tensors across the axis 1 by first
        // partitioning the axes of the original tensors into those less than the
        // axis to be concatenated and the rest. Then reshape the tensors
        // into a two-dimensional tensor by collapsing these two sets of axes and
        // concatenate the resulting matrices across the axis 1, finally reshaping
        // the result to have the proper shape.
        const inputs2D = $inputs.map(t => {
            const innerSize = sizeFromShape(t.shape.slice($axis));
            const shape = [-1, innerSize];
            return reshape$1({ inputs: { x: t }, backend, attrs: { shape } });
        });
        const inputsValShapes = inputs2D.map(t => {
            return { vals: backend.data.get(t.dataId).values, shape: t.shape };
        });
        // Concats 2d tensors along axis=1.
        outShape =
            computeOutShape$1(inputs2D.map(t => t.shape), 1 /* axis */);
        const simplyConcat = inputs2D[0].shape[0] === 1;
        const outVals = concatImpl$1(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);
        const finalOutShape = computeOutShape$1($inputs.map(t => t.shape), $axis);
        const outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);
        inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return outInfo;
    }
    const concatConfig$1 = {
        kernelName: Concat,
        backendName: 'cpu',
        kernelFunc: concat$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv2D(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter } = inputs;
        const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;
        assertNotComplex$1([x, filter], 'conv2d');
        const $dataFormat = convertConv2DDataFormat(dataFormat);
        const convInfo = computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const padLeft = convInfo.padInfo.left;
        const padTop = convInfo.padInfo.top;
        const isChannelsLast = convInfo.dataFormat === 'channelsLast';
        const y = new TensorBuffer(convInfo.outShape, x.dtype);
        const xStrides = computeStrides(x.shape);
        const filterStrides = computeStrides(filter.shape);
        const xBatchStride = xStrides[0];
        const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];
        const xColStride = isChannelsLast ? xStrides[2] : 1;
        const xChannelStride = isChannelsLast ? 1 : xStrides[1];
        const yBatchStride = y.strides[0];
        const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];
        const yColStride = isChannelsLast ? y.strides[2] : 1;
        const yChannelStride = isChannelsLast ? 1 : y.strides[1];
        const xVals = backend.data.get(x.dataId).values;
        const wVals = backend.data.get(filter.dataId).values;
        const yVals = y.values;
        for (let b = 0; b < convInfo.batchSize; ++b) {
            const xOffset1 = b * xBatchStride;
            const yOffset1 = b * yBatchStride;
            for (let yR = 0; yR < convInfo.outHeight; ++yR) {
                const yOffset2 = yOffset1 + yR * yRowStride;
                const xRCorner = yR * convInfo.strideHeight - padTop;
                for (let wR = 0; wR < filterHeight; ++wR) {
                    const xR = xRCorner + wR * dilationHeight;
                    if (xR < 0 || xR >= convInfo.inHeight) {
                        continue;
                    }
                    const wOffset1 = wR * filterStrides[0];
                    const xOffset2 = xOffset1 + xR * xRowStride;
                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {
                        const yOffset3 = yOffset2 + yC * yColStride;
                        const xCCorner = yC * convInfo.strideWidth - padLeft;
                        for (let wC = 0; wC < filterWidth; ++wC) {
                            const xC = xCCorner + wC * dilationWidth;
                            if (xC < 0 || xC >= convInfo.inWidth) {
                                continue;
                            }
                            const wOffset2 = wOffset1 + wC * filterStrides[1];
                            const xOffset3 = xOffset2 + xC * xColStride;
                            let wOffset3 = wOffset2;
                            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {
                                const xVal = xVals[xOffset3 + d1 * xChannelStride];
                                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {
                                    yVals[yOffset3 + d2 * yChannelStride] +=
                                        xVal * wVals[wOffset3 + d2];
                                }
                                wOffset3 += convInfo.outChannels;
                            }
                        }
                    }
                }
            }
        }
        return backend.makeTensorInfo(y.shape, y.dtype, yVals);
    }
    const conv2DConfig$1 = {
        kernelName: Conv2D,
        backendName: 'cpu',
        kernelFunc: conv2D
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv2DBackpropFilter$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, dy } = inputs;
        const { strides, pad, dataFormat, dimRoundingMode, filterShape } = attrs;
        assertNotComplex$1([x, dy], 'conv2dBackpropFilter');
        const $dataFormat = convertConv2DDataFormat(dataFormat);
        const convInfo = computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);
        const { strideHeight, strideWidth, filterHeight, filterWidth } = convInfo;
        const isChannelsLast = convInfo.dataFormat === 'channelsLast';
        const dW = new TensorBuffer(convInfo.filterShape, 'float32');
        const leftPad = convInfo.padInfo.left;
        const topPad = convInfo.padInfo.top;
        const xVals = backend.data.get(x.dataId).values;
        const dyVals = backend.data.get(dy.dataId).values;
        const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);
        const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);
        for (let wR = 0; wR < filterHeight; ++wR) {
            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
            for (let wC = 0; wC < filterWidth; ++wC) {
                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {
                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {
                        let dotProd = 0;
                        for (let b = 0; b < convInfo.batchSize; ++b) {
                            for (let yR = yRMin; yR < yRMax; ++yR) {
                                const xR = wR + yR * strideHeight - topPad;
                                for (let yC = yCMin; yC < yCMax; ++yC) {
                                    const xC = wC + yC * strideWidth - leftPad;
                                    if (isChannelsLast) {
                                        dotProd += xBuf.get(b, xR, xC, d1) *
                                            dyBuf.get(b, yR, yC, d2);
                                    }
                                    else {
                                        dotProd += xBuf.get(b, d1, xR, xC) *
                                            dyBuf.get(b, d2, yR, yC);
                                    }
                                }
                            }
                        }
                        dW.set(dotProd, wR, wC, d1, d2);
                    }
                }
            }
        }
        return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);
    }
    const conv2DBackpropFilterConfig$1 = {
        kernelName: Conv2DBackpropFilter,
        backendName: 'cpu',
        kernelFunc: conv2DBackpropFilter$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv2DBackpropInput$1(args) {
        const { inputs, backend, attrs } = args;
        const { dy, filter } = inputs;
        const { inputShape, strides, pad, dataFormat, dimRoundingMode } = attrs;
        assertNotComplex$1([dy, filter], 'conv2dBackpropInput');
        const filterStrides = computeStrides(filter.shape);
        const dyStrides = computeStrides(dy.shape);
        let $dataFormat = convertConv2DDataFormat(dataFormat);
        const convInfo = computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);
        const dx = new TensorBuffer(convInfo.inShape, 'float32');
        const dxValues = dx.values;
        const dyValues = backend.data.get(dy.dataId).values;
        const fltValues = backend.data.get(filter.dataId).values;
        const [fltS0, fltS1, fltS2] = filterStrides;
        const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;
        $dataFormat = convInfo.dataFormat;
        const topPad = filterHeight - 1 - convInfo.padInfo.top;
        const leftPad = filterWidth - 1 - convInfo.padInfo.left;
        const isChannelsLast = $dataFormat === 'channelsLast';
        const xBatchStride = dx.strides[0];
        const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];
        const xColStride = isChannelsLast ? dx.strides[2] : 1;
        const xChannelStride = isChannelsLast ? 1 : dx.strides[1];
        const yBatchStride = dyStrides[0];
        const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];
        const yColStride = isChannelsLast ? dyStrides[2] : 1;
        const yChannelStride = isChannelsLast ? 1 : dyStrides[1];
        for (let b = 0; b < batchSize; ++b) {
            for (let d1 = 0; d1 < inChannels; ++d1) {
                for (let xR = 0; xR < inHeight; ++xR) {
                    const xRCorner = xR - topPad;
                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
                    for (let xC = 0; xC < inWidth; ++xC) {
                        const xCCorner = xC - leftPad;
                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                        let dotProd = 0;
                        for (let yR = xRMin; yR < yRMax; ++yR) {
                            const wR = yR * strideHeight - xRCorner;
                            for (let yC = xCMin; yC < yCMax; ++yC) {
                                const wC = yC * strideWidth - xCCorner;
                                const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;
                                const fltOffset = fltS0 * (filterHeight - 1 - wR) +
                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;
                                for (let d2 = 0; d2 < outChannels; ++d2) {
                                    const pixel = dyValues[dyOffset + yChannelStride * d2];
                                    const weight = fltValues[fltOffset + d2];
                                    dotProd += pixel * weight;
                                }
                            }
                        }
                        const dxOffset = xBatchStride * b + xRowStride * xR +
                            xColStride * xC + xChannelStride * d1;
                        dxValues[dxOffset] = dotProd;
                    }
                }
            }
        }
        return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
    }
    const conv2DBackpropInputConfig$1 = {
        kernelName: Conv2DBackpropInput,
        backendName: 'cpu',
        kernelFunc: conv2DBackpropInput$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv3D$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter } = inputs;
        const { strides, pad, dilations } = attrs;
        assertNotComplex$1([x, filter], 'conv3d');
        const convInfo = computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);
        const { filterDepth, filterHeight, filterWidth, dilationDepth, dilationHeight, dilationWidth, padInfo } = convInfo;
        const padFront = padInfo.front;
        const padLeft = padInfo.left;
        const padTop = padInfo.top;
        const y = new TensorBuffer(convInfo.outShape, x.dtype);
        const xVals = backend.data.get(x.dataId).values;
        const wVals = backend.data.get(filter.dataId).values;
        const yVals = y.values;
        const xStrides = computeStrides(x.shape);
        const filterStrides = computeStrides(filter.shape);
        for (let b = 0; b < convInfo.batchSize; ++b) {
            const xOffset1 = b * xStrides[0];
            const yOffset1 = b * y.strides[0];
            for (let yF = 0; yF < convInfo.outDepth; ++yF) {
                const yOffset2 = yOffset1 + yF * y.strides[1];
                const xFCorner = yF * convInfo.strideDepth - padFront;
                for (let wF = 0; wF < filterDepth; ++wF) {
                    const xF = xFCorner + wF * dilationDepth;
                    if (xF < 0 || xF >= convInfo.inDepth) {
                        continue;
                    }
                    const wOffset1 = wF * filterStrides[0];
                    const xOffset2 = xOffset1 + xF * xStrides[1];
                    for (let yR = 0; yR < convInfo.outHeight; ++yR) {
                        const yOffset3 = yOffset2 + yR * y.strides[2];
                        const xRCorner = yR * convInfo.strideHeight - padTop;
                        for (let wR = 0; wR < filterHeight; ++wR) {
                            const xR = xRCorner + wR * dilationHeight;
                            if (xR < 0 || xR >= convInfo.inHeight) {
                                continue;
                            }
                            const wOffset2 = wOffset1 + wR * filterStrides[1];
                            const xOffset3 = xOffset2 + xR * xStrides[2];
                            for (let yC = 0; yC < convInfo.outWidth; ++yC) {
                                const yOffset4 = yOffset3 + yC * convInfo.outChannels;
                                const xCCorner = yC * convInfo.strideWidth - padLeft;
                                for (let wC = 0; wC < filterWidth; ++wC) {
                                    const xC = xCCorner + wC * dilationWidth;
                                    if (xC < 0 || xC >= convInfo.inWidth) {
                                        continue;
                                    }
                                    const wOffset3 = wOffset2 + wC * filterStrides[2];
                                    const xOffset4 = xOffset3 + xC * convInfo.inChannels;
                                    let wOffset4 = wOffset3;
                                    for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {
                                        const xVal = xVals[xOffset4 + d1];
                                        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {
                                            yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];
                                        }
                                        wOffset4 += convInfo.outChannels;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return backend.makeTensorInfo(y.shape, y.dtype, y.values);
    }
    const conv3DConfig$1 = {
        kernelName: Conv3D,
        backendName: 'cpu',
        kernelFunc: conv3D$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv3DBackpropFilterV2$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, dy } = inputs;
        const { strides, pad, filterShape } = attrs;
        assertNotComplex$1([x, dy], 'conv3dBackpropFilterV2');
        const xStrides = computeStrides(x.shape);
        const dyStrides = computeStrides(dy.shape);
        const convInfo = computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const filterDepth = convInfo.filterDepth;
        const filterHeight = convInfo.filterHeight;
        const filterWidth = convInfo.filterWidth;
        const dw = new TensorBuffer(convInfo.filterShape, 'float32');
        const dwValues = dw.values;
        const [dwS0, dwS1, dwS2, dwS3] = dw.strides;
        const dyValues = backend.data.get(dy.dataId).values;
        const [dyS0, dyS1, dyS2, dyS3] = dyStrides;
        const xValues = backend.data.get(x.dataId).values;
        const [xS0, xS1, xS2, xS3] = xStrides;
        const frontPad = convInfo.padInfo.front;
        const leftPad = convInfo.padInfo.left;
        const topPad = convInfo.padInfo.top;
        for (let wF = 0; wF < filterDepth; ++wF) {
            const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));
            const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);
            const wOffset1 = wF * dwS0;
            for (let wR = 0; wR < filterHeight; ++wR) {
                const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
                const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
                const wOffset2 = wR * dwS1 + wOffset1;
                for (let wC = 0; wC < filterWidth; ++wC) {
                    const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
                    const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
                    const wOffset3 = wC * dwS2 + wOffset2;
                    for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {
                        const wOffset4 = d1 * dwS3 + wOffset3;
                        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {
                            let dotProd = 0;
                            for (let b = 0; b < convInfo.batchSize; ++b) {
                                const xOffset1 = b * xS0;
                                const yOffset1 = b * dyS0;
                                for (let yF = yFMin; yF < yFMax; ++yF) {
                                    const xF = wF + yF * strideDepth - frontPad;
                                    const xOffset2 = xF * xS1 + xOffset1;
                                    const yOffset2 = yF * dyS1 + yOffset1;
                                    for (let yR = yRMin; yR < yRMax; ++yR) {
                                        const xR = wR + yR * strideHeight - topPad;
                                        const xOffset3 = xR * xS2 + xOffset2;
                                        const yOffset3 = yR * dyS2 + yOffset2;
                                        for (let yC = yCMin; yC < yCMax; ++yC) {
                                            const xC = wC + yC * strideWidth - leftPad;
                                            const xOffset4 = xC * xS3 + xOffset3;
                                            const yOffset4 = yC * dyS3 + yOffset3;
                                            dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];
                                        }
                                    }
                                }
                            }
                            dwValues[wOffset4 + d2] = dotProd;
                        }
                    }
                }
            }
        }
        return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);
    }
    const conv3DBackpropFilterV2Config$1 = {
        kernelName: Conv3DBackpropFilterV2,
        backendName: 'cpu',
        kernelFunc: conv3DBackpropFilterV2$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv3DBackpropInputV2(args) {
        const { inputs, backend, attrs } = args;
        const { dy, filter } = inputs;
        const { pad, strides, inputShape } = attrs;
        assertNotComplex$1([dy], 'conv3dBackpropInputV2');
        const dyStrides = computeStrides(dy.shape);
        const filterStrides = computeStrides(filter.shape);
        const convInfo = computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);
        const dx = new TensorBuffer(convInfo.inShape, 'float32');
        const dxValues = dx.values;
        const [dxS0, dxS1, dxS2, dxS3] = dx.strides;
        const dyValues = backend.data.get(dy.dataId).values;
        const [dyS0, dyS1, dyS2, dyS3] = dyStrides;
        const fltValues = backend.data.get(filter.dataId).values;
        const [fltS0, fltS1, fltS2, fltS3] = filterStrides;
        const { batchSize, filterDepth, filterHeight, filterWidth, inChannels, inDepth, inHeight, inWidth, outChannels, outDepth, outHeight, outWidth, strideDepth, strideHeight, strideWidth } = convInfo;
        const frontPad = filterDepth - 1 - convInfo.padInfo.front;
        const topPad = filterHeight - 1 - convInfo.padInfo.top;
        const leftPad = filterWidth - 1 - convInfo.padInfo.left;
        for (let b = 0; b < batchSize; ++b) {
            for (let d1 = 0; d1 < inChannels; ++d1) {
                // Frames of depth
                for (let xF = 0; xF < inDepth; ++xF) {
                    const xFCorner = xF - frontPad;
                    const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));
                    const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);
                    // Rows as per standard 2d matrix notation
                    for (let xR = 0; xR < inHeight; ++xR) {
                        const xRCorner = xR - topPad;
                        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
                        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
                        // Columns as per standard 2d matrix notation
                        for (let xC = 0; xC < inWidth; ++xC) {
                            const xCCorner = xC - leftPad;
                            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                            const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                            let dotProd = 0;
                            for (let yF = xFMin; yF < yFMax; ++yF) {
                                const wF = yF * strideDepth - xFCorner;
                                for (let yR = xRMin; yR < yRMax; ++yR) {
                                    const wR = yR * strideHeight - xRCorner;
                                    for (let yC = xCMin; yC < yCMax; ++yC) {
                                        const wC = yC * strideWidth - xCCorner;
                                        const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;
                                        const fltOffset = fltS0 * (filterDepth - 1 - wF) +
                                            fltS1 * (filterHeight - 1 - wR) +
                                            fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;
                                        for (let d2 = 0; d2 < outChannels; ++d2) {
                                            const pixel = dyValues[dyOffset + d2];
                                            const weight = fltValues[fltOffset + d2];
                                            dotProd += pixel * weight;
                                        }
                                    }
                                }
                            }
                            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =
                                dotProd;
                        }
                    }
                }
            }
        }
        return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
    }
    const conv3DBackpropInputV2Config = {
        kernelName: Conv3DBackpropInputV2,
        backendName: 'cpu',
        kernelFunc: conv3DBackpropInputV2
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const cos$1 = unaryKernelFunc$1(Cos, (xi) => Math.cos(xi));
    const cosConfig$1 = {
        kernelName: Cos,
        backendName: 'cpu',
        kernelFunc: cos$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const cosh$1 = unaryKernelFunc$1(Cosh, (xi) => Math.cosh(xi));
    const coshConfig$1 = {
        kernelName: Cosh,
        backendName: 'cpu',
        kernelFunc: cosh$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function cropAndResize$1(args) {
        const { inputs, backend, attrs } = args;
        const { image, boxes, boxInd } = inputs;
        const { cropSize, method, extrapolationValue } = attrs;
        const [batch, imageHeight, imageWidth, numChannels] = image.shape;
        const numBoxes = boxes.shape[0];
        const [cropHeight, cropWidth] = cropSize;
        const output = buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');
        const boxVals = backend.data.get(boxes.dataId).values;
        const boxIndVals = backend.data.get(boxInd.dataId).values;
        const imageVals = backend.data.get(image.dataId).values;
        const inStride = computeStrides(image.shape); // to calculate flat indexes into image
        const outStride = computeStrides(output.shape); // to calculate flat indexes into output
        // Reference implementation
        // tslint:disable-next-line:max-line-length
        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc
        for (let b = 0; b < numBoxes; b++) {
            const startInd = b * 4;
            const y1 = boxVals[startInd];
            const x1 = boxVals[startInd + 1];
            const y2 = boxVals[startInd + 2];
            const x2 = boxVals[startInd + 3];
            const bInd = boxIndVals[b];
            if (bInd >= batch) {
                continue;
            }
            const heightScale = (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;
            const widthScale = (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;
            for (let y = 0; y < cropHeight; y++) {
                const yInd = (cropHeight > 1) ?
                    y1 * (imageHeight - 1) + y * (heightScale) :
                    0.5 * (y1 + y2) * (imageHeight - 1);
                if (yInd < 0 || yInd > imageHeight - 1) {
                    for (let x = 0; x < cropWidth; x++) {
                        for (let c = 0; c < numChannels; c++) {
                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
                            output.values[ind] = extrapolationValue;
                        }
                    }
                    continue;
                }
                if (method === 'bilinear') {
                    const topInd = Math.floor(yInd);
                    const bottomInd = Math.ceil(yInd);
                    const yLerp = yInd - topInd;
                    for (let x = 0; x < cropWidth; x++) {
                        const xInd = (cropWidth > 1) ?
                            x1 * (imageWidth - 1) + x * widthScale :
                            0.5 * (x1 + x2) * (imageWidth - 1);
                        if (xInd < 0 || xInd > imageWidth - 1) {
                            for (let c = 0; c < numChannels; c++) {
                                const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
                                output.values[ind] = extrapolationValue;
                            }
                            continue;
                        }
                        const leftInd = Math.floor(xInd);
                        const rightInd = Math.ceil(xInd);
                        const xLerp = xInd - leftInd;
                        for (let c = 0; c < numChannels; c++) {
                            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +
                                bInd * inStride[0];
                            const topLeft = imageVals[ind];
                            ind = c + rightInd * inStride[2] + topInd * inStride[1] +
                                bInd * inStride[0];
                            const topRight = imageVals[ind];
                            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +
                                bInd * inStride[0];
                            const bottomLeft = imageVals[ind];
                            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +
                                bInd * inStride[0];
                            const bottomRight = imageVals[ind];
                            const top = topLeft + (topRight - topLeft) * xLerp;
                            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;
                            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
                            output.values[ind] = top + ((bottom - top) * yLerp);
                        }
                    }
                }
                else { // method == "nearest"
                    for (let x = 0; x < cropWidth; ++x) {
                        const xInd = (cropWidth > 1) ?
                            x1 * (imageWidth - 1) + x * widthScale :
                            0.5 * (x1 + x2) * (imageWidth - 1);
                        if (xInd < 0 || xInd > imageWidth - 1) {
                            for (let c = 0; c < numChannels; c++) {
                                const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
                                output.values[ind] = extrapolationValue;
                            }
                            continue;
                        }
                        const closestX = Math.round(xInd);
                        const closestY = Math.round(yInd);
                        for (let c = 0; c < numChannels; c++) {
                            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +
                                bInd * inStride[0];
                            const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
                            output.values[outInd] = imageVals[inInd];
                        }
                    }
                }
            }
        }
        return backend.makeTensorInfo(output.shape, output.dtype, output.values);
    }
    const cropAndResizeConfig$1 = {
        kernelName: CropAndResize,
        backendName: 'cpu',
        kernelFunc: cropAndResize$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function cumsum$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, exclusive, reverse } = attrs;
        assertNotComplex$1(x, 'cumsum');
        const permutation = getAxesPermutation([axis], x.shape.length);
        let $x = x;
        if (permutation != null) {
            $x = transpose$1({ inputs: { x }, backend, attrs: { perm: permutation } });
        }
        const permutedAxis = getInnerMostAxes(1, x.shape.length)[0];
        if (permutedAxis !== $x.shape.length - 1) {
            throw new Error(`backend.cumsum in CPU expects an inner-most ` +
                `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);
        }
        const resultDtype = upcastType($x.dtype, 'int32');
        const vals = makeZerosTypedArray(sizeFromShape($x.shape), resultDtype);
        const aVals = backend.data.get($x.dataId).values;
        const finalDim = $x.shape[$x.shape.length - 1];
        const indexAdjuster = reverse ?
            (i, j) => i + finalDim - j - 1 :
            (i, j) => i + j;
        for (let i = 0; i < aVals.length; i += finalDim) {
            for (let j = 0; j < finalDim; j++) {
                const idx = indexAdjuster(i, j);
                if (j === 0) {
                    vals[idx] = exclusive ? 0 : aVals[idx];
                }
                else {
                    const prevIdx = indexAdjuster(i, j - 1);
                    vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :
                        aVals[idx] + vals[prevIdx];
                }
            }
        }
        const result = backend.makeTensorInfo($x.shape, resultDtype, vals);
        if (permutation != null) {
            const reversePermutation = getUndoAxesPermutation(permutation);
            const reverseTransposedResult = transpose$1({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });
            backend.disposeIntermediateTensorInfo(result);
            backend.disposeIntermediateTensorInfo($x);
            return reverseTransposedResult;
        }
        return result;
    }
    const cumsumConfig$1 = {
        kernelName: Cumsum,
        backendName: 'cpu',
        kernelFunc: cumsum$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function denseBincount$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, weights } = inputs;
        const { size, binaryOutput } = attrs;
        if (x.shape.length === 1) {
            const xVals = backend.data.get(x.dataId).values;
            const weightsVals = backend.data.get(weights.dataId).values;
            const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);
            return backend.makeTensorInfo([size], weights.dtype, outVals);
        }
        else if (x.shape.length === 2) {
            const xBuf = backend.bufferSync(x);
            const weightsBuf = backend.bufferSync(weights);
            const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);
            return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);
        }
        throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` +
            `${x.shape.length}.`);
    }
    const denseBincountConfig$1 = {
        kernelName: DenseBincount,
        backendName: 'cpu',
        kernelFunc: denseBincount$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function depthToSpace$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { blockSize, dataFormat } = attrs;
        assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);
        const batchSize = x.shape[0];
        const inputHeight = x.shape[1];
        const inputWidth = x.shape[2];
        const inputDepth = x.shape[3];
        const outputHeight = inputHeight * blockSize;
        const outputWidth = inputWidth * blockSize;
        const outputDepth = inputDepth / (blockSize * blockSize);
        const xValues = backend.data.get(x.dataId).values;
        const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);
        let outputIdx = 0;
        for (let b = 0; b < batchSize; ++b) {
            for (let h = 0; h < outputHeight; ++h) {
                const inH = Math.floor(h / blockSize);
                const offsetH = (h % blockSize);
                for (let w = 0; w < outputWidth; ++w) {
                    const inW = Math.floor(w / blockSize);
                    const offsetW = (w % blockSize);
                    const offsetD = (offsetH * blockSize + offsetW) * outputDepth;
                    for (let d = 0; d < outputDepth; ++d) {
                        const inD = d + offsetD;
                        const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));
                        result[outputIdx++] = xValues[inputIdx];
                    }
                }
            }
        }
        return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);
    }
    const depthToSpaceConfig$1 = {
        kernelName: DepthToSpace,
        backendName: 'cpu',
        kernelFunc: depthToSpace$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function depthwiseConv2dNative$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter } = inputs;
        const { strides, pad, dilations, dimRoundingMode } = attrs;
        assertNotComplex$1([x, filter], 'depthwiseConv2DNative');
        const xStrides = computeStrides(x.shape);
        const filterStrides = computeStrides(filter.shape);
        let $dilations = dilations;
        if ($dilations == null) {
            $dilations = [1, 1];
        }
        assert(eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +
            `1. Got strides ${strides} and dilations '${$dilations}'`);
        const convInfo = computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);
        const { filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo } = convInfo;
        const padLeft = padInfo.left;
        const padTop = padInfo.top;
        const chMul = convInfo.outChannels / convInfo.inChannels;
        const y = new TensorBuffer(convInfo.outShape, x.dtype);
        const xVals = backend.data.get(x.dataId).values;
        const wVals = backend.data.get(filter.dataId).values;
        const yVals = y.values;
        for (let b = 0; b < convInfo.batchSize; ++b) {
            const xOffset1 = b * xStrides[0];
            const yOffset1 = b * y.strides[0];
            for (let yR = 0; yR < convInfo.outHeight; ++yR) {
                const yOffset2 = yOffset1 + yR * y.strides[1];
                const xRCorner = yR * convInfo.strideHeight - padTop;
                for (let wR = 0; wR < filterHeight; ++wR) {
                    const xR = xRCorner + wR * dilationHeight;
                    if (xR < 0 || xR >= convInfo.inHeight) {
                        continue;
                    }
                    const wOffset1 = wR * filterStrides[0];
                    const xOffset2 = xOffset1 + xR * xStrides[1];
                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {
                        const yOffset3 = yOffset2 + yC * y.strides[2];
                        const xCCorner = yC * convInfo.strideWidth - padLeft;
                        for (let wC = 0; wC < filterWidth; ++wC) {
                            const xC = xCCorner + wC * dilationWidth;
                            if (xC < 0 || xC >= convInfo.inWidth) {
                                continue;
                            }
                            const wOffset2 = wOffset1 + wC * filterStrides[1];
                            const xOffset3 = xOffset2 + xC * convInfo.inChannels;
                            let yOffset4 = yOffset3;
                            let wOffset3 = wOffset2;
                            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {
                                const xVal = xVals[xOffset3 + d1];
                                for (let q = 0; q < chMul; ++q) {
                                    yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];
                                }
                                yOffset4 += chMul;
                                wOffset3 += chMul;
                            }
                        }
                    }
                }
            }
        }
        return backend.makeTensorInfo(y.shape, y.dtype, y.values);
    }
    const depthwiseConv2dNativeConfig$1 = {
        kernelName: DepthwiseConv2dNative,
        backendName: 'cpu',
        kernelFunc: depthwiseConv2dNative$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function depthwiseConv2dNativeBackpropFilter$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, dy } = inputs;
        const { strides, dilations, pad, dimRoundingMode, filterShape } = attrs;
        assertNotComplex$1([x, dy], 'depthwiseConv2dNativeBackpropFilter');
        const convInfo = computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
        const { strideHeight, strideWidth, filterHeight, filterWidth } = convInfo;
        const dW = new TensorBuffer(convInfo.filterShape, 'float32');
        const leftPad = convInfo.padInfo.left;
        const topPad = convInfo.padInfo.top;
        const chMul = convInfo.outChannels / convInfo.inChannels;
        const xVals = backend.data.get(x.dataId).values;
        const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);
        const dyVals = backend.data.get(dy.dataId).values;
        const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);
        for (let wR = 0; wR < filterHeight; ++wR) {
            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
            for (let wC = 0; wC < filterWidth; ++wC) {
                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {
                    const d1 = Math.trunc(d2 / chMul);
                    const dm = d2 % chMul;
                    let dotProd = 0;
                    for (let b = 0; b < convInfo.batchSize; ++b) {
                        for (let yR = yRMin; yR < yRMax; ++yR) {
                            const xR = wR + yR * strideHeight - topPad;
                            for (let yC = yCMin; yC < yCMax; ++yC) {
                                const xC = wC + yC * strideWidth - leftPad;
                                dotProd += xBuf.get(b, xR, xC, d1) *
                                    dyBuf.get(b, yR, yC, d2);
                            }
                        }
                    }
                    dW.set(dotProd, wR, wC, d1, dm);
                }
            }
        }
        return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);
    }
    const depthwiseConv2dNativeBackpropFilterConfig$1 = {
        kernelName: DepthwiseConv2dNativeBackpropFilter,
        backendName: 'cpu',
        kernelFunc: depthwiseConv2dNativeBackpropFilter$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function depthwiseConv2dNativeBackpropInput$1(args) {
        const { inputs, backend, attrs } = args;
        const { dy, filter } = inputs;
        const { strides, dilations, pad, dimRoundingMode, inputShape } = attrs;
        assertNotComplex$1([dy, filter], 'depthwiseConv2DNativeBackpropInput');
        const dyStrides = computeStrides(dy.shape);
        const filterStrides = computeStrides(filter.shape);
        const convInfo = computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
        const dx = new TensorBuffer(convInfo.inShape, 'float32');
        const dxValues = dx.values;
        const [dxS0, dxS1, dxS2] = dx.strides;
        const dyValues = backend.data.get(dy.dataId).values;
        const [dyS0, dyS1, dyS2] = dyStrides;
        const fltValues = backend.data.get(filter.dataId).values;
        const [fltS0, fltS1, fltS2] = filterStrides;
        const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;
        const topPad = filterHeight - 1 - convInfo.padInfo.top;
        const leftPad = filterWidth - 1 - convInfo.padInfo.left;
        const chMul = outChannels / inChannels;
        for (let b = 0; b < batchSize; ++b) {
            for (let d1 = 0; d1 < inChannels; ++d1) {
                for (let xR = 0; xR < inHeight; ++xR) {
                    const xRCorner = xR - topPad;
                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
                    for (let xC = 0; xC < inWidth; ++xC) {
                        const xCCorner = xC - leftPad;
                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                        let dotProd = 0;
                        for (let yR = xRMin; yR < yRMax; ++yR) {
                            const wR = yR * strideHeight - xRCorner;
                            for (let yC = xCMin; yC < yCMax; ++yC) {
                                const wC = yC * strideWidth - xCCorner;
                                const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;
                                const fltOffset = fltS0 * (filterHeight - 1 - wR) +
                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;
                                for (let dm = 0; dm < chMul; ++dm) {
                                    const d2 = d1 * chMul + dm;
                                    const pixel = dyValues[dyOffset + d2];
                                    const weight = fltValues[fltOffset + dm];
                                    dotProd += pixel * weight;
                                }
                            }
                        }
                        dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;
                    }
                }
            }
        }
        return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
    }
    const depthwiseConv2dNativeBackpropInputConfig$1 = {
        kernelName: DepthwiseConv2dNativeBackpropInput,
        backendName: 'cpu',
        kernelFunc: depthwiseConv2dNativeBackpropInput$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function diag$1(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        const xSize = sizeFromShape(x.shape);
        const xVals = backend.data.get(x.dataId).values;
        const outBuf = buffer([xSize, xSize], x.dtype);
        const vals = outBuf.values;
        for (let i = 0; i < xVals.length; i++) {
            vals[i * xSize + i] = xVals[i];
        }
        const outShape = [...x.shape, ...x.shape];
        return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);
    }
    const diagConfig$1 = {
        kernelName: Diag,
        backendName: 'cpu',
        kernelFunc: diag$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const dilation2DConfig$1 = {
        kernelName: Dilation2D,
        backendName: 'cpu',
        kernelFunc: ({ inputs, backend, attrs }) => {
            const { x, filter } = inputs;
            const { strides, pad, dilations } = attrs;
            const cpuBackend = backend;
            const xVals = cpuBackend.data.get(x.dataId).values;
            const xRank = x.shape.length;
            const filterVals = cpuBackend.data.get(filter.dataId).values;
            const filterRank = filter.shape.length;
            const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);
            const outSize = sizeFromShape(outShape);
            const outRank = outShape.length;
            const outputVals = getArrayFromDType(x.dtype, outSize);
            // Upsampling the input by fill in `dilation size - 1` values between each
            // input value.
            // This implementation follows the TF c++ implementation:
            // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
            for (let b = 0; b < batchSize; ++b) {
                for (let hOut = 0; hOut < outHeight; ++hOut) {
                    const hBeg = hOut * strideHeight - padInfo.top;
                    for (let wOut = 0; wOut < outWidth; ++wOut) {
                        const wBeg = wOut * strideWidth - padInfo.left;
                        for (let d = 0; d < inChannels; ++d) {
                            let curVal = Number.MIN_SAFE_INTEGER;
                            for (let h = 0; h < filterHeight; ++h) {
                                const hIn = hBeg + h * dilationHeight;
                                if (hIn >= 0 && hIn < inHeight) {
                                    for (let w = 0; w < filterWidth; ++w) {
                                        const wIn = wBeg + w * dilationWidth;
                                        if (wIn >= 0 && wIn < inWidth) {
                                            const xIndex = locToIndex([b, hIn, wIn, d], xRank, computeStrides(x.shape));
                                            const filterIndex = locToIndex([h, w, d], filterRank, computeStrides(filter.shape));
                                            const val = xVals[xIndex] + filterVals[filterIndex];
                                            if (val > curVal) {
                                                curVal = val;
                                            }
                                        }
                                    }
                                }
                            }
                            const outputIndex = locToIndex([b, hOut, wOut, d], outRank, computeStrides(outShape));
                            outputVals[outputIndex] = curVal;
                        }
                    }
                }
            }
            const dataId = cpuBackend.write(toTypedArray(outputVals, x.dtype), outShape, x.dtype);
            return { dataId, shape: outShape, dtype: x.dtype };
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const dilation2DBackpropFilterConfig = {
        kernelName: Dilation2DBackpropFilter,
        backendName: 'cpu',
        kernelFunc: ({ inputs, backend, attrs }) => {
            const { x, filter, dy } = inputs;
            const { strides, pad, dilations } = attrs;
            const cpuBackend = backend;
            const $x = toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);
            const $filter = toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);
            const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);
            assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropFilter}, dy ` +
                `must have the same rank as output ${outShape.length}, but got ` +
                `${dy.rank}`);
            const $dy = toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);
            // The computed filter gradients has the same dimensions as the filter:
            // [filterHeight, filterWidth, depth]
            const gradients = makeZerosNestedTypedArray(filter.shape, filter.dtype);
            // In the case of multiple argmax branches, we only back-propagate along the
            // last branch, i.e., the one with largest value of `h * filter_cols + w`,
            // similarly to the max-pooling backward routines.
            // This implementation follows the TF c++ implementation:
            // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
            for (let b = 0; b < batchSize; ++b) {
                for (let hOut = 0; hOut < outHeight; ++hOut) {
                    const hBeg = hOut * strideHeight - padInfo.top;
                    for (let wOut = 0; wOut < outWidth; ++wOut) {
                        const wBeg = wOut * strideWidth - padInfo.left;
                        for (let d = 0; d < inChannels; ++d) {
                            let curVal = Number.MIN_SAFE_INTEGER;
                            let hMax = 0;
                            let wMax = 0;
                            for (let h = 0; h < filterHeight; ++h) {
                                const hIn = hBeg + h * dilationHeight;
                                if (hIn >= 0 && hIn < inHeight) {
                                    for (let w = 0; w < filterWidth; ++w) {
                                        const wIn = wBeg + w * dilationWidth;
                                        if (wIn >= 0 && wIn < inWidth) {
                                            const val = $x[b][hIn][wIn][d] + $filter[h][w][d];
                                            if (val > curVal) {
                                                curVal = val;
                                                hMax = h;
                                                wMax = w;
                                            }
                                        }
                                    }
                                }
                            }
                            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];
                        }
                    }
                }
            }
            const dataId = cpuBackend.write(toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);
            return { dataId, shape: filter.shape, dtype: filter.dtype };
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const dilation2DBackpropInputConfig = {
        kernelName: Dilation2DBackpropInput,
        backendName: 'cpu',
        kernelFunc: ({ inputs, backend, attrs }) => {
            const { x, filter, dy } = inputs;
            const { strides, pad, dilations } = attrs;
            const cpuBackend = backend;
            const $x = toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);
            const $filter = toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);
            const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);
            assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropInput}, dy ` +
                `must have the same rank as output ${outShape.length}, but got ` +
                `${dy.rank}`);
            const $dy = toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);
            // The computed gradients has the same dimensions as the input:
            // [batch, inputHeight, inputCols, inChannel]
            const gradients = makeZerosNestedTypedArray(x.shape, x.dtype);
            // In the case of multiple argmax branches, we only back-propagate along the
            // last branch, i.e., the one with largest value of `h * filter_cols + w`,
            // similarly to the max-pooling backward routines.
            // This implementation follows the TF c++ implementation:
            // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
            for (let b = 0; b < batchSize; ++b) {
                for (let hOut = 0; hOut < outHeight; ++hOut) {
                    const hBeg = hOut * strideHeight - padInfo.top;
                    for (let wOut = 0; wOut < outWidth; ++wOut) {
                        const wBeg = wOut * strideWidth - padInfo.left;
                        for (let d = 0; d < inChannels; ++d) {
                            let curVal = Number.MIN_SAFE_INTEGER;
                            let hInMax = (hBeg < 0) ? 0 : hBeg;
                            let wInMax = (wBeg < 0) ? 0 : wBeg;
                            for (let h = 0; h < filterHeight; ++h) {
                                const hIn = hBeg + h * dilationHeight;
                                if (hIn >= 0 && hIn < inHeight) {
                                    for (let w = 0; w < filterWidth; ++w) {
                                        const wIn = wBeg + w * dilationWidth;
                                        if (wIn >= 0 && wIn < inWidth) {
                                            const val = $x[b][hIn][wIn][d] + $filter[h][w][d];
                                            if (val > curVal) {
                                                curVal = val;
                                                hInMax = hIn;
                                                wInMax = wIn;
                                            }
                                        }
                                    }
                                }
                            }
                            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];
                        }
                    }
                }
            }
            const dataId = cpuBackend.write(toTypedArray(gradients, x.dtype), x.shape, x.dtype);
            return { dataId, shape: x.shape, dtype: x.dtype };
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sum$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        assertNotComplex$1(x, 'sum');
        let $x;
        if (x.dtype === 'bool') {
            $x = cast$1({ inputs: { x }, backend, attrs: { dtype: 'int32' } });
        }
        else {
            $x = identity$1({ inputs: { x }, backend });
        }
        const xRank = $x.shape.length;
        const axes = parseAxisParam(axis, $x.shape);
        const permutation = getAxesPermutation(axes, xRank);
        let reductionAxes = axes;
        let permutedX = $x;
        if (permutation != null) {
            permutedX =
                transpose$1({ inputs: { x: $x }, backend, attrs: { perm: permutation } });
            reductionAxes = getInnerMostAxes(reductionAxes.length, xRank);
        }
        assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);
        const [outShape, reduceShape] = computeOutAndReduceShapes(permutedX.shape, reductionAxes);
        const resultDtype = upcastType(permutedX.dtype, 'int32');
        let result = zeros(backend, outShape, resultDtype);
        const reduceSize = sizeFromShape(reduceShape);
        const vals = backend.data.get(result.dataId).values;
        const aVals = backend.data.get(permutedX.dataId).values;
        for (let i = 0; i < vals.length; ++i) {
            const offset = i * reduceSize;
            let sum = 0;
            for (let j = 0; j < reduceSize; ++j) {
                sum += aVals[offset + j];
            }
            vals[i] = sum;
        }
        if (keepDims) {
            const newShape = expandShapeToKeepDim(result.shape, axes);
            const oldResult = result;
            result = reshape$1({ inputs: { x: result }, backend, attrs: { shape: newShape } });
            backend.disposeIntermediateTensorInfo(oldResult);
        }
        backend.disposeIntermediateTensorInfo($x);
        if (permutation != null) {
            backend.disposeIntermediateTensorInfo(permutedX);
        }
        return result;
    }
    const sumConfig$1 = {
        kernelName: Sum,
        backendName: 'cpu',
        kernelFunc: sum$1
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function einsum$1(args) {
        const { inputs, backend, attrs } = args;
        const { equation } = attrs;
        const tensors = inputs;
        const { allDims, summedDims, idDims } = decodeEinsumEquation(equation, tensors.length);
        checkEinsumDimSizes(allDims.length, idDims, tensors);
        const { path, steps } = getEinsumComputePath(summedDims, idDims);
        const nSteps = steps.length;
        let out = null;
        let numDimsRemaining = allDims.length;
        const tensorsToDispose = [];
        for (let i = 0; i < nSteps; ++i) {
            for (const idTerm of steps[i]) {
                const { permutationIndices: perm, expandDims: dimsToExpand } = getEinsumPermutation(numDimsRemaining, idDims[idTerm]);
                let x;
                if (isIdentityPermutation(perm)) {
                    x = tensors[idTerm];
                }
                else {
                    x = transpose$1({ inputs: { x: tensors[idTerm] }, backend, attrs: { perm } });
                    tensorsToDispose.push(x);
                }
                const targetShape = x.shape.slice();
                for (let k = 0; k < dimsToExpand.length; ++k) {
                    targetShape.splice(dimsToExpand[k], 0, 1);
                }
                if (!arraysEqual(x.shape, targetShape)) {
                    x = reshape$1({ inputs: { x }, backend, attrs: { shape: targetShape } });
                    tensorsToDispose.push(x);
                }
                if (out === null) {
                    out = x;
                }
                else {
                    // tslint:disable-next-line: no-unnecessary-type-assertion
                    out = multiply$1({ inputs: { a: x, b: out }, backend });
                    tensorsToDispose.push(out);
                }
            }
            if (i < nSteps - 1) {
                if (path[i] >= 0) {
                    out = sum$1({
                        inputs: { x: out },
                        backend,
                        attrs: {
                            axis: path[i] - (allDims.length - numDimsRemaining),
                            keepDims: false
                        }
                    });
                    tensorsToDispose.push(out);
                }
                numDimsRemaining--;
            }
        }
        // Clean up intermediate tensors.
        for (const tensorInfo of tensorsToDispose) {
            if (tensorInfo === out) {
                continue;
            }
            backend.disposeIntermediateTensorInfo(tensorInfo);
        }
        return out;
    }
    const einsumConfig$1 = {
        kernelName: Einsum,
        backendName: 'cpu',
        kernelFunc: einsum$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function eluGrad$1(args) {
        const { inputs, backend } = args;
        const { dy, y } = inputs;
        assertNotComplex$1([dy, y], 'eluGrad');
        const resultValues = new Float32Array(sizeFromShape(y.shape));
        const values = backend.data.get(y.dataId).values;
        const dyValues = backend.data.get(dy.dataId).values;
        for (let i = 0; i < values.length; ++i) {
            const v = values[i];
            if (v >= 1) {
                resultValues[i] = dyValues[i];
            }
            else {
                resultValues[i] = dyValues[i] * (v + 1);
            }
        }
        return backend.makeTensorInfo(y.shape, 'float32', resultValues);
    }
    const eluGradConfig$1 = {
        kernelName: EluGrad,
        backendName: 'cpu',
        kernelFunc: eluGrad$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const p = ERF_P;
    const a1 = ERF_A1;
    const a2 = ERF_A2;
    const a3 = ERF_A3;
    const a4 = ERF_A4;
    const a5 = ERF_A5;
    const erf$1 = unaryKernelFunc$1(Erf, (xi) => {
        const sign = Math.sign(xi);
        const v = Math.abs(xi);
        const t = 1.0 / (1.0 + p * v);
        return sign *
            (1.0 -
                (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *
                    Math.exp(-v * v));
    });
    const erfConfig$1 = {
        kernelName: Erf,
        backendName: 'cpu',
        kernelFunc: erf$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function expandDims$1(args) {
        const { inputs, backend, attrs } = args;
        const { input } = inputs;
        const { dim } = attrs;
        const inputRank = input.shape.length;
        const newShape = input.shape.slice();
        let $dim = dim;
        if (dim < 0) {
            // Negative value is counted from the tail of rank.
            assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);
            $dim = inputRank + dim + 1;
        }
        newShape.splice($dim, 0, 1);
        return reshape$1({ inputs: { x: input }, backend, attrs: { shape: newShape } });
    }
    const expandDimsConfig$1 = {
        kernelName: ExpandDims,
        backendName: 'cpu',
        kernelFunc: expandDims$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const realDivImpl = createSimpleBinaryKernelImpl((a, b) => a / b);
    const div = binaryKernelFunc$1(RealDiv, realDivImpl);
    const realDivConfig$1 = {
        kernelName: RealDiv,
        backendName: 'cpu',
        kernelFunc: div
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Calculate FFT of inner most elements of batch tensor.
     */
    function fftBatch(input, inverse, cpuBackend) {
        const inputShape = input.shape;
        const batch = inputShape[0];
        const innerDim = inputShape[1];
        const inputVals = cpuBackend.data.get(input.dataId);
        const real2D = inputVals.complexTensorInfos.real;
        const imag2D = inputVals.complexTensorInfos.imag;
        // Collects real and imaginary values separately.
        const resultShape = [batch, innerDim];
        const resultSize = sizeFromShape(resultShape);
        const resultReal = getTypedArrayFromDType('float32', resultSize);
        const resultImag = getTypedArrayFromDType('float32', resultSize);
        for (let b = 0; b < batch; b++) {
            // TODO: Support slice ops for complex type.
            const r = slice$1({
                inputs: { x: real2D },
                backend: cpuBackend,
                attrs: { begin: [b, 0], size: [1, innerDim] }
            });
            const i = slice$1({
                inputs: { x: imag2D },
                backend: cpuBackend,
                attrs: { begin: [b, 0], size: [1, innerDim] }
            });
            const input = complex$1({ inputs: { real: r, imag: i }, backend: cpuBackend });
            // Run FFT by batch element.
            const { real, imag } = fftImpl$1(input, inverse, cpuBackend);
            const res = mergeRealAndImagArrays(real, imag);
            for (let d = 0; d < innerDim; d++) {
                const c = getComplexWithIndex(res, d);
                resultReal[b * innerDim + d] = c.real;
                resultImag[b * innerDim + d] = c.imag;
            }
            cpuBackend.disposeIntermediateTensorInfo(r);
            cpuBackend.disposeIntermediateTensorInfo(i);
            cpuBackend.disposeIntermediateTensorInfo(input);
        }
        const $realInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);
        const $imagInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);
        const result = complex$1({ inputs: { real: $realInfo, imag: $imagInfo }, backend: cpuBackend });
        cpuBackend.disposeIntermediateTensorInfo($realInfo);
        cpuBackend.disposeIntermediateTensorInfo($imagInfo);
        return result;
    }
    function fftImpl$1(input, inverse, cpuBackend) {
        const inputSize = sizeFromShape(input.shape);
        const inputVals = cpuBackend.data.get(input.dataId);
        const realVals = cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values;
        const imagVals = cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values;
        if (isExponentOf2(inputSize)) {
            const result = fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);
            const resultShape = [input.shape[0], input.shape[1]];
            if (inverse) {
                const realInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);
                const imagInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);
                const sizeInfo = cpuBackend.makeTensorInfo([], 'float32', createScalarValue(inputSize, 'float32'));
                const sizeInfoCopy = identity$1({ inputs: { x: sizeInfo }, backend: cpuBackend });
                const divRealInfo = realDivConfig$1.kernelFunc({ inputs: { a: realInfo, b: sizeInfo }, backend: cpuBackend });
                const divImagInfo = realDivConfig$1.kernelFunc({ inputs: { a: imagInfo, b: sizeInfoCopy }, backend: cpuBackend });
                const divRealVals = cpuBackend.data.get(divRealInfo.dataId).values;
                const divImagVals = cpuBackend.data.get(divImagInfo.dataId).values;
                cpuBackend.disposeIntermediateTensorInfo(realInfo);
                cpuBackend.disposeIntermediateTensorInfo(imagInfo);
                cpuBackend.disposeIntermediateTensorInfo(sizeInfo);
                cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);
                cpuBackend.disposeIntermediateTensorInfo(divRealInfo);
                cpuBackend.disposeIntermediateTensorInfo(divImagInfo);
                return { real: divRealVals, imag: divImagVals };
            }
            return result;
        }
        else {
            const data = mergeRealAndImagArrays(realVals, imagVals);
            const rawOutput = fourierTransformByMatmul(data, inputSize, inverse);
            return splitRealAndImagArrays(rawOutput);
        }
    }
    function isExponentOf2(size) {
        return (size & size - 1) === 0;
    }
    // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.
    function fftRadix2(realVals, imagVals, size, inverse, cpuBackend) {
        if (size === 1) {
            return { real: realVals, imag: imagVals };
        }
        const data = mergeRealAndImagArrays(realVals, imagVals);
        const half = size / 2;
        const evenComplex = complexWithEvenIndex(data);
        const evenRealVals = evenComplex.real;
        const evenImagVals = evenComplex.imag;
        const evenShape = [evenRealVals.length];
        const evenRealInfo = cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);
        const evenImagInfo = cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);
        const evenTensorInfo = complex$1({ inputs: { real: evenRealInfo, imag: evenImagInfo }, backend: cpuBackend });
        const oddComplex = complexWithOddIndex(data);
        const oddRealVals = oddComplex.real;
        const oddImagVals = oddComplex.imag;
        const oddShape = [oddRealVals.length];
        const oddRealInfo = cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);
        const oddImagInfo = cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);
        const oddTensorInfo = complex$1({ inputs: { real: oddRealInfo, imag: oddImagInfo }, backend: cpuBackend });
        // Recursive call for half part of original input.
        const $evenComplex = fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);
        const $evenRealVals = $evenComplex.real;
        const $evenImagVals = $evenComplex.imag;
        const $evenShape = [$evenRealVals.length];
        const $evenRealInfo = cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);
        const $evenImagInfo = cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);
        const $evenTensorInfo = complex$1({
            inputs: { real: $evenRealInfo, imag: $evenImagInfo },
            backend: cpuBackend
        });
        const $oddComplex = fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);
        const $oddRealVals = $oddComplex.real;
        const $oddImagVals = $oddComplex.imag;
        const $oddShape = [$oddRealVals.length];
        const $oddRealInfo = cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);
        const $oddImagInfo = cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);
        const $oddTensorInfo = complex$1({ inputs: { real: $oddRealInfo, imag: $oddImagInfo }, backend: cpuBackend });
        const e = exponents(size, inverse);
        const eShape = [e.real.length];
        const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);
        const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);
        const complexInfo = complex$1({ inputs: { real: eRealInfo, imag: eImagInfo }, backend: cpuBackend });
        const exponentInfo = multiply$1({ inputs: { a: complexInfo, b: $oddTensorInfo }, backend: cpuBackend });
        const addPart = add({
            inputs: { a: $evenTensorInfo, b: exponentInfo },
            backend: cpuBackend
        });
        const subPart = sub$1({
            inputs: { a: $evenTensorInfo, b: exponentInfo },
            backend: cpuBackend
        });
        const addPartReal = real$1({ inputs: { input: addPart }, backend: cpuBackend });
        const subPartReal = real$1({ inputs: { input: subPart }, backend: cpuBackend });
        const addPartImag = imag$1({ inputs: { input: addPart }, backend: cpuBackend });
        const subPartImag = imag$1({ inputs: { input: subPart }, backend: cpuBackend });
        const $real = concat$1({
            inputs: [addPartReal, subPartReal],
            backend: cpuBackend,
            attrs: { axis: 0 }
        });
        const $imag = concat$1({
            inputs: [addPartImag, subPartImag],
            backend: cpuBackend,
            attrs: { axis: 0 }
        });
        const $realVals = cpuBackend.data.get($real.dataId).values;
        const $imagVals = cpuBackend.data.get($imag.dataId).values;
        cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);
        cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);
        cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);
        cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);
        cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);
        cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);
        cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);
        cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);
        cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);
        cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);
        cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);
        cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);
        cpuBackend.disposeIntermediateTensorInfo(eRealInfo);
        cpuBackend.disposeIntermediateTensorInfo(eImagInfo);
        cpuBackend.disposeIntermediateTensorInfo(complexInfo);
        cpuBackend.disposeIntermediateTensorInfo(exponentInfo);
        cpuBackend.disposeIntermediateTensorInfo(addPart);
        cpuBackend.disposeIntermediateTensorInfo(subPart);
        cpuBackend.disposeIntermediateTensorInfo(addPartReal);
        cpuBackend.disposeIntermediateTensorInfo(addPartImag);
        cpuBackend.disposeIntermediateTensorInfo(subPartReal);
        cpuBackend.disposeIntermediateTensorInfo(subPartImag);
        cpuBackend.disposeIntermediateTensorInfo($real);
        cpuBackend.disposeIntermediateTensorInfo($imag);
        return { real: $realVals, imag: $imagVals };
    }
    // Calculate fourier transform by multplying sinusoid matrix.
    function fourierTransformByMatmul(data, size, inverse) {
        const ret = new Float32Array(size * 2);
        // TODO: Use matmul instead once it supports complex64 type.
        for (let r = 0; r < size; r++) {
            let real = 0.0;
            let imag = 0.0;
            for (let c = 0; c < size; c++) {
                const e = exponent(r * c, size, inverse);
                const term = getComplexWithIndex(data, c);
                real += term.real * e.real - term.imag * e.imag;
                imag += term.real * e.imag + term.imag * e.real;
            }
            if (inverse) {
                real /= size;
                imag /= size;
            }
            assignToTypedArray(ret, real, imag, r);
        }
        return ret;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function fft$1(args) {
        const { inputs, backend } = args;
        const { input } = inputs;
        const inputSize = sizeFromShape(input.shape);
        // Collapse all outer dimensions to a single batch dimension.
        const innerDimensionSize = input.shape[input.shape.length - 1];
        const batch = inputSize / innerDimensionSize;
        const input2D = reshape$1({
            inputs: { x: input },
            backend,
            attrs: { shape: [batch, innerDimensionSize] }
        });
        const result = fftBatch(input2D, false, backend);
        const resultReshaped = reshape$1({ inputs: { x: result }, backend, attrs: { shape: input.shape } });
        backend.disposeIntermediateTensorInfo(input2D);
        backend.disposeIntermediateTensorInfo(result);
        return resultReshaped;
    }
    const fftConfig$1 = {
        kernelName: FFT,
        backendName: 'cpu',
        kernelFunc: fft$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function fill$1(args) {
        const { backend, attrs } = args;
        const { shape, value, dtype } = attrs;
        const $dtype = dtype || inferDtype(value);
        const values = getArrayFromDType($dtype, sizeFromShape(shape));
        fillValues(values, value, $dtype);
        return backend.makeTensorInfo(shape, $dtype, values);
    }
    const fillConfig$1 = {
        kernelName: Fill,
        backendName: 'cpu',
        kernelFunc: fill$1
    };
    function fillValues(values, value, dtype) {
        if (dtype === 'string') {
            values.fill(value);
        }
        else {
            values.fill(value);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const flipLeftRightConfig$1 = {
        kernelName: FlipLeftRight,
        backendName: 'cpu',
        kernelFunc: ({ inputs, attrs, backend }) => {
            const { image } = inputs;
            const cpuBackend = backend;
            const output = getTypedArrayFromDType(image.dtype, sizeFromShape(image.shape));
            const [batch, imageHeight, imageWidth, numChannels] = image.shape;
            const imageVals = cpuBackend.data.get(image.dataId).values;
            for (let batchIdx = 0; batchIdx < batch; batchIdx++) {
                const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;
                for (let row = 0; row < imageHeight; row++) {
                    const rowOffset = row * (imageWidth * numChannels);
                    for (let col = 0; col < imageWidth; col++) {
                        const colOffset = col * numChannels;
                        for (let channel = 0; channel < numChannels; channel++) {
                            const coordX = Math.round(imageWidth - col - 1);
                            const outIdx = batchOffset + rowOffset + colOffset + channel;
                            let outputValue = imageVals[outIdx];
                            // If the coordinate position falls within the image boundaries...
                            if (coordX >= 0 && coordX < imageWidth) {
                                // set the output to the image value at the coordinate position.
                                const rotatedColOffset = coordX * numChannels;
                                const imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;
                                outputValue = imageVals[imageIdx];
                            }
                            output[outIdx] = outputValue;
                        }
                    }
                }
            }
            const dataId = cpuBackend.write(output, image.shape, image.dtype);
            return { dataId, shape: image.shape, dtype: image.dtype };
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const floorDivImpl = createSimpleBinaryKernelImpl((a, b) => Math.floor(a / b));
    const floorDiv$1 = binaryKernelFunc$1(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');
    const floorDivConfig$1 = {
        kernelName: FloorDiv,
        backendName: 'cpu',
        kernelFunc: floorDiv$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function fusedConv2D(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter, bias, preluActivationWeights } = inputs;
        const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;
        let result = conv2D({
            inputs: { x, filter },
            backend,
            attrs: { strides, pad, dataFormat, dilations, dimRoundingMode }
        });
        if (bias) {
            const resultOld = result;
            result = add({ inputs: { a: result, b: bias }, backend });
            backend.disposeIntermediateTensorInfo(resultOld);
        }
        if (activation) {
            const resultOld = result;
            result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);
            backend.disposeIntermediateTensorInfo(resultOld);
        }
        return result;
    }
    const fusedConv2DConfig$1 = {
        kernelName: FusedConv2D,
        backendName: 'cpu',
        kernelFunc: fusedConv2D
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function fusedDepthwiseConv2D$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter, bias, preluActivationWeights } = inputs;
        const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;
        let result = depthwiseConv2dNative$1({
            inputs: { x, filter },
            backend,
            attrs: { strides, pad, dataFormat, dilations, dimRoundingMode }
        });
        if (bias) {
            const oldResult = result;
            result = add({ inputs: { a: result, b: bias }, backend });
            backend.disposeIntermediateTensorInfo(oldResult);
        }
        if (activation) {
            const oldResult = result;
            result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);
            backend.disposeIntermediateTensorInfo(oldResult);
        }
        return result;
    }
    const fusedDepthwiseConv2DConfig$1 = {
        kernelName: FusedDepthwiseConv2D,
        backendName: 'cpu',
        kernelFunc: fusedDepthwiseConv2D$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function gatherNd$1(args) {
        const { inputs, backend } = args;
        const { params, indices } = inputs;
        const paramsSize = sizeFromShape(params.shape);
        const indicesShape = indices.shape;
        const sliceRank = indicesShape[indicesShape.length - 1];
        const [resultShape, numSlices, sliceSize, strides] = prepareAndValidate(params, indices);
        if (numSlices === 0) {
            return backend.makeTensorInfo(resultShape, params.dtype, []);
        }
        const indicesData = backend.data.get(indices.dataId).values;
        const paramsBuf = backend.bufferSync(params);
        const outBuf = gatherNdImpl(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);
        return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);
    }
    const gatherNdConfig$1 = {
        kernelName: GatherNd,
        backendName: 'cpu',
        kernelFunc: gatherNd$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function gatherV2$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, indices } = inputs;
        const { axis, batchDims } = attrs;
        assertNotComplex$1([x, indices], 'gatherV2');
        // Throw error when any index is out of bound.
        const parsedAxis = parseAxisParam(axis, x.shape)[0];
        const indicesVals = backend.data.get(indices.dataId).values;
        const axisDim = x.shape[parsedAxis];
        for (let i = 0; i < indicesVals.length; ++i) {
            const index = indicesVals[i];
            assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);
        }
        let $batchDims = batchDims;
        if (batchDims == null) {
            $batchDims = 0;
        }
        const indicesSize = sizeFromShape(indices.shape);
        const shapeInfo = collectGatherOpShapeInfo(x, indices, parsedAxis, $batchDims);
        const flattenX = reshape$1({
            inputs: { x },
            backend,
            attrs: {
                shape: [
                    shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,
                    shapeInfo.sliceSize
                ]
            }
        });
        const flattenIndex = reshape$1({
            inputs: { x: indices },
            backend,
            attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }
        });
        const flattenOutputShape = [
            shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,
            shapeInfo.sliceSize
        ];
        const indicesBuf = backend.bufferSync(flattenIndex);
        const xBuf = backend.bufferSync(flattenX);
        const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);
        backend.disposeIntermediateTensorInfo(flattenX);
        backend.disposeIntermediateTensorInfo(flattenIndex);
        return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);
    }
    const gatherV2Config$1 = {
        kernelName: GatherV2,
        backendName: 'cpu',
        kernelFunc: gatherV2$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function ifft$1(args) {
        const { inputs, backend } = args;
        const { input } = inputs;
        const inputSize = sizeFromShape(input.shape);
        // Collapse all outer dimensions to a single batch dimension.
        const innerDimensionSize = input.shape[input.shape.length - 1];
        const batch = inputSize / innerDimensionSize;
        const input2D = reshape$1({
            inputs: { x: input },
            backend,
            attrs: { shape: [batch, innerDimensionSize] }
        });
        const result = fftBatch(input2D, true, backend);
        const resultReshaped = reshape$1({ inputs: { x: result }, backend, attrs: { shape: input.shape } });
        backend.disposeIntermediateTensorInfo(input2D);
        backend.disposeIntermediateTensorInfo(result);
        return resultReshaped;
    }
    const ifftConfig$1 = {
        kernelName: IFFT,
        backendName: 'cpu',
        kernelFunc: ifft$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const isFinite$2 = unaryKernelFunc$1(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');
    const isFiniteConfig$1 = {
        kernelName: IsFinite,
        backendName: 'cpu',
        kernelFunc: isFinite$2,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const isInf$1 = unaryKernelFunc$1(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');
    const isInfConfig$1 = {
        kernelName: IsInf,
        backendName: 'cpu',
        kernelFunc: isInf$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const isNaN$2 = unaryKernelFunc$1(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');
    const isNaNConfig$1 = {
        kernelName: IsNan,
        backendName: 'cpu',
        kernelFunc: isNaN$2,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function linSpace$1(args) {
        const { backend, attrs } = args;
        const { start, stop, num } = attrs;
        const outVals = linSpaceImpl(start, stop, num);
        return backend.makeTensorInfo([outVals.length], 'float32', outVals);
    }
    const linSpaceConfig$1 = {
        kernelName: LinSpace,
        backendName: 'cpu',
        kernelFunc: linSpace$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const log1p$1 = unaryKernelFunc$1(Log1p, (xi) => Math.log1p(xi));
    const log1pConfig$1 = {
        kernelName: Log1p,
        backendName: 'cpu',
        kernelFunc: log1p$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const logicalAndImpl = createSimpleBinaryKernelImpl((a, b) => a && b);
    const logicalAnd$1 = binaryKernelFunc$1(LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');
    const logicalAndConfig$1 = {
        kernelName: LogicalAnd,
        backendName: 'cpu',
        kernelFunc: logicalAnd$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const logicalNot$1 = unaryKernelFunc$1(LogicalNot, (xi) => xi ? 0 : 1, 'bool');
    const logicalNotConfig$1 = {
        kernelName: LogicalNot,
        backendName: 'cpu',
        kernelFunc: logicalNot$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const logicalOrImpl = createSimpleBinaryKernelImpl((a, b) => a || b);
    const logicalOr$1 = binaryKernelFunc$1(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');
    const logicalOrConfig$1 = {
        kernelName: LogicalOr,
        backendName: 'cpu',
        kernelFunc: logicalOr$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function lRN(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { depthRadius, bias, alpha, beta } = attrs;
        assertNotComplex$1(x, 'LRN');
        const channels = x.shape[3];
        const maxD = channels - 1;
        const xValues = backend.data.get(x.dataId).values;
        const size = sizeFromShape(x.shape);
        const result = new Float32Array(size);
        function sumAcrossChannels(offset) {
            const currentChannel = offset % channels;
            let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);
            const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);
            let sum = 0.0;
            for (; beginSumOffset <= endSumOffset; beginSumOffset++) {
                const z = xValues[beginSumOffset];
                sum += z * z;
            }
            return sum;
        }
        for (let offset = 0; offset < size; offset++) {
            const sum = sumAcrossChannels(offset);
            const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);
            result[offset] = val;
        }
        return backend.makeTensorInfo(x.shape, x.dtype, result);
    }
    // tslint:disable-next-line: variable-name
    const LRNConfig$1 = {
        kernelName: LRN,
        backendName: 'cpu',
        kernelFunc: lRN
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function lRNGrad(args) {
        const { inputs, backend, attrs } = args;
        const { x, y, dy } = inputs;
        const { depthRadius, bias, alpha, beta } = attrs;
        assertNotComplex$1(dy, 'LRNGrad');
        const dySize = sizeFromShape(dy.shape);
        const channels = dy.shape[3];
        const dyValues = backend.data.get(dy.dataId).values;
        const xValues = backend.data.get(x.dataId).values;
        const yValues = backend.data.get(y.dataId).values;
        const result = new Float32Array(dySize);
        const size = dySize;
        for (let offset = 0; offset < size; offset++) {
            const currentChannel = offset % channels;
            const depthBegin = (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);
            const depthEnd = (offset - currentChannel) +
                Math.min(channels, currentChannel + depthRadius + 1);
            let norm = 0;
            for (let k = depthBegin; k < depthEnd; k++) {
                norm += Math.pow(xValues[k], 2);
            }
            norm = alpha * norm + bias;
            for (let k = depthBegin; k < depthEnd; k++) {
                let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;
                if (offset === k) {
                    dyi += Math.pow(norm, -beta);
                }
                dyi *= dyValues[offset];
                result[k] += dyi;
            }
        }
        return backend.makeTensorInfo(dy.shape, x.dtype, result);
    }
    // tslint:disable-next-line: variable-name
    const LRNGradConfig$1 = {
        kernelName: LRNGrad,
        backendName: 'cpu',
        kernelFunc: lRNGrad
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function max$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { reductionIndices, keepDims } = attrs;
        const cpuBackend = backend;
        let xShape = x.shape;
        const xRank = xShape.length;
        const origAxes = parseAxisParam(reductionIndices, xShape);
        let axes = origAxes;
        const permutedAxes = getAxesPermutation(axes, xRank);
        let xVals = cpuBackend.data.get(x.dataId).values;
        if (permutedAxes != null) {
            const newShape = new Array(xRank);
            for (let i = 0; i < newShape.length; i++) {
                newShape[i] = xShape[permutedAxes[i]];
            }
            xVals = transposeImpl$1(xVals, xShape, x.dtype, permutedAxes, newShape);
            axes = getInnerMostAxes(axes.length, xRank);
            xShape = newShape;
        }
        assertNotComplex$1(x, 'max');
        assertAxesAreInnerMostDims('max', axes, xRank);
        const [maxOutShape, reduceShape] = computeOutAndReduceShapes(xShape, axes);
        const reduceSize = sizeFromShape(reduceShape);
        const result = maxImpl$1(xVals, reduceSize, maxOutShape, x.dtype);
        const dataId = cpuBackend.write(result, maxOutShape, x.dtype);
        let outShape = maxOutShape;
        if (keepDims) {
            // reshape
            const newShape = expandShapeToKeepDim(maxOutShape, origAxes);
            outShape = newShape;
        }
        return { dataId, shape: outShape, dtype: x.dtype };
    }
    const maxConfig$1 = {
        kernelName: Max,
        backendName: 'cpu',
        kernelFunc: max$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxPool$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        assertNotComplex$1(x, 'maxPool');
        const { filterSize, strides, pad, dimRoundingMode } = attrs;
        const dilations = 1;
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +
            `Got strides ${strides} and dilations '${dilations}'`);
        const convInfo = computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
        let res;
        if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&
            arraysEqual(convInfo.inShape, convInfo.outShape)) {
            res = identity$1({ inputs: { x }, backend });
        }
        else {
            const xValues = backend.data.get(x.dataId).values;
            const strides = computeStrides(x.shape);
            const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');
            res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);
        }
        return res;
    }
    const maxPoolConfig$1 = {
        kernelName: MaxPool,
        backendName: 'cpu',
        kernelFunc: maxPool$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxPool3D(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;
        assertNotComplex$1(x, 'maxPool3d');
        const convInfo = computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode, dataFormat);
        const xValues = backend.data.get(x.dataId).values;
        const outBuf = pool3d(xValues, x.shape, x.dtype, computeStrides(x.shape), convInfo, 'max');
        return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);
    }
    const maxPool3DConfig$1 = {
        kernelName: MaxPool3D,
        backendName: 'cpu',
        kernelFunc: maxPool3D
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxPool3DGrad$1(args) {
        const { inputs, backend, attrs } = args;
        const { dy, input } = inputs;
        const { filterSize, strides, pad, dimRoundingMode } = attrs;
        assertNotComplex$1([dy, input], 'maxPool3DGrad');
        const convInfo = computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
        const inputBuf = backend.bufferSync(input);
        const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);
        const strideDepth = convInfo.strideDepth;
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationDepth = convInfo.dilationDepth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterDepth = convInfo.effectiveFilterDepth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const dx = buffer(input.shape, 'float32');
        const dyBuf = backend.bufferSync(dy);
        for (let batch = 0; batch < convInfo.batchSize; ++batch) {
            for (let channel = 0; channel < convInfo.inChannels; ++channel) {
                for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {
                    for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {
                        for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {
                            // Shader code begins
                            const dyDepthCorner = dxDepth - padFront;
                            const dyRowCorner = dxRow - padTop;
                            const dyColCorner = dxCol - padLeft;
                            let dotProd = 0;
                            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {
                                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;
                                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||
                                    Math.floor(dyDepth) !== dyDepth) {
                                    continue;
                                }
                                for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {
                                    const dyRow = (dyRowCorner + wRow) / strideHeight;
                                    if (dyRow < 0 || dyRow >= convInfo.outHeight ||
                                        Math.floor(dyRow) !== dyRow) {
                                        continue;
                                    }
                                    for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {
                                        const dyCol = (dyColCorner + wCol) / strideWidth;
                                        if (dyCol < 0 || dyCol >= convInfo.outWidth ||
                                            Math.floor(dyCol) !== dyCol) {
                                            continue;
                                        }
                                        const maxPos = effectiveFilterDepth * effectiveFilterHeight *
                                            effectiveFilterWidth -
                                            1 -
                                            maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                                        const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth +
                                            wRow * effectiveFilterWidth + wCol;
                                        const mask = maxPos === curPos ? 1 : 0;
                                        if (mask === 0) {
                                            continue;
                                        }
                                        const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                                        dotProd += pixel * mask;
                                    }
                                }
                            }
                            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);
                        }
                    }
                }
            }
        }
        return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
    }
    const maxPool3DGradConfig$1 = {
        kernelName: MaxPool3DGrad,
        backendName: 'cpu',
        kernelFunc: maxPool3DGrad$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxPoolGrad$1(args) {
        const { inputs, backend, attrs } = args;
        const { dy, input, output } = inputs;
        const x = input;
        assertNotComplex$1([input, output], 'maxPoolGrad');
        const { filterSize, strides, pad, dimRoundingMode } = attrs;
        const convInfo = computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
        const xValues = backend.data.get(x.dataId).values;
        const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);
        const strideHeight = convInfo.strideHeight;
        const strideWidth = convInfo.strideWidth;
        const dilationHeight = convInfo.dilationHeight;
        const dilationWidth = convInfo.dilationWidth;
        const effectiveFilterHeight = convInfo.effectiveFilterHeight;
        const effectiveFilterWidth = convInfo.effectiveFilterWidth;
        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
        const dx = buffer(x.shape, 'float32');
        const dyData = backend.data.get(dy.dataId).values;
        const dyBuf = buffer(dy.shape, 'float32', dyData);
        for (let b = 0; b < convInfo.batchSize; ++b) {
            for (let d = 0; d < convInfo.inChannels; ++d) {
                for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {
                    for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {
                        // Shader code begins.
                        const dyRCorner = dxR - padTop;
                        const dyCCorner = dxC - padLeft;
                        let dotProd = 0;
                        for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {
                            const dyR = (dyRCorner + wR) / strideHeight;
                            if (dyR < 0 || dyR >= convInfo.outHeight ||
                                Math.floor(dyR) !== dyR) {
                                continue;
                            }
                            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {
                                const dyC = (dyCCorner + wC) / strideWidth;
                                if (dyC < 0 || dyC >= convInfo.outWidth ||
                                    Math.floor(dyC) !== dyC) {
                                    continue;
                                }
                                const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -
                                    maxPosBuf.get(b, dyR, dyC, d);
                                const curPos = wR * effectiveFilterWidth + wC;
                                const mask = maxPos === curPos ? 1 : 0;
                                if (mask === 0) {
                                    continue;
                                }
                                const pixel = dyBuf.get(b, dyR, dyC, d);
                                dotProd += pixel * mask;
                            }
                        }
                        dx.set(dotProd, b, dxR, dxC, d);
                    }
                }
            }
        }
        return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
    }
    const maxPoolGradConfig$1 = {
        kernelName: MaxPoolGrad,
        backendName: 'cpu',
        kernelFunc: maxPoolGrad$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxPoolWithArgmaxImpl$1(xValues, xShape, dtype, includeBatchInIndex, convInfo) {
        const strides = computeStrides(xShape);
        const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');
        const maxPositions = maxPoolPositions(xValues, xShape, dtype, convInfo, true, includeBatchInIndex);
        return [maxPools.values, maxPositions.values];
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const maxPoolWithArgmaxConfig$1 = {
        kernelName: MaxPoolWithArgmax,
        backendName: 'cpu',
        kernelFunc: ({ inputs, attrs, backend }) => {
            const { x } = inputs;
            const { filterSize, strides, pad, includeBatchInIndex } = attrs;
            const cpuBackend = backend;
            assertNotComplex$1(x, 'MaxPoolWithArgmax');
            const values = cpuBackend.data.get(x.dataId).values;
            const convInfo = computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);
            const [pooled, indexes] = maxPoolWithArgmaxImpl$1(values, x.shape, x.dtype, includeBatchInIndex, convInfo);
            const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);
            const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);
            return [
                { dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype },
                { dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32' }
            ];
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function mean(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        const axes = parseAxisParam(axis, x.shape);
        const shapes = computeOutAndReduceShapes(x.shape, axes);
        const reduceShape = shapes[1];
        const reduceSize = sizeFromShape(reduceShape);
        const toDispose = [];
        const reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));
        toDispose.push(reduceSizeScalar);
        const $x = cast$1({ inputs: { x }, backend, attrs: { dtype: 'float32' } });
        toDispose.push($x);
        const res = div({ inputs: { a: $x, b: reduceSizeScalar }, backend });
        toDispose.push(res);
        const result = sum$1({ inputs: { x: res }, backend, attrs: { axis, keepDims } });
        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return result;
    }
    const meanConfig$1 = {
        kernelName: Mean,
        backendName: 'cpu',
        kernelFunc: mean
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function min$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        assertNotComplex$1(x, 'min');
        const origAxes = parseAxisParam(axis, x.shape);
        let axes = origAxes;
        const permutedAxes = getAxesPermutation(axes, x.shape.length);
        let $x = x;
        if (permutedAxes != null) {
            $x = transpose$1({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            axes = getInnerMostAxes(axes.length, x.shape.length);
        }
        assertAxesAreInnerMostDims('min', axes, $x.shape.length);
        const [outShape, reduceShape] = computeOutAndReduceShapes($x.shape, axes);
        const reduceSize = sizeFromShape(reduceShape);
        const vals = makeZerosTypedArray(sizeFromShape(outShape), $x.dtype);
        const aVals = backend.data.get($x.dataId).values;
        for (let i = 0; i < vals.length; ++i) {
            const offset = i * reduceSize;
            let min = aVals[offset];
            for (let j = 0; j < reduceSize; ++j) {
                const value = aVals[offset + j];
                if (Number.isNaN(value) ||
                    value < min) { // comparison with NaN always return false
                    min = value;
                }
            }
            vals[i] = min;
        }
        if (permutedAxes != null) {
            backend.disposeIntermediateTensorInfo($x);
        }
        const result = backend.makeTensorInfo(outShape, $x.dtype, vals);
        if (keepDims) {
            const expandedShape = expandShapeToKeepDim(outShape, origAxes);
            const reshapedResult = reshape$1({ inputs: { x: result }, backend, attrs: { shape: expandedShape } });
            backend.disposeIntermediateTensorInfo(result);
            return reshapedResult;
        }
        return result;
    }
    const minConfig$1 = {
        kernelName: Min,
        backendName: 'cpu',
        kernelFunc: min$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function mirrorPad(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { paddings, mode } = attrs;
        assertNotComplex$1(x, 'mirrorPad');
        const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);
        const start = paddings.map(p => p[0]);
        const end = paddings.map((p, i) => p[0] + x.shape[i]);
        const offset = mode === 'reflect' ? 0 : 1;
        const xVals = backend.data.get(x.dataId).values;
        const xRank = x.shape.length;
        const xStrides = computeStrides(x.shape);
        const resultSize = sizeFromShape(outShape);
        const resultRank = outShape.length;
        const resultStrides = computeStrides(outShape);
        const resVals = getTypedArrayFromDType(x.dtype, resultSize);
        for (let i = 0; i < resultSize; i++) {
            let coords = indexToLoc(i, resultRank, resultStrides);
            for (let i = 0; i < resultRank; i++) {
                if (coords[i] < start[i]) {
                    coords[i] = start[i] * 2 - coords[i] - offset;
                }
                else if (coords[i] >= end[i]) {
                    coords[i] = (end[i] - 1) * 2 - coords[i] + offset;
                }
            }
            coords = coords.map((c, i) => c - start[i]);
            const inIndex = locToIndex(coords, xRank, xStrides);
            resVals[i] = xVals[inIndex];
        }
        const outId = backend.write(resVals, outShape, x.dtype);
        return { dataId: outId, shape: outShape, dtype: x.dtype };
    }
    const mirrorPadConfig$1 = {
        kernelName: MirrorPad,
        backendName: 'cpu',
        kernelFunc: mirrorPad
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const modImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => {
        const rem = aValue % bValue;
        if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {
            return rem;
        }
        else {
            return (rem + bValue) % bValue;
        }
    }));
    const mod$1 = binaryKernelFunc$1(Mod, modImpl);
    const modConfig$1 = {
        kernelName: Mod,
        backendName: 'cpu',
        kernelFunc: mod$1
    };

    var alea$1 = {exports: {}};

    (function (module) {
    // A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
    // http://baagoe.com/en/RandomMusings/javascript/
    // https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
    // Original work is under MIT license -

    // Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal
    // in the Software without restriction, including without limitation the rights
    // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    // copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    // 
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    // 
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    // THE SOFTWARE.



    (function(global, module, define) {

    function Alea(seed) {
      var me = this, mash = Mash();

      me.next = function() {
        var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
        me.s0 = me.s1;
        me.s1 = me.s2;
        return me.s2 = t - (me.c = t | 0);
      };

      // Apply the seeding algorithm from Baagoe.
      me.c = 1;
      me.s0 = mash(' ');
      me.s1 = mash(' ');
      me.s2 = mash(' ');
      me.s0 -= mash(seed);
      if (me.s0 < 0) { me.s0 += 1; }
      me.s1 -= mash(seed);
      if (me.s1 < 0) { me.s1 += 1; }
      me.s2 -= mash(seed);
      if (me.s2 < 0) { me.s2 += 1; }
      mash = null;
    }

    function copy(f, t) {
      t.c = f.c;
      t.s0 = f.s0;
      t.s1 = f.s1;
      t.s2 = f.s2;
      return t;
    }

    function impl(seed, opts) {
      var xg = new Alea(seed),
          state = opts && opts.state,
          prng = xg.next;
      prng.int32 = function() { return (xg.next() * 0x100000000) | 0; };
      prng.double = function() {
        return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
      };
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    function Mash() {
      var n = 0xefc8249d;

      var mash = function(data) {
        data = data.toString();
        for (var i = 0; i < data.length; i++) {
          n += data.charCodeAt(i);
          var h = 0.02519603282416938 * n;
          n = h >>> 0;
          h -= n;
          h *= n;
          n = h >>> 0;
          h -= n;
          n += h * 0x100000000; // 2^32
        }
        return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
      };

      return mash;
    }


    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.alea = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(alea$1));

    var xor128$1 = {exports: {}};

    (function (module) {
    // A Javascript implementaion of the "xor128" prng algorithm by
    // George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this, strseed = '';

      me.x = 0;
      me.y = 0;
      me.z = 0;
      me.w = 0;

      // Set up generator function.
      me.next = function() {
        var t = me.x ^ (me.x << 11);
        me.x = me.y;
        me.y = me.z;
        me.z = me.w;
        return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
      };

      if (seed === (seed | 0)) {
        // Integer seed.
        me.x = seed;
      } else {
        // String seed.
        strseed += seed;
      }

      // Mix in string seed, then discard an initial batch of 64 values.
      for (var k = 0; k < strseed.length + 64; k++) {
        me.x ^= strseed.charCodeAt(k) | 0;
        me.next();
      }
    }

    function copy(f, t) {
      t.x = f.x;
      t.y = f.y;
      t.z = f.z;
      t.w = f.w;
      return t;
    }

    function impl(seed, opts) {
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xor128 = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(xor128$1));

    var xorwow$1 = {exports: {}};

    (function (module) {
    // A Javascript implementaion of the "xorwow" prng algorithm by
    // George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this, strseed = '';

      // Set up generator function.
      me.next = function() {
        var t = (me.x ^ (me.x >>> 2));
        me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
        return (me.d = (me.d + 362437 | 0)) +
           (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
      };

      me.x = 0;
      me.y = 0;
      me.z = 0;
      me.w = 0;
      me.v = 0;

      if (seed === (seed | 0)) {
        // Integer seed.
        me.x = seed;
      } else {
        // String seed.
        strseed += seed;
      }

      // Mix in string seed, then discard an initial batch of 64 values.
      for (var k = 0; k < strseed.length + 64; k++) {
        me.x ^= strseed.charCodeAt(k) | 0;
        if (k == strseed.length) {
          me.d = me.x << 10 ^ me.x >>> 4;
        }
        me.next();
      }
    }

    function copy(f, t) {
      t.x = f.x;
      t.y = f.y;
      t.z = f.z;
      t.w = f.w;
      t.v = f.v;
      t.d = f.d;
      return t;
    }

    function impl(seed, opts) {
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xorwow = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(xorwow$1));

    var xorshift7$1 = {exports: {}};

    (function (module) {
    // A Javascript implementaion of the "xorshift7" algorithm by
    // François Panneton and Pierre L'ecuyer:
    // "On the Xorgshift Random Number Generators"
    // http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this;

      // Set up generator function.
      me.next = function() {
        // Update xor generator.
        var X = me.x, i = me.i, t, v;
        t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
        t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
        t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
        t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
        t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
        X[i] = v;
        me.i = (i + 1) & 7;
        return v;
      };

      function init(me, seed) {
        var j, X = [];

        if (seed === (seed | 0)) {
          // Seed state array using a 32-bit integer.
          X[0] = seed;
        } else {
          // Seed state using a string.
          seed = '' + seed;
          for (j = 0; j < seed.length; ++j) {
            X[j & 7] = (X[j & 7] << 15) ^
                (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
          }
        }
        // Enforce an array length of 8, not all zeroes.
        while (X.length < 8) X.push(0);
        for (j = 0; j < 8 && X[j] === 0; ++j);
        if (j == 8) X[7] = -1;

        me.x = X;
        me.i = 0;

        // Discard an initial 256 values.
        for (j = 256; j > 0; --j) {
          me.next();
        }
      }

      init(me, seed);
    }

    function copy(f, t) {
      t.x = f.x.slice();
      t.i = f.i;
      return t;
    }

    function impl(seed, opts) {
      if (seed == null) seed = +(new Date);
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (state.x) copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xorshift7 = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(xorshift7$1));

    var xor4096$1 = {exports: {}};

    (function (module) {
    // A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
    //
    // This fast non-cryptographic random number generator is designed for
    // use in Monte-Carlo algorithms. It combines a long-period xorshift
    // generator with a Weyl generator, and it passes all common batteries
    // of stasticial tests for randomness while consuming only a few nanoseconds
    // for each prng generated.  For background on the generator, see Brent's
    // paper: "Some long-period random number generators using shifts and xors."
    // http://arxiv.org/pdf/1004.3115v1.pdf
    //
    // Usage:
    //
    // var xor4096 = require('xor4096');
    // random = xor4096(1);                        // Seed with int32 or string.
    // assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
    // assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
    //
    // For nonzero numeric keys, this impelementation provides a sequence
    // identical to that by Brent's xorgens 3 implementaion in C.  This
    // implementation also provides for initalizing the generator with
    // string seeds, or for saving and restoring the state of the generator.
    //
    // On Chrome, this prng benchmarks about 2.1 times slower than
    // Javascript's built-in Math.random().

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this;

      // Set up generator function.
      me.next = function() {
        var w = me.w,
            X = me.X, i = me.i, t, v;
        // Update Weyl generator.
        me.w = w = (w + 0x61c88647) | 0;
        // Update xor generator.
        v = X[(i + 34) & 127];
        t = X[i = ((i + 1) & 127)];
        v ^= v << 13;
        t ^= t << 17;
        v ^= v >>> 15;
        t ^= t >>> 12;
        // Update Xor generator array state.
        v = X[i] = v ^ t;
        me.i = i;
        // Result is the combination.
        return (v + (w ^ (w >>> 16))) | 0;
      };

      function init(me, seed) {
        var t, v, i, j, w, X = [], limit = 128;
        if (seed === (seed | 0)) {
          // Numeric seeds initialize v, which is used to generates X.
          v = seed;
          seed = null;
        } else {
          // String seeds are mixed into v and X one character at a time.
          seed = seed + '\0';
          v = 0;
          limit = Math.max(limit, seed.length);
        }
        // Initialize circular array and weyl value.
        for (i = 0, j = -32; j < limit; ++j) {
          // Put the unicode characters into the array, and shuffle them.
          if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
          // After 32 shuffles, take v as the starting w value.
          if (j === 0) w = v;
          v ^= v << 10;
          v ^= v >>> 15;
          v ^= v << 4;
          v ^= v >>> 13;
          if (j >= 0) {
            w = (w + 0x61c88647) | 0;     // Weyl.
            t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
            i = (0 == t) ? i + 1 : 0;     // Count zeroes.
          }
        }
        // We have detected all zeroes; make the key nonzero.
        if (i >= 128) {
          X[(seed && seed.length || 0) & 127] = -1;
        }
        // Run the generator 512 times to further mix the state before using it.
        // Factoring this as a function slows the main generator, so it is just
        // unrolled here.  The weyl generator is not advanced while warming up.
        i = 127;
        for (j = 4 * 128; j > 0; --j) {
          v = X[(i + 34) & 127];
          t = X[i = ((i + 1) & 127)];
          v ^= v << 13;
          t ^= t << 17;
          v ^= v >>> 15;
          t ^= t >>> 12;
          X[i] = v ^ t;
        }
        // Storing state as object members is faster than using closure variables.
        me.w = w;
        me.X = X;
        me.i = i;
      }

      init(me, seed);
    }

    function copy(f, t) {
      t.i = f.i;
      t.w = f.w;
      t.X = f.X.slice();
      return t;
    }
    function impl(seed, opts) {
      if (seed == null) seed = +(new Date);
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (state.X) copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.xor4096 = impl;
    }

    })(
      commonjsGlobal,                                     // window object or global
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(xor4096$1));

    var tychei$1 = {exports: {}};

    (function (module) {
    // A Javascript implementaion of the "Tyche-i" prng algorithm by
    // Samuel Neves and Filipe Araujo.
    // See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

    (function(global, module, define) {

    function XorGen(seed) {
      var me = this, strseed = '';

      // Set up generator function.
      me.next = function() {
        var b = me.b, c = me.c, d = me.d, a = me.a;
        b = (b << 25) ^ (b >>> 7) ^ c;
        c = (c - d) | 0;
        d = (d << 24) ^ (d >>> 8) ^ a;
        a = (a - b) | 0;
        me.b = b = (b << 20) ^ (b >>> 12) ^ c;
        me.c = c = (c - d) | 0;
        me.d = (d << 16) ^ (c >>> 16) ^ a;
        return me.a = (a - b) | 0;
      };

      /* The following is non-inverted tyche, which has better internal
       * bit diffusion, but which is about 25% slower than tyche-i in JS.
      me.next = function() {
        var a = me.a, b = me.b, c = me.c, d = me.d;
        a = (me.a + me.b | 0) >>> 0;
        d = me.d ^ a; d = d << 16 ^ d >>> 16;
        c = me.c + d | 0;
        b = me.b ^ c; b = b << 12 ^ d >>> 20;
        me.a = a = a + b | 0;
        d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
        me.c = c = c + d | 0;
        b = b ^ c;
        return me.b = (b << 7 ^ b >>> 25);
      }
      */

      me.a = 0;
      me.b = 0;
      me.c = 2654435769 | 0;
      me.d = 1367130551;

      if (seed === Math.floor(seed)) {
        // Integer seed.
        me.a = (seed / 0x100000000) | 0;
        me.b = seed | 0;
      } else {
        // String seed.
        strseed += seed;
      }

      // Mix in string seed, then discard an initial batch of 64 values.
      for (var k = 0; k < strseed.length + 20; k++) {
        me.b ^= strseed.charCodeAt(k) | 0;
        me.next();
      }
    }

    function copy(f, t) {
      t.a = f.a;
      t.b = f.b;
      t.c = f.c;
      t.d = f.d;
      return t;
    }
    function impl(seed, opts) {
      var xg = new XorGen(seed),
          state = opts && opts.state,
          prng = function() { return (xg.next() >>> 0) / 0x100000000; };
      prng.double = function() {
        do {
          var top = xg.next() >>> 11,
              bot = (xg.next() >>> 0) / 0x100000000,
              result = (top + bot) / (1 << 21);
        } while (result === 0);
        return result;
      };
      prng.int32 = xg.next;
      prng.quick = prng;
      if (state) {
        if (typeof(state) == 'object') copy(state, xg);
        prng.state = function() { return copy(xg, {}); };
      }
      return prng;
    }

    if (module && module.exports) {
      module.exports = impl;
    } else if (define && define.amd) {
      define(function() { return impl; });
    } else {
      this.tychei = impl;
    }

    })(
      commonjsGlobal,
      module,    // present in node.js
      (typeof undefined) == 'function'    // present with an AMD loader
    );
    }(tychei$1));

    var seedrandom$1 = {exports: {}};

    /*
    Copyright 2014 David Bau.

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    */

    (function (module) {
    (function (pool, math) {
    //
    // The following constants are related to IEEE 754 limits.
    //
    var global = this,
        width = 256,        // each RC4 output is 0 <= x < 256
        chunks = 6,         // at least six RC4 outputs for each double
        digits = 52,        // there are 52 significant digits in a double
        rngname = 'random', // rngname: name for Math.random and Math.seedrandom
        startdenom = math.pow(width, chunks),
        significance = math.pow(2, digits),
        overflow = significance * 2,
        mask = width - 1,
        nodecrypto;         // node.js crypto module, initialized at the bottom.

    //
    // seedrandom()
    // This is the seedrandom function described above.
    //
    function seedrandom(seed, options, callback) {
      var key = [];
      options = (options == true) ? { entropy: true } : (options || {});

      // Flatten the seed string or build one from local entropy if needed.
      var shortseed = mixkey(flatten(
        options.entropy ? [seed, tostring(pool)] :
        (seed == null) ? autoseed() : seed, 3), key);

      // Use the seed to initialize an ARC4 generator.
      var arc4 = new ARC4(key);

      // This function returns a random double in [0, 1) that contains
      // randomness in every bit of the mantissa of the IEEE 754 value.
      var prng = function() {
        var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
            d = startdenom,                 //   and denominator d = 2 ^ 48.
            x = 0;                          //   and no 'extra last byte'.
        while (n < significance) {          // Fill up all significant digits by
          n = (n + x) * width;              //   shifting numerator and
          d *= width;                       //   denominator and generating a
          x = arc4.g(1);                    //   new least-significant-byte.
        }
        while (n >= overflow) {             // To avoid rounding up, before adding
          n /= 2;                           //   last byte, shift everything
          d /= 2;                           //   right using integer math until
          x >>>= 1;                         //   we have exactly the desired bits.
        }
        return (n + x) / d;                 // Form the number within [0, 1).
      };

      prng.int32 = function() { return arc4.g(4) | 0; };
      prng.quick = function() { return arc4.g(4) / 0x100000000; };
      prng.double = prng;

      // Mix the randomness into accumulated entropy.
      mixkey(tostring(arc4.S), pool);

      // Calling convention: what to return as a function of prng, seed, is_math.
      return (options.pass || callback ||
          function(prng, seed, is_math_call, state) {
            if (state) {
              // Load the arc4 state from the given state if it has an S array.
              if (state.S) { copy(state, arc4); }
              // Only provide the .state method if requested via options.state.
              prng.state = function() { return copy(arc4, {}); };
            }

            // If called as a method of Math (Math.seedrandom()), mutate
            // Math.random because that is how seedrandom.js has worked since v1.0.
            if (is_math_call) { math[rngname] = prng; return seed; }

            // Otherwise, it is a newer calling convention, so return the
            // prng directly.
            else return prng;
          })(
      prng,
      shortseed,
      'global' in options ? options.global : (this == math),
      options.state);
    }
    math['seed' + rngname] = seedrandom;

    //
    // ARC4
    //
    // An ARC4 implementation.  The constructor takes a key in the form of
    // an array of at most (width) integers that should be 0 <= x < (width).
    //
    // The g(count) method returns a pseudorandom integer that concatenates
    // the next (count) outputs from ARC4.  Its return value is a number x
    // that is in the range 0 <= x < (width ^ count).
    //
    function ARC4(key) {
      var t, keylen = key.length,
          me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

      // The empty key [] is treated as [0].
      if (!keylen) { key = [keylen++]; }

      // Set up S using the standard key scheduling algorithm.
      while (i < width) {
        s[i] = i++;
      }
      for (i = 0; i < width; i++) {
        s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
        s[j] = t;
      }

      // The "g" method returns the next (count) outputs as one number.
      (me.g = function(count) {
        // Using instance members instead of closure state nearly doubles speed.
        var t, r = 0,
            i = me.i, j = me.j, s = me.S;
        while (count--) {
          t = s[i = mask & (i + 1)];
          r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
        }
        me.i = i; me.j = j;
        return r;
        // For robust unpredictability, the function call below automatically
        // discards an initial batch of values.  This is called RC4-drop[256].
        // See http://google.com/search?q=rsa+fluhrer+response&btnI
      })(width);
    }

    //
    // copy()
    // Copies internal state of ARC4 to or from a plain object.
    //
    function copy(f, t) {
      t.i = f.i;
      t.j = f.j;
      t.S = f.S.slice();
      return t;
    }
    //
    // flatten()
    // Converts an object tree to nested arrays of strings.
    //
    function flatten(obj, depth) {
      var result = [], typ = (typeof obj), prop;
      if (depth && typ == 'object') {
        for (prop in obj) {
          try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
        }
      }
      return (result.length ? result : typ == 'string' ? obj : obj + '\0');
    }

    //
    // mixkey()
    // Mixes a string seed into a key that is an array of integers, and
    // returns a shortened string seed that is equivalent to the result key.
    //
    function mixkey(seed, key) {
      var stringseed = seed + '', smear, j = 0;
      while (j < stringseed.length) {
        key[mask & j] =
          mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
      }
      return tostring(key);
    }

    //
    // autoseed()
    // Returns an object for autoseeding, using window.crypto and Node crypto
    // module if available.
    //
    function autoseed() {
      try {
        var out;
        if (nodecrypto && (out = nodecrypto.randomBytes)) {
          // The use of 'out' to remember randomBytes makes tight minified code.
          out = out(width);
        } else {
          out = new Uint8Array(width);
          (global.crypto || global.msCrypto).getRandomValues(out);
        }
        return tostring(out);
      } catch (e) {
        var browser = global.navigator,
            plugins = browser && browser.plugins;
        return [+new Date, global, plugins, global.screen, tostring(pool)];
      }
    }

    //
    // tostring()
    // Converts an array of charcodes to a string
    //
    function tostring(a) {
      return String.fromCharCode.apply(0, a);
    }

    //
    // When seedrandom.js is loaded, we immediately mix a few bits
    // from the built-in RNG into the entropy pool.  Because we do
    // not want to interfere with deterministic PRNG state later,
    // seedrandom will not call math.random on its own again after
    // initialization.
    //
    mixkey(math.random(), pool);

    //
    // Nodejs and AMD support: export the implementation as a module using
    // either convention.
    //
    if (module.exports) {
      module.exports = seedrandom;
      // When in node.js, try using crypto package for autoseeding.
      try {
        nodecrypto = require('crypto');
      } catch (ex) {}
    }

    // End anonymous scope, and pass initial values.
    })(
      [],     // pool: entropy pool starts empty
      Math    // math: package containing random, pow, and seedrandom
    );
    }(seedrandom$1));

    // A library of seedable RNGs implemented in Javascript.
    //
    // Usage:
    //
    // var seedrandom = require('seedrandom');
    // var random = seedrandom(1); // or any seed.
    // var x = random();       // 0 <= x < 1.  Every bit is random.
    // var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

    // alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
    // Period: ~2^116
    // Reported to pass all BigCrush tests.
    var alea = alea$1.exports;

    // xor128, a pure xor-shift generator by George Marsaglia.
    // Period: 2^128-1.
    // Reported to fail: MatrixRank and LinearComp.
    var xor128 = xor128$1.exports;

    // xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
    // Period: 2^192-2^32
    // Reported to fail: CollisionOver, SimpPoker, and LinearComp.
    var xorwow = xorwow$1.exports;

    // xorshift7, by François Panneton and Pierre L'ecuyer, takes
    // a different approach: it adds robustness by allowing more shifts
    // than Marsaglia's original three.  It is a 7-shift generator
    // with 256 bits, that passes BigCrush with no systmatic failures.
    // Period 2^256-1.
    // No systematic BigCrush failures reported.
    var xorshift7 = xorshift7$1.exports;

    // xor4096, by Richard Brent, is a 4096-bit xor-shift with a
    // very long period that also adds a Weyl generator. It also passes
    // BigCrush with no systematic failures.  Its long period may
    // be useful if you have many generators and need to avoid
    // collisions.
    // Period: 2^4128-2^32.
    // No systematic BigCrush failures reported.
    var xor4096 = xor4096$1.exports;

    // Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
    // number generator derived from ChaCha, a modern stream cipher.
    // https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
    // Period: ~2^127
    // No systematic BigCrush failures reported.
    var tychei = tychei$1.exports;

    // The original ARC4-based prng included in this library.
    // Period: ~2^1600
    var sr = seedrandom$1.exports;

    sr.alea = alea;
    sr.xor128 = xor128;
    sr.xorwow = xorwow;
    sr.xorshift7 = xorshift7;
    sr.xor4096 = xor4096;
    sr.tychei = tychei;

    var seedrandom = sr;

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function softmax$1(args) {
        const { inputs, backend, attrs } = args;
        const { logits } = inputs;
        const { dim } = attrs;
        const logitsRank = logits.shape.length;
        let $dim = dim;
        if ($dim === -1) {
            $dim = logitsRank - 1;
        }
        if ($dim !== logitsRank - 1) {
            throw Error('Softmax along a non-last dimension is not yet supported. ' +
                `Logits was rank ${logitsRank} and dim was ${$dim}`);
        }
        const axes = parseAxisParam([$dim], logits.shape);
        const maxLogit = max$1({
            inputs: { x: logits },
            backend,
            attrs: { reductionIndices: axes, keepDims: false }
        });
        const expandedShape = expandShapeToKeepDim(maxLogit.shape, axes);
        const maxLogitReshaped = reshape$1({ inputs: { x: maxLogit }, backend, attrs: { shape: expandedShape } });
        const a = sub$1({ inputs: { a: logits, b: maxLogitReshaped }, backend });
        const b = exp$1({ inputs: { x: a }, backend });
        const sumExp = sum$1({ inputs: { x: b }, backend, attrs: { axis: axes, keepDims: false } });
        const sumReshaped = reshape$1({ inputs: { x: sumExp }, backend, attrs: { shape: expandedShape } });
        const result = div({ inputs: { a: b, b: sumReshaped }, backend });
        backend.disposeIntermediateTensorInfo(maxLogit);
        backend.disposeIntermediateTensorInfo(maxLogitReshaped);
        backend.disposeIntermediateTensorInfo(a);
        backend.disposeIntermediateTensorInfo(b);
        backend.disposeIntermediateTensorInfo(sumExp);
        backend.disposeIntermediateTensorInfo(sumReshaped);
        return result;
    }
    const softmaxConfig$1 = {
        kernelName: Softmax,
        backendName: 'cpu',
        kernelFunc: softmax$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function multinomial$1(args) {
        const { inputs, backend, attrs } = args;
        const { logits } = inputs;
        const { numSamples, seed, normalized } = attrs;
        assertNotComplex$1(logits, 'multinomial');
        const probabilities = normalized ?
            logits :
            softmax$1({ inputs: { logits }, backend, attrs: { dim: -1 } });
        const batchSize = probabilities.shape[0];
        const numEvents = probabilities.shape[1];
        const probVals = backend.data.get(probabilities.dataId).values;
        const resShape = [batchSize, numSamples];
        const resVals = makeZerosTypedArray(sizeFromShape(resShape), 'int32');
        for (let b = 0; b < batchSize; ++b) {
            const offset = b * numEvents;
            // The cdf won't include the last event. It will be implicit if no other
            // event happened.
            const cdf = new Float32Array(numEvents - 1);
            cdf[0] = probVals[offset];
            for (let event = 1; event < cdf.length; ++event) {
                cdf[event] = cdf[event - 1] + probVals[offset + event];
            }
            const random = seedrandom.alea(seed.toString());
            const outOffset = b * numSamples;
            for (let sampleId = 0; sampleId < numSamples; ++sampleId) {
                const r = random();
                // Assume last event happened by default.
                resVals[outOffset + sampleId] = cdf.length;
                for (let event = 0; event < cdf.length; event++) {
                    if (r < cdf[event]) {
                        resVals[outOffset + sampleId] = event;
                        break;
                    }
                }
            }
        }
        if (!normalized) {
            backend.disposeIntermediateTensorInfo(probabilities);
        }
        return backend.makeTensorInfo(resShape, 'int32', resVals);
    }
    const multinomialConfig$1 = {
        kernelName: Multinomial,
        backendName: 'cpu',
        kernelFunc: multinomial$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const nonMaxSuppressionV3Impl$1 = nonMaxSuppressionV3Impl$2;
    function nonMaxSuppressionV3$1(args) {
        const { inputs, backend, attrs } = args;
        const { boxes, scores } = inputs;
        const { maxOutputSize, iouThreshold, scoreThreshold } = attrs;
        assertNotComplex$1(boxes, 'NonMaxSuppression');
        const boxesVals = backend.data.get(boxes.dataId).values;
        const scoresVals = backend.data.get(scores.dataId).values;
        const { selectedIndices } = nonMaxSuppressionV3Impl$1(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
        return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));
    }
    const nonMaxSuppressionV3Config$1 = {
        kernelName: NonMaxSuppressionV3,
        backendName: 'cpu',
        kernelFunc: nonMaxSuppressionV3$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const nonMaxSuppressionV4Impl$1 = nonMaxSuppressionV4Impl$2;
    function nonMaxSuppressionV4$1(args) {
        const { inputs, backend, attrs } = args;
        const { boxes, scores } = inputs;
        const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;
        assertNotComplex$1(boxes, 'NonMaxSuppressionPadded');
        const boxesVals = backend.data.get(boxes.dataId).values;
        const scoresVals = backend.data.get(scores.dataId).values;
        const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl$1(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
        return [
            backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),
            backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))
        ];
    }
    const nonMaxSuppressionV4Config$1 = {
        kernelName: NonMaxSuppressionV4,
        backendName: 'cpu',
        kernelFunc: nonMaxSuppressionV4$1
    };

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const nonMaxSuppressionV5Impl$1 = nonMaxSuppressionV5Impl$2;
    function nonMaxSuppressionV5$1(args) {
        const { inputs, backend, attrs } = args;
        const { boxes, scores } = inputs;
        const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;
        assertNotComplex$1(boxes, 'NonMaxSuppressionWithScore');
        const boxesVals = backend.data.get(boxes.dataId).values;
        const scoresVals = backend.data.get(scores.dataId).values;
        const maxOutputSizeVal = maxOutputSize;
        const iouThresholdVal = iouThreshold;
        const scoreThresholdVal = scoreThreshold;
        const softNmsSigmaVal = softNmsSigma;
        const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl$1(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);
        return [
            backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),
            backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))
        ];
    }
    const nonMaxSuppressionV5Config$1 = {
        kernelName: NonMaxSuppressionV5,
        backendName: 'cpu',
        kernelFunc: nonMaxSuppressionV5$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function oneHot$1(args) {
        const { inputs, backend, attrs } = args;
        const { indices } = inputs;
        const { depth, onValue, offValue } = attrs;
        assertNotComplex$1(indices, 'oneHot');
        const indicesSize = sizeFromShape(indices.shape);
        const res = new Float32Array(indicesSize * depth);
        res.fill(offValue);
        const indicesVal = backend.data.get(indices.dataId).values;
        for (let event = 0; event < indicesSize; ++event) {
            if (indicesVal[event] >= 0 && indicesVal[event] < depth) {
                res[event * depth + indicesVal[event]] = onValue;
            }
        }
        return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);
    }
    const oneHotConfig$1 = {
        kernelName: OneHot,
        backendName: 'cpu',
        kernelFunc: oneHot$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function zerosLike$1(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        if (x.dtype === 'string') {
            throw new Error('zerosLike is not supported for string tensors');
        }
        else if (x.dtype === 'complex64') {
            const realPart = real$1({ inputs: { input: x }, backend });
            const r = zerosLike$1({ inputs: { x: realPart }, backend });
            const imagPart = imag$1({ inputs: { input: x }, backend });
            const i = zerosLike$1({ inputs: { x: imagPart }, backend });
            const result = complex$1({ inputs: { real: r, imag: i }, backend });
            backend.disposeIntermediateTensorInfo(realPart);
            backend.disposeIntermediateTensorInfo(r);
            backend.disposeIntermediateTensorInfo(imagPart);
            backend.disposeIntermediateTensorInfo(i);
            return result;
        }
        else {
            return fill$1({ backend, attrs: { shape: x.shape, value: 0, dtype: x.dtype } });
        }
    }
    const zerosLikeConfig$1 = {
        kernelName: ZerosLike,
        backendName: 'cpu',
        kernelFunc: zerosLike$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function onesLike$1(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        if (x.dtype === 'string') {
            throw new Error('onesLike is not supported for string tensors');
        }
        else if (x.dtype === 'complex64') {
            const realPart = real$1({ inputs: { input: x }, backend });
            const r = onesLike$1({ inputs: { x: realPart }, backend });
            const imagPart = imag$1({ inputs: { input: x }, backend });
            const i = zerosLike$1({ inputs: { x: imagPart }, backend });
            const result = complex$1({ inputs: { real: r, imag: i }, backend });
            backend.disposeIntermediateTensorInfo(realPart);
            backend.disposeIntermediateTensorInfo(r);
            backend.disposeIntermediateTensorInfo(imagPart);
            backend.disposeIntermediateTensorInfo(i);
            return result;
        }
        else {
            return fill$1({ backend, attrs: { shape: x.shape, value: 1, dtype: x.dtype } });
        }
    }
    const onesLikeConfig$1 = {
        kernelName: OnesLike,
        backendName: 'cpu',
        kernelFunc: onesLike$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function pack$1(args) {
        const { inputs, backend, attrs } = args;
        const { axis } = attrs;
        if (inputs.length === 1) {
            return expandDims$1({ inputs: { input: inputs[0] }, backend, attrs: { dim: axis } });
        }
        const shape = inputs[0].shape;
        const dtype = inputs[0].dtype;
        inputs.forEach(t => {
            assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');
            assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');
        });
        const intermediateTensorInfos = [];
        const expandedTensors = inputs.map(t => {
            const expandedT = expandDims$1({ inputs: { input: t }, backend, attrs: { dim: axis } });
            intermediateTensorInfos.push(expandedT);
            return expandedT;
        });
        const result = concat$1({ inputs: expandedTensors, backend, attrs: { axis } });
        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return result;
    }
    const packConfig$1 = {
        kernelName: Pack,
        backendName: 'cpu',
        kernelFunc: pack$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function padV2$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { paddings, constantValue } = attrs;
        assertNotComplex$1(x, 'pad');
        const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);
        const start = paddings.map(p => p[0]);
        const xVals = backend.data.get(x.dataId).values;
        const xSize = sizeFromShape(x.shape);
        const xRank = x.shape.length;
        const xStrides = computeStrides(x.shape);
        const resultSize = sizeFromShape(outShape);
        const resultRank = outShape.length;
        const resultStrides = computeStrides(outShape);
        const resVals = getTypedArrayFromDType(x.dtype, resultSize);
        if (constantValue !== 0) {
            resVals.fill(constantValue);
        }
        for (let i = 0; i < xSize; i++) {
            const coords = indexToLoc(i, xRank, xStrides);
            const outCoords = coords.map((c, i) => c + start[i]);
            const outIndex = locToIndex(outCoords, resultRank, resultStrides);
            resVals[outIndex] = xVals[i];
        }
        const outId = backend.write(resVals, outShape, x.dtype);
        return { dataId: outId, shape: outShape, dtype: x.dtype };
    }
    const padV2Config$1 = {
        kernelName: PadV2,
        backendName: 'cpu',
        kernelFunc: padV2$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const powImpl = createSimpleBinaryKernelImpl((a, b) => Math.pow(a, b));
    const pow$1 = binaryKernelFunc$1(Pow, powImpl);
    const powConfig$1 = {
        kernelName: Pow,
        backendName: 'cpu',
        kernelFunc: pow$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function range$1(args) {
        const { backend, attrs } = args;
        const { start, stop, dtype, step } = attrs;
        const values = rangeImpl(start, stop, step, dtype);
        return backend.makeTensorInfo([values.length], dtype, values);
    }
    const rangeConfig$1 = {
        kernelName: Range,
        backendName: 'cpu',
        kernelFunc: range$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const reciprocal$1 = unaryKernelFunc$1(Reciprocal, (xi) => 1 / xi);
    const reciprocalConfig$1 = {
        kernelName: Reciprocal,
        backendName: 'cpu',
        kernelFunc: reciprocal$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function resizeBilinear$1(args) {
        const { inputs, backend, attrs } = args;
        const { images } = inputs;
        const { alignCorners, halfPixelCenters, size } = attrs;
        assertNotComplex$1(images, 'resizeBilinear');
        const imagesStrides = computeStrides(images.shape);
        const [newHeight, newWidth] = size;
        const [batch, oldHeight, oldWidth, numChannels] = images.shape;
        const xValues = backend.data.get(images.dataId).values;
        const result = new Float32Array(sizeFromShape([batch, newHeight, newWidth, numChannels]));
        const effectiveInputSize = [
            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,
            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth
        ];
        const effectiveOutputSize = [
            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,
            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth
        ];
        let outputIdx = 0;
        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];
        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];
        for (let b = 0; b < batch; b++) {
            for (let r = 0; r < newHeight; r++) {
                let sourceFracRow;
                if (halfPixelCenters) {
                    sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;
                }
                else {
                    sourceFracRow = effectiveRowSizeRatio * r;
                }
                const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));
                const rowFrac = sourceFracRow - sourceRowFloor;
                const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));
                const topRowOffset = b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];
                const botRowOffset = b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];
                for (let c = 0; c < newWidth; c++) {
                    let sourceFracCol;
                    if (halfPixelCenters) {
                        sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;
                    }
                    else {
                        sourceFracCol = effectiveColSizeRatio * c;
                    }
                    const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));
                    const colFrac = sourceFracCol - sourceColFloor;
                    const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));
                    const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];
                    const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];
                    const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];
                    const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];
                    for (let d = 0; d < numChannels; d++) {
                        // Begin shader.
                        // Compute the fractional index of the source.
                        const topLeft = xValues[topLeftOffest + d];
                        const bottomLeft = xValues[botLeftOffset + d];
                        const topRight = xValues[topRightOffset + d];
                        const bottomRight = xValues[botRightOffest + d];
                        const top = topLeft + (topRight - topLeft) * colFrac;
                        const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;
                        const newValue = top + (bottom - top) * rowFrac;
                        result[outputIdx++] = newValue;
                    }
                }
            }
        }
        return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], 'float32', result);
    }
    const resizeBilinearConfig$1 = {
        kernelName: ResizeBilinear,
        backendName: 'cpu',
        kernelFunc: resizeBilinear$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function resizeBilinearGrad$1(args) {
        const { inputs, backend, attrs } = args;
        const { images, dy } = inputs;
        const { alignCorners } = attrs;
        assertNotComplex$1([dy, images], 'resizeBilinearGrad');
        const imagesStrides = computeStrides(images.shape);
        const [batch, xHeight, xWidth, depth] = images.shape;
        const [, yHeight, yWidth] = dy.shape;
        const output = new Float32Array(batch * xHeight * xWidth * depth);
        // In the backwards pass, we want to find the pixels that were generated
        // for each pixel in the input image the forward pass and add the
        // corresponding coefficient from dy to the gradient (with some
        // interpolation).
        const effectiveXSize = [
            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,
            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth
        ];
        const effectiveYSize = [
            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,
            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth
        ];
        const heightScale = effectiveXSize[0] / effectiveYSize[0];
        const widthScale = effectiveXSize[1] / effectiveYSize[1];
        // Reference implementation
        // tslint:disable-next-line:max-line-length
        // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275
        const dyValues = backend.data.get(dy.dataId).values;
        let offset = 0;
        for (let b = 0; b < batch; b++) {
            const bOffset = b * imagesStrides[0];
            for (let r = 0; r < yHeight; r++) {
                const dxR = r * heightScale;
                const topDxRIndex = Math.floor(dxR);
                const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);
                const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];
                const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];
                const dxRLerp = dxR - topDxRIndex;
                const inverseDxRLerp = 1.0 - dxRLerp;
                for (let c = 0; c < yWidth; c++) {
                    const dxC = c * widthScale;
                    const leftDxCIndex = Math.floor(dxC);
                    const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);
                    const dxCLerp = dxC - leftDxCIndex;
                    const inverseDxCLerp = 1.0 - dxCLerp;
                    const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];
                    const topRightRCOffset = topDxROffset + rightDxCIndex * imagesStrides[2];
                    const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * imagesStrides[2];
                    const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * imagesStrides[2];
                    const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;
                    const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;
                    const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;
                    const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;
                    for (let d = 0; d < depth; d++) {
                        const dyVal = dyValues[offset++];
                        output[topLeftRCOffset + d] +=
                            dyVal * inverseDxRLerpTimesInverseDxCLerp;
                        output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;
                        output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;
                        output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;
                    }
                }
            }
        }
        return backend.makeTensorInfo([batch, xWidth, xHeight, depth], 'float32', output);
    }
    const resizeBilinearGradConfig$1 = {
        kernelName: ResizeBilinearGrad,
        backendName: 'cpu',
        kernelFunc: resizeBilinearGrad$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function resizeNearestNeighbor$1(args) {
        const { inputs, backend, attrs } = args;
        const { images } = inputs;
        const { alignCorners, halfPixelCenters, size } = attrs;
        assertNotComplex$1(images, 'resizeNearestNeighbor');
        const imagesStrides = computeStrides(images.shape);
        const [newHeight, newWidth] = size;
        const [batch, oldHeight, oldWidth, numChannels] = images.shape;
        const xValues = backend.data.get(images.dataId).values;
        const output = new Float32Array(batch * newHeight * newWidth * numChannels);
        const effectiveInputSize = [
            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,
            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth
        ];
        const effectiveOutputSize = [
            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,
            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth
        ];
        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];
        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];
        let outputOffset = 0;
        for (let b = 0; b < batch; b++) {
            const batchOffset = b * imagesStrides[0];
            for (let r = 0; r < newHeight; r++) {
                const sourceFracRow = halfPixelCenters ?
                    effectiveRowSizeRatio * (r + 0.5) :
                    effectiveRowSizeRatio * r;
                let sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));
                if (halfPixelCenters) {
                    sourceNearestRow = Math.max(0, sourceNearestRow);
                }
                const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];
                for (let c = 0; c < newWidth; c++) {
                    const sourceFracCol = halfPixelCenters ?
                        effectiveColSizeRatio * (c + 0.5) :
                        effectiveColSizeRatio * c;
                    let sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) :
                        Math.floor(sourceFracCol));
                    if (halfPixelCenters) {
                        sourceNearestCol = Math.max(0, sourceNearestCol);
                    }
                    const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];
                    for (let d = 0; d < numChannels; d++) {
                        // Begin shader.
                        // Compute the fractional index of the source.
                        const newVal = xValues[colOffset + d];
                        output[outputOffset++] = newVal;
                    }
                }
            }
        }
        return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], images.dtype, output);
    }
    const resizeNearestNeighborConfig$1 = {
        kernelName: ResizeNearestNeighbor,
        backendName: 'cpu',
        kernelFunc: resizeNearestNeighbor$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function resizeNearestNeighborGrad$1(args) {
        const { inputs, backend, attrs } = args;
        const { images, dy } = inputs;
        const { alignCorners } = attrs;
        assertNotComplex$1([dy, images], 'resizeNearestNeighborGrad');
        const imagesStrides = computeStrides(images.shape);
        const dyStrides = computeStrides(dy.shape);
        const [batch, xHeight, xWidth, depth] = images.shape;
        const [, yHeight, yWidth] = dy.shape;
        const output = new Float32Array(batch * xHeight * xWidth * depth);
        const dyValues = backend.data.get(dy.dataId).values;
        // In the backwards pass, we want to find the pixels that were generated
        // for each pixel in the input image the forward pass
        const effectiveXSize = [
            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,
            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth
        ];
        const effectiveYSize = [
            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,
            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth
        ];
        const heightScale = effectiveXSize[0] / effectiveYSize[0];
        const widthScale = effectiveXSize[1] / effectiveYSize[1];
        const invHeightScale = 1 / heightScale;
        const invWidthScale = 1 / widthScale;
        // This defines the size of the window of values around a particular
        // index in dy that we want to search for contributions to dx.
        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;
        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;
        // Loop over the output space.
        for (let b = 0; b < batch; b++) {
            const batchOffset = b * imagesStrides[0];
            for (let r = 0; r < xHeight; r++) {
                const rowOffset = batchOffset + r * imagesStrides[1];
                // Compute bounds for where in dy we will look
                const startRLerp = Math.floor(r * invHeightScale);
                const startDyR = Math.floor(startRLerp - (winHeight / 2));
                for (let c = 0; c < xWidth; c++) {
                    const colOffset = rowOffset + c * imagesStrides[2];
                    // Compute bounds for where in dy we will look
                    const startCLerp = Math.floor(c * invWidthScale);
                    const startDyC = Math.floor(startCLerp - (winWidth / 2));
                    for (let d = 0; d < depth; d++) {
                        let accum = 0;
                        // loop over dy
                        for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {
                            const dyR = dyRIndex + startDyR;
                            // Guard against the window exceeding the bounds of dy
                            if (dyR < 0 || dyR >= yHeight) {
                                continue;
                            }
                            const dyROffset = batchOffset + dyR * dyStrides[1];
                            const sourceFracRow = dyR * heightScale;
                            const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) :
                                Math.floor(sourceFracRow));
                            if (r !== sourceNearestRow) {
                                continue;
                            }
                            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {
                                const dyC = dyCIndex + startDyC;
                                // Guard against the window exceeding the bounds of dy
                                if (dyC < 0 || dyC >= yWidth) {
                                    continue;
                                }
                                const dyCOffset = dyROffset + dyC * dyStrides[2];
                                const sourceFracCol = dyC * widthScale;
                                const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) :
                                    Math.floor(sourceFracCol));
                                if (c === sourceNearestCol) {
                                    accum += dyValues[dyCOffset + d];
                                }
                            }
                        }
                        output[colOffset + d] = accum;
                    }
                }
            }
        }
        return backend.makeTensorInfo(images.shape, images.dtype, output);
    }
    const resizeNearestNeighborGradConfig$1 = {
        kernelName: ResizeNearestNeighborGrad,
        backendName: 'cpu',
        kernelFunc: resizeNearestNeighborGrad$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function reverse$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { dims } = attrs;
        assertNotComplex$1(x, 'reverse');
        const xRank = x.shape.length;
        const $dims = parseAxisParam(dims, x.shape);
        if (xRank === 0) {
            return identity$1({ inputs: { x }, backend });
        }
        const outBuf = new TensorBuffer(x.shape, x.dtype);
        const xBuf = backend.bufferSync(x);
        for (let i = 0; i < outBuf.size; i++) {
            const outLoc = outBuf.indexToLoc(i);
            const inLoc = outLoc.slice();
            $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);
            outBuf.set(xBuf.get(...inLoc), ...outLoc);
        }
        return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
    }
    const reverseConfig$1 = {
        kernelName: Reverse,
        backendName: 'cpu',
        kernelFunc: reverse$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const rotateWithOffsetConfig$1 = {
        kernelName: RotateWithOffset,
        backendName: 'cpu',
        kernelFunc: ({ inputs, attrs, backend }) => {
            const { image } = inputs;
            const { radians, fillValue, center } = attrs;
            const cpuBackend = backend;
            const output = getTypedArrayFromDType(image.dtype, sizeFromShape(image.shape));
            const [batch, imageHeight, imageWidth, numChannels] = image.shape;
            const [centerX, centerY] = getImageCenter(center, imageHeight, imageWidth);
            const fullOpacityValue = 255;
            const sinFactor = Math.sin(radians);
            const cosFactor = Math.cos(radians);
            const imageVals = cpuBackend.data.get(image.dataId).values;
            for (let batchIdx = 0; batchIdx < batch; batchIdx++) {
                const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;
                for (let row = 0; row < imageHeight; row++) {
                    const rowOffset = row * (imageWidth * numChannels);
                    for (let col = 0; col < imageWidth; col++) {
                        const colOffset = col * numChannels;
                        for (let channel = 0; channel < numChannels; channel++) {
                            const coords = [batch, row, col, channel];
                            const x = coords[2];
                            const y = coords[1];
                            // coordX/coordY are the result of rotating and translating x/y.
                            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;
                            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;
                            coordX = Math.round(coordX + centerX);
                            coordY = Math.round(coordY + centerY);
                            let outputValue = fillValue;
                            if (typeof fillValue !== 'number') {
                                if (channel === 3) {
                                    outputValue = fullOpacityValue;
                                }
                                else {
                                    outputValue = fillValue[channel];
                                }
                            }
                            // If the coordinate position falls within the image boundaries...
                            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&
                                coordY < imageHeight) {
                                // set the output to the image value at the coordinate position.
                                const rotatedRowOffset = coordY * (imageWidth * numChannels);
                                const rotatedColOffset = coordX * numChannels;
                                const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;
                                outputValue = imageVals[imageIdx];
                            }
                            const outIdx = batchOffset + rowOffset + colOffset + channel;
                            output[outIdx] = outputValue;
                        }
                    }
                }
            }
            const dataId = cpuBackend.write(output, image.shape, image.dtype);
            return { dataId, shape: image.shape, dtype: image.dtype };
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const round$1 = unaryKernelFunc$1(Round, (xi) => {
        // The algorithm is based on banker's rounding.
        const base = Math.floor(xi);
        if (xi - base < 0.5) {
            return Math.floor(xi);
        }
        else if (xi - base > 0.5) {
            return Math.ceil(xi);
        }
        else {
            if (base % 2.0 === 0.0) {
                return base;
            }
            else {
                return base + 1.0;
            }
        }
    });
    const roundConfig$1 = {
        kernelName: Round,
        backendName: 'cpu',
        kernelFunc: round$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {
        const flattenShape = [outputSize / sliceSize, sliceSize];
        const indicesData = indices.values;
        const updatesData = updates.values;
        if (outputSize === 0) {
            return buffer(shape, updates.dtype);
        }
        const outBuf = buffer(flattenShape, updates.dtype);
        outBuf.values.fill(defaultValue);
        for (let i = 0; i < numUpdates; i++) {
            const index = [];
            let flattenIndex = 0;
            for (let j = 0; j < sliceRank; j++) {
                const dim = indicesData[i * sliceRank + j];
                index.push(dim);
                flattenIndex += dim * strides[j];
            }
            if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {
                throw new Error(`Invalid indices: ${index} does not index into ${shape}`);
            }
            for (let k = 0; k < sliceSize; k++) {
                if (sumDupeIndices) {
                    outBuf.values[flattenIndex * sliceSize + k] +=
                        updatesData[i * sliceSize + k];
                }
                else {
                    outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?
                        updatesData[0] :
                        updatesData[i * sliceSize + k];
                }
            }
        }
        return outBuf;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function scatterNd$1(args) {
        const { inputs, backend, attrs } = args;
        const { indices, updates } = inputs;
        const { shape } = attrs;
        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = calculateShapes(updates, indices, shape);
        const sumDupeIndices = true;
        const indicesBuf = backend.bufferSync(indices);
        const updatesBuf = backend.bufferSync(updates);
        const outBuf = scatterImpl(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);
        return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);
    }
    const scatterNdConfig$1 = {
        kernelName: ScatterNd,
        backendName: 'cpu',
        kernelFunc: scatterNd$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function select$1(args) {
        const { inputs, backend } = args;
        const { condition, t, e } = inputs;
        assertNotComplex$1([condition, t, e], 'select');
        const conditionRank = condition.shape.length;
        const values = backend.data.get(condition.dataId).values;
        const tValues = backend.data.get(t.dataId).values;
        const eValues = backend.data.get(e.dataId).values;
        const resultDtype = upcastType(t.dtype, e.dtype);
        const newValues = makeZerosTypedArray(sizeFromShape(t.shape), resultDtype);
        let index = 0;
        const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?
            1 :
            sizeFromShape(t.shape.slice(1));
        for (let i = 0; i < values.length; i++) {
            for (let j = 0; j < offset; j++) {
                if (values[i] === 1) {
                    newValues[index++] = tValues[i];
                }
                else {
                    newValues[index++] = eValues[i];
                }
            }
        }
        return backend.makeTensorInfo(t.shape, resultDtype, newValues);
    }
    const selectConfig$1 = {
        kernelName: Select,
        backendName: 'cpu',
        kernelFunc: select$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const scaleAlpha = SELU_SCALEALPHA;
    const scale = SELU_SCALE;
    const selu$1 = unaryKernelFunc$1(Selu, (xi) => {
        if (xi >= 0) {
            return scale * xi;
        }
        else {
            return scaleAlpha * (Math.exp(xi) - 1);
        }
    });
    const seluConfig$1 = {
        kernelName: Selu,
        backendName: 'cpu',
        kernelFunc: selu$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const sign$1 = unaryKernelFunc$1(Sign, (xi) => {
        if (xi < 0) {
            return -1;
        }
        else if (xi > 0) {
            return 1;
        }
        else {
            return 0;
        }
    });
    const signConfig$1 = {
        kernelName: Sign,
        backendName: 'cpu',
        kernelFunc: sign$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const sin$1 = unaryKernelFunc$1(Sin, (xi) => Math.sin(xi));
    const sinConfig$1 = {
        kernelName: Sin,
        backendName: 'cpu',
        kernelFunc: sin$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const sinh$1 = unaryKernelFunc$1(Sinh, (xi) => Math.sinh(xi));
    const sinhConfig$1 = {
        kernelName: Sinh,
        backendName: 'cpu',
        kernelFunc: sinh$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX
    // epsilon is the difference between 1.0 and the next representable float.
    // For a single precision 32 bit float this should be 2^-23, see:
    // https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm
    const epsilon = 1.1920928955078125e-7;
    const threshold = Math.log(epsilon) + 2.0;
    const softplus$1 = unaryKernelFunc$1(Softplus, (xi) => {
        // Value above which exp(x) may overflow, but softplus(x) == x
        // is within machine epsilon.
        const tooLarge = xi > -threshold;
        // Value below which exp(x) may underflow, but softplus(x) == exp(x)
        // is within machine epsilon.
        const tooSmall = xi < threshold;
        const expX = Math.exp(xi);
        let result;
        if (tooSmall) {
            result = expX;
        }
        else if (tooLarge) {
            result = xi;
        }
        else {
            result = Math.log(1.0 + expX);
        }
        return result;
    });
    const softplusConfig$1 = {
        kernelName: Softplus,
        backendName: 'cpu',
        kernelFunc: softplus$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function spaceToBatchND$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { blockShape, paddings } = attrs;
        assertNotComplex$1([x], 'spaceToBatchND');
        const prod = sizeFromShape(blockShape);
        const completePaddings = [[0, 0]];
        completePaddings.push(...paddings);
        for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {
            completePaddings.push([0, 0]);
        }
        const paddedX = padV2Config$1.kernelFunc({
            inputs: { x },
            backend,
            attrs: { paddings: completePaddings, constantValue: 0 }
        });
        const reshapedPaddedShape = getReshaped(paddedX.shape, blockShape, prod, false);
        const permutedReshapedPaddedPermutation = getPermuted(reshapedPaddedShape.length, blockShape.length, false);
        const flattenShape = getReshapedPermuted(paddedX.shape, blockShape, prod, false);
        const reshapeInputs = { x: paddedX };
        const reshapeAttrs = { shape: reshapedPaddedShape };
        const paddedXReshaped = reshape$1({ inputs: reshapeInputs, backend, attrs: reshapeAttrs });
        const transposeInputs = { x: paddedXReshaped };
        const transposeAttrs = { perm: permutedReshapedPaddedPermutation };
        const paddedXT = transpose$1({ inputs: transposeInputs, backend, attrs: transposeAttrs });
        const resultReshapeInputs = { x: paddedXT };
        const resultReshapeAttrs = { shape: flattenShape };
        const result = reshape$1({ inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs });
        backend.disposeIntermediateTensorInfo(paddedX);
        backend.disposeIntermediateTensorInfo(paddedXReshaped);
        backend.disposeIntermediateTensorInfo(paddedXT);
        return result;
    }
    const spaceToBatchNDConfig$1 = {
        kernelName: SpaceToBatchND,
        backendName: 'cpu',
        kernelFunc: spaceToBatchND$1
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseFillEmptyRows$1(args) {
        const { inputs, backend } = args;
        const { indices, values, denseShape, defaultValue } = inputs;
        if (denseShape.shape.length !== 1) {
            throw new Error(`Dense shape must be a vector, saw:
        ${denseShape.shape}`);
        }
        if (indices.shape.length !== 2) {
            throw new Error(`Indices must be a matrix, saw:
        ${indices.shape}`);
        }
        if (values.shape.length !== 1) {
            throw new Error(`Values must be a vector, saw:
        ${values.shape}`);
        }
        if (defaultValue.shape.length !== 0) {
            throw new Error(`Default value must be a scalar, saw:
        ${defaultValue.shape}`);
        }
        const $indices = backend.data.get(indices.dataId).values;
        const $values = backend.data.get(values.dataId).values;
        const $denseShape = backend.data.get(denseShape.dataId).values;
        const $defaultValue = backend.data.get(defaultValue.dataId).values[0];
        const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = sparseFillEmptyRowsImpl($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);
        return [
            backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),
            backend.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues),
            backend.makeTensorInfo([emptyRowIndicator.length], 'bool', new Uint8Array(emptyRowIndicator.map((value) => Number(value)))),
            backend.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap)),
        ];
    }
    const sparseFillEmptyRowsConfig$1 = {
        kernelName: SparseFillEmptyRows,
        backendName: 'cpu',
        kernelFunc: sparseFillEmptyRows$1,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseReshape$1(args) {
        const { inputs, backend } = args;
        const { inputIndices, inputShape, newShape } = inputs;
        if (inputIndices.shape.length !== 2) {
            throw new Error(`Input indices should be a matrix but received shape
        ${inputIndices.shape}`);
        }
        if (inputShape.shape.length !== 1) {
            throw new Error(`Input shape should be a vector but received shape
        ${inputShape.shape}`);
        }
        if (newShape.shape.length !== 1) {
            throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);
        }
        const $inputShape = Array.from(backend.data.get(inputShape.dataId).values);
        const $inputIndices = backend.data.get(inputIndices.dataId).values;
        const targetShape = Array.from(backend.data.get(newShape.dataId).values);
        const [newIndices, indicesShape, outputShape] = sparseReshapeImpl($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);
        return [
            backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),
            backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape)),
        ];
    }
    const sparseReshapeConfig$1 = {
        kernelName: SparseReshape,
        backendName: 'cpu',
        kernelFunc: sparseReshape$1,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseSegmentMean$1(args) {
        const { inputs, backend } = args;
        const { data, indices, segmentIds } = inputs;
        if (data.shape.length < 1) {
            throw new Error(`Data should be at least 1 dimensional but received scalar`);
        }
        if (indices.shape.length !== 1) {
            throw new Error(`Indices should be a vector but received shape
          ${indices.shape}`);
        }
        if (segmentIds.shape.length !== 1) {
            throw new Error(`Segment ids should be a vector but received shape
          ${segmentIds.shape}`);
        }
        if (indices.shape[0] !== segmentIds.shape[0]) {
            throw new Error(`segmentIds and indices should have same size.`);
        }
        const $data = backend.data.get(data.dataId).values;
        const $indices = backend.data.get(indices.dataId).values;
        const $segmentIds = backend.data.get(segmentIds.dataId).values;
        const [outputData, outputDataShape] = sparseSegmentReductionImpl($data, data.shape, data.dtype, $indices, $segmentIds, true);
        return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
    }
    const sparseSegmentMeanConfig$1 = {
        kernelName: SparseSegmentMean,
        backendName: 'cpu',
        kernelFunc: sparseSegmentMean$1,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseSegmentSum$1(args) {
        const { inputs, backend } = args;
        const { data, indices, segmentIds } = inputs;
        if (data.shape.length < 1) {
            throw new Error(`Data should be at least 1 dimensional but received scalar`);
        }
        if (indices.shape.length !== 1) {
            throw new Error(`Indices should be a vector but received shape
         ${indices.shape}`);
        }
        if (segmentIds.shape.length !== 1) {
            throw new Error(`Segment ids should be a vector but received shape
         ${segmentIds.shape}`);
        }
        if (indices.shape[0] !== segmentIds.shape[0]) {
            throw new Error(`segmentIds and indices should have same size.`);
        }
        const $data = backend.data.get(data.dataId).values;
        const $indices = backend.data.get(indices.dataId).values;
        const $segmentIds = backend.data.get(segmentIds.dataId).values;
        const [outputData, outputDataShape] = sparseSegmentReductionImpl($data, data.shape, data.dtype, $indices, $segmentIds);
        return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
    }
    const sparseSegmentSumConfig$1 = {
        kernelName: SparseSegmentSum,
        backendName: 'cpu',
        kernelFunc: sparseSegmentSum$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseToDense$1(args) {
        const { inputs, backend, attrs } = args;
        const { sparseIndices, sparseValues, defaultValue } = inputs;
        const { outputShape } = attrs;
        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = calculateShapes(sparseValues, sparseIndices, outputShape);
        const sumDupeIndices = false;
        const indicesBuf = backend.bufferSync(sparseIndices);
        const updatesBuf = backend.bufferSync(sparseValues);
        const $defaultValue = backend.data.get(defaultValue.dataId).values[0];
        const outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);
        return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);
    }
    const sparseToDenseConfig$1 = {
        kernelName: SparseToDense,
        backendName: 'cpu',
        kernelFunc: sparseToDense$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function splitV$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { numOrSizeSplits, axis } = attrs;
        const $axis = parseAxisParam(axis, x.shape)[0];
        const splitSizes = prepareSplitSize(x, numOrSizeSplits, $axis);
        const begin = new Array(x.shape.length).fill(0);
        const size = x.shape.slice();
        return splitSizes.map(s => {
            const sliceSize = [...size];
            sliceSize[$axis] = s;
            const sliceT = slice$1({ inputs: { x }, backend, attrs: { begin, size: sliceSize } });
            begin[$axis] += s;
            return sliceT;
        });
    }
    const splitVConfig$1 = {
        kernelName: SplitV,
        backendName: 'cpu',
        kernelFunc: splitV$1
    };

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const squareConfig$1 = {
        kernelName: Square,
        backendName: 'cpu',
        kernelFunc: ({ inputs, backend }) => {
            const { x } = inputs;
            const cpuBackend = backend;
            assertNotComplex$1(x, 'square');
            const values = cpuBackend.data.get(x.dataId).values;
            const newValues = new Float32Array(values.length);
            for (let i = 0; i < values.length; ++i) {
                const value = values[i];
                newValues[i] = value * value;
            }
            const dataId = cpuBackend.write(newValues, x.shape, x.dtype);
            return { dataId, shape: x.shape, dtype: x.dtype };
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const step$1 = unaryKernelFunc$1(Step, (xi, attrs) => {
        const stepAttrs = attrs;
        if (isNaN(xi)) {
            return NaN;
        }
        else {
            return xi > 0 ? 1 : stepAttrs.alpha;
        }
    });
    const stepConfig$1 = {
        kernelName: Step,
        backendName: 'cpu',
        kernelFunc: step$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function stridedSlice$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;
        assertNotComplex$1(x, 'stridedSlice');
        const { finalShapeSparse, finalShape, isIdentity, sliceDim0, isSimpleSlice, begin: $begin, end: $end, strides: $strides } = sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
        let result;
        // ref:
        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc
        if (isIdentity) {
            // Optimization #1, slice is a no-op plus reshape
            result = reshape$1({ inputs: { x }, backend, attrs: { shape: finalShape } });
        }
        else if (sliceDim0 || isSimpleSlice) {
            // Optimization #2, slice is memory contiguous (only occurs in dim 0)
            assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);
            const size = computeOutShape$2($begin, $end, $strides);
            // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).
            const sliced = slice$1({ inputs: { x }, backend, attrs: { begin: $begin, size } });
            result =
                reshape$1({ inputs: { x: sliced }, backend, attrs: { shape: finalShape } });
            backend.disposeIntermediateTensorInfo(sliced);
        }
        else {
            const xBuf = backend.bufferSync(x);
            const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);
            result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);
        }
        return result;
    }
    const stridedSliceConfig$1 = {
        kernelName: StridedSlice,
        backendName: 'cpu',
        kernelFunc: stridedSlice$1
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function stringNGrams$1(args) {
        const { inputs, backend, attrs } = args;
        const { separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences } = attrs;
        const { data, dataSplits } = inputs;
        const $data = backend.data.get(data.dataId).values;
        const $dataSplits = backend.data.get(dataSplits.dataId).values;
        const [nGrams, nGramsSplits] = stringNGramsImpl($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);
        return [
            backend.makeTensorInfo([nGrams.length], 'string', nGrams),
            backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),
        ];
    }
    const stringNGramsConfig$1 = {
        kernelName: StringNGrams,
        backendName: 'cpu',
        kernelFunc: stringNGrams$1,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function stringSplit$1(args) {
        const { inputs, backend, attrs } = args;
        const { skipEmpty } = attrs;
        const { input, delimiter } = inputs;
        if (input.dtype !== 'string') {
            throw new Error('Input must be of datatype string');
        }
        if (input.shape.length !== 1) {
            throw new Error(`Input must be a vector, got shape: ${input.shape}`);
        }
        if (delimiter.shape.length !== 0) {
            throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);
        }
        const $input = backend.data.get(input.dataId).values;
        const $delimiter = backend.data.get(delimiter.dataId).values[0];
        const [indices, values, shape] = stringSplitImpl($input, $delimiter, skipEmpty);
        const outputSize = values.length;
        return [
            backend.makeTensorInfo([outputSize, 2], 'int32', indices),
            backend.makeTensorInfo([outputSize], 'string', values),
            backend.makeTensorInfo([2], 'int32', new Int32Array(shape))
        ];
    }
    const stringSplitConfig$1 = {
        kernelName: StringSplit,
        backendName: 'cpu',
        kernelFunc: stringSplit$1,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function stringToHashBucketFast$1(args) {
        const { inputs, backend, attrs } = args;
        const { numBuckets } = attrs;
        const { input } = inputs;
        if (input.dtype !== 'string') {
            throw new Error('Input must be of datatype string');
        }
        if (numBuckets <= 0) {
            throw new Error(`Number of buckets must be at least 1`);
        }
        const $input = backend.data.get(input.dataId).values;
        const output = stringToHashBucketFastImpl($input, numBuckets);
        return backend.makeTensorInfo(input.shape, 'int32', output);
    }
    const stringToHashBucketFastConfig$1 = {
        kernelName: StringToHashBucketFast,
        backendName: 'cpu',
        kernelFunc: stringToHashBucketFast$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const tan$1 = unaryKernelFunc$1(Tan, (xi) => Math.tan(xi));
    const tanConfig$1 = {
        kernelName: Tan,
        backendName: 'cpu',
        kernelFunc: tan$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const tanh$1 = unaryKernelFunc$1(Tanh, (xi) => Math.tanh(xi));
    const tanhConfig$1 = {
        kernelName: Tanh,
        backendName: 'cpu',
        kernelFunc: tanh$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function tile$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { reps } = attrs;
        assertNotComplex$1(x, 'tile');
        const outBuf = tileImpl(backend.bufferSync(x), reps);
        return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
    }
    const tileConfig$1 = {
        kernelName: Tile,
        backendName: 'cpu',
        kernelFunc: tile$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function topK$1(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { k, sorted } = attrs;
        assertNotComplex$1(x, 'topk');
        const xVals = backend.data.get(x.dataId).values;
        const [allTopKVals, allTopKIndices] = topKImpl(xVals, x.shape, x.dtype, k, sorted);
        return [
            backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),
            backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)
        ];
    }
    const topKConfig$1 = {
        kernelName: TopK,
        backendName: 'cpu',
        kernelFunc: topK$1
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function transform$1(args) {
        const { inputs, attrs, backend } = args;
        const { image, transforms } = inputs;
        const { interpolation, fillMode, fillValue, outputShape } = attrs;
        const [batch, imageHeight, imageWidth, numChannels] = image.shape;
        const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];
        const outShape = [batch, outHeight, outWidth, numChannels];
        const strides = computeStrides(image.shape);
        const batchStride = strides[0];
        const rowStride = strides[1];
        const colStride = strides[2];
        const outVals = getTypedArrayFromDType(image.dtype, sizeFromShape(outShape));
        outVals.fill(fillValue);
        const imageVals = backend.data.get(image.dataId).values;
        const transformVals = backend.data.get(transforms.dataId).values;
        // Ref TF implementation:
        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h
        for (let b = 0; b < batch; ++b) {
            const transform = transforms.shape[0] === 1 ?
                transformVals :
                transformVals.subarray(b * 8, b * 8 + 8);
            for (let outY = 0; outY < outHeight; ++outY) {
                for (let outX = 0; outX < outWidth; ++outX) {
                    for (let channel = 0; channel < numChannels; ++channel) {
                        let val;
                        const projection = transform[6] * outX + transform[7] * outY + 1;
                        if (projection === 0) {
                            // Return the fill value for infinite coordinates,
                            // which are outside the input image
                            continue;
                        }
                        const inX = (transform[0] * outX + transform[1] * outY + transform[2]) /
                            projection;
                        const inY = (transform[3] * outX + transform[4] * outY + transform[5]) /
                            projection;
                        const x = mapCoord(inX, imageWidth, fillMode);
                        const y = mapCoord(inY, imageHeight, fillMode);
                        switch (interpolation) {
                            case 'nearest':
                                val = nearestInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, b, y, x, channel, fillValue);
                                break;
                            case 'bilinear':
                                val = bilinearInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, b, y, x, channel, fillValue);
                                break;
                            default:
                                throw new Error(`Error in Transform: Expect 'nearest' or ` +
                                    `'bilinear', but got ${interpolation}`);
                        }
                        const ind = b * batchStride + outY * rowStride + outX * colStride + channel;
                        outVals[ind] = val;
                    }
                }
            }
            return backend.makeTensorInfo(outShape, image.dtype, outVals);
        }
        const dataId = backend.write(outVals, outShape, image.dtype);
        return { dataId, shape: image.shape, dtype: image.dtype };
    }
    const transformConfig$1 = {
        kernelName: Transform,
        backendName: 'cpu',
        kernelFunc: transform$1
    };
    function mapCoord(outCoord, len, mode) {
        switch (mode) {
            case 'reflect':
                return mapCoordReflect(outCoord, len);
            case 'wrap':
                return mapCoordWrap(outCoord, len);
            case 'nearest':
                return mapCoordNearest(outCoord, len);
            case 'constant':
            default:
                return mapCoordConstant(outCoord);
        }
    }
    function mapCoordReflect(outCoord, len) {
        // Reflect [abcd] to [dcba|abcd|dcba].
        let inCoord = outCoord;
        if (inCoord < 0) {
            if (len <= 1) {
                inCoord = 0;
            }
            else {
                const sz2 = 2 * len;
                if (inCoord < sz2) {
                    inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;
                }
                inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;
            }
        }
        else if (inCoord > len - 1) {
            if (len <= 1) {
                inCoord = 0;
            }
            else {
                const sz2 = 2 * len;
                inCoord -= sz2 * Math.trunc(inCoord / sz2);
                if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1;
                }
            }
        }
        // clamp is necessary because when outCoord = 3.5 and len = 4,
        // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.
        return clamp(0, inCoord, len - 1);
    }
    function mapCoordWrap(outCoord, len) {
        // Wrap [abcd] to [abcd|abcd|abcd].
        let inCoord = outCoord;
        if (inCoord < 0) {
            if (len <= 1) {
                inCoord = 0;
            }
            else {
                const sz = len - 1;
                inCoord += len * (Math.trunc(-inCoord / sz) + 1);
            }
        }
        else if (inCoord > len - 1) {
            if (len <= 1) {
                inCoord = 0;
            }
            else {
                const sz = len - 1;
                inCoord -= len * Math.trunc(inCoord / sz);
            }
        }
        // clamp is necessary because when outCoord = -0.5 and len = 4,
        // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.
        return clamp(0, inCoord, len - 1);
    }
    function mapCoordConstant(outCoord, len) {
        return outCoord;
    }
    function mapCoordNearest(outCoord, len) {
        return clamp(0, outCoord, len - 1);
    }
    function readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {
        const ind = batch * batchStride + y * rowStride + x * colStride + channel;
        if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {
            return imageVals[ind];
        }
        else {
            return fillValue;
        }
    }
    function nearestInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {
        const $y = Math.round(y);
        const $x = Math.round(x);
        return readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, $y, $x, channel, fillValue);
    }
    function bilinearInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {
        const yFloor = Math.floor(y);
        const xFloor = Math.floor(x);
        const yCeil = yFloor + 1;
        const xCeil = xFloor + 1;
        // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)
        //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)
        const valueYFloor = (xCeil - x) *
            readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xFloor, channel, fillValue) +
            (x - xFloor) *
                readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xCeil, channel, fillValue);
        // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)
        //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)
        const valueYCeil = (xCeil - x) *
            readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xFloor, channel, fillValue) +
            (x - xFloor) *
                readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xCeil, channel, fillValue);
        // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)
        //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)
        return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function unique$1(args) {
        const { inputs, attrs, backend } = args;
        const { axis } = attrs;
        const { x } = inputs;
        assertNotComplex$1(x, 'unique');
        const values = backend.data.get(x.dataId).values;
        const { outputValues, outputShape, indices } = uniqueImpl(values, axis, x.shape, x.dtype);
        return [
            backend.makeTensorInfo(outputShape, x.dtype, outputValues),
            backend.makeTensorInfo([indices.length], 'int32', indices),
        ];
    }
    const uniqueConfig$1 = {
        kernelName: Unique,
        backendName: 'cpu',
        kernelFunc: unique$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function unpack$1(args) {
        const { inputs, backend, attrs } = args;
        const { value } = inputs;
        let { axis } = attrs;
        if (axis < 0) {
            axis += value.shape.length;
        }
        const valueRank = value.shape.length;
        const num = value.shape[axis];
        const outShape = new Array(valueRank - 1);
        let outIndex = 0;
        for (let i = 0; i < valueRank; i++) {
            if (i !== axis) {
                outShape[outIndex++] = value.shape[i];
            }
        }
        const begin = new Array(valueRank).fill(0);
        const size = value.shape.slice();
        size[axis] = 1;
        const res = new Array(num);
        for (let i = 0; i < res.length; i++) {
            begin[axis] = i;
            const tempRes = slice$1({ inputs: { x: value }, backend, attrs: { begin, size } });
            res[i] = reshape$1({ inputs: { x: tempRes }, backend, attrs: { shape: outShape } });
            backend.disposeIntermediateTensorInfo(tempRes);
        }
        return res;
    }
    const unpackConfig$1 = {
        kernelName: Unpack,
        backendName: 'cpu',
        kernelFunc: unpack$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function unsortedSegmentSum$1(args) {
        const { inputs, backend, attrs } = args;
        const { x, segmentIds } = inputs;
        const { numSegments } = attrs;
        assertNotComplex$1(x, 'unsortedSegmentSum');
        const xRank = x.shape.length;
        const segmentIdsRank = segmentIds.shape.length;
        const res = [];
        const intermediates = [];
        // Reshape the segment id's so that they can be broadcast with
        // x. The new shape should be [segmentIds.shape, 1, ..., 1]
        const numIters = xRank - segmentIdsRank;
        let $segmentIds = segmentIds;
        for (let i = 0; i < numIters; ++i) {
            const expanded = expandDims$1({ inputs: { input: $segmentIds }, backend, attrs: { dim: i + 1 } });
            $segmentIds = expanded;
            intermediates.push(expanded);
        }
        for (let i = 0; i < numSegments; ++i) {
            const scalarValue = createScalarValue(i, 'int32');
            const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);
            const mask = equal$1({ inputs: { a: segmentId, b: $segmentIds }, backend });
            const maskCasted = cast$1({ inputs: { x: mask }, backend, attrs: { dtype: 'float32' } });
            const mul = multiply$1({ inputs: { a: maskCasted, b: x }, backend });
            const sumTensorInfo = sum$1({ inputs: { x: mul }, backend, attrs: { axis: 0, keepDims: false } });
            res.push(sumTensorInfo);
            intermediates.push(segmentId);
            intermediates.push(mask);
            intermediates.push(maskCasted);
            intermediates.push(mul);
            intermediates.push(sumTensorInfo);
        }
        const result = pack$1({ inputs: res, backend, attrs: { axis: 0 } });
        intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return result;
    }
    const unsortedSegmentSumConfig$1 = {
        kernelName: UnsortedSegmentSum,
        backendName: 'cpu',
        kernelFunc: unsortedSegmentSum$1
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // List all kernel configs here
    const kernelConfigs$1 = [
        _fusedMatMulConfig$1,
        absConfig$1,
        acosConfig$1,
        acoshConfig$1,
        addConfig$1,
        addNConfig$1,
        allConfig$1,
        anyConfig$1,
        argMaxConfig$1,
        argMinConfig$1,
        asinConfig$1,
        asinhConfig$1,
        atanConfig$1,
        atan2Config$1,
        atanhConfig$1,
        avgPoolConfig$1,
        avgPool3DConfig$1,
        avgPool3DGradConfig$1,
        avgPoolGradConfig$1,
        batchMatMulConfig$1,
        batchNormConfig$1,
        batchToSpaceNDConfig$1,
        bincountConfig$1,
        broadcastArgsConfig$1,
        castConfig$1,
        ceilConfig$1,
        clipByValueConfig$1,
        complexConfig$1,
        complexAbsConfig$1,
        concatConfig$1,
        conv2DConfig$1,
        conv2DBackpropFilterConfig$1,
        conv2DBackpropInputConfig$1,
        conv3DConfig$1,
        conv3DBackpropFilterV2Config$1,
        conv3DBackpropInputV2Config,
        cosConfig$1,
        coshConfig$1,
        cropAndResizeConfig$1,
        cumsumConfig$1,
        denseBincountConfig$1,
        depthToSpaceConfig$1,
        depthwiseConv2dNativeConfig$1,
        depthwiseConv2dNativeBackpropFilterConfig$1,
        depthwiseConv2dNativeBackpropInputConfig$1,
        diagConfig$1,
        dilation2DConfig$1,
        dilation2DBackpropFilterConfig,
        dilation2DBackpropInputConfig,
        einsumConfig$1,
        eluConfig$1,
        eluGradConfig$1,
        equalConfig$1,
        erfConfig$1,
        expConfig$1,
        expandDimsConfig$1,
        expm1Config$1,
        fftConfig$1,
        fillConfig$1,
        flipLeftRightConfig$1,
        floorConfig$1,
        floorDivConfig$1,
        fusedConv2DConfig$1,
        fusedDepthwiseConv2DConfig$1,
        gatherNdConfig$1,
        gatherV2Config$1,
        greaterConfig$1,
        greaterEqualConfig$1,
        identityConfig$1,
        ifftConfig$1,
        imagConfig$1,
        isFiniteConfig$1,
        isInfConfig$1,
        isNaNConfig$1,
        leakyReluConfig$1,
        lessConfig$1,
        lessEqualConfig$1,
        linSpaceConfig$1,
        logConfig$1,
        log1pConfig$1,
        logicalAndConfig$1,
        logicalNotConfig$1,
        logicalOrConfig$1,
        LRNConfig$1,
        LRNGradConfig$1,
        maxConfig$1,
        maximumConfig$1,
        maxPoolConfig$1,
        maxPool3DConfig$1,
        maxPool3DGradConfig$1,
        maxPoolGradConfig$1,
        maxPoolWithArgmaxConfig$1,
        meanConfig$1,
        minConfig$1,
        minimumConfig$1,
        mirrorPadConfig$1,
        modConfig$1,
        multinomialConfig$1,
        multiplyConfig$1,
        negConfig$1,
        nonMaxSuppressionV3Config$1,
        nonMaxSuppressionV4Config$1,
        nonMaxSuppressionV5Config$1,
        notEqualConfig$1,
        oneHotConfig$1,
        onesLikeConfig$1,
        packConfig$1,
        padV2Config$1,
        powConfig$1,
        preluConfig$1,
        prodConfig$1,
        rangeConfig$1,
        realConfig$1,
        realDivConfig$1,
        reciprocalConfig$1,
        reluConfig$1,
        relu6Config$1,
        reshapeConfig$1,
        resizeBilinearConfig$1,
        resizeBilinearGradConfig$1,
        resizeNearestNeighborConfig$1,
        resizeNearestNeighborGradConfig$1,
        reverseConfig$1,
        rotateWithOffsetConfig$1,
        roundConfig$1,
        rsqrtConfig$1,
        scatterNdConfig$1,
        selectConfig$1,
        seluConfig$1,
        sigmoidConfig$1,
        signConfig$1,
        sinConfig$1,
        sinhConfig$1,
        sliceConfig$1,
        softmaxConfig$1,
        softplusConfig$1,
        spaceToBatchNDConfig$1,
        sparseFillEmptyRowsConfig$1,
        sparseReshapeConfig$1,
        sparseSegmentMeanConfig$1,
        sparseSegmentSumConfig$1,
        sparseToDenseConfig$1,
        splitVConfig$1,
        sqrtConfig$1,
        squareConfig$1,
        squaredDifferenceConfig$1,
        stepConfig$1,
        stridedSliceConfig$1,
        stringNGramsConfig$1,
        stringSplitConfig$1,
        stringToHashBucketFastConfig$1,
        subConfig$1,
        sumConfig$1,
        tanConfig$1,
        tanhConfig$1,
        tileConfig$1,
        topKConfig$1,
        transformConfig$1,
        transposeConfig$1,
        uniqueConfig$1,
        unpackConfig$1,
        unsortedSegmentSumConfig$1,
        zerosLikeConfig$1
    ];
    for (const kernelConfig of kernelConfigs$1) {
        registerKernel(kernelConfig);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const contexts = {};
    const WEBGL_ATTRIBUTES = {
        alpha: false,
        antialias: false,
        premultipliedAlpha: false,
        preserveDrawingBuffer: false,
        depth: false,
        stencil: false,
        failIfMajorPerformanceCaveat: true
    };
    function setWebGLContext(webGLVersion, gl) {
        contexts[webGLVersion] = gl;
    }
    function getWebGLContext(webGLVersion, customCanvas) {
        if (!(webGLVersion in contexts)) {
            const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);
            if (newCtx !== null) {
                contexts[webGLVersion] = newCtx;
            }
            else {
                console.log('Could not get context for WebGL version', webGLVersion);
                return null;
            }
        }
        const gl = contexts[webGLVersion];
        if (gl == null || gl.isContextLost()) {
            delete contexts[webGLVersion];
            return getWebGLContext(webGLVersion);
        }
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.STENCIL_TEST);
        gl.disable(gl.BLEND);
        gl.disable(gl.DITHER);
        gl.disable(gl.POLYGON_OFFSET_FILL);
        gl.disable(gl.SAMPLE_COVERAGE);
        gl.enable(gl.SCISSOR_TEST);
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        return contexts[webGLVersion];
    }
    function createCanvas(webGLVersion) {
        if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {
            return new OffscreenCanvas(300, 150);
        }
        else if (typeof document !== 'undefined') {
            return document.createElement('canvas');
        }
        else {
            throw new Error('Cannot create a canvas in this context');
        }
    }
    function getWebGLRenderingContext(webGLVersion, customCanvas) {
        if (webGLVersion !== 1 && webGLVersion !== 2) {
            throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');
        }
        const canvas = customCanvas == null ? createCanvas(webGLVersion) : customCanvas;
        canvas.addEventListener('webglcontextlost', (ev) => {
            ev.preventDefault();
            delete contexts[webGLVersion];
        }, false);
        if (webGLVersion === 1) {
            return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||
                canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES));
        }
        return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    var PackingScheme;
    (function (PackingScheme) {
        /**
         * All values in a single texel are densely packed without any constraints.
         *
         * This is how the shader encodes a tensor with shape = [2, 3, 4]
         * (indices are [batch, row, col]).
         *
         * 000|001   010|011   020|021
         * -------   -------   -------
         * 002|003   012|013   022|023
         *
         * 100|101   110|111   120|121
         * -------   -------   -------
         * 102|103   112|113   122|123
         *
         */
        PackingScheme[PackingScheme["DENSE"] = 0] = "DENSE";
        /**
         * Single texels contain only values from the same batch, and from adjacent
         * rows and columns.
         *
         * This is how the shader encodes a tensor with shape = [2, 3, 5]
         * (indices are [batch, row, col]).
         *
         * 000|001   002|003   004|xxx   020|021   022|023   024|xxx
         * -------   -------   -------   -------   -------   -------
         * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx
         *
         * 100|101   102|103   104|xxx   120|121   122|123   124|xxx
         * -------   -------   -------   -------   -------   -------
         * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx
         *
         */
        PackingScheme[PackingScheme["SHARED_BATCH"] = 1] = "SHARED_BATCH";
    })(PackingScheme || (PackingScheme = {}));
    var TextureUsage;
    (function (TextureUsage) {
        TextureUsage[TextureUsage["RENDER"] = 0] = "RENDER";
        TextureUsage[TextureUsage["UPLOAD"] = 1] = "UPLOAD";
        TextureUsage[TextureUsage["PIXELS"] = 2] = "PIXELS";
        TextureUsage[TextureUsage["DOWNLOAD"] = 3] = "DOWNLOAD";
    })(TextureUsage || (TextureUsage = {}));
    var PhysicalTextureType;
    (function (PhysicalTextureType) {
        PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT16"] = 0] = "UNPACKED_FLOAT16";
        PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT32"] = 1] = "UNPACKED_FLOAT32";
        PhysicalTextureType[PhysicalTextureType["PACKED_4X1_UNSIGNED_BYTE"] = 2] = "PACKED_4X1_UNSIGNED_BYTE";
        PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT32"] = 3] = "PACKED_2X2_FLOAT32";
        PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT16"] = 4] = "PACKED_2X2_FLOAT16";
    })(PhysicalTextureType || (PhysicalTextureType = {}));
    function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {
        return [columns, rows];
    }
    function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {
        return matrixSize * channelsPerTexture;
    }
    /**
     * Get shape for densely packed RGBA texture.
     */
    function getDenseTexShape(shape) {
        const size = sizeFromShape(shape);
        const texelsNeeded = Math.ceil(size / 4);
        return sizeToSquarishShape(texelsNeeded);
    }
    function getPackedMatrixTextureShapeWidthHeight(rows, columns) {
        return [
            Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))
        ];
    }
    function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {
        const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);
        return w * h * 4;
    }
    function getTextureConfig(
    // tslint:disable-next-line:no-any
    gl, textureHalfFloatExtension) {
        // tslint:disable-next-line:no-any
        const glany = gl;
        let internalFormatFloat;
        let internalFormatHalfFloat;
        let internalFormatPackedHalfFloat;
        let internalFormatPackedFloat;
        let textureFormatFloat;
        let downloadTextureFormat;
        let downloadUnpackNumChannels;
        let defaultNumChannels;
        let textureTypeHalfFloat;
        let textureTypeFloat;
        if (env().getNumber('WEBGL_VERSION') === 2) {
            internalFormatFloat = glany.R32F;
            internalFormatHalfFloat = glany.R16F;
            internalFormatPackedHalfFloat = glany.RGBA16F;
            internalFormatPackedFloat = glany.RGBA32F;
            textureFormatFloat = glany.RED;
            downloadUnpackNumChannels = 4;
            defaultNumChannels = 1;
            textureTypeHalfFloat = glany.HALF_FLOAT;
            textureTypeFloat = glany.FLOAT;
            downloadTextureFormat = glany.RGBA8;
        }
        else {
            internalFormatFloat = gl.RGBA;
            internalFormatHalfFloat = gl.RGBA;
            internalFormatPackedHalfFloat = gl.RGBA;
            internalFormatPackedFloat = glany.RGBA;
            textureFormatFloat = gl.RGBA;
            downloadUnpackNumChannels = 4;
            defaultNumChannels = 4;
            textureTypeHalfFloat = textureHalfFloatExtension != null ?
                textureHalfFloatExtension.HALF_FLOAT_OES :
                null;
            textureTypeFloat = gl.FLOAT;
            downloadTextureFormat = gl.RGBA;
        }
        return {
            internalFormatFloat,
            internalFormatHalfFloat,
            internalFormatPackedHalfFloat,
            internalFormatPackedFloat,
            textureFormatFloat,
            downloadTextureFormat,
            downloadUnpackNumChannels,
            defaultNumChannels,
            textureTypeHalfFloat,
            textureTypeFloat
        };
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function callAndCheck(gl, func) {
        const returnValue = func();
        if (env().getBool('DEBUG')) {
            checkWebGLError(gl);
        }
        return returnValue;
    }
    function checkWebGLError(gl) {
        const error = gl.getError();
        if (error !== gl.NO_ERROR) {
            throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));
        }
    }
    // https://en.wikipedia.org/wiki/Half-precision_floating-point_format
    const MIN_FLOAT16 = 5.96e-8;
    const MAX_FLOAT16 = 65504;
    function canBeRepresented(num) {
        if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||
            (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {
            return true;
        }
        return false;
    }
    function getWebGLErrorMessage(gl, status) {
        switch (status) {
            case gl.NO_ERROR:
                return 'NO_ERROR';
            case gl.INVALID_ENUM:
                return 'INVALID_ENUM';
            case gl.INVALID_VALUE:
                return 'INVALID_VALUE';
            case gl.INVALID_OPERATION:
                return 'INVALID_OPERATION';
            case gl.INVALID_FRAMEBUFFER_OPERATION:
                return 'INVALID_FRAMEBUFFER_OPERATION';
            case gl.OUT_OF_MEMORY:
                return 'OUT_OF_MEMORY';
            case gl.CONTEXT_LOST_WEBGL:
                return 'CONTEXT_LOST_WEBGL';
            default:
                return `Unknown error code ${status}`;
        }
    }
    function getExtensionOrThrow(gl, extensionName) {
        return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension "' + extensionName + '" not supported on this browser.');
    }
    function createVertexShader$1(gl, vertexShaderSource) {
        const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), 'Unable to create vertex WebGLShader.');
        callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));
        callAndCheck(gl, () => gl.compileShader(vertexShader));
        if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {
            console.log(gl.getShaderInfoLog(vertexShader));
            throw new Error('Failed to compile vertex shader.');
        }
        return vertexShader;
    }
    function createFragmentShader(gl, fragmentShaderSource) {
        const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), 'Unable to create fragment WebGLShader.');
        callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));
        callAndCheck(gl, () => gl.compileShader(fragmentShader));
        if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {
            logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));
            throw new Error('Failed to compile fragment shader.');
        }
        return fragmentShader;
    }
    const lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;
    function logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {
        const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);
        if (lineNumberRegexResult == null) {
            console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);
            console.log(shaderSource);
            return;
        }
        const lineNumber = +lineNumberRegexResult[1];
        const shaderLines = shaderSource.split('\n');
        const pad = shaderLines.length.toString().length + 2;
        const linesWithLineNumbers = shaderLines.map((line, lineNumber) => rightPad((lineNumber + 1).toString(), pad) + line);
        let maxLineLength = 0;
        for (let i = 0; i < linesWithLineNumbers.length; i++) {
            maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);
        }
        const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);
        const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);
        const afterErrorLines = linesWithLineNumbers.slice(lineNumber);
        console.log(beforeErrorLines.join('\n'));
        console.log(shaderInfoLog.split('\n')[0]);
        console.log(`%c ${rightPad(errorLine[0], maxLineLength)}`, 'border:1px solid red; background-color:#e3d2d2; color:#a61717');
        console.log(afterErrorLines.join('\n'));
    }
    function createProgram(gl) {
        return throwIfNull(gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');
    }
    function linkProgram(gl, program) {
        callAndCheck(gl, () => gl.linkProgram(program));
        if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
            console.log(gl.getProgramInfoLog(program));
            throw new Error('Failed to link vertex and fragment shaders.');
        }
    }
    function validateProgram(gl, program) {
        callAndCheck(gl, () => gl.validateProgram(program));
        if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {
            console.log(gl.getProgramInfoLog(program));
            throw new Error('Shader program validation failed.');
        }
    }
    function createStaticVertexBuffer(gl, data) {
        const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');
        callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));
        callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));
        return buffer;
    }
    function createStaticIndexBuffer(gl, data) {
        const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');
        callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));
        callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));
        return buffer;
    }
    function createTexture(gl) {
        return throwIfNull(gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');
    }
    function validateTextureSize(width, height) {
        const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');
        if ((width <= 0) || (height <= 0)) {
            const requested = `[${width}x${height}]`;
            throw new Error('Requested texture size ' + requested + ' is invalid.');
        }
        if ((width > maxTextureSize) || (height > maxTextureSize)) {
            const requested = `[${width}x${height}]`;
            const max = `[${maxTextureSize}x${maxTextureSize}]`;
            throw new Error('Requested texture size ' + requested +
                ' greater than WebGL maximum on this browser / GPU ' + max + '.');
        }
    }
    function createFramebuffer(gl) {
        return throwIfNull(gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');
    }
    function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {
        const loc = gl.getAttribLocation(program, attribute);
        if (loc === -1) {
            // The GPU compiler decided to strip out this attribute because it's unused,
            // thus no need to bind.
            return false;
        }
        callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));
        callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));
        callAndCheck(gl, () => gl.enableVertexAttribArray(loc));
        return true;
    }
    function bindTextureUnit(gl, texture, textureUnit) {
        validateTextureUnit(gl, textureUnit);
        callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));
        callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));
    }
    function getProgramUniformLocationOrThrow(gl, program, uniformName) {
        return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform "' + uniformName + '" not present in program.');
    }
    function getProgramUniformLocation(gl, program, uniformName) {
        return gl.getUniformLocation(program, uniformName);
    }
    function bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {
        callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));
        callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));
    }
    function bindColorTextureToFramebuffer(gl, texture, framebuffer) {
        callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));
        callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));
    }
    function unbindColorTextureFromFramebuffer(gl, framebuffer) {
        callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));
        callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));
    }
    function validateFramebuffer(gl) {
        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
        if (status !== gl.FRAMEBUFFER_COMPLETE) {
            throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));
        }
    }
    function getFramebufferErrorMessage(gl, status) {
        switch (status) {
            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';
            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';
            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';
            case gl.FRAMEBUFFER_UNSUPPORTED:
                return 'FRAMEBUFFER_UNSUPPORTED';
            default:
                return `unknown error ${status}`;
        }
    }
    function throwIfNull(gl, returnTOrNull, failureMessage) {
        const tOrNull = callAndCheck(gl, () => returnTOrNull());
        if (tOrNull == null) {
            throw new Error(failureMessage);
        }
        return tOrNull;
    }
    function validateTextureUnit(gl, textureUnit) {
        const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;
        const glTextureUnit = textureUnit + gl.TEXTURE0;
        if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {
            const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;
            throw new Error(`textureUnit must be in ${textureUnitRange}.`);
        }
    }
    function getBatchDim(shape, dimsToSkip = 2) {
        return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));
    }
    function getRowsCols(shape) {
        if (shape.length === 0) {
            throw Error('Cannot get rows and columns of an empty shape array.');
        }
        return [
            shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]
        ];
    }
    function getShapeAs3D(shape) {
        let shapeAs3D = [1, 1, 1];
        const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);
        if (!isScalar) {
            shapeAs3D =
                [getBatchDim(shape), ...getRowsCols(shape)];
        }
        return shapeAs3D;
    }
    function getTextureShapeFromLogicalShape(logShape, isPacked = false) {
        let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');
        if (isPacked) {
            maxTexSize = maxTexSize * 2;
            // This logic ensures we accurately count the number of packed texels needed
            // to accommodate the tensor. We can only pack values in the same texel if
            // they are from adjacent pairs of rows/cols within the same batch. So if a
            // tensor has 3 rows, we pretend it has 4 rows in order to account for the
            // fact that the texels containing the third row are half empty.
            logShape = logShape.map((d, i) => i >= logShape.length - 2 ?
                nearestLargerEven(logShape[i]) :
                logShape[i]);
            // Packed texture height is at least 2 (the channel height of a single
            // texel).
            if (logShape.length === 1) {
                logShape = [2, logShape[0]];
            }
        }
        // If logical shape is 2, we don't squeeze, since we want to match physical.
        if (logShape.length !== 2) {
            const squeezeResult = squeezeShape(logShape);
            logShape = squeezeResult.newShape;
        }
        let size = sizeFromShape(logShape);
        if (logShape.length <= 1 && size <= maxTexSize) {
            return [1, size];
        }
        else if (logShape.length === 2 && logShape[0] <= maxTexSize &&
            logShape[1] <= maxTexSize) {
            return logShape;
        }
        else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&
            logShape[2] <= maxTexSize) {
            return [logShape[0] * logShape[1], logShape[2]];
        }
        else if (logShape.length === 3 && logShape[0] <= maxTexSize &&
            logShape[1] * logShape[2] <= maxTexSize) {
            return [logShape[0], logShape[1] * logShape[2]];
        }
        else if (logShape.length === 4 &&
            logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&
            logShape[3] <= maxTexSize) {
            return [logShape[0] * logShape[1] * logShape[2], logShape[3]];
        }
        else if (logShape.length === 4 && logShape[0] <= maxTexSize &&
            logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {
            return [logShape[0], logShape[1] * logShape[2] * logShape[3]];
        }
        else {
            if (isPacked) {
                // For packed textures size equals the number of channels required to
                // accommodate the texture data. However in order to squarify such that
                // inner dimensions stay even, we rewrite size to equal the number of
                // texels. Then in the return statement we rehydrate the squarified
                // dimensions to channel units.
                const batchDim = getBatchDim(logShape);
                let rows = 2, cols = 2;
                if (logShape.length) {
                    [rows, cols] = getRowsCols(logShape);
                }
                size = batchDim * (rows / 2) * (cols / 2);
                return sizeToSquarishShape(size).map(d => d * 2);
            }
            return sizeToSquarishShape(size);
        }
    }
    function isEven(n) {
        return n % 2 === 0;
    }
    /**
     * This determines whether reshaping a packed texture requires rearranging
     * the data within the texture, assuming 2x2 packing.
     */
    function isReshapeFree(shape1, shape2) {
        shape1 = shape1.slice(-2);
        shape2 = shape2.slice(-2);
        if (arraysEqual(shape1, shape2)) {
            return true;
        }
        if (!shape1.length || !shape2.length) { // One of the shapes is a scalar.
            return true;
        }
        if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||
            shape2[1] === 0) {
            return true;
        }
        if (shape1.length !== shape2.length) { // One of the shapes is a vector.
            const shape1Cols = shape1.slice(-1)[0];
            const shape2Cols = shape2.slice(-1)[0];
            if (shape1Cols === shape2Cols) {
                return true;
            }
            if (isEven(shape1Cols) && isEven(shape2Cols) &&
                (shape1[0] === 1 || shape2[0] === 1)) {
                return true;
            }
        }
        return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);
    }
    // We cache webgl params because the environment gets reset between
    // unit tests and we don't want to constantly query the WebGLContext for
    // MAX_TEXTURE_SIZE.
    let MAX_TEXTURE_SIZE;
    let MAX_TEXTURES_IN_SHADER;
    function getWebGLMaxTextureSize(webGLVersion) {
        if (MAX_TEXTURE_SIZE == null) {
            const gl = getWebGLContext(webGLVersion);
            MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        }
        return MAX_TEXTURE_SIZE;
    }
    function getMaxTexturesInShader(webGLVersion) {
        if (MAX_TEXTURES_IN_SHADER == null) {
            const gl = getWebGLContext(webGLVersion);
            MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
        }
        // We cap at 16 to avoid spurious runtime "memory exhausted" error.
        return Math.min(16, MAX_TEXTURES_IN_SHADER);
    }
    function getWebGLDisjointQueryTimerVersion(webGLVersion) {
        if (webGLVersion === 0) {
            return 0;
        }
        let queryTimerVersion;
        const gl = getWebGLContext(webGLVersion);
        if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&
            webGLVersion === 2) {
            queryTimerVersion = 2;
        }
        else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {
            queryTimerVersion = 1;
        }
        else {
            queryTimerVersion = 0;
        }
        return queryTimerVersion;
    }
    function hasExtension(gl, extensionName) {
        const ext = gl.getExtension(extensionName);
        return ext != null;
    }
    function isWebGLVersionEnabled(webGLVersion) {
        try {
            const gl = getWebGLContext(webGLVersion);
            if (gl != null) {
                return true;
            }
        }
        catch (e) {
            console.log('Error when getting WebGL context: ', e);
            return false;
        }
        return false;
    }
    function isCapableOfRenderingToFloatTexture(webGLVersion) {
        if (webGLVersion === 0) {
            return false;
        }
        const gl = getWebGLContext(webGLVersion);
        if (webGLVersion === 1) {
            if (!hasExtension(gl, 'OES_texture_float')) {
                return false;
            }
        }
        else {
            if (!hasExtension(gl, 'EXT_color_buffer_float')) {
                return false;
            }
        }
        const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
        return isFrameBufferComplete;
    }
    /**
     * Check if we can download values from a float/half-float texture.
     *
     * Note that for performance reasons we use binding a texture to a framebuffer
     * as a proxy for ability to download float values later using readPixels. The
     * texture params of this texture will not match those in readPixels exactly
     * but if we are unable to bind some kind of float texture to the frameBuffer
     * then we definitely will not be able to read float values from it.
     */
    function isDownloadFloatTextureEnabled(webGLVersion) {
        if (webGLVersion === 0) {
            return false;
        }
        const gl = getWebGLContext(webGLVersion);
        if (webGLVersion === 1) {
            if (!hasExtension(gl, 'OES_texture_float')) {
                return false;
            }
            if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {
                return false;
            }
        }
        else {
            if (hasExtension(gl, 'EXT_color_buffer_float')) {
                return createFloatTextureAndBindToFramebuffer(gl);
            }
            const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';
            if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {
                const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
                return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);
            }
            return false;
        }
        const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
        return isFrameBufferComplete;
    }
    function createFloatTextureAndBindToFramebuffer(gl) {
        const texConfig = getTextureConfig(gl);
        const texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        const width = 1;
        const height = 1;
        gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);
        const frameBuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
        const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.deleteTexture(texture);
        gl.deleteFramebuffer(frameBuffer);
        return isFrameBufferComplete;
    }
    function createHalfFloatTextureAndBindToFramebuffer(
    // tslint:disable-next-line:no-any
    gl, textureHalfFloatExtension) {
        const texConfig = getTextureConfig(gl, textureHalfFloatExtension);
        const texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        const width = 1;
        const height = 1;
        gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);
        const frameBuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
        const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.deleteTexture(texture);
        gl.deleteFramebuffer(frameBuffer);
        return isFrameBufferComplete;
    }
    function isWebGLFenceEnabled(webGLVersion) {
        if (webGLVersion !== 2) {
            return false;
        }
        const gl = getWebGLContext(webGLVersion);
        // tslint:disable-next-line:no-any
        const isEnabled = gl.fenceSync != null;
        return isEnabled;
    }
    function assertNotComplex(tensor, opName) {
        if (!Array.isArray(tensor)) {
            tensor = [tensor];
        }
        tensor.forEach(t => {
            if (t != null) {
                assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors ` +
                    'in the WebGL backend.');
            }
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ENV = env();
    /**
     * This file contains WebGL-specific flag registrations.
     */
    /**
     * True if WebGL is supported.
     */
    ENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);
    /** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */
    ENV.registerFlag('WEBGL_VERSION', () => {
        if (isWebGLVersionEnabled(2)) {
            return 2;
        }
        else if (isWebGLVersionEnabled(1)) {
            return 1;
        }
        return 0;
    });
    /** Whether to check for numerical representation problems. */
    ENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);
    ENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);
    /** Whether the WebGL backend will sometimes forward ops to the CPU. */
    ENV.registerFlag('WEBGL_CPU_FORWARD', () => true);
    /** Whether the WebGL backend will always use f16 textures for rendering. */
    ENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);
    /** Whether to turn all packing related flags on. */
    ENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));
    /** Whether we will pack the batchnormalization op. */
    ENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));
    /** Whether we will pack the clip op. */
    ENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));
    /** Whether we will pack the depthwise conv op. */
    ENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));
    /** Whether we will pack binary ops. */
    ENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
    /** Whether we will pack unary ops. */
    ENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
    /** Whether we will pack array ops. */
    ENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
    /** Whether we will pack image ops. */
    ENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
    /** Whether we will pack reduce ops. */
    ENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));
    /** Whether packed WebGL kernels lazily unpack their outputs. */
    ENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));
    /** Whether we will use the im2col algorithm to speed up convolutions. */
    ENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));
    /** The maximum texture dimension. */
    ENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));
    /** The maximum texture dimension. */
    ENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));
    /**
     * The disjoint_query_timer extension version.
     * 0: disabled, 1: EXT_disjoint_timer_query, 2:
     * EXT_disjoint_timer_query_webgl2.
     * In Firefox with WebGL 2.0,
     * EXT_disjoint_timer_query_webgl2 is not available, so we must use the
     * WebGL 1.0 extension.
     */
    ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {
        const webGLVersion = ENV.getNumber('WEBGL_VERSION');
        if (webGLVersion === 0) {
            return 0;
        }
        return getWebGLDisjointQueryTimerVersion(webGLVersion);
    });
    /**
     * Whether the timer object from the disjoint_query_timer extension gives
     * timing information that is reliable.
     */
    ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&
        !isMobile());
    /**
     * Whether the device is physically capable of rendering to float32 textures.
     */
    ENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));
    /**
     * Whether rendering to float32 textures is enabled. If disabled, renders to
     * float16 textures.
     */
    ENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {
        return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?
            false :
            ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');
    });
    /**
     * Whether downloading float textures is enabled (16 or 32 bit). If disabled,
     * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.
     */
    ENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));
    /** Whether the fence API is available. */
    ENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));
    /**
     * Tensors with size <= than this will be uploaded as uniforms, not textures.
     */
    ENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {
        // Use uniform uploads only when 32bit floats are supported. In
        // 16bit
        // environments there are problems with comparing a 16bit texture value
        // with a 32bit uniform value.
        const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');
        return useUniforms ? 4 : 0;
    });
    /**
     * If the total number of bytes allocated on the GPU is greater than this
     * number, we will aggressively delete textures upon disposal with
     * gl.deleteMatrixTexture, rather than making them available for reuse.
     *
     * Default value -1 indicates that we will never aggressively delete textures.
     */
    ENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {
        return -1;
    }, threshold => {
        if (threshold < 0 && threshold !== -1) {
            throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +
                `delete) or at least 0, but got ${threshold}.`);
        }
    });
    /**
     * Trigger a manual GL command flush if the threshold of time has passed since
     * previous Kernel execution. This can be useful for Andorid device where GL
     * command flush are delayed un til the end of javascript task. This value is
     * measured in millisecond. Typically you want to set this value to close to 1.
     *
     * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that
     * we will not enforce manual flush and depend on system default flush schedule.
     */
    ENV.registerFlag('WEBGL_FLUSH_THRESHOLD', () => {
        return isMobile() ? 1 : -1;
    }, threshold => {
        if (threshold < 0 && threshold !== -1) {
            throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +
                `manual flush) or at least 0, but got ${threshold}.`);
        }
    });
    /**
     * Threshold for input tensor size that determines whether WebGL backend will
     * delegate computation to CPU.
     *
     * Default value is 128.
     */
    ENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);
    /** Whether we will use shapes uniforms. */
    ENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);
    /**
     * Threshold for last dimension of input tensor that determines whether
     * WebGL backend for the Top K op will delegate computation to CPU. If input
     * is smaller than threshold then CPU will be used
     *
     * Default value is 100000.
     */
    ENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);
    /**
     * Threshold for K that determines whether
     * WebGL backend for the Top K op will delegate computation to CPU. If k
     * is larger than threshold then CPU will be used
     *
     * Default value is 128.
     */
    ENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function getGlslDifferences() {
        let version;
        let attribute;
        let varyingVs;
        let varyingFs;
        let texture2D;
        let output;
        let defineOutput;
        let defineSpecialNaN;
        let defineSpecialInf;
        let defineRound;
        if (env().getNumber('WEBGL_VERSION') === 2) {
            version = '#version 300 es';
            attribute = 'in';
            varyingVs = 'out';
            varyingFs = 'in';
            texture2D = 'texture';
            output = 'outputColor';
            defineOutput = 'out vec4 outputColor;';
            // Use custom isnan definition to work across differences between
            // implementations on various platforms. While this should happen in ANGLE
            // we still see differences between android and windows (on chrome) when
            // using isnan directly.
            defineSpecialNaN = `
      bool isnan_custom(float val) {
        return (val > 0.0 || val < 0.0) ? false : val != 0.0;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `;
            // In webgl 2 we do not need to specify a custom isinf so there is no
            // need for a special INFINITY constant.
            defineSpecialInf = ``;
            defineRound = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `;
        }
        else {
            version = '';
            attribute = 'attribute';
            varyingVs = 'varying';
            varyingFs = 'varying';
            texture2D = 'texture2D';
            output = 'gl_FragColor';
            defineOutput = '';
            // WebGL1 has no built in isnan so we define one here.
            defineSpecialNaN = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `;
            defineSpecialInf = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `;
            defineRound = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `;
        }
        return {
            version,
            attribute,
            varyingVs,
            varyingFs,
            texture2D,
            output,
            defineOutput,
            defineSpecialNaN,
            defineSpecialInf,
            defineRound
        };
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Produces GLSL code that derives logical coordinates from a flat
     * index. The code performs integer division with each stride and decrements
     * the index until the index equals the final dimension coordinate.
     */
    function getLogicalCoordinatesFromFlatIndex(coords, shape, index = 'index') {
        const strides = computeStrides(shape);
        return strides
            .map((stride, i) => {
            const line1 = `int ${coords[i]} = ${index} / ${stride}`;
            const line2 = i === strides.length - 1 ?
                `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :
                `index -= ${coords[i]} * ${stride}`;
            return `${line1}; ${line2};`;
        })
            .join('');
    }
    function getOutputLogicalCoordinatesFromFlatIndexByUniform(coords, shape, index = 'index') {
        const strides = computeStrides(shape);
        return strides
            .map((_, i) => {
            const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;
            const line2 = i === strides.length - 1 ?
                `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${i}]` :
                `index -= ${coords[i]} * outShapeStrides[${i}]`;
            return `${line1}; ${line2};`;
        })
            .join('');
    }
    // Produces GLSL code that computes strides.
    function symbolicallyComputeStrides(indicesArr, variableName) {
        const numCoords = indicesArr.length;
        const shape = indicesArr.map(d => `${variableName}[${d}]`);
        const strides = new Array(numCoords - 1);
        strides[numCoords - 2] = shape[numCoords - 1];
        for (let i = numCoords - 3; i >= 0; --i) {
            strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;
        }
        return strides;
    }
    function getLogicalCoordinatesFromFlatIndexByUniform(coords, variableName, index = 'index') {
        const indicesArray = coords.map((_, i) => i);
        const strides = symbolicallyComputeStrides(indicesArray, variableName);
        return strides
            .map((_, i) => {
            const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;
            const line2 = i === strides.length - 1 ?
                `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :
                `index -= ${coords[i]} * ${strides[i]}`;
            return `${line1}; ${line2};`;
        })
            .join('');
    }
    /**
     * Produces GLSL that computes the flat index from 3D coordinates.
     */
    function getFlatIndexFrom3D(shape) {
        const strides = computeStrides(shape).map(d => d.toString());
        return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;
  }
`;
    }
    function getFlatIndexFrom3DOutput() {
        return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
    }
    const ENCODE_FLOAT_SNIPPET = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const { getBroadcastDims } = backend_util;
    function makeShader(inputsInfo, outputShape, program) {
        const prefixSnippets = [];
        inputsInfo.forEach(x => {
            const size = sizeFromShape(x.shapeInfo.logicalShape);
            // Snippet when we decided to upload the values as uniform.
            if (x.shapeInfo.isUniform) {
                prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);
            }
            else {
                prefixSnippets.push(`uniform sampler2D ${x.name};`);
                prefixSnippets.push(`uniform int offset${x.name};`);
            }
            if (program.enableShapeUniforms) {
                const { uniformShape } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);
                switch (uniformShape.length) {
                    case 1:
                        prefixSnippets.push(`uniform int ${x.name}Shape;`);
                        break;
                    case 2:
                        prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);
                        break;
                    case 3:
                        prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);
                        break;
                    case 4:
                        prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);
                        break;
                }
                prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);
            }
        });
        if (program.enableShapeUniforms) {
            switch (outputShape.logicalShape.length) {
                case 1:
                    prefixSnippets.push(`uniform int outShape;`);
                    break;
                case 2:
                    prefixSnippets.push(`uniform ivec2 outShape;`);
                    prefixSnippets.push(`uniform int outShapeStrides;`);
                    break;
                case 3:
                    prefixSnippets.push(`uniform ivec3 outShape;`);
                    prefixSnippets.push(`uniform ivec2 outShapeStrides;`);
                    break;
                case 4:
                    prefixSnippets.push(`uniform ivec4 outShape;`);
                    prefixSnippets.push(`uniform ivec3 outShapeStrides;`);
                    break;
            }
            prefixSnippets.push(`uniform ivec2 outTexShape;`);
        }
        if (program.customUniforms) {
            program.customUniforms.forEach((d) => {
                prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);
            });
        }
        const inputPrefixSnippet = prefixSnippets.join('\n');
        const inputSamplingSnippet = inputsInfo
            .map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms))
            .join('\n');
        const outTexShape = outputShape.texShape;
        const glsl = getGlslDifferences();
        const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);
        let outputSamplingSnippet;
        let floatTextureSetOutputSnippet;
        let shaderPrefix = getShaderPrefix(glsl);
        if (outputShape.isPacked) {
            outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);
            floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);
        }
        else {
            outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);
            floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);
        }
        if (program.packedInputs) {
            shaderPrefix += SHADER_PACKED_PREFIX;
        }
        const source = [
            shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,
            inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,
            program.userCode
        ].join('\n');
        return source;
    }
    function getSamplerFromInInfo(inInfo, enableShapeUniforms = false) {
        const shape = inInfo.shapeInfo.logicalShape;
        switch (shape.length) {
            case 0:
                return getSamplerScalar(inInfo, enableShapeUniforms);
            case 1:
                return getSampler1D(inInfo, enableShapeUniforms);
            case 2:
                return getSampler2D(inInfo, enableShapeUniforms);
            case 3:
                return getSampler3D(inInfo, enableShapeUniforms);
            case 4:
                return getSampler4D(inInfo, enableShapeUniforms);
            case 5:
                return getSampler5D(inInfo);
            case 6:
                return getSampler6D(inInfo);
            default:
                throw new Error(`${shape.length}-D input sampling` +
                    ` is not yet supported`);
        }
    }
    function getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {
        const shape = inInfo.shapeInfo.logicalShape;
        switch (shape.length) {
            case 0:
                return getPackedSamplerScalar(inInfo);
            case 1:
                return getPackedSampler1D(inInfo, enableShapeUniforms);
            case 2:
                return getPackedSampler2D(inInfo, enableShapeUniforms);
            case 3:
                return getPackedSampler3D(inInfo, enableShapeUniforms);
            default:
                return getPackedSamplerND(inInfo, enableShapeUniforms);
        }
    }
    function getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false, enableShapeUniforms) {
        let res = '';
        if (usesPackedTextures) {
            res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);
        }
        else {
            res += getSamplerFromInInfo(inInfo, enableShapeUniforms);
        }
        const inShape = inInfo.shapeInfo.logicalShape;
        const outShape = outShapeInfo.logicalShape;
        if (inShape.length <= outShape.length) {
            if (usesPackedTextures) {
                res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);
            }
            else {
                res += getSamplerAtOutputCoords(inInfo, outShapeInfo);
            }
        }
        return res;
    }
    function getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {
        switch (outShape.length) {
            case 0:
                return getOutputScalarCoords();
            case 1:
                return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);
            case 2:
                return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);
            case 3:
                return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);
            default:
                return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);
        }
    }
    function getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {
        switch (outShape.length) {
            case 0:
                return getOutputScalarCoords();
            case 1:
                return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);
            case 2:
                return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);
            case 3:
                return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);
            case 4:
                return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);
            case 5:
                return getOutput5DCoords(outShape, outTexShape);
            case 6:
                return getOutput6DCoords(outShape, outTexShape);
            default:
                throw new Error(`${outShape.length}-D output sampling is not yet supported`);
        }
    }
    function getFloatTextureSampleSnippet(glsl) {
        return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${glsl.texture2D}(textureSampler, uv).r;
    }
  `;
    }
    function getFloatTextureSetRSnippet(glsl) {
        return `
    void setOutput(float val) {
      ${glsl.output} = vec4(val, 0, 0, 0);
    }
  `;
    }
    function getFloatTextureSetRGBASnippet(glsl) {
        return `
    void setOutput(vec4 val) {
      ${glsl.output} = val;
    }
  `;
    }
    function getShaderPrefix(glsl) {
        const SHADER_PREFIX = `${glsl.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${glsl.varyingFs} vec2 resultUV;
    ${glsl.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${glsl.defineSpecialNaN}
    ${glsl.defineSpecialInf}
    ${glsl.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${SAMPLE_1D_SNIPPET}
    ${SAMPLE_2D_SNIPPET}
    ${SAMPLE_3D_SNIPPET}
  `;
        return SHADER_PREFIX;
    }
    const SAMPLE_1D_SNIPPET = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
    const SAMPLE_2D_SNIPPET = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
    const SAMPLE_3D_SNIPPET = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
    const SHADER_PACKED_PREFIX = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
    function getOutputScalarCoords() {
        return `
    int getOutputCoords() {
      return 0;
    }
  `;
    }
    function getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {
        const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
        if (packedTexShape[0] === 1) {
            if (enableShapeUniforms) {
                return `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `;
            }
            return `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);
      }
    `;
        }
        if (packedTexShape[1] === 1) {
            if (enableShapeUniforms) {
                return `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `;
            }
            return `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);
      }
    `;
        }
        if (enableShapeUniforms) {
            return `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `;
        }
        return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);
    }
  `;
    }
    function getOutput1DCoords(shape, texShape, enableShapeUniforms) {
        if (texShape[0] === 1) {
            if (enableShapeUniforms) {
                return `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `;
            }
            return `
      int getOutputCoords() {
        return int(resultUV.x * ${texShape[1]}.0);
      }
    `;
        }
        if (texShape[1] === 1) {
            if (enableShapeUniforms) {
                return `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `;
            }
            return `
      int getOutputCoords() {
        return int(resultUV.y * ${texShape[0]}.0);
      }
    `;
        }
        if (enableShapeUniforms) {
            return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `;
        }
        return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      return resTexRC.x * ${texShape[1]} + resTexRC.y;
    }
  `;
    }
    function getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {
        if (enableShapeUniforms) {
            return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
        }
        const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
        const texelsInLogicalRow = Math.ceil(shape[2] / 2);
        const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);
        return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;

      int b = index / ${texelsInBatch};
      index -= b * ${texelsInBatch};

      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec3(b, r, c);
    }
  `;
    }
    function getOutput3DCoords(shape, texShape, enableShapeUniforms) {
        if (enableShapeUniforms) {
            const coordsFromIndexSnippet = getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);
            return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${coordsFromIndexSnippet}
    return ivec3(r, c, d);
  }
`;
        }
        const coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);
        return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec3(r, c, d);
    }
  `;
    }
    function getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {
        if (enableShapeUniforms) {
            // TODO: support 5d and 6d
            return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
        }
        const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
        const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);
        const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);
        let texelsInBatchN = texelsInBatch;
        let batches = ``;
        let coords = 'b, r, c';
        for (let b = 2; b < shape.length - 1; b++) {
            texelsInBatchN *= shape[shape.length - b - 1];
            batches = `
      int b${b} = index / ${texelsInBatchN};
      index -= b${b} * ${texelsInBatchN};
    ` + batches;
            coords = `b${b}, ` + coords;
        }
        return `
    ivec${shape.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;

      ${batches}

      int b = index / ${texelsInBatch};
      index -= b * ${texelsInBatch};

      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec${shape.length}(${coords});
    }
  `;
    }
    function getOutput4DCoords(shape, texShape, enableShapeUniforms) {
        if (enableShapeUniforms) {
            const coordsFromIndexSnippet = getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);
            return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec4(r, c, d, d2);
    }
  `;
        }
        const coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);
        return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec4(r, c, d, d2);
    }
  `;
    }
    function getOutput5DCoords(shape, texShape) {
        const coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);
        return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},
                             ${texShape[1]}));

      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;

      ${coordsFromIndexSnippet}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
    }
    function getOutput6DCoords(shape, texShape) {
        const coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);
        return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;

      ${coordsFromIndexSnippet}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
    }
    function getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {
        const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
        if (arraysEqual(shape, texShape)) {
            if (enableShapeUniforms) {
                return `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `;
            }
            return `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      }
    `;
        }
        // texels needed to accommodate a logical row
        const texelsInLogicalRow = Math.ceil(shape[1] / 2);
        /**
         * getOutputCoords
         *
         * resTexRC: The rows and columns of the texels. If you move over one
         * texel to the right in the packed texture, you are moving over one column
         * (not two).
         *
         * index: The texel index
         */
        if (enableShapeUniforms) {
            return `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `;
        }
        return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));

      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;
      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec2(r, c);
    }
  `;
    }
    function getOutput2DCoords(shape, texShape, enableShapeUniforms) {
        if (arraysEqual(shape, texShape)) {
            if (enableShapeUniforms) {
                return `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `;
            }
            return `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));
      }
    `;
        }
        if (shape[1] === 1) {
            if (enableShapeUniforms) {
                return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `;
            }
            return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${texShape[0]}, ${texShape[1]}));
        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `;
        }
        if (shape[0] === 1) {
            if (enableShapeUniforms) {
                return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `;
            }
            return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${texShape[0]}, ${texShape[1]}));
        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `;
        }
        if (enableShapeUniforms) {
            return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `;
        }
        return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      int r = index / ${shape[1]};
      int c = index - r * ${shape[1]};
      return ivec2(r, c);
    }
  `;
    }
    function getFlatOffsetUniformName(texName) {
        return `offset${texName}`;
    }
    function getPackedSamplerScalar(inputInfo) {
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        const glsl = getGlslDifferences();
        return `
    vec4 ${funcName}() {
      return ${glsl.texture2D}(${texName}, halfCR);
    }
  `;
    }
    function getSamplerScalar(inputInfo, enableShapeUniforms) {
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        if (inputInfo.shapeInfo.isUniform) {
            return `float ${funcName}() {return ${texName};}`;
        }
        const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;
        if (texNumR === 1 && texNumC === 1) {
            return `
      float ${funcName}() {
        return sampleTexture(${texName}, halfCR);
      }
    `;
        }
        const offset = getFlatOffsetUniformName(texName);
        if (enableShapeUniforms) {
            return `
    float ${funcName}() {
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
        }
        const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;
        return `
    float ${funcName}() {
      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
    }
    function getPackedSampler1D(inputInfo, enableShapeUniforms) {
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        const texShape = inputInfo.shapeInfo.texShape;
        const glsl = getGlslDifferences();
        if (enableShapeUniforms) {
            return `
    vec4 ${funcName}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
        }
        const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
        return `
    vec4 ${funcName}(int index) {
      vec2 uv = packedUVfrom1D(
        ${packedTexShape[0]}, ${packedTexShape[1]}, index);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
    }
    function getSampler1D(inputInfo, enableShapeUniforms) {
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        if (inputInfo.shapeInfo.isUniform) {
            // Uniform arrays will be less than 65505 (no risk of float16 overflow).
            return `
      float ${funcName}(int index) {
        ${getUniformSampler(inputInfo)}
      }
    `;
        }
        const texShape = inputInfo.shapeInfo.texShape;
        const tNumR = texShape[0];
        const tNumC = texShape[1];
        if (tNumC === 1 && tNumR === 1) {
            return `
      float ${funcName}(int index) {
        return sampleTexture(${texName}, halfCR);
      }
    `;
        }
        const offset = getFlatOffsetUniformName(texName);
        if (tNumC === 1) {
            if (enableShapeUniforms) {
                return `
      float ${funcName}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));
        return sampleTexture(${texName}, uv);
      }
    `;
            }
            return `
      float ${funcName}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
        }
        if (tNumR === 1) {
            if (enableShapeUniforms) {
                return `
      float ${funcName}(int index) {
        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
            }
            return `
      float ${funcName}(int index) {
        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
        }
        if (enableShapeUniforms) {
            return `
    float ${funcName}(int index) {
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
        }
        return `
    float ${funcName}(int index) {
      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
    }
    function getPackedSampler2D(inputInfo, enableShapeUniforms) {
        const shape = inputInfo.shapeInfo.logicalShape;
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        const texShape = inputInfo.shapeInfo.texShape;
        const texNumR = texShape[0];
        const texNumC = texShape[1];
        const glsl = getGlslDifferences();
        if (texShape != null && arraysEqual(shape, texShape)) {
            if (enableShapeUniforms) {
                return `
      vec4 ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);

        return ${glsl.texture2D}(${texName}, uv);
      }
    `;
            }
            return `
      vec4 ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);

        return ${glsl.texture2D}(${texName}, uv);
      }
    `;
        }
        if (enableShapeUniforms) {
            return `
    vec4 ${funcName}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
        }
        const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
        const valuesPerRow = Math.ceil(shape[1] / 2);
        return `
    vec4 ${funcName}(int row, int col) {
      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
    }
    function getSampler2D(inputInfo, enableShapeUniforms) {
        const shape = inputInfo.shapeInfo.logicalShape;
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        const texShape = inputInfo.shapeInfo.texShape;
        if (texShape != null && arraysEqual(shape, texShape)) {
            if (enableShapeUniforms) {
                return `
      float ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
            }
            const texNumR = texShape[0];
            const texNumC = texShape[1];
            return `
    float ${funcName}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
        }
        const { newShape, keptDims } = squeezeShape(shape);
        const squeezedShape = newShape;
        if (squeezedShape.length < shape.length) {
            const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
            const params = ['row', 'col'];
            return `
      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
      float ${funcName}(int row, int col) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
        }
        if (inputInfo.shapeInfo.isUniform) {
            // Uniform arrays will be less than 65505 (no risk of float16 overflow).
            return `
      float ${funcName}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
        }
        const texNumR = texShape[0];
        const texNumC = texShape[1];
        const offset = getFlatOffsetUniformName(texName);
        if (texNumC === 1) {
            // index is used directly as physical (no risk of float16 overflow).
            if (enableShapeUniforms) {
                return `
      float ${funcName}(int row, int col) {
        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));
        return sampleTexture(${texName}, uv);
      }
    `;
            }
            return `
    float ${funcName}(int row, int col) {
      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
        }
        if (texNumR === 1) {
            // index is used directly as physical (no risk of float16 overflow).
            if (enableShapeUniforms) {
                return `
      float ${funcName}(int row, int col) {
        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
            }
            return `
    float ${funcName}(int row, int col) {
      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);
      return sampleTexture(${texName}, uv);
    }
  `;
        }
        if (enableShapeUniforms) {
            return `
      float ${funcName}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${texName}Shape[1] + col + ${offset};
        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);
        return sampleTexture(${texName}, uv);
      }
    `;
        }
        return `
  float ${funcName}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${shape[1]} + col + ${offset};
    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
    return sampleTexture(${texName}, uv);
  }
`;
    }
    function getPackedSampler3D(inputInfo, enableShapeUniforms) {
        const shape = inputInfo.shapeInfo.logicalShape;
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        const texShape = inputInfo.shapeInfo.texShape;
        const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
        if (shape[0] === 1) {
            const squeezedShape = shape.slice(1);
            const keptDims = [1, 2];
            const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
            const params = ['b', 'row', 'col'];
            return `
        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
        vec4 ${funcName}(int b, int row, int col) {
          return ${funcName}(${getSqueezedParams(params, keptDims)});
        }
      `;
        }
        const glsl = getGlslDifferences();
        if (enableShapeUniforms) {
            return `
    vec4 ${funcName}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
        }
        const texNumR = packedTexShape[0];
        const texNumC = packedTexShape[1];
        const valuesPerRow = Math.ceil(shape[2] / 2);
        const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);
        return `
    vec4 ${funcName}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
    }
    function getSampler3D(inputInfo, enableShapeUniforms) {
        const shape = inputInfo.shapeInfo.logicalShape;
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        const stride0 = shape[1] * shape[2];
        const stride1 = shape[2];
        const { newShape, keptDims } = squeezeShape(shape);
        const squeezedShape = newShape;
        if (squeezedShape.length < shape.length) {
            const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
            const params = ['row', 'col', 'depth'];
            return `
        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
        float ${funcName}(int row, int col, int depth) {
          return ${funcName}(${getSqueezedParams(params, keptDims)});
        }
      `;
        }
        if (inputInfo.shapeInfo.isUniform) {
            // Uniform arrays will be less than 65505 (no risk of float16 overflow).
            return `
      float ${funcName}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${stride0}, ${stride1}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
        }
        const texShape = inputInfo.shapeInfo.texShape;
        const texNumR = texShape[0];
        const texNumC = texShape[1];
        const flatOffset = inputInfo.shapeInfo.flatOffset;
        if (texNumC === stride0 && flatOffset == null) {
            // texC is used directly as physical (no risk of float16 overflow).
            if (enableShapeUniforms) {
                return `
      float ${funcName}(int row, int col, int depth) {
        int stride1 = ${texName}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
            }
            return `
        float ${funcName}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${texNumC}.0, ${texNumR}.0);
          return sampleTexture(${texName}, uv);
        }
      `;
        }
        if (texNumC === stride1 && flatOffset == null) {
            // texR is used directly as physical (no risk of float16 overflow).
            if (enableShapeUniforms) {
                return `
      float ${funcName}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
            }
            return `
    float ${funcName}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
        }
        const offset = getFlatOffsetUniformName(texName);
        if (enableShapeUniforms) {
            return `
    float ${funcName}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];
      int stride1 = ${texName}Shape[2];
      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);
      return sampleTexture(${texName}, uv);
    }
    `;
        }
        return `
      float ${funcName}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};
        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
        return sampleTexture(${texName}, uv);
      }
  `;
    }
    function getPackedSamplerND(inputInfo, enableShapeUniforms) {
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        const glsl = getGlslDifferences();
        if (enableShapeUniforms) {
            // TODO: support 5d and 6d
            return `
    vec4 ${funcName}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${texName}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);
    }
  `;
        }
        const shape = inputInfo.shapeInfo.logicalShape;
        const rank = shape.length;
        const texShape = inputInfo.shapeInfo.texShape;
        const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
        const texNumR = packedTexShape[0];
        const texNumC = packedTexShape[1];
        const valuesPerRow = Math.ceil(shape[rank - 1] / 2);
        let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);
        let params = `int b, int row, int col`;
        let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;
        for (let b = 2; b < rank - 1; b++) {
            params = `int b${b}, ` + params;
            texelsInBatch *= shape[rank - b - 1];
            index = `b${b} * ${texelsInBatch} + ` + index;
        }
        return `
    vec4 ${funcName}(${params}) {
      int index = ${index};
      int texR = index / ${texNumC};
      int texC = index - texR * ${texNumC};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
    }
    function getSampler4D(inputInfo, enableShapeUniforms) {
        const shape = inputInfo.shapeInfo.logicalShape;
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        const stride2 = shape[3];
        const stride1 = shape[2] * stride2;
        const stride0 = shape[1] * stride1;
        const { newShape, keptDims } = squeezeShape(shape);
        if (newShape.length < shape.length) {
            const newInputInfo = squeezeInputInfo(inputInfo, newShape);
            const params = ['row', 'col', 'depth', 'depth2'];
            return `
      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
      float ${funcName}(int row, int col, int depth, int depth2) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
        }
        if (inputInfo.shapeInfo.isUniform) {
            // Uniform arrays will be less than 65505 (no risk of float16 overflow).
            return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
        }
        const flatOffset = inputInfo.shapeInfo.flatOffset;
        const texShape = inputInfo.shapeInfo.texShape;
        const texNumR = texShape[0];
        const texNumC = texShape[1];
        const stride2Str = `int stride2 = ${texName}Shape[3];`;
        const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;
        const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;
        if (texNumC === stride0 && flatOffset == null) {
            // texC is used directly as physical (no risk of float16 overflow).
            if (enableShapeUniforms) {
                return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        ${stride2Str}
        ${stride1Str}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
            }
            return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${stride1}, ${stride2}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
        }
        if (texNumC === stride2 && flatOffset == null) {
            // texR is used directly as physical (no risk of float16 overflow).
            if (enableShapeUniforms) {
                return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
            }
            return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
        }
        const offset = getFlatOffsetUniformName(texName);
        if (enableShapeUniforms) {
            return `
    float ${funcName}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${stride2Str}
      ${stride1Str}
      ${stride0Str}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
        }
        return `
    float ${funcName}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} +
          depth * ${stride2} + depth2;
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
    }
    function getSampler5D(inputInfo) {
        const shape = inputInfo.shapeInfo.logicalShape;
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        const stride3 = shape[4];
        const stride2 = shape[3] * stride3;
        const stride1 = shape[2] * stride2;
        const stride0 = shape[1] * stride1;
        const { newShape, keptDims } = squeezeShape(shape);
        if (newShape.length < shape.length) {
            const newInputInfo = squeezeInputInfo(inputInfo, newShape);
            const params = ['row', 'col', 'depth', 'depth2', 'depth3'];
            return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
        }
        if (inputInfo.shapeInfo.isUniform) {
            // Uniform arrays will be less than 65505 (no risk of float16 overflow).
            return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +
          depth3;
        ${getUniformSampler(inputInfo)}
      }
    `;
        }
        const flatOffset = inputInfo.shapeInfo.flatOffset;
        const texShape = inputInfo.shapeInfo.texShape;
        const texNumR = texShape[0];
        const texNumC = texShape[1];
        if (texNumC === stride0 && flatOffset == null) {
            // texC is used directly as physical (no risk of float16 overflow).
            return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${stride1}, ${stride2}, ${stride3}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
        }
        if (texNumC === stride3 && flatOffset == null) {
            // texR is used directly as physical (no risk of float16 overflow).
            return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${shape[1] * shape[2] * shape[3]},
               ${shape[2] * shape[3]}, ${shape[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
        }
        const offset = getFlatOffsetUniformName(texName);
        return `
    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +
          depth2 * ${stride3} + depth3 + ${offset};
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
      return sampleTexture(${texName}, uv);
    }
  `;
    }
    function getSampler6D(inputInfo) {
        const shape = inputInfo.shapeInfo.logicalShape;
        const texName = inputInfo.name;
        const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
        const { newShape, keptDims } = squeezeShape(shape);
        if (newShape.length < shape.length) {
            const newInputInfo = squeezeInputInfo(inputInfo, newShape);
            const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];
            return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
        }
        const stride4 = shape[5];
        const stride3 = shape[4] * stride4;
        const stride2 = shape[3] * stride3;
        const stride1 = shape[2] * stride2;
        const stride0 = shape[1] * stride1;
        if (inputInfo.shapeInfo.isUniform) {
            // Uniform arrays will be less than 65505 (no risk of float16 overflow).
            return `
      float ${funcName}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +
          dot(
            vec2(depth3, depth4),
            vec2(${stride4}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
        }
        const flatOffset = inputInfo.shapeInfo.flatOffset;
        const texShape = inputInfo.shapeInfo.texShape;
        const texNumR = texShape[0];
        const texNumC = texShape[1];
        if (texNumC === stride0 && flatOffset == null) {
            // texC is used directly as physical (no risk of float16 overflow).
            return `
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
        }
        if (texNumC === stride4 && flatOffset == null) {
            // texR is used directly as physical (no risk of float16 overflow).
            return `
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},
               ${shape[2] * shape[3] * shape[4]},
               ${shape[3] * shape[4]},
               ${shape[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
        }
        const offset = getFlatOffsetUniformName(texName);
        return `
    float ${funcName}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +
          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
      return sampleTexture(${texName}, uv);
    }
  `;
    }
    function getUniformSampler(inputInfo) {
        const texName = inputInfo.name;
        const inSize = sizeFromShape(inputInfo.shapeInfo.logicalShape);
        if (inSize < 2) {
            return `return ${texName};`;
        }
        return `
    for (int i = 0; i < ${inSize}; i++) {
      if (i == index) {
        return ${texName}[i];
      }
    }
  `;
    }
    function getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {
        const texName = inputInfo.name;
        const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
        const funcName = 'get' + texFuncSnippet + 'AtOutCoords';
        const inRank = inputInfo.shapeInfo.logicalShape.length;
        const outRank = outShapeInfo.logicalShape.length;
        const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
        const type = getCoordsDataType(outRank);
        const rankDiff = outRank - inRank;
        let coordsSnippet;
        const fields = ['x', 'y', 'z', 'w', 'u', 'v'];
        if (inRank === 0) {
            coordsSnippet = '';
        }
        else if (outRank < 2 && broadcastDims.length >= 1) {
            coordsSnippet = 'coords = 0;';
        }
        else {
            coordsSnippet =
                broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)
                    .join('\n');
        }
        let unpackedCoordsSnippet = '';
        if (outRank < 2 && inRank > 0) {
            unpackedCoordsSnippet = 'coords';
        }
        else {
            unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape
                .map((s, i) => `coords.${fields[i + rankDiff]}`)
                .join(', ');
        }
        let output = `return outputValue;`;
        const inSize = sizeFromShape(inputInfo.shapeInfo.logicalShape);
        const isInputScalar = inSize === 1;
        const outSize = sizeFromShape(outShapeInfo.logicalShape);
        const isOutputScalar = outSize === 1;
        if (inRank === 1 && !isInputScalar && !isOutputScalar) {
            output = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
        }
        else if (isInputScalar && !isOutputScalar) {
            if (outRank === 1) {
                output = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `;
            }
            else {
                output = `
        return vec4(outputValue.x);
      `;
            }
        }
        else if (broadcastDims.length) {
            const rows = inRank - 2;
            const cols = inRank - 1;
            if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {
                output = `return vec4(outputValue.x);`;
            }
            else if (broadcastDims.indexOf(rows) > -1) {
                output = `return vec4(outputValue.x, outputValue.y, ` +
                    `outputValue.x, outputValue.y);`;
            }
            else if (broadcastDims.indexOf(cols) > -1) {
                output = `return vec4(outputValue.xx, outputValue.zz);`;
            }
        }
        return `
    vec4 ${funcName}() {
      ${type} coords = getOutputCoords();
      ${coordsSnippet}
      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});
      ${output}
    }
  `;
    }
    function getSamplerAtOutputCoords(inputInfo, outShapeInfo) {
        const texName = inputInfo.name;
        const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
        const funcName = 'get' + texFuncSnippet + 'AtOutCoords';
        const outTexShape = outShapeInfo.texShape;
        const inTexShape = inputInfo.shapeInfo.texShape;
        const inRank = inputInfo.shapeInfo.logicalShape.length;
        const outRank = outShapeInfo.logicalShape.length;
        if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&
            inputInfo.shapeInfo.flatOffset == null &&
            arraysEqual(inTexShape, outTexShape)) {
            return `
      float ${funcName}() {
        return sampleTexture(${texName}, resultUV);
      }
    `;
        }
        const type = getCoordsDataType(outRank);
        const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
        const rankDiff = outRank - inRank;
        let coordsSnippet;
        const fields = ['x', 'y', 'z', 'w', 'u', 'v'];
        if (inRank === 0) {
            coordsSnippet = '';
        }
        else if (outRank < 2 && broadcastDims.length >= 1) {
            coordsSnippet = 'coords = 0;';
        }
        else {
            coordsSnippet =
                broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)
                    .join('\n');
        }
        let unpackedCoordsSnippet = '';
        if (outRank < 2 && inRank > 0) {
            unpackedCoordsSnippet = 'coords';
        }
        else {
            unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape
                .map((s, i) => `coords.${fields[i + rankDiff]}`)
                .join(', ');
        }
        return `
    float ${funcName}() {
      ${type} coords = getOutputCoords();
      ${coordsSnippet}
      return get${texFuncSnippet}(${unpackedCoordsSnippet});
    }
  `;
    }
    function getCoordsDataType(rank) {
        if (rank <= 1) {
            return 'int';
        }
        else if (rank === 2) {
            return 'ivec2';
        }
        else if (rank === 3) {
            return 'ivec3';
        }
        else if (rank === 4) {
            return 'ivec4';
        }
        else if (rank === 5) {
            return 'ivec5';
        }
        else if (rank === 6) {
            return 'ivec6';
        }
        else {
            throw Error(`GPU for rank ${rank} is not yet supported`);
        }
    }
    function getUniformInfoFromShape(isPacked, shape, texShape) {
        const { newShape, keptDims } = squeezeShape(shape);
        const rank = shape.length;
        const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;
        const squeezeShape$1 = useSqueezePackedShape ? shape.slice(1) : newShape;
        const useSqueezeShape = (!isPacked && rank > 1 && !arraysEqual(shape, texShape) &&
            newShape.length < rank) ||
            useSqueezePackedShape;
        const uniformShape = useSqueezeShape ? squeezeShape$1 : shape;
        return { useSqueezeShape, uniformShape, keptDims };
    }
    /** Returns a new input info (a copy) that has a squeezed logical shape. */
    function squeezeInputInfo(inInfo, squeezedShape) {
        // Deep copy.
        const newInputInfo = JSON.parse(JSON.stringify(inInfo));
        newInputInfo.shapeInfo.logicalShape = squeezedShape;
        return newInputInfo;
    }
    function getSqueezedParams(params, keptDims) {
        return keptDims.map(d => params[d]).join(', ');
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function compileProgram(gpgpu, program, inputs, output) {
        const inputInfos = inputs.map((input, i) => {
            const shapeInfo = {
                logicalShape: input.shape,
                texShape: input.isUniform ? null : input.texData.texShape,
                isUniform: input.isUniform,
                isPacked: input.isUniform ? false : input.texData.isPacked,
                flatOffset: null
            };
            if (input.texData != null && input.texData.slice != null &&
                input.texData.slice.flatOffset > 0) {
                shapeInfo.flatOffset = input.texData.slice.flatOffset;
            }
            return { name: program.variableNames[i], shapeInfo };
        });
        const inShapeInfos = inputInfos.map(x => x.shapeInfo);
        const outShapeInfo = {
            logicalShape: output.shape,
            texShape: output.texData.texShape,
            isUniform: false,
            isPacked: output.texData.isPacked,
            flatOffset: null
        };
        const source = makeShader(inputInfos, outShapeInfo, program);
        const fragmentShader = createFragmentShader(gpgpu.gl, source);
        const webGLProgram = gpgpu.createProgram(fragmentShader);
        // Add special uniforms (NAN, INFINITY)
        let infLoc = null;
        const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);
        if (env().getNumber('WEBGL_VERSION') === 1) {
            infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);
        }
        // Add user-defined uniforms
        const shouldThrow = false;
        const uniformLocations = {};
        const inShapesLocations = {};
        const inTexShapesLocations = {};
        for (let i = 0; i < program.variableNames.length; i++) {
            const varName = program.variableNames[i];
            uniformLocations[varName] =
                gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);
            uniformLocations[`offset${varName}`] =
                gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);
            if (program.enableShapeUniforms) {
                inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);
                inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);
            }
        }
        let outShapeLocation;
        let outTexShapeLocation;
        let outShapeStridesLocation;
        if (program.enableShapeUniforms) {
            outShapeLocation =
                gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);
            outShapeStridesLocation =
                gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);
            outTexShapeLocation =
                gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);
        }
        const customUniformLocations = [];
        if (program.customUniforms) {
            program.customUniforms.forEach((d, i) => {
                customUniformLocations[i] =
                    gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);
            });
        }
        return {
            program,
            fragmentShader,
            source,
            webGLProgram,
            uniformLocations,
            customUniformLocations,
            inShapeInfos,
            outShapeInfo,
            infLoc,
            nanLoc,
            inShapesLocations,
            inTexShapesLocations,
            outShapeLocation,
            outShapeStridesLocation,
            outTexShapeLocation
        };
    }
    function validateBinaryAndProgram(shapeInfos, inputs) {
        if (shapeInfos.length !== inputs.length) {
            throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` +
                `was executed with ${inputs.length} inputs`);
        }
        shapeInfos.forEach((s, i) => {
            const shapeA = s.logicalShape;
            const input = inputs[i];
            const shapeB = input.shape;
            if (!arraysEqual(shapeA, shapeB)) {
                throw Error(`Binary was compiled with different shapes than ` +
                    `the current args. Shapes ${shapeA} and ${shapeB} must match`);
            }
            // The input is uploaded as uniform.
            if (s.isUniform && input.isUniform) {
                return;
            }
            const texShapeA = s.texShape;
            const texShapeB = input.isUniform ? null : input.texData.texShape;
            if (!arraysEqual(texShapeA, texShapeB)) {
                throw Error(`Binary was compiled with different texture shapes than the` +
                    ` current args. Shape ${texShapeA} and ${texShapeB} must match`);
            }
        });
    }
    function runProgram(gpgpu, binary, inputs, output, customUniformValues) {
        if (!binary.program.enableShapeUniforms) {
            validateBinaryAndProgram(binary.inShapeInfos, inputs);
            validateBinaryAndProgram([binary.outShapeInfo], [output]);
        }
        const outTex = output.texData.texture;
        const outTexShape = output.texData.texShape;
        if (output.texData.isPacked) {
            gpgpu.setOutputPackedMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);
        }
        else {
            gpgpu.setOutputMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);
        }
        gpgpu.setProgram(binary.webGLProgram);
        // Set special uniforms (NAN, INFINITY)
        if (env().getNumber('WEBGL_VERSION') === 1) {
            if (binary.infLoc !== null) {
                gpgpu.gl.uniform1f(binary.infLoc, Infinity);
            }
        }
        if (binary.nanLoc !== null) {
            gpgpu.gl.uniform1f(binary.nanLoc, NaN);
        }
        // Set user-defined inputs
        inputs.forEach((input, i) => {
            const varName = binary.program.variableNames[i];
            const varLoc = binary.uniformLocations[varName];
            const varOffsetLoc = binary.uniformLocations[`offset${varName}`];
            const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];
            const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];
            if (varShapeLoc) {
                const { uniformShape } = getUniformInfoFromShape(binary.program.packedInputs, input.shape, input.texData.texShape);
                switch (uniformShape.length) {
                    case 1:
                        gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));
                        break;
                    case 2:
                        gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));
                        break;
                    case 3:
                        gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));
                        break;
                    case 4:
                        gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));
                        break;
                }
            }
            if (varTexShapeLoc) {
                gpgpu.gl.uniform2i(varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);
            }
            if (varLoc == null) {
                // The compiler inferred that this variable is not used in this shader.
                return;
            }
            if (input.isUniform) {
                // Upload the values of the tensor as uniform.
                if (sizeFromShape(input.shape) < 2) {
                    gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);
                }
                else {
                    let vals = input.uniformValues;
                    if (!(vals instanceof Float32Array)) {
                        vals = new Float32Array(vals);
                    }
                    gpgpu.gl.uniform1fv(varLoc, vals);
                }
                return;
            }
            // If the input was sliced, upload the flat offset index.
            if (input.texData.slice != null && varOffsetLoc != null) {
                gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);
            }
            gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);
        });
        const outShapeLoc = binary.outShapeLocation;
        if (outShapeLoc) {
            switch (output.shape.length) {
                case 1:
                    gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));
                    break;
                case 2:
                    gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));
                    break;
                case 3:
                    gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));
                    break;
                case 4:
                    gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));
                    break;
            }
        }
        if (binary.outShapeStridesLocation) {
            const strides = computeStrides(output.shape);
            switch (output.shape.length) {
                case 2:
                    gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));
                    break;
                case 3:
                    gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));
                    break;
                case 4:
                    gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));
                    break;
            }
        }
        if (binary.outTexShapeLocation) {
            gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);
        }
        if (binary.program.customUniforms && customUniformValues) {
            binary.program.customUniforms.forEach((d, i) => {
                const customLoc = binary.customUniformLocations[i];
                const customValue = customUniformValues[i];
                if (d.type === 'float') {
                    gpgpu.gl.uniform1fv(customLoc, customValue);
                }
                else if (d.type === 'vec2') {
                    gpgpu.gl.uniform2fv(customLoc, customValue);
                }
                else if (d.type === 'vec3') {
                    gpgpu.gl.uniform3fv(customLoc, customValue);
                }
                else if (d.type === 'vec4') {
                    gpgpu.gl.uniform4fv(customLoc, customValue);
                }
                else if (d.type === 'int') {
                    gpgpu.gl.uniform1iv(customLoc, customValue);
                }
                else if (d.type === 'ivec2') {
                    gpgpu.gl.uniform2iv(customLoc, customValue);
                }
                else if (d.type === 'ivec3') {
                    gpgpu.gl.uniform3iv(customLoc, customValue);
                }
                else if (d.type === 'ivec4') {
                    gpgpu.gl.uniform4iv(customLoc, customValue);
                }
                else {
                    throw Error(`uniform type ${d.type} is not supported yet.`);
                }
            });
        }
        gpgpu.executeProgram();
    }
    function makeShaderKey(program, inputs, output) {
        let keyInputs = '';
        inputs.concat(output).forEach(x => {
            const hasOffset = x.texData != null && x.texData.slice != null &&
                x.texData.slice.flatOffset > 0;
            // TODO: Remove the condition of !x.isUniform.
            if (program.enableShapeUniforms && !x.isUniform) {
                const xTexShape = x.texData.texShape;
                const { useSqueezeShape, uniformShape, keptDims } = getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);
                let rank1 = '', rank2 = '', rank34 = '';
                if (uniformShape.length === 1 && program.packedInputs) {
                    const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];
                    rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;
                }
                else if (uniformShape.length === 2 && !program.packedInputs) {
                    rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;
                }
                else if (uniformShape.length > 2 && !program.packedInputs) {
                    const strides = computeStrides(uniformShape);
                    rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;
                }
                const xRank = x.shape.length;
                const isLogicalShapTexShapeEqual = uniformShape.length === 2 && arraysEqual(x.shape, xTexShape);
                const isScalar = sizeFromShape(x.shape) === 1;
                const broadcastDims = getBroadcastDims$1(x.shape, output.shape);
                const isInOutTexShapeEqual = !program.packedInputs &&
                    xRank === output.shape.length &&
                    arraysEqual(xTexShape, output.texData.texShape);
                const isTexShapeGreaterThanOne = program.packedInputs || uniformShape.length > 2 ?
                    '' :
                    `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;
                // These key components are needed due to shader_compiler is embedding
                // them in the shader.
                // |xRank| is used to determine the coords length. See
                // get[Packed]SamplerAtOutputCoords.
                // |isInOutTexShapeEqual| is used to determine whether going to an
                // optimization path in getSamplerAtOutputCoords.
                // |useSqueezeShape| is extracted from squeezeInputInfo of
                // getSampler[2|3|4]D/getPackedSampler3D.
                // |isScalar| is extracted from isInputScalar/isOutputScalar in
                // getPackedSamplerAtOutputCoords.
                // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.
                // |isLogicalShapTexShapeEqual| is used in
                // getOutput[Packed]2DCoords/get[Packed]Sampler2D.
                // |rank1| is used in getOutputPacked1DCoords.
                // |rank2| is used in getOutput2DCoords.
                // |rank34| is used in getSampler3D/getSampler4D.
                // |isTexShapeGreaterThanOne| are used in
                // getSampler[Scalar|1D|2D]/getOutput1DCoords.
                keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;
            }
            else {
                const texShape = x.isUniform ? 'uniform' : x.texData.texShape;
                keyInputs += `${x.shape}_${texShape}_${hasOffset}`;
            }
        });
        const keyUserCode = program.userCode;
        let key = program.constructor.name;
        // Fast string concat. See https://jsperf.com/string-concatenation/14.
        key += '_' + keyInputs + '_' + keyUserCode +
            `${env().getNumber('WEBGL_VERSION')}`;
        return key;
    }
    function useShapeUniforms(rank) {
        // TODO: Remove the limitaion of rank <= 4.
        return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class DecodeMatrixProgram {
        constructor(outputShape) {
            this.variableNames = ['A'];
            this.packedInputs = false;
            this.packedOutput = true;
            this.outPackingScheme = PackingScheme.DENSE;
            this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];
            const glsl = getGlslDifferences();
            this.outputShape = outputShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ?
            getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], outputShape) :
            getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${glsl.output} = result;
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class DecodeMatrixPackedProgram {
        constructor(outputShape) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.outPackingScheme = PackingScheme.DENSE;
            this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];
            const glsl = getGlslDifferences();
            this.outputShape = outputShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ?
            getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], outputShape) :
            getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${glsl.output} = result;
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class EncodeFloatProgram {
        constructor(outputShape) {
            this.variableNames = ['A'];
            this.outTexUsage = TextureUsage.DOWNLOAD;
            const glsl = getGlslDifferences();
            this.outputShape = outputShape;
            this.userCode = `
      ${ENCODE_FLOAT_SNIPPET}

      void main() {
        float x = getAAtOutCoords();
        ${glsl.output} = encode_float(x);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class EncodeFloatPackedProgram {
        constructor(outputShape) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = false;
            this.outTexUsage = TextureUsage.DOWNLOAD;
            const glsl = getGlslDifferences();
            this.outputShape = outputShape;
            this.userCode = `
      ${ENCODE_FLOAT_SNIPPET}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${glsl.output} = encode_float(x);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class EncodeMatrixProgram {
        constructor(outputShape, inputIsUnsignedByte = false) {
            this.variableNames = ['A'];
            this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];
            const glsl = getGlslDifferences();
            this.outputShape = outputShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            let output = `result`;
            if (inputIsUnsignedByte) {
                output = `floor(result * 255. + 0.5)`;
            }
            this.userCode = `
      ${this.enableShapeUniforms ? getFlatIndexFrom3DOutput() :
            getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${glsl.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${glsl.output} = vec4(${output}, 0., 0., 0.);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /*
    This is how the shader encodes a tensor with shape = [2, 3, 5]
    (indices are [batch, row, col]).

    000|001   002|003   004|xxx   020|021   022|023   024|xxx
    -------   -------   -------   -------   -------   -------
    010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx

    100|101   102|103   104|xxx   120|121   122|123   124|xxx
    -------   -------   -------   -------   -------   -------
    110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx

    Single texels contain only values from the same batch, and from adjacent rows
    and columns.
     */
    class EncodeMatrixPackedProgram {
        constructor(outputShape, inputIsUnsignedByte = false) {
            this.variableNames = ['A'];
            this.packedInputs = false;
            this.packedOutput = true;
            this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];
            const glsl = getGlslDifferences();
            this.outputShape = outputShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            let mainLoop = '';
            let output = 'result';
            if (inputIsUnsignedByte) {
                output = 'floor(result * 255. + 0.5)';
            }
            for (let row = 0; row <= 1; row++) {
                for (let col = 0; col <= 1; col++) {
                    const channel = row * 2 + col;
                    mainLoop += `
          localCoords = coords;
          if(localCoords[2] + ${col} < ${this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {
          localCoords[2] += ${col};
          if (localCoords[1] + ${row} < ${this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {
            localCoords[1] += ${row};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${glsl.texture2D}(A, uv);

            if (offset == 0) {
              result[${channel}] = values[0];
            } else if (offset == 1) {
              result[${channel}] = values[1];
            } else if (offset == 2) {
              result[${channel}] = values[2];
            } else {
              result[${channel}] = values[3];
            }
          }
        }
        `;
                }
            }
            this.userCode = `
        ${this.enableShapeUniforms ? getFlatIndexFrom3DOutput() :
            getFlatIndexFrom3D(outputShape)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${mainLoop}

          ${glsl.output} = ${output};
        }
    `;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function createVertexShader(gl) {
        const glsl = getGlslDifferences();
        const vertexShaderSource = `${glsl.version}
    precision highp float;
    ${glsl.attribute} vec3 clipSpacePos;
    ${glsl.attribute} vec2 uv;
    ${glsl.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
        return createVertexShader$1(gl, vertexShaderSource);
    }
    function createVertexBuffer(gl) {
        // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]
        const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
        return createStaticVertexBuffer(gl, vertexArray);
    }
    function createIndexBuffer(gl) {
        // OpenGL (and WebGL) have "CCW == front" winding
        const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);
        return createStaticIndexBuffer(gl, triangleVertexIndices);
    }
    function createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {
        validateTextureSize(width, height);
        const texture = createTexture(gl);
        const tex2d = gl.TEXTURE_2D;
        callAndCheck(gl, () => gl.bindTexture(tex2d, texture));
        callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));
        callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));
        callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));
        callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));
        if (env().getNumber('WEBGL_VERSION') === 1) {
            callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));
        }
        else {
            callAndCheck(gl, () => gl
                .texStorage2D(tex2d, 1, internalFormat, width, height));
        }
        callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
        return { texture, texShape: [height, width] };
    }
    function getInternalFormatForFloat32MatrixTexture(textureConfig) {
        return textureConfig.internalFormatFloat;
    }
    function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {
        const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
        return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);
    }
    function getInternalFormatForFloat16MatrixTexture(textureConfig) {
        return textureConfig.internalFormatHalfFloat;
    }
    function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {
        const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
        return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);
    }
    function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {
        return textureConfig.downloadTextureFormat;
    }
    function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {
        const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
        return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);
    }
    function getInternalFormatForPackedMatrixTexture(textureConfig) {
        return textureConfig.internalFormatPackedFloat;
    }
    function createPackedMatrixTexture(gl, rows, columns, textureConfig) {
        const [width, height] = getPackedMatrixTextureShapeWidthHeight(rows, columns);
        return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);
    }
    function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {
        return textureConfig.internalFormatPackedHalfFloat;
    }
    function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {
        const [width, height] = getPackedMatrixTextureShapeWidthHeight(rows, columns);
        return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);
    }
    function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {
        const posOffset = 0; // x is the first buffer element
        const uvOffset = 3 * 4; // uv comes after [x y z]
        const stride = (3 * 4) + (2 * 4); // xyz + uv, each entry is 4-byte float.
        callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));
        const success = bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);
        return success &&
            bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);
    }
    function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {
        callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));
        let dataForUpload, texelDataType, internalFormat;
        if (data instanceof Uint8Array) {
            dataForUpload = new Uint8Array(width * height * 4);
            texelDataType = gl.UNSIGNED_BYTE;
            internalFormat = gl.RGBA;
        }
        else {
            dataForUpload = new Float32Array(width * height * 4);
            texelDataType = gl.FLOAT;
            internalFormat = textureConfig.internalFormatPackedFloat;
        }
        dataForUpload.set(data);
        if (env().getNumber('WEBGL_VERSION') === 2) {
            callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));
        }
        else {
            callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));
        }
        callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
    }
    function uploadPixelDataToTexture(gl, texture, pixels) {
        callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));
        if (pixels.data instanceof Uint8Array) {
            if (env().getNumber('WEBGL_VERSION') === 2) {
                callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));
            }
            else {
                callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));
            }
        }
        else {
            if (env().getNumber('WEBGL_VERSION') === 2) {
                callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));
            }
            else {
                callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));
            }
        }
        callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
    }
    function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {
        // Create and bind the buffer.
        const buffer = gl2.createBuffer();
        callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));
        // Initialize the buffer to the size of the texture in bytes.
        const bytesPerFloat = 4;
        const valuesPerTexel = 4;
        const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;
        callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));
        // Enqueue a command on the GPU command queue to copy of texture into the
        // buffer.
        callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));
        callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));
        return buffer;
    }
    function downloadFloat32MatrixFromBuffer(gl, buffer, size) {
        const gl2 = gl;
        const downloadTarget = new Float32Array(size);
        gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
        gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
        gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
        return downloadTarget;
    }
    function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {
        const [w, h] = getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
        const numChannels = 4;
        const downloadTarget = new Uint8Array(getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));
        callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));
        // By wrapping the buffer in a Float32Array, we use native browser IEEE 754
        // decoding of the 4 bytes that back each 32 bit float.
        return new Float32Array(downloadTarget.buffer);
    }
    function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {
        const gl2 = gl;
        const downloadTarget = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));
        gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
        gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
        gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
        return downloadTarget;
    }
    function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {
        const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);
        callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));
        return packedRGBA;
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class GPGPUContext {
        constructor(gl) {
            this.outputTexture = null;
            this.program = null;
            this.disposed = false;
            this.vertexAttrsAreBound = false;
            this.itemsToPoll = [];
            const glVersion = env().getNumber('WEBGL_VERSION');
            if (gl != null) {
                this.gl = gl;
                setWebGLContext(glVersion, gl);
            }
            else {
                this.gl = getWebGLContext(glVersion);
            }
            // WebGL 2.0 enables texture floats without an extension.
            let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';
            const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';
            if (env().getNumber('WEBGL_VERSION') === 1) {
                const TEXTURE_FLOAT = 'OES_texture_float';
                const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';
                this.textureFloatExtension =
                    getExtensionOrThrow(this.gl, TEXTURE_FLOAT);
                if (hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {
                    this.textureHalfFloatExtension =
                        getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);
                }
                else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {
                    throw new Error('GL context does not support half float textures, yet the ' +
                        'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');
                }
                this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);
                if (hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {
                    this.colorBufferHalfFloatExtension =
                        getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);
                }
                else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {
                    throw new Error('GL context does not support color renderable half floats, yet ' +
                        'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');
                }
            }
            else {
                COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';
                if (hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {
                    this.colorBufferFloatExtension =
                        this.gl.getExtension(COLOR_BUFFER_FLOAT);
                }
                else if (hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {
                    this.colorBufferHalfFloatExtension =
                        this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
                }
                else {
                    throw new Error('GL context does not support color renderable floats');
                }
            }
            this.vertexBuffer = createVertexBuffer(this.gl);
            this.indexBuffer = createIndexBuffer(this.gl);
            this.framebuffer = createFramebuffer(this.gl);
            this.textureConfig =
                getTextureConfig(this.gl, this.textureHalfFloatExtension);
        }
        get debug() {
            return env().getBool('DEBUG');
        }
        dispose() {
            if (this.disposed) {
                return;
            }
            if (this.program != null) {
                console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +
                    ' This is probably a resource leak, delete the program with ' +
                    'GPGPUContext.deleteProgram before disposing.');
            }
            if (this.outputTexture != null) {
                console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +
                    'texture.  This is probably a resource leak, delete the output ' +
                    'matrix texture with GPGPUContext.deleteMatrixTexture before ' +
                    'disposing.');
            }
            const gl = this.gl;
            callAndCheck(gl, () => gl.finish());
            callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));
            callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));
            callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));
            callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));
            callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));
            this.disposed = true;
        }
        createFloat32MatrixTexture(rows, columns) {
            this.throwIfDisposed();
            return createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);
        }
        createFloat16MatrixTexture(rows, columns) {
            this.throwIfDisposed();
            return createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);
        }
        createUnsignedBytesMatrixTexture(rows, columns) {
            this.throwIfDisposed();
            return createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);
        }
        uploadPixelDataToTexture(texture, pixels) {
            this.throwIfDisposed();
            uploadPixelDataToTexture(this.gl, texture, pixels);
        }
        uploadDenseMatrixToTexture(texture, width, height, data) {
            this.throwIfDisposed();
            uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);
        }
        createFloat16PackedMatrixTexture(rows, columns) {
            this.throwIfDisposed();
            return createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);
        }
        createPackedMatrixTexture(rows, columns) {
            this.throwIfDisposed();
            return createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);
        }
        deleteMatrixTexture(texture) {
            this.throwIfDisposed();
            if (this.outputTexture === texture) {
                unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
                this.outputTexture = null;
            }
            callAndCheck(this.gl, () => this.gl.deleteTexture(texture));
        }
        downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {
            return this.downloadMatrixDriver(texture, () => downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));
        }
        downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {
            return downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);
        }
        downloadFloat32MatrixFromBuffer(buffer, size) {
            return downloadFloat32MatrixFromBuffer(this.gl, buffer, size);
        }
        createBufferFromTexture(texture, rows, columns) {
            this.bindTextureToFrameBuffer(texture);
            const result = createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);
            this.unbindTextureToFrameBuffer();
            return result;
        }
        createAndWaitForFence() {
            const fenceContext = this.createFence(this.gl);
            return this.pollFence(fenceContext);
        }
        createFence(gl) {
            let query;
            let isFencePassed;
            if (env().getBool('WEBGL_FENCE_API_ENABLED')) {
                const gl2 = gl;
                const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);
                gl.flush();
                isFencePassed = () => {
                    const status = gl2.clientWaitSync(sync, 0, 0);
                    return status === gl2.ALREADY_SIGNALED ||
                        status === gl2.CONDITION_SATISFIED;
                };
                query = sync;
            }
            else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
                query = this.beginQuery();
                this.endQuery();
                isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));
            }
            else {
                // If we have no way to fence, return true immediately. This will fire in
                // WebGL 1.0 when there is no disjoint query timer. In this case, because
                // the fence passes immediately, we'll immediately ask for a download of
                // the texture, which will cause the UI thread to hang.
                isFencePassed = () => true;
            }
            return { query, isFencePassed };
        }
        downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {
            return this.downloadMatrixDriver(texture, () => downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));
        }
        createProgram(fragmentShader) {
            this.throwIfDisposed();
            const gl = this.gl;
            if (this.vertexShader == null) {
                this.vertexShader = createVertexShader(gl);
            }
            const program = createProgram(gl);
            callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));
            callAndCheck(gl, () => gl.attachShader(program, fragmentShader));
            linkProgram(gl, program);
            if (this.debug) {
                validateProgram(gl, program);
            }
            if (!this.vertexAttrsAreBound) {
                this.setProgram(program);
                this.vertexAttrsAreBound = bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);
            }
            return program;
        }
        deleteProgram(program) {
            this.throwIfDisposed();
            if (program === this.program) {
                this.program = null;
            }
            if (program != null) {
                callAndCheck(this.gl, () => this.gl.deleteProgram(program));
            }
        }
        setProgram(program) {
            this.throwIfDisposed();
            this.program = program;
            if ((this.program != null) && this.debug) {
                validateProgram(this.gl, this.program);
            }
            callAndCheck(this.gl, () => this.gl.useProgram(program));
        }
        getUniformLocation(program, uniformName, shouldThrow = true) {
            this.throwIfDisposed();
            if (shouldThrow) {
                return getProgramUniformLocationOrThrow(this.gl, program, uniformName);
            }
            else {
                return getProgramUniformLocation(this.gl, program, uniformName);
            }
        }
        getAttributeLocation(program, attribute) {
            this.throwIfDisposed();
            return callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));
        }
        getUniformLocationNoThrow(program, uniformName) {
            this.throwIfDisposed();
            return this.gl.getUniformLocation(program, uniformName);
        }
        setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {
            this.throwIfDisposed();
            this.throwIfNoProgram();
            bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);
        }
        setOutputMatrixTexture(outputMatrixTexture, rows, columns) {
            this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);
        }
        setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {
            this.throwIfDisposed();
            const [width, height] = getPackedMatrixTextureShapeWidthHeight(rows, columns);
            this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);
        }
        setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {
            this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);
        }
        setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {
            throw new Error('setOutputPackedMatrixWriteRegion not implemented.');
        }
        debugValidate() {
            if (this.program != null) {
                validateProgram(this.gl, this.program);
            }
            validateFramebuffer(this.gl);
        }
        executeProgram() {
            this.throwIfDisposed();
            this.throwIfNoProgram();
            const gl = this.gl;
            if (this.debug) {
                this.debugValidate();
            }
            callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));
        }
        blockUntilAllProgramsCompleted() {
            this.throwIfDisposed();
            callAndCheck(this.gl, () => this.gl.finish());
        }
        getQueryTimerExtension() {
            if (this.disjointQueryTimerExtension == null) {
                this.disjointQueryTimerExtension =
                    getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?
                        'EXT_disjoint_timer_query_webgl2' :
                        'EXT_disjoint_timer_query');
            }
            return this.disjointQueryTimerExtension;
        }
        getQueryTimerExtensionWebGL2() {
            return this.getQueryTimerExtension();
        }
        getQueryTimerExtensionWebGL1() {
            return this.getQueryTimerExtension();
        }
        beginQuery() {
            if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
                const gl2 = this.gl;
                const ext = this.getQueryTimerExtensionWebGL2();
                const query = gl2.createQuery();
                gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);
                return query;
            }
            const ext = this.getQueryTimerExtensionWebGL1();
            const query = ext.createQueryEXT();
            ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);
            return query;
        }
        endQuery() {
            if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
                const gl2 = this.gl;
                const ext = this.getQueryTimerExtensionWebGL2();
                gl2.endQuery(ext.TIME_ELAPSED_EXT);
                return;
            }
            const ext = this.getQueryTimerExtensionWebGL1();
            ext.endQueryEXT(ext.TIME_ELAPSED_EXT);
        }
        async waitForQueryAndGetTime(query) {
            await repeatedTry(() => this.disposed || // while testing contexts are created / disposed
                // in rapid succession, so without this check we
                // may poll for the query timer indefinitely
                this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));
            return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));
        }
        getQueryTime(query, queryTimerVersion) {
            if (queryTimerVersion === 0) {
                return null;
            }
            if (queryTimerVersion === 2) {
                const gl2 = this.gl;
                const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);
                // Return milliseconds.
                return timeElapsedNanos / 1000000;
            }
            else {
                const ext = this.getQueryTimerExtensionWebGL1();
                const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);
                // Return milliseconds.
                return timeElapsedNanos / 1000000;
            }
        }
        isQueryAvailable(query, queryTimerVersion) {
            if (queryTimerVersion === 0) {
                return true;
            }
            if (queryTimerVersion === 2) {
                const gl2 = this.gl;
                const ext = this.getQueryTimerExtensionWebGL2();
                const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);
                if (this.disjoint == null) {
                    this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
                }
                return available && !this.disjoint;
            }
            else {
                const ext = this.getQueryTimerExtensionWebGL1();
                const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);
                if (this.disjoint == null) {
                    this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
                }
                return available && !this.disjoint;
            }
        }
        pollFence(fenceContext) {
            return new Promise(resolve => {
                this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());
            });
        }
        pollItems() {
            // Find the last query that has finished.
            const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));
            for (let i = 0; i <= index; ++i) {
                const { resolveFn } = this.itemsToPoll[i];
                resolveFn();
            }
            this.itemsToPoll = this.itemsToPoll.slice(index + 1);
        }
        addItemToPoll(isDoneFn, resolveFn) {
            this.itemsToPoll.push({ isDoneFn, resolveFn });
            if (this.itemsToPoll.length > 1) {
                // We already have a running loop that polls.
                return;
            }
            // Start a new loop that polls.
            repeatedTry(() => {
                this.pollItems();
                // End the loop if no more items to poll.
                return this.itemsToPoll.length === 0;
            });
        }
        bindTextureToFrameBuffer(texture) {
            this.throwIfDisposed();
            bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);
            if (this.debug) {
                validateFramebuffer(this.gl);
            }
        }
        unbindTextureToFrameBuffer() {
            if (this.outputTexture != null) {
                bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);
                if (this.debug) {
                    validateFramebuffer(this.gl);
                }
            }
            else {
                unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
            }
        }
        downloadMatrixDriver(texture, downloadAndDecode) {
            this.bindTextureToFrameBuffer(texture);
            const result = downloadAndDecode();
            this.unbindTextureToFrameBuffer();
            return result;
        }
        setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {
            this.throwIfDisposed();
            const gl = this.gl;
            bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);
            if (this.debug) {
                validateFramebuffer(gl);
            }
            this.outputTexture = outputMatrixTextureMaybePacked;
            callAndCheck(gl, () => gl.viewport(0, 0, width, height));
            callAndCheck(gl, () => gl.scissor(0, 0, width, height));
        }
        setOutputMatrixWriteRegionDriver(x, y, width, height) {
            this.throwIfDisposed();
            callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));
        }
        throwIfDisposed() {
            if (this.disposed) {
                throw new Error('Attempted to use disposed GPGPUContext.');
            }
        }
        throwIfNoProgram() {
            if (this.program == null) {
                throw new Error('No GPU program is currently set.');
            }
        }
    }
    /**
     * Finds the index of the last true element using linear search.
     * Note: We can't do binary search because Chrome expects us to explicitly
     * test all fences before download:
     * https://github.com/tensorflow/tfjs/issues/1145
     */
    function linearSearchLastTrue(arr) {
        let i = 0;
        for (; i < arr.length; ++i) {
            const isDone = arr[i]();
            if (!isDone) {
                break;
            }
        }
        return i - 1;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const { addImpl: addImplCPU, bincountImpl: bincountImplCPU, bincountReduceImpl: bincountReduceImplCPU, ceilImpl: ceilImplCPU, concatImpl: concatImplCPU, equalImpl: equalImplCPU, expImpl: expImplCPU, expm1Impl: expm1ImplCPU, floorImpl: floorImplCPU, gatherNdImpl: gatherNdImplCPU, gatherV2Impl: gatherV2ImplCPU, greaterImpl: greaterImplCPU, greaterEqualImpl: greaterEqualImplCPU, lessImpl: lessImplCPU, lessEqualImpl: lessEqualImplCPU, linSpaceImpl: linSpaceImplCPU, logImpl: logImplCPU, maxImpl: maxImplCPU, maximumImpl: maximumImplCPU, minimumImpl: minimumImplCPU, multiplyImpl: multiplyImplCPU, negImpl: negImplCPU, notEqualImpl: notEqualImplCPU, prodImpl: prodImplCPU, rangeImpl: rangeImplCPU, rsqrtImpl: rsqrtImplCPU, sigmoidImpl: sigmoidImplCPU, simpleAbsImpl: simpleAbsImplCPU, sliceImpl: sliceImplCPU, sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU, sparseReshapeImpl: sparseReshapeImplCPU, sparseSegmentReductionImpl: sparseSegmentReductionImplCPU, sqrtImpl: sqrtImplCPU, stridedSliceImpl: stridedSliceImplCPU, stringNGramsImpl: stringNGramsImplCPU, stringSplitImpl: stringSplitImplCPU, stringToHashBucketFastImpl: stringToHashBucketFastImplCPU, subImpl: subImplCPU, tileImpl: tileImplCPU, topKImpl: topKImplCPU, transposeImpl: transposeImplCPU, uniqueImpl: uniqueImplCPU, } = shared;

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function getVecChannels(name, rank) {
        return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);
    }
    function getChannels(name, rank) {
        if (rank === 1) {
            return [name];
        }
        return getVecChannels(name, rank);
    }
    function getSourceCoords$2(rank, dims) {
        if (rank === 1) {
            return 'rc';
        }
        let coords = '';
        for (let i = 0; i < rank; i++) {
            coords += dims[i];
            if (i < rank - 1) {
                coords += ',';
            }
        }
        return coords;
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class PackProgram {
        constructor(outputShape) {
            this.variableNames = ['A'];
            this.packedInputs = false;
            this.packedOutput = true;
            // Only input / output 3D tensors.
            this.outputShape = outputShape;
            this.rank = outputShape.length;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            if (this.rank === 0) {
                this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
            }
            else {
                const channels = getChannels('rc', this.rank);
                const dtype = getCoordsDataType(this.rank);
                const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);
                const setup = this.getSetup(channels);
                const output = this.getOutput(channels);
                this.userCode = `
        void main() {
          ${dtype} rc = getOutputCoords();

          if(${outOfBoundsCondition}) {
            setOutput(vec4(0));
          } else {
            ${setup}

            setOutput(vec4(${output}));
          }
        }
      `;
            }
        }
        getSourceCoordsArr(dims) {
            const coords = [];
            for (let row = 0; row <= 1; row++) {
                for (let col = 0; col <= 1; col++) {
                    let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;
                    for (let d = 2; d < this.rank; d++) {
                        coord = `${dims[dims.length - 1 - d]},` + coord;
                    }
                    coords.push(coord);
                }
            }
            return coords;
        }
        getOutOfBoundsCondition(dims) {
            if (this.rank === 1) {
                return `rc > ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;
            }
            let cond = '';
            for (let i = this.rank - 2; i < this.rank; i++) {
                cond += `${dims[i]} >= ${this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;
                if (i < this.rank - 1) {
                    cond += '||';
                }
            }
            return cond;
        }
        getSetup(dims) {
            if (this.rank === 1) {
                return '';
            }
            const innerDims = dims.slice(-2);
            const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :
                this.outputShape[this.rank - 1];
            const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :
                this.outputShape[this.rank - 2];
            return `
      int r = ${innerDims[0]};
      int c = ${innerDims[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${col};
      bool rEdge = rp1 >= ${row};
    `;
        }
        getOutput(dims) {
            const sourceCoords = this.getSourceCoordsArr(dims);
            if (this.rank === 1) {
                const outShape = this.enableShapeUniforms ? 'outShape' : this.outputShape[0];
                return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;
            }
            return `getA(${sourceCoords[0]}),
            cEdge ? 0. : getA(${sourceCoords[1]}),
            rEdge ? 0. : getA(${sourceCoords[2]}),
            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ReshapePackedProgram {
        constructor(outputShape, inputShape) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.customUniforms = [{ name: 'inputShape', type: 'ivec3' }];
            this.outputShape = outputShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            let mainLoop = ``;
            for (let i = 0; i < 4; i++) {
                let thisRC = `thisRC = rc;`;
                if (i % 2 === 1) {
                    thisRC += `thisRC.z += 1;`;
                }
                if (i > 1) {
                    thisRC += `thisRC.y += 1;`;
                }
                mainLoop += `
        ${thisRC}
        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${i}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${i > 0 ? '}' : ''}
      `;
            }
            this.userCode = `
      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? getFlatIndexFrom3DOutput() :
            getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};
        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};

        ${mainLoop}

        setOutput(result);
      }
    `;
        }
    }
    function getReshapedInputCoords(shape, enableShapeUniforms) {
        const coordsFromIndexSnippet = enableShapeUniforms ?
            getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') :
            getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);
        return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${coordsFromIndexSnippet}
      return ivec3(r, c, d);
    }
  `;
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class TextureManager {
        constructor(gpgpu) {
            this.gpgpu = gpgpu;
            this.numUsedTextures = 0;
            this.numFreeTextures = 0;
            this._numBytesAllocated = 0;
            this._numBytesFree = 0; // How many bytes that have been allocated
            // are available for reuse.
            this.freeTextures = {};
            this.logEnabled = false;
            this.usedTextures = {};
        }
        acquireTexture(shapeRC, usage, isPacked) {
            const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);
            const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);
            if (!(shapeKey in this.freeTextures)) {
                this.freeTextures[shapeKey] = [];
            }
            if (!(shapeKey in this.usedTextures)) {
                this.usedTextures[shapeKey] = [];
            }
            const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);
            if (this.freeTextures[shapeKey].length > 0) {
                this.numFreeTextures--;
                this.numUsedTextures++;
                this._numBytesFree -= texBytes;
                this.log();
                const newTexture = this.freeTextures[shapeKey].shift();
                this.usedTextures[shapeKey].push(newTexture);
                return newTexture;
            }
            let newTexture;
            if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {
                newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);
            }
            else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {
                newTexture =
                    this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);
            }
            else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {
                newTexture =
                    this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);
            }
            else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {
                newTexture =
                    this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);
            }
            else if (physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {
                newTexture =
                    this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);
            }
            this.usedTextures[shapeKey].push(newTexture);
            this.numUsedTextures++;
            this._numBytesAllocated += texBytes;
            this.log();
            return newTexture;
        }
        releaseTexture(texture, shape, logicalTexType, isPacked) {
            if (this.freeTextures == null) {
                // Already disposed.
                return;
            }
            const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);
            const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);
            if (!(shapeKey in this.freeTextures)) {
                this.freeTextures[shapeKey] = [];
            }
            const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);
            const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');
            if (deleteTexThreshold !== -1 &&
                this._numBytesAllocated > deleteTexThreshold) {
                this.gpgpu.deleteMatrixTexture(texture.texture);
                this._numBytesAllocated -= texBytes;
            }
            else {
                this.freeTextures[shapeKey].push(texture);
                this.numFreeTextures++;
                this._numBytesFree += texBytes;
            }
            this.numUsedTextures--;
            const texList = this.usedTextures[shapeKey];
            const texIndex = texList.indexOf(texture);
            if (texIndex < 0) {
                throw new Error('Cannot release a texture that was never provided by this ' +
                    'texture manager');
            }
            texList.splice(texIndex, 1);
            this.log();
        }
        log() {
            if (!this.logEnabled) {
                return;
            }
            const total = this.numFreeTextures + this.numUsedTextures;
            console.log('Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);
            const freeRatio = this._numBytesFree / this._numBytesAllocated;
            console.log(`Bytes allocated: ${this._numBytesAllocated}`);
            console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);
        }
        get numBytesAllocated() {
            return this._numBytesAllocated;
        }
        get numBytesFree() {
            return this._numBytesFree;
        }
        getNumUsedTextures() {
            return this.numUsedTextures;
        }
        getNumFreeTextures() {
            return this.numFreeTextures;
        }
        dispose() {
            if (this.freeTextures == null) {
                // Already disposed.
                return;
            }
            for (const texShape in this.freeTextures) {
                this.freeTextures[texShape].forEach(tex => {
                    this.gpgpu.deleteMatrixTexture(tex.texture);
                });
            }
            for (const texShape in this.usedTextures) {
                this.usedTextures[texShape].forEach(tex => {
                    this.gpgpu.deleteMatrixTexture(tex.texture);
                });
            }
            this.freeTextures = null;
            this.usedTextures = null;
            this.numUsedTextures = 0;
            this.numFreeTextures = 0;
            this._numBytesAllocated = 0;
            this._numBytesFree = 0;
        }
    }
    function numBytesForInternalFormat(gl, internalFormat) {
        // tslint:disable-next-line:no-any
        const glany = gl;
        if (internalFormat === glany.R32F) {
            return 4;
        }
        else if (internalFormat === glany.R16F) {
            return 2;
        }
        else if (internalFormat === glany.RGBA32F) {
            return 16;
        }
        else if (internalFormat === gl.RGBA) {
            return 16;
        }
        else if (internalFormat === glany.RGBA16F) {
            return 8;
        }
        else if (internalFormat === glany.RGBA8) {
            return 4;
        }
        throw new Error(`Unknown internal format ${internalFormat}`);
    }
    function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {
        // It is not possible to infer packed status from the texture type because
        // depending on the textureConfig, different  texture types may resolve to the
        // same internal format (e.g. in WebGL1, the internal format for
        // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`
        // explicitly.
        const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);
        let numElements;
        if (isPacked) {
            const [packedWidth, packedHeight] = getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);
            numElements = packedWidth * packedHeight;
        }
        else {
            const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);
            numElements = width * height;
        }
        const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);
        return numElements * bytesPerElement;
    }
    function internalFormatForPhysicalTexType(physicalTexType, textureConfig) {
        switch (physicalTexType) {
            case PhysicalTextureType.PACKED_2X2_FLOAT32:
                return getInternalFormatForPackedMatrixTexture(textureConfig);
            case PhysicalTextureType.PACKED_2X2_FLOAT16:
                return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);
            case PhysicalTextureType.UNPACKED_FLOAT32:
                return getInternalFormatForFloat32MatrixTexture(textureConfig);
            case PhysicalTextureType.UNPACKED_FLOAT16:
                return getInternalFormatForFloat16MatrixTexture(textureConfig);
            case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:
                return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);
            default:
                throw new Error(`Unknown physical texture type ${physicalTexType}`);
        }
    }
    function getPhysicalTextureForRendering(isPacked) {
        if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {
            if (isPacked) {
                return PhysicalTextureType.PACKED_2X2_FLOAT32;
            }
            return PhysicalTextureType.UNPACKED_FLOAT32;
        }
        if (isPacked) {
            return PhysicalTextureType.PACKED_2X2_FLOAT16;
        }
        return PhysicalTextureType.UNPACKED_FLOAT16;
    }
    function getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {
        if (logicalTexType === TextureUsage.UPLOAD) {
            return PhysicalTextureType.PACKED_2X2_FLOAT32;
        }
        else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {
            return getPhysicalTextureForRendering(isPacked);
        }
        else if (logicalTexType === TextureUsage.DOWNLOAD ||
            logicalTexType === TextureUsage.PIXELS) {
            return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;
        }
        throw new Error(`Unknown logical texture type ${logicalTexType}`);
    }
    function getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {
        return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class UnaryOpProgram {
        constructor(aShape, opSnippet) {
            this.variableNames = ['A'];
            this.outputShape = aShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            this.userCode = `
      float unaryOperation(float x) {
        ${opSnippet}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
        }
    }
    const CHECK_NAN_SNIPPET$2 = `if (isnan(x)) return x;`;
    const LINEAR$1 = `return x;`;
    const ABS$1 = `return abs(x);`;
    const ELU$2 = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;
    const RELU$2 = CHECK_NAN_SNIPPET$2 + `
  return (x < 0.0) ? 0.0 : x;
`;
    const RELU6$2 = CHECK_NAN_SNIPPET$2 + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
    const CLONE = 'return x;';
    const SIGMOID$2 = `return 1.0 / (1.0 + exp(-1.0 * x));`;

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const LINEAR = `return x;`;
    const ELU$1 = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
    const RELU$1 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
    const RELU6$1 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
    const SIGMOID$1 = `return 1.0 / (1.0 + exp(-1.0 * x));`;
    class UnaryOpPackedProgram {
        constructor(aShape, opSnippet) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.outputShape = aShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${opSnippet}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class UnpackProgram {
        constructor(outputShape) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = false;
            this.outputShape = outputShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            const rank = outputShape.length;
            const channels = getChannels('rc', rank);
            const dtype = getCoordsDataType(rank);
            const sourceCoords = getSourceCoords$2(rank, channels);
            const innerDims = channels.slice(-2);
            const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;
            this.userCode = `
      void main() {
        ${dtype} rc = getOutputCoords();
        vec4 packedInput = getA(${sourceCoords});

        setOutput(getChannel(packedInput, ${coords}));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const whereImpl = whereImpl$2;
    const EPSILON_FLOAT32 = 1e-7;
    const EPSILON_FLOAT16 = 1e-4;
    const binaryCaches = {};
    function getBinaryCache(webGLVersion) {
        if (webGLVersion in binaryCaches) {
            return binaryCaches[webGLVersion];
        }
        binaryCaches[webGLVersion] = {};
        return binaryCaches[webGLVersion];
    }
    // Empirically determined constant used to determine size threshold for handing
    // off execution to the CPU.
    const CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');
    // Empirically determined constant used to decide the number of MB on GPU
    // before we warn about high memory use. The MB are this constant * screen area
    // * dpi / 1024 / 1024.
    const BEFORE_PAGING_CONSTANT = 600;
    function numMBBeforeWarning() {
        if (env().global.screen == null) {
            return 1024; // 1 GB.
        }
        return (env().global.screen.height * env().global.screen.width *
            window.devicePixelRatio) *
            BEFORE_PAGING_CONSTANT / 1024 / 1024;
    }
    class MathBackendWebGL extends KernelBackend {
        constructor(gpuResource) {
            super();
            // Maps data ids that have a pending read operation, to list of subscribers.
            this.pendingRead = new WeakMap();
            // List of data ids that are scheduled for disposal, but are waiting on a
            // pending read operation.
            this.pendingDisposal = new WeakSet();
            // Used to count the number of 'shallow' sliced tensors that point to the
            // same data id.
            this.dataRefCount = new WeakMap();
            this.numBytesInGPU = 0;
            // Accumulated time spent (including blocking) in uploading data to webgl.
            this.uploadWaitMs = 0;
            // Accumulated time spent (including blocking in downloading data from webgl.
            this.downloadWaitMs = 0;
            // record the last manual GL Flush time.
            this.lastGlFlushTime = 0;
            this.warnedAboutMemory = false;
            this.pendingDeletes = 0;
            this.disposed = false;
            if (!env().getBool('HAS_WEBGL')) {
                throw new Error('WebGL is not supported on this device');
            }
            let newGPGPU;
            if (gpuResource != null) {
                if (gpuResource instanceof GPGPUContext) {
                    newGPGPU = gpuResource;
                }
                else {
                    const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);
                    newGPGPU = new GPGPUContext(gl);
                }
                this.binaryCache = {};
                this.gpgpuCreatedLocally = false;
            }
            else {
                const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));
                newGPGPU = new GPGPUContext(gl);
                this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));
                this.gpgpuCreatedLocally = true;
            }
            this.gpgpu = newGPGPU;
            this.canvas = this.gpgpu.gl.canvas;
            this.textureManager = new TextureManager(this.gpgpu);
            this.numMBBeforeWarning = numMBBeforeWarning();
            this.texData = new DataStorage(this, engine());
        }
        nextDataId() {
            return MathBackendWebGL.nextDataId++;
        }
        numDataIds() {
            return this.texData.numDataIds() - this.pendingDeletes;
        }
        write(values, shape, dtype) {
            if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||
                env().getBool('DEBUG')) {
                this.checkNumericalProblems(values);
            }
            if (dtype === 'complex64' && values != null) {
                throw new Error(`Cannot write to a complex64 dtype. ` +
                    `Please use tf.complex(real, imag).`);
            }
            const dataId = { id: this.nextDataId() };
            this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1 });
            return dataId;
        }
        /** Return refCount of a `TensorData`. */
        refCount(dataId) {
            if (this.texData.has(dataId)) {
                const tensorData = this.texData.get(dataId);
                return tensorData.refCount;
            }
            return 0;
        }
        /** Increase refCount of a `TextureData`. */
        incRef(dataId) {
            const texData = this.texData.get(dataId);
            texData.refCount++;
        }
        /** Decrease refCount of a `TextureData`. */
        decRef(dataId) {
            if (this.texData.has(dataId)) {
                const texData = this.texData.get(dataId);
                texData.refCount--;
            }
        }
        move(dataId, values, shape, dtype, refCount) {
            if (env().getBool('DEBUG')) {
                this.checkNumericalProblems(values);
            }
            if (dtype === 'complex64') {
                throw new Error(`Cannot write to a complex64 dtype. ` +
                    `Please use tf.complex(real, imag).`);
            }
            this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount });
        }
        disposeIntermediateTensorInfo(tensorInfo) {
            this.disposeData(tensorInfo.dataId);
        }
        readSync(dataId) {
            const texData = this.texData.get(dataId);
            const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;
            // The presence of `slice` indicates this tensor is a shallow slice of a
            // different tensor, and is using that original tensor's texture. Run
            // `clone` in order to copy that texture and read from it.
            if (slice != null) {
                let program;
                if (isPacked) {
                    program = new UnaryOpPackedProgram(shape, CLONE);
                }
                else {
                    program = new UnaryOpProgram(shape, CLONE);
                }
                const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);
                const data = this.readSync(res.dataId);
                this.disposeIntermediateTensorInfo(res);
                return data;
            }
            if (values != null) {
                return this.convertAndCacheOnCPU(dataId);
            }
            if (dtype === 'string') {
                return values;
            }
            const shouldTimeProgram = this.activeTimers != null;
            let start;
            if (shouldTimeProgram) {
                start = now();
            }
            let result;
            if (dtype === 'complex64') {
                const realValues = this.readSync(complexTensorInfos.real.dataId);
                const imagValues = this.readSync(complexTensorInfos.imag.dataId);
                result = mergeRealAndImagArrays(realValues, imagValues);
            }
            else {
                result = this.getValuesFromTexture(dataId);
            }
            if (shouldTimeProgram) {
                this.downloadWaitMs += now() - start;
            }
            return this.convertAndCacheOnCPU(dataId, result);
        }
        async read(dataId) {
            if (this.pendingRead.has(dataId)) {
                const subscribers = this.pendingRead.get(dataId);
                return new Promise(resolve => subscribers.push(resolve));
            }
            const texData = this.texData.get(dataId);
            const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;
            // The presence of `slice` indicates this tensor is a shallow slice of a
            // different tensor, and is using that original tensor's texture. Run
            // `clone` in order to copy that texture and read from it.
            if (slice != null) {
                let program;
                if (isPacked) {
                    program = new UnaryOpPackedProgram(shape, CLONE);
                }
                else {
                    program = new UnaryOpProgram(shape, CLONE);
                }
                const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);
                const data = this.read(res.dataId);
                this.disposeIntermediateTensorInfo(res);
                return data;
            }
            if (values != null) {
                return this.convertAndCacheOnCPU(dataId);
            }
            if (env().getBool('DEBUG')) {
                // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.
                // For performance reason, only check it for debugging. In production,
                // it doesn't handle this use case anyway, so behavior is not changed.
                if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&
                    env().getNumber('WEBGL_VERSION') === 2) {
                    throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +
                        `WEBGL_VERSION=2 not yet supported.`);
                }
            }
            let buffer = null;
            let tmpDownloadTarget;
            if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {
                // Possibly copy the texture into a buffer before inserting a fence.
                tmpDownloadTarget = this.decode(dataId);
                const tmpData = this.texData.get(tmpDownloadTarget.dataId);
                buffer = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...getDenseTexShape(shape));
            }
            this.pendingRead.set(dataId, []);
            if (dtype !== 'complex64') {
                // Create a fence and wait for it to resolve.
                await this.gpgpu.createAndWaitForFence();
            }
            // Download the values from the GPU.
            let vals;
            if (dtype === 'complex64') {
                const ps = await Promise.all([
                    this.read(complexTensorInfos.real.dataId),
                    this.read(complexTensorInfos.imag.dataId)
                ]);
                const realValues = ps[0];
                const imagValues = ps[1];
                vals = mergeRealAndImagArrays(realValues, imagValues);
            }
            else if (buffer == null) {
                vals = this.getValuesFromTexture(dataId);
            }
            else {
                const size = sizeFromShape(shape);
                vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);
            }
            if (tmpDownloadTarget != null) {
                this.disposeIntermediateTensorInfo(tmpDownloadTarget);
            }
            if (buffer != null) {
                const gl = this.gpgpu.gl;
                callAndCheck(gl, () => gl.deleteBuffer(buffer));
            }
            const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);
            const subscribers = this.pendingRead.get(dataId);
            this.pendingRead.delete(dataId);
            // Notify all pending reads.
            subscribers.forEach(resolve => resolve(dTypeVals));
            if (this.pendingDisposal.has(dataId)) {
                this.pendingDisposal.delete(dataId);
                if (this.disposeData(dataId)) {
                    engine().removeDataId(dataId, this);
                }
                this.pendingDeletes--;
            }
            return dTypeVals;
        }
        /**
         * Read tensor to a new texture that is densely packed for ease of use.
         * @param dataId The source tensor.
         * @param options
         *     customTexShape: Optional. If set, will use the user defined texture
         *     shape to create the texture.
         */
        readToGPU(dataId, options = {}) {
            const texData = this.texData.get(dataId);
            const { values, shape, slice, dtype, isPacked, texture } = texData;
            if (dtype === 'complex64') {
                throw new Error('Does not support reading texture for complex64 dtype.');
            }
            // The presence of `slice` indicates this tensor is a shallow slice of a
            // different tensor, and is using that original tensor's texture. Run
            // `clone` in order to copy that texture and read from it.
            if (slice != null) {
                let program;
                if (isPacked) {
                    program = new UnaryOpPackedProgram(shape, CLONE);
                }
                else {
                    program = new UnaryOpProgram(shape, CLONE);
                }
                const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);
                const gpuResouorce = this.readToGPU(res, options);
                this.disposeIntermediateTensorInfo(res);
                return gpuResouorce;
            }
            if (texture == null) {
                if (values != null) {
                    throw new Error('Data is not on GPU but on CPU.');
                }
                else {
                    throw new Error('There is no data on GPU or CPU.');
                }
            }
            // Decode the texture so that it is stored densely (using four channels).
            const tmpTarget = this.decode(dataId, options.customTexShape);
            // Make engine track this tensor, so that we can dispose it later.
            const tensorRef = engine().makeTensorFromDataId(tmpTarget.dataId, tmpTarget.shape, tmpTarget.dtype);
            const tmpData = this.texData.get(tmpTarget.dataId);
            return Object.assign({ tensorRef }, tmpData.texture);
        }
        bufferSync(t) {
            const data = this.readSync(t.dataId);
            let decodedData = data;
            if (t.dtype === 'string') {
                try {
                    // Decode the bytes into string.
                    decodedData = data.map(d => decodeString(d));
                }
                catch (_a) {
                    throw new Error('Failed to decode encoded string bytes into utf-8');
                }
            }
            return buffer(t.shape, t.dtype, decodedData);
        }
        checkNumericalProblems(values) {
            if (values == null) {
                return;
            }
            for (let i = 0; i < values.length; i++) {
                const num = values[i];
                if (!canBeRepresented(num)) {
                    if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {
                        throw Error(`The value ${num} cannot be represented with your ` +
                            `current settings. Consider enabling float32 rendering: ` +
                            `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);
                    }
                    throw Error(`The value ${num} cannot be represented on this device.`);
                }
            }
        }
        getValuesFromTexture(dataId) {
            const { shape, dtype, isPacked } = this.texData.get(dataId);
            const size = sizeFromShape(shape);
            if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {
                const tmpTarget = this.decode(dataId);
                const tmpData = this.texData.get(tmpTarget.dataId);
                const vals = this.gpgpu
                    .downloadMatrixFromPackedTexture(tmpData.texture.texture, ...getDenseTexShape(shape))
                    .subarray(0, size);
                this.disposeIntermediateTensorInfo(tmpTarget);
                return vals;
            }
            const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;
            const outputShape = shouldUsePackedProgram ? getShapeAs3D(shape) : shape;
            const program = shouldUsePackedProgram ?
                new EncodeFloatPackedProgram(outputShape) :
                new EncodeFloatProgram(outputShape);
            const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');
            const tmpData = this.texData.get(output.dataId);
            const vals = this.gpgpu
                .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1])
                .subarray(0, size);
            this.disposeIntermediateTensorInfo(output);
            return vals;
        }
        timerAvailable() {
            return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;
        }
        time(f) {
            const oldActiveTimers = this.activeTimers;
            const newActiveTimers = [];
            let outerMostTime = false;
            if (this.programTimersStack == null) {
                this.programTimersStack = newActiveTimers;
                outerMostTime = true;
            }
            else {
                this.activeTimers.push(newActiveTimers);
            }
            this.activeTimers = newActiveTimers;
            f();
            // needing to split these up because util.flatten only accepts certain types
            const flattenedActiveTimerQueries = flatten(this.activeTimers.map((d) => d.query))
                .filter(d => d != null);
            const flattenedActiveTimerNames = flatten(this.activeTimers.map((d) => d.name))
                .filter(d => d != null);
            this.activeTimers = oldActiveTimers;
            if (outerMostTime) {
                this.programTimersStack = null;
            }
            const res = {
                uploadWaitMs: this.uploadWaitMs,
                downloadWaitMs: this.downloadWaitMs,
                kernelMs: null,
                wallMs: null // will be filled by the engine
            };
            return (async () => {
                if (env()
                    .getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
                    const kernelMs = await Promise.all(flattenedActiveTimerQueries);
                    res['kernelMs'] = sum$3(kernelMs);
                    res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))
                        .map(d => `${d.name}: ${d.ms}`)
                        .join(', ');
                }
                else {
                    res['kernelMs'] = {
                        error: 'WebGL query timers are not supported in this environment.'
                    };
                }
                this.uploadWaitMs = 0;
                this.downloadWaitMs = 0;
                return res;
            })();
        }
        memory() {
            return {
                unreliable: false,
                numBytesInGPU: this.numBytesInGPU,
                numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
                numBytesInGPUFree: this.textureManager.numBytesFree
            };
        }
        startTimer() {
            if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
                return this.gpgpu.beginQuery();
            }
            return { startMs: now(), endMs: null };
        }
        endTimer(query) {
            if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
                this.gpgpu.endQuery();
                return query;
            }
            query.endMs = now();
            return query;
        }
        async getQueryTime(query) {
            if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
                return this.gpgpu.waitForQueryAndGetTime(query);
            }
            const timerQuery = query;
            return timerQuery.endMs - timerQuery.startMs;
        }
        /**
         * Decrease the RefCount on the dataId and dispose the memory if the dataId
         * has 0 refCount. If there are pending read on the data, the disposal would
         * added to the pending delete queue. Return true if the dataId is removed
         * from backend or the backend does not contain the dataId, false if the
         * dataId is not removed. Memory may or may not be released even when dataId
         * is removed, which also depends on dataRefCount, see `releaseGPU`.
         * @param dataId
         * @oaram force Optional, remove the data regardless of refCount
         */
        disposeData(dataId, force = false) {
            if (this.pendingDisposal.has(dataId)) {
                return false;
            }
            // No-op if already disposed.
            if (!this.texData.has(dataId)) {
                return true;
            }
            // if force flag is set, change refCount to 0, this would ensure disposal
            // when added to the pendingDisposal queue. Memory may or may not be
            // released, which also depends on dataRefCount, see `releaseGPU`.
            if (force) {
                this.texData.get(dataId).refCount = 0;
            }
            else {
                this.texData.get(dataId).refCount--;
            }
            if (!force && this.texData.get(dataId).refCount > 0) {
                return false;
            }
            if (this.pendingRead.has(dataId)) {
                this.pendingDisposal.add(dataId);
                this.pendingDeletes++;
                return false;
            }
            this.releaseGPUData(dataId);
            const { complexTensorInfos } = this.texData.get(dataId);
            if (complexTensorInfos != null) {
                this.disposeData(complexTensorInfos.real.dataId, force);
                this.disposeData(complexTensorInfos.imag.dataId, force);
            }
            this.texData.delete(dataId);
            return true;
        }
        releaseGPUData(dataId) {
            const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);
            const key = slice && slice.origDataId || dataId;
            const refCount = this.dataRefCount.get(key);
            if (refCount > 1) {
                this.dataRefCount.set(key, refCount - 1);
            }
            else {
                this.dataRefCount.delete(key);
                if (texture != null) {
                    this.numBytesInGPU -= this.computeBytes(texShape, dtype);
                    this.textureManager.releaseTexture(texture, texShape, usage, isPacked);
                }
            }
            const texData = this.texData.get(dataId);
            texData.texture = null;
            texData.texShape = null;
            texData.isPacked = false;
            texData.slice = null;
        }
        getTexture(dataId) {
            this.uploadToGPU(dataId);
            return this.texData.get(dataId).texture.texture;
        }
        /**
         * Returns internal information for the specific data bucket. Used in unit
         * tests.
         */
        getDataInfo(dataId) {
            return this.texData.get(dataId);
        }
        /*
        Tests whether all the inputs to an op are small and on the CPU. This heuristic
        determines when it would be faster to execute a kernel on the CPU. WebGL
        kernels opt into running this check and forwarding when appropriate.
        TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
        sustainable strategy for optimizing backend execution of ops.
         */
        shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {
            return env().getBool('WEBGL_CPU_FORWARD') &&
                inputs.every(input => this.texData.get(input.dataId).texture == null &&
                    sizeFromShape(input.shape) < sizeThreshold);
        }
        getGPGPUContext() {
            return this.gpgpu;
        }
        where(condition) {
            warn('tf.where() in webgl locks the UI thread. ' +
                'Call tf.whereAsync() instead');
            const condVals = condition.dataSync();
            return whereImpl(condition.shape, condVals);
        }
        packedUnaryOp(x, op, dtype) {
            const program = new UnaryOpPackedProgram(x.shape, op);
            const outInfo = this.compileAndRun(program, [x], dtype);
            return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);
        }
        // TODO(msoulanille) remove this once the backend has been modularized
        // a copy is needed here to break a circular dependency.
        // Also remove the op from unary_op.
        abs(x) {
            // TODO: handle cases when x is complex.
            if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {
                const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);
                return this.makeOutput(x.shape, x.dtype, outValues);
            }
            if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
                return this.packedUnaryOp(x, ABS$1, x.dtype);
            }
            const program = new UnaryOpProgram(x.shape, ABS$1);
            const outInfo = this.compileAndRun(program, [x]);
            return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);
        }
        makeTensorInfo(shape, dtype, values) {
            let dataId;
            if (dtype === 'string' && values != null && values.length > 0 &&
                isString(values[0])) {
                const encodedValues = values.map(d => encodeString(d));
                dataId = this.write(encodedValues, shape, dtype);
            }
            else {
                dataId = this.write(values, shape, dtype);
            }
            this.texData.get(dataId).usage = null;
            return { dataId, shape, dtype };
        }
        makeOutput(shape, dtype, values) {
            const { dataId } = this.makeTensorInfo(shape, dtype, values);
            return engine().makeTensorFromDataId(dataId, shape, dtype, this);
        }
        unpackTensor(input) {
            const program = new UnpackProgram(input.shape);
            return this.runWebGLProgram(program, [input], input.dtype);
        }
        packTensor(input) {
            const program = new PackProgram(input.shape);
            const preventEagerUnpackingOutput = true;
            return this.runWebGLProgram(program, [input], input.dtype, null /* customUniformValues */, preventEagerUnpackingOutput);
        }
        packedReshape(input, afterShape) {
            const input3DShape = [
                getBatchDim(input.shape),
                ...getRowsCols(input.shape)
            ];
            const input3D = {
                dtype: input.dtype,
                shape: input3DShape,
                dataId: input.dataId
            };
            const afterShapeAs3D = [
                getBatchDim(afterShape), ...getRowsCols(afterShape)
            ];
            const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);
            const preventEagerUnpackingOfOutput = true;
            const customValues = [input3DShape];
            const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);
            return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };
        }
        decode(dataId, customTexShape) {
            const texData = this.texData.get(dataId);
            const { isPacked, shape, dtype } = texData;
            if (customTexShape != null) {
                const size = sizeFromShape(shape);
                const texSize = customTexShape[0] * customTexShape[1] * 4;
                assert(size <= texSize, () => 'customTexShape is too small. ' +
                    'Row * Column * 4 should be equal or larger than the ' +
                    'size of the tensor data.');
            }
            const shapeAs3D = getShapeAs3D(shape);
            let program;
            if (isPacked) {
                program = new DecodeMatrixPackedProgram(shapeAs3D);
            }
            else {
                program = new DecodeMatrixProgram(shapeAs3D);
            }
            const preventEagerUnpackingOfOutput = true;
            const customValues = [customTexShape != null ? customTexShape :
                    getDenseTexShape(shapeAs3D)];
            const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);
            return { dtype, shape, dataId: out.dataId };
        }
        runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false, customTexShape) {
            const output = this.makeTensorInfo(program.outputShape, outputDtype);
            const outData = this.texData.get(output.dataId);
            if (program.packedOutput) {
                outData.isPacked = true;
            }
            if (program.outPackingScheme === PackingScheme.DENSE) {
                const texelShape = customTexShape != null ?
                    customTexShape :
                    getDenseTexShape(program.outputShape);
                // For a densely packed output, we explicitly set texShape
                // so it doesn't get assigned later according to our typical packing
                // scheme wherein a single texel can only contain values from adjacent
                // rows/cols.
                outData.texShape = texelShape.map(d => d * 2);
            }
            if (program.outTexUsage != null) {
                outData.usage = program.outTexUsage;
            }
            if (sizeFromShape(output.shape) === 0) {
                // Short-circuit the computation since the result is empty (has 0 in its
                // shape).
                outData.values =
                    getTypedArrayFromDType(output.dtype, 0);
                return output;
            }
            const dataToDispose = [];
            const inputsData = inputs.map(input => {
                if (input.dtype === 'complex64') {
                    throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +
                        `dtypes, please separate the program into real and imaginary ` +
                        `parts.`);
                }
                let texData = this.texData.get(input.dataId);
                if (texData.texture == null) {
                    if (!program.packedInputs &&
                        sizeFromShape(input.shape) <=
                            env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {
                        // Upload small tensors that live on the CPU as uniforms, not as
                        // textures. Do this only when the environment supports 32bit floats
                        // due to problems when comparing 16bit floats with 32bit floats.
                        // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it
                        // possible for packed shaders to sample from uniforms.
                        return {
                            shape: input.shape,
                            texData: null,
                            isUniform: true,
                            uniformValues: texData.values
                        };
                    }
                    // This ensures that if a packed program's inputs have not yet been
                    // uploaded to the GPU, they get uploaded as packed right off the bat.
                    if (program.packedInputs) {
                        texData.isPacked = true;
                        texData.shape = input.shape;
                    }
                }
                this.uploadToGPU(input.dataId);
                if (!!texData.isPacked !== !!program.packedInputs) {
                    input = texData.isPacked ? this.unpackTensor(input) :
                        this.packTensor(input);
                    dataToDispose.push(input);
                    texData = this.texData.get(input.dataId);
                }
                else if (texData.isPacked &&
                    !isReshapeFree(texData.shape, input.shape)) {
                    // This is a special case where a texture exists for a tensor
                    // but the shapes are incompatible (due to packing constraints) because
                    // the tensor did not have a chance to go through the packed reshape
                    // shader. This only happens when we reshape the *same* tensor to form
                    // *distinct* inputs to an op, e.g. dotting a vector with itself. This
                    // case will disappear once packed uploading is the default.
                    const savedInput = input;
                    const targetShape = input.shape;
                    input.shape = texData.shape;
                    input = this.packedReshape(input, targetShape);
                    dataToDispose.push(input);
                    texData = this.texData.get(input.dataId);
                    savedInput.shape = targetShape;
                }
                return { shape: input.shape, texData, isUniform: false };
            });
            this.uploadToGPU(output.dataId);
            const outputData = { shape: output.shape, texData: outData, isUniform: false };
            const key = makeShaderKey(program, inputsData, outputData);
            const binary = this.getAndSaveBinary(key, () => {
                return compileProgram(this.gpgpu, program, inputsData, outputData);
            });
            const shouldTimeProgram = this.activeTimers != null;
            let query;
            if (shouldTimeProgram) {
                query = this.startTimer();
            }
            runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);
            dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));
            if (shouldTimeProgram) {
                query = this.endTimer(query);
                this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });
            }
            const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');
            // Manually GL flush requested
            if (glFlushThreshold > 0) {
                const time = now();
                if ((time - this.lastGlFlushTime) > glFlushThreshold) {
                    this.gpgpu.gl.flush();
                    this.lastGlFlushTime = time;
                }
            }
            if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&
                preventEagerUnpackingOfOutput === false) {
                const unpacked = this.unpackTensor(output);
                this.disposeIntermediateTensorInfo(output);
                return unpacked;
            }
            return output;
        }
        compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {
            outputDtype = outputDtype || inputs[0].dtype;
            const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);
            return outInfo;
        }
        getAndSaveBinary(key, getBinary) {
            if (!(key in this.binaryCache)) {
                this.binaryCache[key] = getBinary();
            }
            return this.binaryCache[key];
        }
        getTextureManager() {
            return this.textureManager;
        }
        dispose() {
            if (this.disposed) {
                return;
            }
            // Avoid disposing the compiled webgl programs during unit testing because
            // it slows down test execution.
            if (!env().getBool('IS_TEST')) {
                const allKeys = Object.keys(this.binaryCache);
                allKeys.forEach(key => {
                    this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);
                    delete this.binaryCache[key];
                });
            }
            this.textureManager.dispose();
            if (this.canvas != null &&
                (typeof (HTMLCanvasElement) !== 'undefined' &&
                    this.canvas instanceof HTMLCanvasElement)) {
                this.canvas.remove();
            }
            else {
                this.canvas = null;
            }
            if (this.gpgpuCreatedLocally) {
                this.gpgpu.program = null;
                this.gpgpu.dispose();
            }
            this.disposed = true;
        }
        floatPrecision() {
            if (this.floatPrecisionValue == null) {
                this.floatPrecisionValue = tidy(() => {
                    if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {
                        // Momentarily switching DEBUG flag to false so we don't throw an
                        // error trying to upload a small value.
                        const debugFlag = env().getBool('DEBUG');
                        env().set('DEBUG', false);
                        const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];
                        env().set('DEBUG', debugFlag);
                        if (underflowCheckValue > 0) {
                            return 32;
                        }
                    }
                    return 16;
                });
            }
            return this.floatPrecisionValue;
        }
        /** Returns the smallest representable number.  */
        epsilon() {
            return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
        }
        uploadToGPU(dataId) {
            const texData = this.texData.get(dataId);
            const { shape, dtype, values, texture, usage, isPacked } = texData;
            if (texture != null) {
                // Array is already on GPU. No-op.
                return;
            }
            const shouldTimeProgram = this.activeTimers != null;
            let start;
            if (shouldTimeProgram) {
                start = now();
            }
            let texShape = texData.texShape;
            if (texShape == null) {
                // This texShape may not be the final texture shape. For packed or dense
                // textures, the texShape will be changed when textures are created.
                texShape = getTextureShapeFromLogicalShape(shape, isPacked);
                texData.texShape = texShape;
            }
            if (values != null) {
                const shapeAs3D = getShapeAs3D(shape);
                let program;
                let width = texShape[1], height = texShape[0];
                const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;
                // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we
                // need to make sure the upload uses the same packed size
                if (isPacked || !isByteArray) {
                    [width, height] = getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);
                }
                if (isPacked) {
                    program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);
                }
                else {
                    program = new EncodeMatrixProgram(shapeAs3D, isByteArray);
                }
                // TexShape for float array needs to be the original shape, which byte
                // array needs to be packed size. This allow the data upload shape to be
                // matched with texture creation logic.
                const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;
                const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);
                const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);
                if (isByteArray) {
                    tempDenseInputTexData.usage = TextureUsage.PIXELS;
                }
                else {
                    tempDenseInputTexData.usage = TextureUsage.UPLOAD;
                }
                tempDenseInputTexData.texShape = tempDenseInputTexShape;
                this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);
                const customValues = [[height, width]];
                // We want the output to remain packed regardless of the value of
                // WEBGL_PACK.
                const preventEagerUnpacking = true;
                const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);
                // Have the original texture assume the identity of the encoded output.
                const outputTexData = this.texData.get(encodedOutputTarget.dataId);
                texData.texture = outputTexData.texture;
                texData.texShape = outputTexData.texShape;
                texData.isPacked = outputTexData.isPacked;
                texData.usage = outputTexData.usage;
                this.disposeIntermediateTensorInfo(tempDenseInputHandle);
                this.texData.delete(encodedOutputTarget.dataId);
                // Once uploaded, don't store the values on cpu.
                texData.values = null;
                if (shouldTimeProgram) {
                    this.uploadWaitMs += now() - start;
                }
            }
            else {
                const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);
                texData.texture = newTexture;
            }
        }
        convertAndCacheOnCPU(dataId, float32Values) {
            const texData = this.texData.get(dataId);
            const { dtype } = texData;
            this.releaseGPUData(dataId);
            if (float32Values != null) {
                texData.values = float32ToTypedArray(float32Values, dtype);
            }
            return texData.values;
        }
        acquireTexture(texShape, texType, dtype, isPacked) {
            this.numBytesInGPU += this.computeBytes(texShape, dtype);
            if (!this.warnedAboutMemory &&
                this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
                const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
                this.warnedAboutMemory = true;
                console.warn(`High memory usage in GPU: ${mb} MB, ` +
                    `most likely due to a memory leak`);
            }
            return this.textureManager.acquireTexture(texShape, texType, isPacked);
        }
        computeBytes(shape, dtype) {
            return shape[0] * shape[1] * bytesPerElement(dtype);
        }
    }
    MathBackendWebGL.nextDataId = 0;
    function float32ToTypedArray(a, dtype) {
        if (dtype === 'float32' || dtype === 'complex64') {
            return a;
        }
        else if (dtype === 'int32' || dtype === 'bool') {
            const result = (dtype === 'int32') ? new Int32Array(a.length) :
                new Uint8Array(a.length);
            for (let i = 0; i < result.length; ++i) {
                result[i] = Math.round(a[i]);
            }
            return result;
        }
        else {
            throw new Error(`Unknown dtype ${dtype}`);
        }
    }

    /**
     * @license
     * Copyright 2020 Google Inc. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    if (isBrowser()) {
        registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const CHECK_NAN_SNIPPET$1 = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
    class BinaryOpProgram {
        constructor(op, aShape, bShape) {
            this.variableNames = ['A', 'B'];
            this.outputShape = assertAndGetBroadcastShape(aShape, bShape);
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            this.userCode = `
      float binaryOperation(float a, float b) {
        ${op}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const CHECK_NAN_SNIPPET = `
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;
    class BinaryOpPackedProgram {
        constructor(op, aShape, bShape, checkOutOfBounds = false) {
            this.variableNames = ['A', 'B'];
            this.supportsBroadcasting = true;
            this.packedInputs = true;
            this.packedOutput = true;
            this.outputShape = assertAndGetBroadcastShape(aShape, bShape);
            const rank = this.outputShape.length;
            this.enableShapeUniforms = useShapeUniforms(rank);
            let checkOutOfBoundsString = '';
            if (checkOutOfBounds) {
                if (rank === 0 || sizeFromShape(this.outputShape) === 1) {
                    checkOutOfBoundsString = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
                }
                else {
                    const dtype = getCoordsDataType(rank);
                    checkOutOfBoundsString = `
          ${dtype} coords = getOutputCoords();
        `;
                    if (rank === 1) {
                        if (this.enableShapeUniforms) {
                            checkOutOfBoundsString += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
                        }
                        else {
                            checkOutOfBoundsString += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
                        }
                    }
                    else {
                        const channels = getChannels('coords', rank);
                        if (this.enableShapeUniforms) {
                            checkOutOfBoundsString += `
            bool nextRowOutOfBounds =
              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];
            bool nextColOutOfBounds =
              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
                        }
                        else {
                            checkOutOfBoundsString += `
            bool nextRowOutOfBounds =
              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};
            bool nextColOutOfBounds =
              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
                        }
                    }
                }
            }
            this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${op}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${checkOutOfBoundsString}

        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function identity(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        backend.incRef(x.dataId);
        return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };
    }
    const identityConfig = {
        kernelName: Identity,
        backendName: 'webgl',
        kernelFunc: identity
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * In WebGL data is stored in GPU textures which can't be efficiently copied, so
     * complex tensors share data with their real and imaginary components. Complex
     * tensors' reference to the components is tracked by refCount on the individual
     * component. The refCounts are increased by the identity call.
     *
     * When a complex tensor is disposed, it will reduce the refCount on the
     * components by calling disposeData on each.
     */
    function complex(args) {
        const { inputs, backend } = args;
        const { real, imag } = inputs;
        const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');
        const complex = backend.texData.get(complexInfo.dataId);
        const realTensorInfo = identity({ inputs: { x: real }, backend });
        const imagTensorInfo = identity({ inputs: { x: imag }, backend });
        complex.complexTensorInfos = { real: realTensorInfo, imag: imagTensorInfo };
        return complexInfo;
    }
    const complexConfig = {
        kernelName: Complex,
        backendName: 'webgl',
        kernelFunc: complex
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const LEAKYRELU = `return (a < 0.) ? b * a : a;`;
    const LEAKYRELU_PACKED = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
    function leakyRelu(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { alpha } = attrs;
        const $alpha = backend.makeTensorInfo([], 'float32', createScalarValue(alpha, 'float32'));
        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?
            new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :
            new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);
        const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');
        backend.disposeIntermediateTensorInfo($alpha);
        return result;
    }
    const leakyReluConfig = {
        kernelName: LeakyRelu,
        backendName: 'webgl',
        kernelFunc: leakyRelu
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const PRELU = `return (a < 0.) ? b * a : a;`;
    const PRELU_PACKED = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
    function prelu(args) {
        const { inputs, backend } = args;
        const { x, alpha } = inputs;
        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?
            new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :
            new BinaryOpProgram(PRELU, x.shape, alpha.shape);
        return backend.runWebGLProgram(program, [x, alpha], 'float32');
    }
    const preluConfig = {
        kernelName: Prelu,
        backendName: 'webgl',
        kernelFunc: prelu
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;
    const CHECK_NAN_SNIPPET_BINARY = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
    const CHECK_NAN_SNIPPET_BINARY_PACKED = `
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;
    /**
     * Template that creates a `KernelFunc` for unary ops.
     * @param opSnippet Op snippet to create `UnaryOpProgram`.
     * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.
     * @param dtype Optional. If set, the result has this dtype. Otherwise, the
     *     result has the same dtype as the first input. This is mainly used in
     *     comparison kernels, such as Equal, Less, Greater, etc.
     */
    function unaryKernelFunc({ opSnippet, packedOpSnippet, cpuKernelImpl, dtype }) {
        return ({ inputs, backend }) => {
            const { x } = inputs;
            const webglBackend = backend;
            const $dtype = dtype || x.dtype;
            if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {
                const xData = webglBackend.texData.get(x.dataId);
                const outValues = cpuKernelImpl(xData.values, $dtype);
                return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);
            }
            const shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;
            let program;
            if (shouldUsePackedProgram) {
                program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);
            }
            else {
                program = new UnaryOpProgram(x.shape, opSnippet);
            }
            return webglBackend.runWebGLProgram(program, [x], $dtype);
        };
    }
    /**
     * Template that creates a `KernelFunc` for binary ops.
     * @param opSnippet Op snippet to create `BinaryOpProgram`.
     * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.
     * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true
     *     when creating BinaryOpPackedProgram.
     * @param dtype Optional. If set, the result has this dtype. Otherwise, the
     *     result has the same dtype as the first input. This is mainly used in
     *     comparison kernels, such as Equal, Less, Greater, etc.
     */
    function binaryKernelFunc({ opSnippet, packedOpSnippet, checkOutOfBounds = false, supportsComplex = false, cpuKernelImpl, dtype }) {
        return ({ inputs, backend }) => {
            const { a, b } = inputs;
            const webglBackend = backend;
            if (supportsComplex && a.dtype === 'complex64') {
                const aData = webglBackend.texData.get(a.dataId);
                const bData = webglBackend.texData.get(b.dataId);
                const [real, imag] = [
                    [aData.complexTensorInfos.real, bData.complexTensorInfos.real],
                    [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]
                ].map(complexParts => {
                    const [aPart, bPart] = complexParts;
                    const aHandle = {
                        dataId: aPart.dataId,
                        dtype: aPart.dtype,
                        shape: a.shape
                    };
                    const bHandle = {
                        dataId: bPart.dataId,
                        dtype: bPart.dtype,
                        shape: b.shape
                    };
                    const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);
                    return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));
                });
                const complexOutput = complex({ inputs: { real, imag }, backend: webglBackend });
                webglBackend.disposeIntermediateTensorInfo(real);
                webglBackend.disposeIntermediateTensorInfo(imag);
                // TODO(annxingyuan): Implement CPU forwarding for complex inputs.
                return complexOutput;
            }
            const $dtype = dtype || upcastType(a.dtype, b.dtype);
            if ((a.dtype === 'string' || b.dtype === 'string' ||
                webglBackend.shouldExecuteOnCPU([a, b])) &&
                cpuKernelImpl != null) {
                const aVals = webglBackend.texData.get(a.dataId).values;
                const bVals = webglBackend.texData.get(b.dataId).values;
                const decodedAVals = a.dtype === 'string' ?
                    // tslint:disable-next-line: no-any
                    fromUint8ToStringArray(aVals) :
                    aVals;
                const decodedBVals = a.dtype === 'string' ?
                    // tslint:disable-next-line: no-any
                    fromUint8ToStringArray(bVals) :
                    bVals;
                const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);
                const out = webglBackend.makeTensorInfo(outShape, $dtype);
                const outData = webglBackend.texData.get(out.dataId);
                outData.values = outValues;
                return out;
            }
            const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&
                packedOpSnippet != null;
            let program;
            if (shouldUsePackedProgram) {
                program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);
            }
            else {
                program = new BinaryOpProgram(opSnippet, a.shape, b.shape);
            }
            return webglBackend.runWebGLProgram(program, [a, b], $dtype);
        };
    }
    function mapActivationToShaderProgram(activation, packed = false) {
        if (activation === 'linear') {
            if (packed) {
                return LINEAR;
            }
            return LINEAR$1;
        }
        else if (activation === 'relu') {
            if (packed) {
                return RELU$1;
            }
            return RELU$2;
        }
        else if (activation === 'elu') {
            if (packed) {
                return ELU$1;
            }
            return ELU$2;
        }
        else if (activation === 'relu6') {
            if (packed) {
                return RELU6$1;
            }
            return RELU6$2;
        }
        else if (activation === 'prelu') {
            if (packed) {
                return PRELU_PACKED;
            }
            return PRELU;
        }
        else if (activation === 'leakyrelu') {
            if (packed) {
                return LEAKYRELU_PACKED;
            }
            return LEAKYRELU;
        }
        else if (activation === 'sigmoid') {
            if (packed) {
                return SIGMOID$1;
            }
            return SIGMOID$2;
        }
        throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class MatMulPackedProgram {
        constructor(aShape, bShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false, hasLeakyreluActivation = false) {
            this.variableNames = ['matrixA', 'matrixB'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.outputShape = outputShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            const sharedDim = transposeA ? aShape[1] : aShape[2];
            const sharedDimensionPacked = Math.ceil(sharedDim / 2);
            const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';
            const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';
            const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];
            const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];
            let activationSnippet = '', applyActivationSnippet = '';
            if (activation) {
                if (hasPreluActivation) {
                    activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
                }
                else if (hasLeakyreluActivation) {
                    activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
                }
                else {
                    activationSnippet = `vec4 activation(vec4 x) {
          ${activation}
        }`;
                }
                applyActivationSnippet = `result = activation(result);`;
            }
            const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
            if (addBias) {
                this.variableNames.push('bias');
            }
            if (hasPreluActivation) {
                this.variableNames.push('preluActivationWeights');
            }
            if (hasLeakyreluActivation) {
                this.variableNames.push('leakyreluAlpha');
            }
            let batchASnippet = 'rc.x';
            let batchBSnippet = 'rc.x';
            if (aShape[0] < bShape[0]) {
                batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;
            }
            else if (bShape[0] < aShape[0]) {
                batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;
            }
            this.userCode = `
      ${activationSnippet}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${sharedDimensionPacked}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${sharedDimensionPacked}; i++) {
          int batchA = ${batchASnippet};
          int batchB = ${batchBSnippet};
          vec4 a = getMatrixA(batchA, ${aSample});
          vec4 b = getMatrixB(batchB, ${bSample});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${aSwizzle[0]} * ${bSwizzle[0]});
          result += (${aSwizzle[1]} * ${bSwizzle[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${addBiasSnippet}

        ${applyActivationSnippet}

        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // (Ar + Ai)(Br + Bi) =
    // ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr
    // Yr = ArBr - AB
    // Yi = ArBi + AiBr
    const COMPLEX_MULTIPLY = {
        REAL: 'return areal * breal - aimag * bimag;',
        IMAG: 'return areal * bimag + aimag * breal;'
    };
    class BinaryOpComplexProgram {
        constructor(op, aShape, bShape) {
            this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];
            this.outputShape = assertAndGetBroadcastShape(aShape, bShape);
            this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${op}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const MUL = 'return a * b;';
    function multiply(args) {
        const { inputs, backend } = args;
        const { a, b } = inputs;
        const dtype = upcastType(a.dtype, b.dtype);
        if (a.dtype === 'complex64') {
            const aData = backend.texData.get(a.dataId);
            const bData = backend.texData.get(b.dataId);
            const realProgram = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.REAL, a.shape, b.shape);
            const imagProgram = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);
            const inputs = [
                {
                    dataId: aData.complexTensorInfos.real.dataId,
                    dtype: aData.complexTensorInfos.real.dtype,
                    shape: a.shape
                },
                {
                    dataId: aData.complexTensorInfos.imag.dataId,
                    dtype: aData.complexTensorInfos.imag.dtype,
                    shape: a.shape
                },
                {
                    dataId: bData.complexTensorInfos.real.dataId,
                    dtype: bData.complexTensorInfos.real.dtype,
                    shape: b.shape
                },
                {
                    dataId: bData.complexTensorInfos.imag.dataId,
                    dtype: bData.complexTensorInfos.imag.dtype,
                    shape: b.shape
                }
            ];
            const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');
            const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');
            const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });
            backend.disposeIntermediateTensorInfo(realPart);
            backend.disposeIntermediateTensorInfo(imagPart);
            // TODO(annxingyuan): CPU forwarding for complex inputs.
            return complexOutput;
        }
        if (backend.shouldExecuteOnCPU([a, b])) {
            const aData = backend.texData.get(a.dataId);
            const bData = backend.texData.get(b.dataId);
            const [outValues, outShape] = multiplyImplCPU(a.shape, b.shape, aData.values, bData.values, dtype);
            const out = backend.makeTensorInfo(outShape, dtype);
            const outData = backend.texData.get(out.dataId);
            outData.values = outValues;
            return out;
        }
        let program;
        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
            program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);
        }
        else {
            program = new BinaryOpProgram(MUL, a.shape, b.shape);
        }
        return backend.runWebGLProgram(program, [a, b], dtype);
    }
    const multiplyConfig = {
        kernelName: Multiply,
        backendName: 'webgl',
        kernelFunc: multiply
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function packedReshape(input, afterShape, backend) {
        const input3DShape = [getBatchDim(input.shape),
            ...getRowsCols(input.shape)];
        const input3D = {
            dtype: input.dtype,
            shape: input3DShape,
            dataId: input.dataId
        };
        const afterShapeAs3D = [getBatchDim(afterShape),
            ...getRowsCols(afterShape)];
        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);
        const preventEagerUnpackingOfOutput = true;
        const customValues = [input3DShape];
        const output = backend.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);
        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function reshape(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { shape } = attrs;
        const webglBackend = backend;
        const xSize = sizeFromShape(x.shape);
        const $shape = inferFromImplicitShape(shape, xSize);
        const $xSize = sizeFromShape($shape);
        assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +
            `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +
            `shape must have the same number of elements.`);
        const xTexData = webglBackend.texData.get(x.dataId);
        if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&
            !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {
            return packedReshape(x, $shape, webglBackend);
        }
        webglBackend.incRef(x.dataId);
        return { dataId: x.dataId, shape: $shape, dtype: x.dtype };
    }
    const reshapeConfig = {
        kernelName: Reshape,
        backendName: 'webgl',
        kernelFunc: reshape
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class MeanProgram {
        constructor(reduceInfo, divisor) {
            this.variableNames = ['x'];
            const { windowSize, batchSize, inSize, outSize } = reduceInfo;
            this.outputShape = [batchSize, outSize];
            const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
            const windowSizeVec4Remainder = windowSize % 4;
            let updateSnippet = `sumValue += dot(values, ones);`;
            if (divisor != null) {
                const denominator = 1 / divisor;
                updateSnippet = `sumValue += dot(values * ${isInt(denominator) ? denominator.toPrecision(2) :
                denominator}, ones);`;
            }
            let checkOutOfBounds = '';
            if (inSize % windowSize > 0) {
                checkOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return 0.0;
        }
      `;
            }
            this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${checkOutOfBounds}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        float sumValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${updateSnippet}
        }
        setOutput(sumValue);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ReduceProgram {
        constructor(reduceInfo, reduceType) {
            this.variableNames = ['x'];
            const { windowSize, batchSize, inSize, outSize } = reduceInfo;
            this.outputShape = [batchSize, outSize];
            let initializationValue = '0.0';
            let compareOp = ``;
            if (reduceType === 'prod') {
                initializationValue = '1.0';
            }
            else if (reduceType === 'min') {
                // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
                initializationValue = '1.0 / 1e-20';
                compareOp = `min`;
            }
            else if (reduceType === 'max') {
                // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
                initializationValue = '-1.0 / 1e-20';
                compareOp = `max`;
            }
            let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +
                'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
            if (reduceType === 'sum') {
                returnValue = `sumValue`;
            }
            else if (reduceType === 'prod') {
                returnValue = `prodValue`;
            }
            else if (reduceType === 'all') {
                returnValue = `allValue`;
            }
            else if (reduceType === 'any') {
                returnValue = `anyValue`;
            }
            const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
            const windowSizeVec4Remainder = windowSize % 4;
            let updateSnippet = `
      if (${reduceType === 'sum'}) {
        sumValue += dot(values, ones);
      } else if (${reduceType === 'prod'}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
        if (${reduceType === 'min'} || ${reduceType === 'max'}) {
          minMaxValue = ${compareOp}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `;
            let vecType = `vec4`;
            if (reduceType === 'all') {
                initializationValue = '1.0';
                updateSnippet = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `;
                vecType = `bvec4`;
            }
            else if (reduceType === 'any') {
                initializationValue = '0.0';
                updateSnippet = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `;
                vecType = `bvec4`;
            }
            let checkOutOfBounds = '';
            if (inSize % windowSize > 0) {
                checkOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return initializationValue;
        }
      `;
            }
            this.userCode = `
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${checkOutOfBounds}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        vec4 minMaxValue = vec4(${initializationValue});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${updateSnippet}
        }
        setOutput(${returnValue});
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Returns an array of configuration objects that describe each stage of the
    // reduction.
    function getReductionStages(inShape) {
        const stages = [];
        while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {
            const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];
            const windowSize = computeOptimalWindowSize(outSize);
            stages.push({
                inSize: outSize,
                windowSize,
                outSize: Math.ceil(outSize / windowSize)
            });
        }
        return stages;
    }
    function reduce(x, dtype, reductionType, backend) {
        const reductionStages = getReductionStages(x.shape);
        let result = x;
        for (let i = 0; i < reductionStages.length; i++) {
            const { inSize, windowSize, outSize } = reductionStages[i];
            let program;
            let previousResult;
            if (reductionType === 'mean') {
                program = i === 0 ?
                    new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, inSize) :
                    new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize });
            }
            else {
                program = new ReduceProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, reductionType);
            }
            previousResult = result;
            result = backend.runWebGLProgram(program, [result], dtype);
            if (previousResult.dataId !== x.dataId) {
                backend.disposeIntermediateTensorInfo(previousResult);
            }
        }
        return result;
    }

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class TransposeProgram {
        constructor(aShape, newDim) {
            this.variableNames = ['A'];
            const outputShape = new Array(aShape.length);
            for (let i = 0; i < outputShape.length; i++) {
                outputShape[i] = aShape[newDim[i]];
            }
            this.outputShape = outputShape;
            this.rank = outputShape.length;
            const dtype = getCoordsDataType(this.rank);
            const switched = getSwitchedCoords(newDim);
            this.userCode = `
    void main() {
      ${dtype} resRC = getOutputCoords();
      setOutput(getA(${switched}));
    }
    `;
        }
    }
    function getSwitchedCoords(newDim) {
        const rank = newDim.length;
        if (rank > 6) {
            throw Error(`Transpose for rank ${rank} is not yet supported`);
        }
        const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];
        const switchedCoords = new Array(rank);
        for (let i = 0; i < newDim.length; i++) {
            switchedCoords[newDim[i]] = originalOrder[i];
        }
        return switchedCoords.join();
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class TransposePackedProgram {
        constructor(aShape, newDim) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = true;
            const outputShape = new Array(aShape.length);
            for (let i = 0; i < outputShape.length; i++) {
                outputShape[i] = aShape[newDim[i]];
            }
            this.outputShape = outputShape;
            this.rank = outputShape.length;
            if (this.rank > 6) {
                throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
            }
            const dtype = getCoordsDataType(this.rank);
            const outputOrder = getVecChannels('rc', this.rank);
            const switchedOrder = new Array(this.rank);
            for (let i = 0; i < newDim.length; i++) {
                switchedOrder[newDim[i]] = outputOrder[i];
            }
            const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;
            const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;
            const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;
            this.userCode = `
    void main() {
      ${dtype} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${getc};
      if(${nextColumn}) {
        result[1] = ${getc};
      }
      --${outputOrder[this.rank - 1]};
      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {
        result[2] = ${getc};
        if(${nextColumn}) {
          result[3] = ${getc};
        }
      }
      setOutput(result);
    }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function transposeImpl(x, perm, backend) {
        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?
            new TransposePackedProgram(x.shape, perm) :
            new TransposeProgram(x.shape, perm);
        return backend.runWebGLProgram(program, [x], x.dtype);
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sumImpl(x, axis, keepDims, backend) {
        const reductionIndices = axis;
        const xRank = x.shape.length;
        const origAxes = parseAxisParam(reductionIndices, x.shape);
        let axes = origAxes;
        const permutedAxes = getAxesPermutation(axes, xRank);
        const sumInputIsTransposed = permutedAxes != null;
        let sumInput = x;
        if (sumInputIsTransposed) {
            sumInput = transposeImpl(x, permutedAxes, backend);
            axes = getInnerMostAxes(axes.length, xRank);
        }
        assertAxesAreInnerMostDims('sum', axes, xRank);
        const [sumOutShape, reduceShape] = computeOutAndReduceShapes(sumInput.shape, axes);
        let outShape = sumOutShape;
        if (keepDims) {
            // rather than reshape at the end, set the target shape here.
            outShape = expandShapeToKeepDim(sumOutShape, origAxes);
        }
        const inSize = sizeFromShape(reduceShape);
        const xSize = sizeFromShape(x.shape);
        const batchSize = xSize / inSize;
        const reshapedInput = reshape({ inputs: { x: sumInput }, attrs: { shape: [batchSize, inSize] }, backend });
        const outType = sumOutType(x.dtype);
        const reduced = reduce(reshapedInput, outType, 'sum', backend);
        const out = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });
        backend.disposeIntermediateTensorInfo(reshapedInput);
        backend.disposeIntermediateTensorInfo(reduced);
        if (sumInputIsTransposed) {
            backend.disposeIntermediateTensorInfo(sumInput);
        }
        return out;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sum(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        return sumImpl(x, axis, keepDims, backend);
    }
    const sumConfig = {
        kernelName: Sum,
        backendName: 'webgl',
        kernelFunc: sum
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function transpose(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { perm } = attrs;
        const webglBackend = backend;
        const xRank = x.shape.length;
        const newShape = new Array(xRank);
        for (let i = 0; i < newShape.length; i++) {
            newShape[i] = x.shape[perm[i]];
        }
        let out;
        if (webglBackend.shouldExecuteOnCPU([x])) {
            const xTexData = webglBackend.texData.get(x.dataId);
            const values = xTexData.values;
            const outValues = transposeImplCPU(values, x.shape, x.dtype, perm, newShape);
            out = webglBackend.makeTensorInfo(newShape, x.dtype);
            const outData = webglBackend.texData.get(out.dataId);
            outData.values = outValues;
        }
        else {
            out = transposeImpl(x, perm, webglBackend);
        }
        return out;
    }
    const transposeConfig = {
        kernelName: Transpose,
        backendName: 'webgl',
        kernelFunc: transpose
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Empirically determined minimal shared dimension in matmul before we forward
    // to a.mul(b).sum() in order to take advantage of GPU parallelism. See
    // https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.
    const MATMUL_SHARED_DIM_THRESHOLD = 1000;
    function batchMatMulImpl({ a, b, transposeA, transposeB, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {
        const aRank = a.shape.length;
        const bRank = b.shape.length;
        const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];
        const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];
        const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];
        const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];
        const outerDimsA = a.shape.slice(0, -2);
        const outerDimsB = b.shape.slice(0, -2);
        const batchDimA = sizeFromShape(outerDimsA);
        const batchDimB = sizeFromShape(outerDimsB);
        const outShapeOuterDims = assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));
        const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);
        assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +
            `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +
            `${b.shape} and transposeA=${transposeA}` +
            ` and transposeB=${transposeB} must match.`);
        const a3dShape = transposeA ?
            [batchDimA, innerShapeA, outerShapeA] :
            [batchDimA, outerShapeA, innerShapeA];
        const b3dShape = transposeB ?
            [batchDimB, outerShapeB, innerShapeB] :
            [batchDimB, innerShapeB, outerShapeB];
        // The rest of the implementation is designed to operate on rank-3 tensors
        const a3d = reshape({ inputs: { x: a }, backend, attrs: { shape: a3dShape } });
        const b3d = reshape({ inputs: { x: b }, backend, attrs: { shape: b3dShape } });
        const intermediates = [a3d, b3d];
        const batchDim = Math.max(batchDimA, batchDimB);
        const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];
        const hasBias = bias != null;
        const hasPreluActivationWeights = preluActivationWeights != null;
        const hasLeakyreluAlpha = activation === 'leakyrelu';
        const fusedActivation = activation != null ?
            mapActivationToShaderProgram(activation, true) :
            null;
        const containsFusedOps = hasBias || hasPreluActivationWeights ||
            hasLeakyreluAlpha || fusedActivation != null;
        let out;
        // Since the matrices are vectors, it is faster to call mul().sum()
        // because sum() is O(sqrt(N)) due to divide-and-conquer.
        if ((outerShapeA === 1 || outerShapeB === 1) &&
            sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {
            let aVec = a3d;
            let bVec = b3d;
            if (transposeA) {
                aVec = transpose({ inputs: { x: a3d }, backend, attrs: { perm: [0, 2, 1] } });
                intermediates.push(aVec);
            }
            if (transposeB) {
                bVec = transpose({ inputs: { x: b3d }, backend, attrs: { perm: [0, 2, 1] } });
                intermediates.push(bVec);
            }
            const shouldReshapeA = outerShapeB !== 1;
            const shouldReshapeB = outerShapeB === 1;
            let aVec3d = aVec;
            if (shouldReshapeA) {
                aVec3d = reshape({
                    inputs: { x: aVec },
                    backend,
                    attrs: { shape: [batchDim, sharedDim, 1] }
                });
                intermediates.push(aVec3d);
            }
            const axis = outerShapeB === 1 ? 2 : 1;
            let bVec3d = bVec;
            if (shouldReshapeB) {
                bVec3d = reshape({
                    inputs: { x: bVec },
                    backend,
                    attrs: { shape: [batchDim, 1, sharedDim] }
                });
                intermediates.push(bVec3d);
            }
            const product = multiply({ inputs: { a: aVec3d, b: bVec3d }, backend });
            out = sum({ inputs: { x: product }, backend, attrs: { axis, keepDims: true } });
            intermediates.push(product);
        }
        else {
            const dtype = upcastType(a.dtype, b.dtype);
            const program = new MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
            const inputs = [a3d, b3d];
            if (bias != null) {
                inputs.push(bias);
            }
            if (hasPreluActivationWeights) {
                inputs.push(preluActivationWeights);
            }
            if (hasLeakyreluAlpha) {
                const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', createScalarValue(leakyreluAlpha, 'float32'));
                inputs.push($leakyreluAlpha);
                intermediates.push($leakyreluAlpha);
            }
            out = backend.runWebGLProgram(program, inputs, dtype);
        }
        const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: outShape } });
        intermediates.push(out);
        for (const i of intermediates) {
            backend.disposeIntermediateTensorInfo(i);
        }
        return outReshaped;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function _fusedMatMul(args) {
        const { inputs, backend, attrs } = args;
        const { a, b, bias, preluActivationWeights } = inputs;
        const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;
        return batchMatMulImpl({
            a,
            b,
            transposeA,
            transposeB,
            backend,
            bias,
            preluActivationWeights,
            leakyreluAlpha,
            activation
        });
    }
    const _fusedMatMulConfig = {
        kernelName: _FusedMatMul,
        backendName: 'webgl',
        kernelFunc: _fusedMatMul,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ABS = `return abs(x);`;
    function abs(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        // TODO: handle cases when x is complex. Once the cpu implementation
        // can handle complex values, refactor to use unaryKernelFunc.
        if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {
            const xData = backend.texData.get(x.dataId);
            const outValues = simpleAbsImplCPU(xData.values);
            return backend.makeTensorInfo(x.shape, x.dtype, outValues);
        }
        let program;
        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
            program = new UnaryOpPackedProgram(x.shape, ABS);
        }
        else {
            program = new UnaryOpProgram(x.shape, ABS);
        }
        return backend.runWebGLProgram(program, [x], x.dtype);
    }
    const absConfig = {
        kernelName: Abs,
        backendName: 'webgl',
        kernelFunc: abs
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ACOS = CHECK_NAN_SNIPPET$2 + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`;
    const acos = unaryKernelFunc({ opSnippet: ACOS });
    const acosConfig = {
        kernelName: Acos,
        backendName: 'webgl',
        kernelFunc: acos,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ACOSH = CHECK_NAN_SNIPPET$2 + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`;
    const acosh = unaryKernelFunc({ opSnippet: ACOSH });
    const acoshConfig = {
        kernelName: Acosh,
        backendName: 'webgl',
        kernelFunc: acosh,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ADD = 'return a + b;';
    const addKernelFunc = binaryKernelFunc({
        opSnippet: ADD,
        packedOpSnippet: ADD,
        supportsComplex: true,
        cpuKernelImpl: addImplCPU
    });
    const addConfig = {
        kernelName: Add,
        backendName: 'webgl',
        kernelFunc: addKernelFunc
    };

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class AddNProgram {
        constructor(outputShape, shapes) {
            this.outputShape = [];
            this.outputShape = outputShape;
            this.variableNames = shapes.map((_, i) => `T${i}`);
            const snippets = [];
            // Get target elements from every input tensor.
            this.variableNames.forEach(variable => {
                snippets.push(`float v${variable} = get${variable}AtOutCoords();`);
            });
            // Calculate the sum of all elements.
            const operation = this.variableNames
                .map(variable => {
                return `v${variable}`;
            })
                .join(' + ');
            this.userCode = `
      void main() {
        ${snippets.join('\n        ')}

        float result = ${operation};
        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class AddNPackedProgram {
        constructor(outputShape, shapes) {
            this.outputShape = [];
            this.packedInputs = true;
            this.packedOutput = true;
            this.outputShape = outputShape;
            this.variableNames = shapes.map((_, i) => `T${i}`);
            const snippets = [];
            // Get target elements from every input tensor.
            this.variableNames.forEach(variable => {
                snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);
            });
            // Calculate the sum of all elements.
            const operation = this.variableNames
                .map(variable => {
                return `v${variable}`;
            })
                .join(' + ');
            this.userCode = `
      void main() {
        ${snippets.join('\n        ')}

        vec4 result = ${operation};
        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function addN(args) {
        const { inputs, backend } = args;
        const tensors = inputs;
        if (tensors.length === 1) {
            return identity({ inputs: { x: tensors[0] }, backend });
        }
        // Limit the number of uploaded textures for optimization.
        if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {
            const midIndex = Math.floor(tensors.length / 2);
            const leftSide = addN({ inputs: tensors.slice(0, midIndex), backend });
            const rightSide = addN({ inputs: tensors.slice(midIndex), backend });
            return addN({ inputs: [leftSide, rightSide], backend });
        }
        const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));
        const shapes = tensors.map(t => t.shape);
        // We can make sure shapes are identical in op level.
        const usePackedOp = env().getBool('WEBGL_PACK');
        const program = usePackedOp ?
            new AddNPackedProgram(tensors[0].shape, shapes) :
            new AddNProgram(tensors[0].shape, shapes);
        return backend.runWebGLProgram(program, tensors, dtype);
    }
    const addNConfig = {
        kernelName: AddN,
        backendName: 'webgl',
        kernelFunc: addN
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function all(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        const xRank = x.shape.length;
        const origAxes = parseAxisParam(axis, x.shape);
        let axes = origAxes;
        const permutedAxes = getAxesPermutation(axes, xRank);
        let permutedX = x;
        if (permutedAxes != null) {
            permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            axes = getInnerMostAxes(axes.length, xRank);
        }
        assertAxesAreInnerMostDims('all', axes, xRank);
        const [outShape, reduceShape] = computeOutAndReduceShapes(permutedX.shape, axes);
        const inSize = sizeFromShape(reduceShape);
        const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });
        const reduced = reduce(a2D, a2D.dtype, 'all', backend);
        let res;
        if (keepDims) {
            const newShape = expandShapeToKeepDim(outShape, origAxes);
            res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });
        }
        else {
            res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });
        }
        backend.disposeIntermediateTensorInfo(a2D);
        backend.disposeIntermediateTensorInfo(reduced);
        if (permutedAxes != null) {
            backend.disposeIntermediateTensorInfo(permutedX);
        }
        return res;
    }
    const allConfig = {
        kernelName: All,
        backendName: 'webgl',
        kernelFunc: all
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function any(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        const xRank = x.shape.length;
        const origAxes = parseAxisParam(axis, x.shape);
        let axes = origAxes;
        const permutedAxes = getAxesPermutation(axes, xRank);
        let permutedX = x;
        if (permutedAxes != null) {
            permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            axes = getInnerMostAxes(axes.length, xRank);
        }
        assertAxesAreInnerMostDims('any', axes, xRank);
        const [outShape, reduceShape] = computeOutAndReduceShapes(permutedX.shape, axes);
        const inSize = sizeFromShape(reduceShape);
        const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });
        const reduced = reduce(a2D, a2D.dtype, 'any', backend);
        let res;
        if (keepDims) {
            const newShape = expandShapeToKeepDim(outShape, origAxes);
            res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });
        }
        else {
            res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });
        }
        backend.disposeIntermediateTensorInfo(a2D);
        backend.disposeIntermediateTensorInfo(reduced);
        if (permutedAxes != null) {
            backend.disposeIntermediateTensorInfo(permutedX);
        }
        return res;
    }
    const anyConfig = {
        kernelName: Any,
        backendName: 'webgl',
        kernelFunc: any
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ArgMinMaxProgram {
        constructor(reduceInfo, op, firstPass) {
            this.variableNames = ['A'];
            const { windowSize, batchSize, outSize } = reduceInfo;
            if (!firstPass) {
                this.variableNames.push('bestIndicesA');
            }
            this.outputShape = [batchSize, outSize];
            const compOp = (op === 'max') ? '>' : '<';
            const indexSnippet = firstPass ?
                'inOffset + i;' :
                'round(getBestIndicesA(batch, inOffset + i));';
            this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${windowSize}; i++) {
          int inIdx = ${indexSnippet};
          float candidate = getA(batch, inIdx);
          if (candidate ${compOp} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ArgMinMaxPackedProgram {
        constructor(shape, windowSize, op, firstPass) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = true;
            assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +
            op.slice(1)} supports only inputs with rank above 2.`);
            const inSize = shape[shape.length - 1];
            const outSize = Math.ceil(inSize / windowSize);
            this.outputShape = shape.slice(0, -1);
            if (outSize > 1) {
                this.outputShape.push(outSize);
            }
            if (!firstPass) {
                this.variableNames.push('bestIndicesA');
            }
            const outShape = this.outputShape;
            const rank = outShape.length;
            const dtype = getCoordsDataType(rank);
            const coords = getChannels('coords', rank);
            let sourceLocSetup;
            let sourceRank;
            if (outSize === 1) {
                sourceRank = rank + 1;
                const sourceLocDType = getCoordsDataType(sourceRank);
                sourceLocSetup = `
        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);
        ++${coords[rank - 1]};
        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);
        ++${coords[rank - 2]};
        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);
        --${coords[rank - 1]};
        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);
        --${coords[rank - 2]};`;
            }
            else {
                sourceRank = rank;
                sourceLocSetup = `
        ${dtype} sourceLocR = coords;
        ++${coords[rank - 1]};
        ${dtype} sourceLocG = coords;
        ++${coords[rank - 2]};
        ${dtype} sourceLocA = coords;
        --${coords[rank - 1]};
        ${dtype} sourceLocB = coords;
        --${coords[rank - 2]};`;
            }
            const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);
            const inChannel = '.' + channels[sourceRank - 1]; // e.g. ".b" for rank 3.
            const intChannels = channels.map(x => 'int ' + x);
            const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');
            const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');
            const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');
            const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');
            const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';
            const fetchCandidateIdx = firstPass ? '' : `
          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),
                             getBestIndicesAChannel(${srcGCoords.join()}),
                             getBestIndicesAChannel(${srcBCoords.join()}),
                             getBestIndicesAChannel(${srcACoords.join()})));`;
            const fetchValue = `vec4(
            getAChannel(${srcRCoords.join()}),
            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,
            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;
            const getBestIndicesAChannelSnippet = firstPass ? '' : `
      float getBestIndicesAChannel(${intChannels.join()}) {
        return getChannel(getBestIndicesA(${channels.join()}),
                                          vec2(${channels.slice(-2).join()}));
      }`;
            this.userCode = `
      float getAChannel(${intChannels.join()}) {
        return getChannel(getA(${channels.join()}),
                               vec2(${channels.slice(-2).join()}));
      }
      ${getBestIndicesAChannelSnippet}
      void main() {
        ${dtype} coords = getOutputCoords();
        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};
        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};
        ${sourceLocSetup}
        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},
          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${fetchValue};

        for (int i = 0; i < ${windowSize}; i++) {
          inIdx = srcIdx;
          ${fetchCandidateIdx}
          vec4 candidate = ${fetchValue};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function argReduce(backend, x, reduceType, bestIndicesA = null) {
        let batchSize = x.shape[0];
        let inSize = x.shape[1];
        if (bestIndicesA != null) {
            batchSize = bestIndicesA.shape[0];
            inSize = bestIndicesA.shape[1];
        }
        const windowSize = computeOptimalWindowSize(inSize);
        const reduceInfo = { windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize) };
        const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);
        const inputs = [x];
        if (bestIndicesA != null) {
            inputs.push(bestIndicesA);
        }
        const output = backend.runWebGLProgram(program, inputs, 'int32');
        // No need to run another GPGPU program.
        if (output.shape[1] === 1) {
            return output;
        }
        const result = argReduce(backend, x, reduceType, output);
        backend.disposeIntermediateTensorInfo(output);
        return result;
    }
    function argReducePacked(backend, x, reduceType, bestIndicesA = null) {
        const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;
        const inSize = inShape[inShape.length - 1];
        const windowSize = computeOptimalWindowSize(inSize);
        const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);
        const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];
        const output = backend.runWebGLProgram(program, inputs, 'int32');
        if (output.shape.length === x.shape.length) {
            const result = argReducePacked(backend, x, reduceType, output);
            backend.disposeIntermediateTensorInfo(output);
            return result;
        }
        return output;
    }
    function argMinMaxReduce(backend, x, axis, reduceType) {
        const axes = [axis];
        assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);
        if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {
            const intermediateTensorInfos = [];
            // Eagerly unpack x input since it is passed in to all the shaders which
            // require unpacked inputs.
            const xtexData = backend.texData.get(x.dataId);
            const xIsPacked = xtexData !== null && xtexData.isPacked;
            let xUnPacked = x;
            if (xIsPacked) {
                xUnPacked = backend.unpackTensor(x);
                intermediateTensorInfos.push(xUnPacked);
            }
            const [outShape, reduceShape] = computeOutAndReduceShapes(xUnPacked.shape, axes);
            const inSize = sizeFromShape(reduceShape);
            const a2D = reshape({ inputs: { x: xUnPacked }, backend, attrs: { shape: [-1, inSize] } });
            intermediateTensorInfos.push(a2D);
            const reduced = argReduce(backend, a2D, reduceType);
            intermediateTensorInfos.push(reduced);
            const reshaped = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });
            intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
            return reshaped;
        }
        return argReducePacked(backend, x, reduceType);
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function argMax(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis } = attrs;
        let axes = parseAxisParam(axis, x.shape);
        const permutedAxes = getAxesPermutation(axes, x.shape.length);
        let $x = x;
        const intermediateTensorInfos = [];
        if (permutedAxes != null) {
            $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            intermediateTensorInfos.push($x);
            axes = getInnerMostAxes(axes.length, $x.shape.length);
        }
        assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);
        const out = argMinMaxReduce(backend, $x, axes[0], 'max');
        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return out;
    }
    const argMaxConfig = {
        kernelName: ArgMax,
        backendName: 'webgl',
        kernelFunc: argMax
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function argMin(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis } = attrs;
        let axes = parseAxisParam(axis, x.shape);
        const permutedAxes = getAxesPermutation(axes, x.shape.length);
        let $x = x;
        const intermediateTensorInfos = [];
        if (permutedAxes != null) {
            $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            intermediateTensorInfos.push($x);
            axes = getInnerMostAxes(axes.length, $x.shape.length);
        }
        assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);
        const out = argMinMaxReduce(backend, $x, axes[0], 'min');
        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return out;
    }
    const argMinConfig = {
        kernelName: ArgMin,
        backendName: 'webgl',
        kernelFunc: argMin
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ASIN = CHECK_NAN_SNIPPET$2 + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`;
    const asin = unaryKernelFunc({ opSnippet: ASIN });
    const asinConfig = {
        kernelName: Asin,
        backendName: 'webgl',
        kernelFunc: asin,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ASINH = CHECK_NAN_SNIPPET$2 + `return log(x + sqrt(x * x + 1.0));`;
    const asinh = unaryKernelFunc({ opSnippet: ASINH });
    const asinhConfig = {
        kernelName: Asinh,
        backendName: 'webgl',
        kernelFunc: asinh,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ATAN = CHECK_NAN_SNIPPET$2 + `
  return atan(x);
`;
    const atan = unaryKernelFunc({ opSnippet: ATAN });
    const atanConfig = {
        kernelName: Atan,
        backendName: 'webgl',
        kernelFunc: atan,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ATAN2 = CHECK_NAN_SNIPPET_BINARY + `
  return atan(a, b);
`;
    const ATAN2_PACKED = `
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` +
        CHECK_NAN_SNIPPET_BINARY_PACKED + `
  return result;
`;
    const atan2 = binaryKernelFunc({ opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED });
    const atan2Config = {
        kernelName: Atan2,
        backendName: 'webgl',
        kernelFunc: atan2,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ATANH = CHECK_NAN_SNIPPET$2 + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;
    const atanh = unaryKernelFunc({ opSnippet: ATANH });
    const atanhConfig = {
        kernelName: Atanh,
        backendName: 'webgl',
        kernelFunc: atanh,
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Pool2DProgram {
        constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {
            this.variableNames = ['x'];
            if (poolType === 'avg' && computePositions) {
                throw new Error('Cannot compute positions for average pool.');
            }
            const filterWidth = convInfo.filterWidth;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const dilationHeight = convInfo.dilationHeight;
            const dilationWidth = convInfo.dilationWidth;
            const effectiveFilterHeight = convInfo.effectiveFilterHeight;
            const effectiveFilterWidth = convInfo.effectiveFilterWidth;
            const padTop = convInfo.padInfo.top;
            const padLeft = convInfo.padInfo.left;
            this.outputShape = convInfo.outShape;
            const isAvgPool = poolType === 'avg';
            const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;
            const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;
            let initializationValue = '0.0';
            if (!isAvgPool) {
                // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
                initializationValue = '-1.0 / 1e-20';
            }
            if (computePositions) {
                const compareOp = '>=';
                this.userCode = `
        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
        const ivec2 pads = ivec2(${padTop}, ${padLeft});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${compareOp} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :
                flattenPositionStr) :
                `wR * ${effectiveFilterWidth} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
                return;
            }
            const compareOp = 'max';
            let returnValue = `${poolType}(${poolType}(${poolType}(` +
                'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
            if (poolType === 'avg') {
                returnValue = `avgValue / count`;
            }
            const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
            const filterWidthVec4Remainder = filterWidth % 4;
            const updateSnippet = `
      if (${isAvgPool}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
      }
    `;
            this.userCode = `
      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${convInfo.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${initializationValue});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${convInfo.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {
            int xC = xCCorner + wC * ${dilationWidth};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),
              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)
            );

            ${updateSnippet}
          }

          int xC = xCCorner + ${filterWidthNearestVec4};
          if (${filterWidthVec4Remainder === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${updateSnippet}
          } else if (${filterWidthVec4Remainder === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              initializationValue,
              initializationValue
            );

            ${updateSnippet}
          } else if (${filterWidthVec4Remainder === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),
              initializationValue
            );

            ${updateSnippet}
          }
        }
        setOutput(${returnValue});
      }
    `;
        }
    }
    class Pool3DProgram {
        constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {
            this.variableNames = ['x'];
            if (poolType === 'avg' && computePositions) {
                throw new Error('Cannot compute positions for average pool.');
            }
            const filterWidth = convInfo.filterWidth;
            const strideDepth = convInfo.strideDepth;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const dilationDepth = convInfo.dilationDepth;
            const dilationHeight = convInfo.dilationHeight;
            const dilationWidth = convInfo.dilationWidth;
            const effectiveFilterDepth = convInfo.effectiveFilterDepth;
            const effectiveFilterHeight = convInfo.effectiveFilterHeight;
            const effectiveFilterWidth = convInfo.effectiveFilterWidth;
            const padFront = convInfo.padInfo.front;
            const padTop = convInfo.padInfo.top;
            const padLeft = convInfo.padInfo.left;
            this.outputShape = convInfo.outShape;
            const isAvgPool = poolType === 'avg';
            let initializationValue = '0.0';
            if (!isAvgPool) {
                // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
                initializationValue = '-1.0 / 1e-20';
            }
            if (computePositions) {
                const compareOp = '>=';
                this.userCode = `
        const ivec3 strides =
            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${effectiveFilterDepth};
              wD += ${dilationDepth}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${convInfo.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${effectiveFilterHeight};
                wR += ${dilationHeight}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${convInfo.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${effectiveFilterWidth};
                  wC += ${dilationWidth}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${convInfo.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${compareOp} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${flattenPositions ?
                (includeBatchInIndex ?
                    `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` :
                    `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :
                `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +
                      wR * ${effectiveFilterWidth} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
                return;
            }
            const compareOp = 'max';
            let returnValue = `${poolType}(${poolType}(${poolType}(` +
                'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
            if (poolType === 'avg') {
                returnValue = `avgValue / count`;
            }
            const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
            const filterWidthVec4Remainder = filterWidth % 4;
            const updateSnippet = `
      if (${isAvgPool}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
      }
    `;
            this.userCode = `
      const ivec3 strides =
        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${convInfo.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${initializationValue});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
            wD += ${dilationDepth}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${convInfo.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {
              int xC = xCCorner + wC * ${dilationWidth};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)
              );

              ${updateSnippet}
            }

            int xC = xCCorner + ${filterWidthNearestVec4};
            if (${filterWidthVec4Remainder === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${updateSnippet}
            } else if (${filterWidthVec4Remainder === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                initializationValue,
                initializationValue
              );

              ${updateSnippet}
            } else if (${filterWidthVec4Remainder === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),
                initializationValue
              );

              ${updateSnippet}
            }
          }
          setOutput(${returnValue});
        }
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function avgPool(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        assertNotComplex(x, 'avgPool');
        const { filterSize, strides, pad, dimRoundingMode } = attrs;
        const dilations = 1;
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +
            `Got strides ${strides} and dilations '${dilations}'`);
        const convInfo = computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
        if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&
            arraysEqual(convInfo.inShape, convInfo.outShape)) {
            return identity({ inputs: { x }, backend });
        }
        const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);
        return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');
    }
    const avgPoolConfig = {
        kernelName: AvgPool,
        backendName: 'webgl',
        kernelFunc: avgPool
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function avgPool3D(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;
        const dilations = [1, 1, 1];
        const convInfo = computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
        const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);
        return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');
    }
    const avgPool3DConfig = {
        kernelName: AvgPool3D,
        backendName: 'webgl',
        kernelFunc: avgPool3D
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class AvgPool2DBackpropProgram {
        constructor(convInfo) {
            this.variableNames = ['dy'];
            this.outputShape = convInfo.inShape;
            const filterHeight = convInfo.filterHeight;
            const filterWidth = convInfo.filterWidth;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const dilationHeight = convInfo.dilationHeight;
            const dilationWidth = convInfo.dilationWidth;
            const effectiveFilterHeight = convInfo.effectiveFilterHeight;
            const effectiveFilterWidth = convInfo.effectiveFilterWidth;
            const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
            const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
            const avgMultiplier = 1 / (filterHeight * filterWidth);
            this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float avgMultiplier = float(${avgMultiplier});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${effectiveFilterWidth};
            wC+= ${dilationWidth}) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }
    class AvgPool3DBackpropProgram {
        constructor(convInfo) {
            this.variableNames = ['dy'];
            this.outputShape = convInfo.inShape;
            const filterDepth = convInfo.filterDepth;
            const filterHeight = convInfo.filterHeight;
            const filterWidth = convInfo.filterWidth;
            const strideDepth = convInfo.strideDepth;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const dilationDepth = convInfo.dilationDepth;
            const dilationHeight = convInfo.dilationHeight;
            const dilationWidth = convInfo.dilationWidth;
            const effectiveFilterDepth = convInfo.effectiveFilterDepth;
            const effectiveFilterHeight = convInfo.effectiveFilterHeight;
            const effectiveFilterWidth = convInfo.effectiveFilterWidth;
            const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
            const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
            const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
            const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);
            this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});
      const float avgMultiplier = float(${avgMultiplier});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
            wD += ${dilationDepth}) {
          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;

          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function avgPool3DGrad(args) {
        const { inputs, backend, attrs } = args;
        const { dy, input } = inputs;
        const x = input;
        const { filterSize, strides, pad, dimRoundingMode } = attrs;
        const dilations = [1, 1, 1];
        const convInfo = computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
        const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);
        return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);
    }
    const avgPool3DGradConfig = {
        kernelName: AvgPool3DGrad,
        backendName: 'webgl',
        kernelFunc: avgPool3DGrad
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function avgPoolGrad(args) {
        const { inputs, backend, attrs } = args;
        const { dy, input } = inputs;
        const x = input;
        assertNotComplex([dy, input], 'avgPoolGrad');
        const { filterSize, strides, pad } = attrs;
        const convInfo = computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);
        const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);
        return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);
    }
    const avgPoolGradConfig = {
        kernelName: AvgPoolGrad,
        backendName: 'webgl',
        kernelFunc: avgPoolGrad
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function batchMatMul(args) {
        const { inputs, backend, attrs } = args;
        const { a, b } = inputs;
        const { transposeA, transposeB } = attrs;
        return batchMatMulImpl({ a, b, transposeA, transposeB, backend });
    }
    const batchMatMulConfig = {
        kernelName: BatchMatMul,
        backendName: 'webgl',
        kernelFunc: batchMatMul,
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class BatchNormProgram {
        constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
            this.outputShape = [];
            this.variableNames = ['x', 'mean', 'variance'];
            assertAndGetBroadcastShape(xShape, meanShape);
            assertAndGetBroadcastShape(xShape, varianceShape);
            let offsetSnippet = '0.0';
            if (offsetShape != null) {
                assertAndGetBroadcastShape(xShape, offsetShape);
                this.variableNames.push('offset');
                offsetSnippet = 'getOffsetAtOutCoords()';
            }
            let scaleSnippet = '1.0';
            if (scaleShape != null) {
                assertAndGetBroadcastShape(xShape, scaleShape);
                this.variableNames.push('scale');
                scaleSnippet = 'getScaleAtOutCoords()';
            }
            this.outputShape = xShape;
            this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${offsetSnippet};
        float scale = ${scaleSnippet};
        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class BatchNormPackedProgram {
        constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
            this.packedInputs = true;
            this.packedOutput = true;
            this.variableNames = ['x', 'mean', 'variance'];
            assertAndGetBroadcastShape(xShape, meanShape);
            assertAndGetBroadcastShape(xShape, varianceShape);
            let offsetSnippet = 'vec4(0.0)';
            if (offsetShape != null) {
                assertAndGetBroadcastShape(xShape, offsetShape);
                this.variableNames.push('offset');
                offsetSnippet = 'getOffsetAtOutCoords()';
            }
            let scaleSnippet = 'vec4(1.0)';
            if (scaleShape != null) {
                assertAndGetBroadcastShape(xShape, scaleShape);
                this.variableNames.push('scale');
                scaleSnippet = 'getScaleAtOutCoords()';
            }
            this.outputShape = xShape;
            this.userCode = `
      void main() {
        vec4 offset = ${offsetSnippet};
        vec4 scale = ${scaleSnippet};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));

        setOutput((x - mean) * inv + offset);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const batchNorm = ({ inputs, backend, attrs }) => {
        const { x, mean, variance, offset, scale } = inputs;
        assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +
            'equal ranks.');
        assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +
            'equal ranks.');
        assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +
            'equal ranks.');
        let { varianceEpsilon } = attrs;
        if (varianceEpsilon == null) {
            varianceEpsilon = 0.001;
        }
        const finalInputs = [x, mean, variance];
        let offsetShape = null;
        if (offset != null) {
            offsetShape = offset.shape;
            finalInputs.push(offset);
        }
        let scaleShape = null;
        if (scale != null) {
            scaleShape = scale.shape;
            finalInputs.push(scale);
        }
        const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?
            new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) :
            new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
        const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);
        return output;
    };
    const batchNormConfig = {
        kernelName: FusedBatchNorm,
        backendName: 'webgl',
        kernelFunc: batchNorm,
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class SliceProgram {
        constructor(destSize) {
            this.variableNames = ['source'];
            this.outputShape = destSize;
            this.rank = destSize.length;
            const dtype = getCoordsDataType(this.rank);
            this.customUniforms = [{ name: 'start', arrayIndex: this.rank, type: 'int' }];
            const sourceCoords = getCoords$1(this.rank);
            let body;
            const coordSum = destSize.map((_, i) => {
                return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;
            });
            body = `
        ${dtype} sourceLoc;
        ${dtype} coords = getOutputCoords();
        ${coordSum.join('\n')}
      `;
            this.userCode = `
      void main() {
        ${body}
        setOutput(getSource(${sourceCoords}));
      }
    `;
        }
    }
    const coords = ['x', 'y', 'z', 'w', 'u', 'v'];
    function getCoords$1(rank) {
        if (rank === 1) {
            return 'sourceLoc';
        }
        else if (rank <= 6) {
            return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');
        }
        else {
            throw Error(`Slicing for rank ${rank} is not yet supported`);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class SlicePackedProgram {
        constructor(destSize) {
            this.variableNames = ['source'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.outputShape = destSize;
            this.rank = destSize.length;
            this.customUniforms = [{ name: 'start', arrayIndex: this.rank, type: 'int' }];
            const dtype = getCoordsDataType(this.rank);
            const coords = getChannels('coords', this.rank);
            const sourceLoc = getChannels('sourceLoc', this.rank);
            const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;
            const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;
            const upperRow = `
      result.x = ${getChannel};
      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {
        ++${sourceLoc[this.rank - 1]};
        result.y = ${getChannel};
        --${sourceLoc[this.rank - 1]};
      }
    `;
            const lowerRow = this.rank === 1 ? '' : `
      --${coords[this.rank - 1]};
      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {
        ++${sourceLoc[this.rank - 2]};
        result.z = ${getChannel};
        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {
          ++${sourceLoc[this.rank - 1]};
          result.w = ${getChannel};
        }
      }
    `;
            const sourceLocSetup = this.rank <= 4 ?
                `sourceLoc = coords +
            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :
                destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)
                    .join('\n');
            this.userCode = `
      void main() {
        ${dtype} coords = getOutputCoords();
        ${dtype} sourceLoc;
        ${sourceLocSetup}
        vec4 result = vec4(0.);
        ${upperRow}
        ${lowerRow}
        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function shallowSlice(x, begin, size, backend) {
        const xTexData = backend.texData.get(x.dataId);
        const t = backend.makeTensorInfo(size, x.dtype);
        const newTexData = backend.texData.get(t.dataId);
        // Copy texture data from the original tensor.
        Object.assign(newTexData, xTexData);
        newTexData.refCount = 1;
        newTexData.shape = size;
        newTexData.dtype = x.dtype;
        let flatOffset = computeFlatOffset(begin, computeStrides(x.shape));
        if (xTexData.slice) {
            // We are slicing an already sliced tensor, so we have to accumulate
            // the offset.
            flatOffset += xTexData.slice.flatOffset;
        }
        newTexData.slice = {
            flatOffset,
            // Point to the original dataId, which is used to do ref counting.
            origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId
        };
        // Increase the ref count for that data bucket.
        const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;
        backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);
        return t;
    }
    function slice(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { begin, size } = attrs;
        const [$begin, $size] = parseSliceParams(x, begin, size);
        assertParamsValid(x, $begin, $size);
        if (sizeFromShape($size) === 0) {
            return backend.makeTensorInfo($size, x.dtype, []);
        }
        // Run on cpu if dtype is string. For string, the backend represents it
        // as Uint8Array[], where each Uint8Array is a character. Given that the
        // computation is only on the outer array, uploading the whole data onto
        // gpu is wasteful. Also, currently webgl doesn't have a design to
        // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we
        // just run the kernel on cpu if dtype is string.
        if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {
            const xTexData = backend.texData.get(x.dataId);
            const outValues = sliceImplCPU(xTexData.values, $begin, $size, x.shape, x.dtype);
            return backend.makeTensorInfo($size, x.dtype, outValues);
        }
        const { isPacked } = backend.texData.get(x.dataId);
        const isContinous = isSliceContinous(x.shape, $begin, $size);
        if (isPacked || !isContinous) {
            const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?
                new SlicePackedProgram($size) :
                new SliceProgram($size);
            const customValues = [$begin];
            return backend.runWebGLProgram(program, [x], x.dtype, customValues);
        }
        backend.uploadToGPU(x.dataId);
        return shallowSlice(x, $begin, $size, backend);
    }
    const sliceConfig = {
        kernelName: Slice,
        backendName: 'webgl',
        kernelFunc: slice
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const batchToSpaceND = (args) => {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { blockShape, crops } = attrs;
        assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +
            'implemented yet');
        const prod = blockShape.reduce((a, b) => a * b);
        const reshaped = getReshaped(x.shape, blockShape, prod);
        const permuted = getPermuted(reshaped.length, blockShape.length);
        const reshapedPermuted = getReshapedPermuted(x.shape, blockShape, prod);
        const sliceBeginCoords = getSliceBeginCoords(crops, blockShape.length);
        const sliceSize = getSliceSize(reshapedPermuted, crops, blockShape.length);
        const toDispose = [];
        const reshapedIntermediate = reshape({ inputs: { x }, backend, attrs: { shape: reshaped } });
        const transposedIntermediate = transpose({ inputs: { x: reshapedIntermediate }, backend, attrs: { perm: permuted } });
        const reshapedIntermediate2 = reshape({
            inputs: { x: transposedIntermediate },
            backend,
            attrs: { shape: reshapedPermuted }
        });
        const sliced = slice({
            inputs: { x: reshapedIntermediate2 },
            backend,
            attrs: { begin: sliceBeginCoords, size: sliceSize }
        });
        toDispose.push(reshapedIntermediate);
        toDispose.push(transposedIntermediate);
        toDispose.push(reshapedIntermediate2);
        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return sliced;
    };
    const batchToSpaceNDConfig = {
        kernelName: BatchToSpaceND,
        backendName: 'webgl',
        kernelFunc: batchToSpaceND
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function bincount(args) {
        const { inputs, backend, attrs } = args;
        const { x, weights } = inputs;
        const { size } = attrs;
        const xVals = backend.readSync(x.dataId);
        const weightsVals = backend.readSync(weights.dataId);
        const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);
        return backend.makeTensorInfo([size], weights.dtype, outVals);
    }
    const bincountConfig = {
        kernelName: Bincount,
        backendName: 'webgl',
        kernelFunc: bincount
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function broadcastArgs(args) {
        const { inputs, backend } = args;
        const { s0, s1 } = inputs;
        const s0Vals = backend.readSync(s0.dataId);
        const s1Vals = backend.readSync(s1.dataId);
        const broadcastShape = assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));
        return backend.makeTensorInfo([broadcastShape.length], 'int32', Int32Array.from(broadcastShape));
    }
    const broadcastArgsConfig = {
        kernelName: BroadcastArgs,
        backendName: 'webgl',
        kernelFunc: broadcastArgs
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const NOT_EQUAL = `return float(a != b);`;
    const notEqual = binaryKernelFunc({ opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool' });
    const notEqualConfig = {
        kernelName: NotEqual,
        backendName: 'webgl',
        kernelFunc: notEqual,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function real(args) {
        const { inputs, backend } = args;
        const { input } = inputs;
        const inputData = backend.texData.get(input.dataId);
        return identity({ inputs: { x: inputData.complexTensorInfos.real }, backend });
    }
    const realConfig = {
        kernelName: Real,
        backendName: 'webgl',
        kernelFunc: real
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const TO_INT = `return float(int(x));`;
    function int(input, backend) {
        const program = new UnaryOpProgram(input.shape, TO_INT);
        const output = backend.runWebGLProgram(program, [input], 'int32');
        return { dataId: output.dataId, shape: output.shape, dtype: output.dtype };
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function cast(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { dtype } = attrs;
        // Casting to complex64.
        if (dtype === 'complex64') {
            if (x.dtype === 'complex64') {
                return identity({ inputs: { x }, backend });
            }
            // TODO(annxingyuan): Import kernel function once zeros is modularized.
            const zerosTensor = zeros$1(x.shape);
            const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });
            const result = complex({ inputs: { real: floatX, imag: zerosTensor }, backend });
            zerosTensor.dispose();
            backend.disposeIntermediateTensorInfo(floatX);
            return result;
        }
        // Casting from complex64
        if (x.dtype === 'complex64') {
            const realPart = real({ inputs: { input: x }, backend });
            const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });
            backend.disposeIntermediateTensorInfo(realPart);
            return result;
        }
        if (!hasEncodingLoss(x.dtype, dtype)) {
            // We don't change the underlying data, since we cast to higher
            // precision.
            const result = identity({ inputs: { x }, backend });
            return { dataId: result.dataId, shape: result.shape, dtype };
        }
        if (dtype === 'int32') {
            return int(x, backend);
        }
        if (dtype === 'bool') {
            const zerosTensorInfo = backend.makeTensorInfo([], 'bool', getTypedArrayFromDType('bool', 1));
            const binaryInputs = { a: x, b: zerosTensorInfo };
            const result = notEqual({ inputs: binaryInputs, backend });
            backend.disposeIntermediateTensorInfo(zerosTensorInfo);
            return result;
        }
        throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);
    }
    const castConfig = {
        kernelName: Cast,
        backendName: 'webgl',
        kernelFunc: cast
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const CEIL = `return ceil(x);`;
    const ceil = unaryKernelFunc({ opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU });
    const ceilConfig = {
        kernelName: Ceil,
        backendName: 'webgl',
        kernelFunc: ceil
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ClipProgram {
        constructor(aShape) {
            this.variableNames = ['A'];
            this.customUniforms = [
                { name: 'minVal', type: 'float' },
                { name: 'maxVal', type: 'float' }
            ];
            this.outputShape = aShape;
            this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ClipPackedProgram {
        constructor(aShape) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.customUniforms = [
                { name: 'minVal', type: 'float' },
                { name: 'maxVal', type: 'float' }
            ];
            this.outputShape = aShape;
            this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function clipByValue(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { clipValueMin, clipValueMax } = attrs;
        let program;
        if (env().getBool('WEBGL_PACK_CLIP')) {
            program = new ClipPackedProgram(x.shape);
        }
        else {
            program = new ClipProgram(x.shape);
        }
        const customValues = [[clipValueMin], [clipValueMax]];
        return backend.runWebGLProgram(program, [x], x.dtype, customValues);
    }
    const clipByValueConfig = {
        kernelName: ClipByValue,
        backendName: 'webgl',
        kernelFunc: clipByValue
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ComplexAbsProgram {
        constructor(shape) {
            this.variableNames = ['real', 'imag'];
            this.outputShape = shape;
            this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Returns a TensorInfo with the complex shape and the dataId of the
    // underlying part. We need to do this because a reshaped complex tensor is
    // not reflected in its parts.
    function makeComplexComponentTensorInfo(complexTensor, complexPart) {
        return {
            dataId: complexPart.dataId,
            dtype: complexPart.dtype,
            shape: complexTensor.shape
        };
    }
    function complexAbs(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        const xData = backend.texData.get(x.dataId);
        const program = new ComplexAbsProgram(x.shape);
        const programInputs = [
            makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),
            makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),
        ];
        return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);
    }
    const complexAbsConfig = {
        kernelName: ComplexAbs,
        backendName: 'webgl',
        kernelFunc: complexAbs
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ConcatProgram {
        // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
        constructor(shapes) {
            this.outputShape = [];
            this.outputShape = computeOutShape$1(shapes, 1 /* axis */);
            this.variableNames = shapes.map((_, i) => `T${i}`);
            const offsets = new Array(shapes.length - 1);
            offsets[0] = shapes[0][1];
            for (let i = 1; i < offsets.length; i++) {
                offsets[i] = offsets[i - 1] + shapes[i][1];
            }
            const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];
            for (let i = 1; i < offsets.length; i++) {
                const shift = offsets[i - 1];
                snippets.push(`else if (yC < ${offsets[i]}) ` +
                    `setOutput(getT${i}(yR, yC-${shift}));`);
            }
            const lastIndex = offsets.length;
            const lastShift = offsets[offsets.length - 1];
            snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);
            this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${snippets.join('\n        ')}
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ConcatPackedProgram {
        constructor(shapes, axis) {
            this.packedInputs = true;
            this.packedOutput = true;
            this.outputShape = [];
            this.outputShape = computeOutShape$1(shapes, axis);
            const shape = this.outputShape;
            const rank = shape.length;
            const dtype = getCoordsDataType(rank);
            const coords = getChannels('coords', rank);
            const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);
            this.variableNames = shapes.map((_, i) => `T${i}`);
            const offsets = new Array(shapes.length - 1);
            offsets[0] = shapes[0][axis];
            for (let i = 1; i < offsets.length; i++) {
                offsets[i] = offsets[i - 1] + shapes[i][axis];
            }
            const channel = channels[axis];
            const lastChannels = channels.slice(-2);
            const allChannels = channels.join();
            let getValueSnippet = `if (${channel} < ${offsets[0]}) {
        return getChannel(
            getT0(${allChannels}), vec2(${lastChannels.join()}));
        }`;
            for (let i = 1; i < offsets.length; i++) {
                const shift = offsets[i - 1];
                // Note: the >= comparison below may seem unnecessary given the check
                // above but is needed to workaround branch execution issues on some
                // devices. It makes all the conditions exclusive without relying on
                // execution order.
                getValueSnippet += `
        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {
          return getChannel(
            getT${i}(${shiftedChannels(channels, channel, shift)}),
            vec2(${shiftedChannels(lastChannels, channel, shift)}));
        }`;
            }
            const lastIndex = offsets.length;
            const shift = offsets[offsets.length - 1];
            getValueSnippet += `
        return getChannel(
          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),
          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;
            this.userCode = `
      float getValue(${channels.map(x => 'int ' + x)}) {
        ${getValueSnippet}
      }

      void main() {
        ${dtype} coords = getOutputCoords();
        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);

        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;
        if (${coords[rank - 1]} < ${shape[rank - 1]}) {
          result.g = getValue(${coords});
        }

        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;
        if (${coords[rank - 2]} < ${shape[rank - 2]}) {
          result.a = getValue(${coords});
        }

        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;
        if (${coords[rank - 2]} < ${shape[rank - 2]} &&
            ${coords[rank - 1]} < ${shape[rank - 1]}) {
          result.b = getValue(${coords});
        }
        setOutput(result);
      }
    `;
        }
    }
    /**
     * Return an expression for coordinates into a vector where a given channel
     * will be offset by [shift].
     *
     * @param channels the channels to consider
     * @param channel the channel we want shifted
     * @param shift  the amount to subtract from the channel.
     *
     * @returns a string of the form 'x, y-[shift], z' where any one channel can
     * have the shift applied.
     */
    function shiftedChannels(channels, channel, shift) {
        const channelIdx = channels.indexOf(channel);
        const res = channels.map((c, idx) => {
            if (idx === channelIdx) {
                return `${c} - ${shift}`;
            }
            else {
                return c;
            }
        });
        return res.join();
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function imag(args) {
        const { inputs, backend } = args;
        const { input } = inputs;
        const inputData = backend.texData.get(input.dataId);
        return identity({ inputs: { x: inputData.complexTensorInfos.imag }, backend });
    }
    const imagConfig = {
        kernelName: Imag,
        backendName: 'webgl',
        kernelFunc: imag
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function concatImpl(inputs, axis, backend) {
        const dtype = inputs[0].dtype;
        if (dtype === 'complex64') {
            const reals = inputs.map((t) => real({ inputs: { input: t }, backend }));
            const imags = inputs.map((t) => imag({ inputs: { input: t }, backend }));
            const realConcated = concatImpl(reals, axis, backend);
            const imagConcated = concatImpl(imags, axis, backend);
            const result = complex({ inputs: { real: realConcated, imag: imagConcated }, backend });
            reals.forEach(r => backend.disposeIntermediateTensorInfo(r));
            imags.forEach(i => backend.disposeIntermediateTensorInfo(i));
            backend.disposeIntermediateTensorInfo(realConcated);
            backend.disposeIntermediateTensorInfo(imagConcated);
            return result;
        }
        let runOnCpu = backend.shouldExecuteOnCPU(inputs);
        // Run on cpu if dtype is string. For string, the backend represents it
        // as Uint8Array[], where each Uint8Array is a character. Given that the
        // computation is only on the outer array, uploading the whole data onto
        // gpu is wasteful. Also, currently webgl doesn't have a design to
        // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we
        // just run the kernel on cpu if dtype is string.
        if (dtype === 'string') {
            runOnCpu = true;
        }
        if (runOnCpu) {
            // Any concat of n-dimensional tensors across any axis can be reduced to
            // a concatenation of two-dimensional tensors across the axis 1 by first
            // partitioning the axes of the original tensors into those less than the
            // axis to be concatenated and the rest. Then reshape the tensors
            // into a two-dimensional tensor by collapsing these two sets of axes and
            // concatenate the resulting matrices across the axis 1, finally reshaping
            // the result to have the proper shape.
            const tensors2D = inputs.map(t => {
                const innerSize = sizeFromShape(t.shape.slice(axis));
                const shape = [-1, innerSize];
                return reshape({ inputs: { x: t }, backend, attrs: { shape } });
            });
            const inputsValShapes = tensors2D.map(t => {
                return { vals: backend.readSync(t.dataId), shape: t.shape };
            });
            // Concats 2d tensors along axis=1.
            const outShape = computeOutShape$1(tensors2D.map(t => t.shape), 1 /* axis */);
            const simplyConcat = tensors2D[0].shape[0] === 1;
            const outVals = concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);
            const finalOutShape = computeOutShape$1(inputs.map(t => t.shape), axis);
            const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);
            tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));
            return outInfo;
        }
        if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {
            const midIndex = Math.floor(inputs.length / 2);
            const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);
            const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);
            const result = concatImpl([leftSide, rightSide], axis, backend);
            backend.disposeIntermediateTensorInfo(leftSide);
            backend.disposeIntermediateTensorInfo(rightSide);
            return result;
        }
        if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&
            inputs[0].shape.length > 1) {
            const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);
            return backend.runWebGLProgram(program, inputs, dtype);
        }
        const { tensors2D, outShape } = computeTensors2D(inputs, axis, backend);
        const program = new ConcatProgram(tensors2D.map(t => t.shape));
        const result = backend.runWebGLProgram(program, tensors2D, dtype);
        tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));
        const reshapedResult = reshape({ inputs: { x: result }, attrs: { shape: outShape }, backend });
        backend.disposeIntermediateTensorInfo(result);
        return reshapedResult;
    }
    function computeTensors2D(inputs, axis, backend) {
        // Any concat of n-dimensional tensors across any axis can be reduced to
        // a concatenation of two-dimensional tensors across the axis 1 by first
        // partitioning the axes of the original tensors into those less than the
        // axis to be concatenated and the rest. Then reshape the tensors
        // into a two-dimensional tensor by collapsing these two sets of axes and
        // concatenate the resulting matrices across the axis 1, finally reshaping
        // the result to have the proper shape.
        const outShape = computeOutShape$1(inputs.map(t => t.shape), axis);
        const tensors2D = inputs.map(x => reshape({
            inputs: { x },
            attrs: { shape: [-1, sizeFromShape(x.shape.slice(axis))] },
            backend
        }));
        return { tensors2D, outShape };
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function concat(args) {
        const { inputs, backend, attrs } = args;
        const { axis } = attrs;
        const $axis = parseAxisParam(axis, inputs[0].shape)[0];
        const outShape = computeOutShape$1(inputs.map(t => t.shape), $axis);
        if (sizeFromShape(outShape) === 0) {
            return backend.makeTensorInfo(outShape, inputs[0].dtype, []);
        }
        // Keep only non-empty tensors (ignore tensors with 0 in their shape).
        const $inputs = inputs.filter(t => sizeFromShape(t.shape) > 0);
        if ($inputs.length === 1) {
            return identity({ inputs: { x: $inputs[0] }, backend });
        }
        const shapes = $inputs.map(t => t.shape);
        assertParamsConsistent(shapes, $axis);
        return concatImpl($inputs, $axis, backend);
    }
    const concatConfig = {
        kernelName: Concat,
        backendName: 'webgl',
        kernelFunc: concat
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Conv2DProgram {
        constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false, hasLeakyreluAlpha = false) {
            this.variableNames = ['x', 'W'];
            this.outputShape = convInfo.outShape;
            const padTop = convInfo.padInfo.top;
            const padLeft = convInfo.padInfo.left;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const dilationHeight = convInfo.dilationHeight;
            const dilationWidth = convInfo.dilationWidth;
            const filterHeight = convInfo.filterHeight;
            const filterWidth = convInfo.filterWidth;
            const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
            const inputDepthVec4Remainder = convInfo.inChannels % 4;
            const isChannelsLast = convInfo.dataFormat === 'channelsLast';
            const rowDim = isChannelsLast ? 1 : 2;
            const colDim = isChannelsLast ? 2 : 3;
            const channelDim = isChannelsLast ? 3 : 1;
            let activationSnippet = '', applyActivationSnippet = '';
            if (activation) {
                if (hasPreluActivationWeights) {
                    activationSnippet = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
                }
                else if (hasLeakyreluAlpha) {
                    activationSnippet = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
                }
                else {
                    activationSnippet = `
          float activation(float x) {
            ${activation}
          }
        `;
                }
                applyActivationSnippet = `result = activation(result);`;
            }
            const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
            if (addBias) {
                this.variableNames.push('bias');
            }
            if (hasPreluActivationWeights) {
                this.variableNames.push('preluActivationWeights');
            }
            if (hasLeakyreluAlpha) {
                this.variableNames.push('leakyreluAlpha');
            }
            this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${channelDim}];

        ivec2 xRCCorner =
            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          int xR = xRCorner + wR * ${dilationHeight};

          if (xR < 0 || xR >= ${convInfo.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int xC = xCCorner + wC * ${dilationWidth};

            if (xC < 0 || xC >= ${convInfo.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${isChannelsLast}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${inputDepthVec4Remainder === 1}) {

              if (${isChannelsLast}) {
                dotProd +=
                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *
                    getW(wR, wC, ${inputDepthNearestVec4}, d2);
              } else {
                dotProd +=
                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *
                    getW(wR, wC, ${inputDepthNearestVec4}, d2);
              }

            } else if (${inputDepthVec4Remainder === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${inputDepthNearestVec4}, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)
              );

              if (${isChannelsLast}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${inputDepthNearestVec4}, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${inputDepthVec4Remainder === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${inputDepthNearestVec4}, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)
              );

              if (${isChannelsLast}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${inputDepthNearestVec4}, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
        }
    }
    class Conv3DProgram {
        constructor(convInfo) {
            this.variableNames = ['x', 'W'];
            this.outputShape = convInfo.outShape;
            const padFront = convInfo.padInfo.front;
            const padTop = convInfo.padInfo.top;
            const padLeft = convInfo.padInfo.left;
            const strideDepth = convInfo.strideDepth;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const dilationDepth = convInfo.dilationDepth;
            const dilationHeight = convInfo.dilationHeight;
            const dilationWidth = convInfo.dilationWidth;
            const filterDepth = convInfo.filterDepth;
            const filterHeight = convInfo.filterHeight;
            const filterWidth = convInfo.filterWidth;
            const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
            const inputDepthVec4Remainder = convInfo.inChannels % 4;
            this.userCode = `
      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${filterDepth}; wF++) {
          int xF = xFCorner + wF * ${dilationDepth};

          if (xF < 0 || xF >= ${convInfo.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${filterHeight}; wR++) {
            int xR = xRCorner + wR * ${dilationHeight};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${filterWidth}; wC++) {
              int xC = xCCorner + wC * ${dilationWidth};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${inputDepthVec4Remainder === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);
              } else if (${inputDepthVec4Remainder === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${inputDepthVec4Remainder === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Im2ColPackedProgram {
        constructor(outputShape, convInfo) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.customUniforms = [
                { name: 'inputShape', type: 'ivec3' },
                { name: 'pad', type: 'ivec2' },
                { name: 'stride', type: 'ivec2' },
                { name: 'dilation', type: 'ivec2' },
                { name: 'inChannels', type: 'int' },
                { name: 'itemsPerBlockRow', type: 'int' },
                { name: 'outWidth', type: 'int' },
            ];
            this.outputShape = outputShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            const { dataFormat } = convInfo;
            const glsl = getGlslDifferences();
            const isChannelsLast = dataFormat === 'channelsLast';
            const rowDim = isChannelsLast ? 0 : 1;
            const colDim = isChannelsLast ? 1 : 2;
            const boundsCheckingSnippet = this.enableShapeUniforms ?
                'if(blockIndex < outShape[1] && pos < outShape[0]) {' :
                `if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {`;
            let unrolled = ``;
            for (let row = 0; row <= 1; row++) {
                for (let col = 0; col <= 1; col++) {
                    unrolled += `
          blockIndex = rc.y + ${col};
          pos = rc.x + ${row};

          ${boundsCheckingSnippet}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${rowDim}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${colDim}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${isChannelsLast}) {
                  innerDims = vec2(d1, ch);
                  result[${row * 2 + col}] = getChannel(
                    getA(d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${row * 2 + col}] = getChannel(
                    getA(ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
                }
            }
            this.userCode = `
      void main() {
        ivec2 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${unrolled}

        ${glsl.output} = result;
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // For 1x1 kernels that iterate through every point in the input, convolution
    // can be expressed as matrix multiplication (without need for memory
    // remapping).
    function conv2dByMatMul({ x, filter, convInfo, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {
        // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the
        // result from 2D to 4D.
        const xShape = x.shape;
        const xTexData = backend.texData.get(x.dataId);
        const sharedMatMulDim = convInfo.inChannels;
        const outerShapeX = xShape[0] * xShape[1] * xShape[2];
        const outerShapeFilter = convInfo.outChannels;
        const isChannelsLast = convInfo.dataFormat === 'channelsLast';
        const transposeA = false;
        const transposeB = false;
        let out;
        const intermediates = [];
        // TODO: Once reduction ops are packed, batchMatMul will always be packed
        // and we can remove this condition.
        const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) &&
            sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;
        // The algorithm in the if condition assumes (1) the output will be packed,
        // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already
        // on GPU, (5) col is odd, (6) the width, height and inChannels are the same
        // for xTexData.shape and xShape.
        const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&
            isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&
            arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));
        if (canOptimize) {
            // We avoid expensive packed 2x2 reshape by padding col count to next,
            // even number. When col is odd, the result of packed batchMatMul is
            // the same (has the same texture layout and and values in the texture) as
            // it is for next even col. We make the odd-cols tensor to look like
            // even-cols tensor before the operation and, after the batchMatMul,
            // fix the even-cols result to have odd number of cols.
            const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);
            const xReshaped = {
                dataId: x.dataId,
                shape: [1, targetShape, convInfo.inChannels],
                dtype: x.dtype
            };
            // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.
            // Decrementing col count, after batchMatMul->...->compileProgram leads to
            // invalid col count within the reference in GPGPUBinary.inShapeInfos.
            // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos
            // in compileProgram method, but that would affect compilation of all
            // programs - instead, provide a copy here, with even col count, before
            // calling batchMatMul->...->compileProgram and after that, the original
            // xTexData.shape is restored.
            const originalXTexDataShape = xTexData.shape;
            xTexData.shape = xTexData.shape.slice();
            xTexData.shape[xTexData.shape.length - 2]++;
            assert(isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);
            const filterReshaped = reshape({
                inputs: { x: filter },
                backend,
                attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }
            });
            intermediates.push(filterReshaped);
            const pointwiseConv = batchMatMulImpl({
                a: xReshaped,
                b: filterReshaped,
                backend,
                transposeA,
                transposeB,
                bias,
                activation,
                preluActivationWeights,
                leakyreluAlpha
            });
            const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);
            assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');
            // Restore the input shape to original.
            xTexData.shape = originalXTexDataShape;
            // Set the output shape - there is no need for expensive reshape as data
            // layout is already correct.
            pointwiseConvTexData.shape = convInfo.outShape;
            out = identity({ inputs: { x: pointwiseConv }, backend });
            out.shape = convInfo.outShape;
            intermediates.push(pointwiseConv);
        }
        else {
            const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :
                xShape[0] * xShape[2] * xShape[3];
            const xReshaped = reshape({
                inputs: { x },
                backend,
                attrs: { shape: [1, targetShape, convInfo.inChannels] }
            });
            const filterReshaped = reshape({
                inputs: { x: filter },
                backend,
                attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }
            });
            const result = batchMatMulImpl({
                a: xReshaped,
                b: filterReshaped,
                transposeA,
                transposeB,
                backend,
                bias,
                activation,
                preluActivationWeights,
                leakyreluAlpha
            });
            out = reshape({ inputs: { x: result }, backend, attrs: { shape: convInfo.outShape } });
            intermediates.push(xReshaped);
            intermediates.push(filterReshaped);
            intermediates.push(result);
        }
        for (const i of intermediates) {
            backend.disposeIntermediateTensorInfo(i);
        }
        return out;
    }
    // Implements the im2row algorithm as outlined in "High Performance
    // Convolutional Neural Networks for Document Processing" (Suvisoft, 2006)
    function conv2dWithIm2Row({ x, filter, convInfo, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {
        // Rearranges conv2d input so each block to be convolved over forms the
        // column of a new matrix with shape [filterWidth * filterHeight *
        // inChannels, outHeight * outWidth]. The filter is also rearranged so each
        // output channel forms a row of a new matrix with shape [outChannels,
        // filterWidth * filterHeight * inChannels]. The convolution is then
        // computed by multiplying these matrices and reshaping the result.
        const { filterWidth, filterHeight, inChannels, outWidth, outHeight, dataFormat } = convInfo;
        const isChannelsLast = dataFormat === 'channelsLast';
        const sharedDim = filterWidth * filterHeight * inChannels;
        const numCols = outHeight * outWidth;
        const x2ColShape = [sharedDim, numCols];
        const transposeA = true;
        const transposeB = false;
        const intermediates = [];
        const xSqueezed = reshape({ inputs: { x }, backend, attrs: { shape: x.shape.slice(1) } });
        const w2Row = reshape({
            inputs: { x: filter },
            backend,
            attrs: { shape: [1, sharedDim, sizeFromShape(filter.shape) / sharedDim] }
        });
        intermediates.push(xSqueezed);
        intermediates.push(w2Row);
        const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);
        const customValues = [
            xSqueezed.shape, [convInfo.padInfo.top, convInfo.padInfo.left],
            [convInfo.strideHeight, convInfo.strideWidth],
            [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],
            [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]
        ];
        const im2Col = backend.runWebGLProgram(im2ColProgram, [xSqueezed], 'float32', customValues);
        const im2ColReshaped = reshape({
            inputs: { x: im2Col },
            backend,
            attrs: { shape: [1, x2ColShape[0], x2ColShape[1]] }
        });
        intermediates.push(im2Col);
        intermediates.push(im2ColReshaped);
        const hasBias = bias != null;
        const hasPreluActivationWeights = preluActivationWeights != null;
        const hasLeakyreluAlpha = activation === 'leakyrelu';
        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;
        const matmulProgram = new MatMulPackedProgram(im2ColReshaped.shape, w2Row.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
        const inputs = [im2ColReshaped, w2Row];
        if (bias) {
            inputs.push(bias);
        }
        if (hasPreluActivationWeights) {
            inputs.push(preluActivationWeights);
        }
        if (hasLeakyreluAlpha) {
            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', createScalarValue(leakyreluAlpha, 'float32'));
            inputs.push($leakyreluAlpha);
            intermediates.push($leakyreluAlpha);
        }
        const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');
        const outShape = isChannelsLast ?
            [1, outHeight, outWidth, convInfo.outChannels] :
            [1, convInfo.outChannels, outHeight, outWidth];
        const out = reshape({ inputs: { x: product }, backend, attrs: { shape: outShape } });
        intermediates.push(product);
        for (const i of intermediates) {
            backend.disposeIntermediateTensorInfo(i);
        }
        return out;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv2d(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter } = inputs;
        const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;
        const $dataFormat = convertConv2DDataFormat(dataFormat);
        const convInfo = computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);
        let out;
        if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&
            convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&
            convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&
            (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {
            out = conv2dByMatMul({ x, filter, convInfo, backend });
        }
        else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {
            out = conv2dWithIm2Row({ x, filter, convInfo, backend });
        }
        else {
            const program = new Conv2DProgram(convInfo);
            out = backend.runWebGLProgram(program, [x, filter], 'float32');
        }
        const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });
        backend.disposeIntermediateTensorInfo(out);
        return outReshaped;
    }
    const conv2DConfig = {
        kernelName: Conv2D,
        backendName: 'webgl',
        kernelFunc: conv2d,
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Conv2DDerFilterProgram {
        constructor(convInfo) {
            this.variableNames = ['x', 'dy'];
            this.outputShape = convInfo.filterShape;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const padTop = convInfo.padInfo.top;
            const padLeft = convInfo.padInfo.left;
            const isChannelsLast = convInfo.dataFormat === 'channelsLast';
            this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
            int xR = wR + yR * ${strideHeight} - ${padTop};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
              int xC = wC + yC * ${strideWidth} - ${padLeft};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              if (${isChannelsLast}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }
    class Conv2DDerInputProgram {
        constructor(convInfo) {
            this.variableNames = ['dy', 'W'];
            this.outputShape = convInfo.inShape;
            const filterHeight = convInfo.filterHeight;
            const filterWidth = convInfo.filterWidth;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const isChannelsLast = convInfo.dataFormat === 'channelsLast';
            const padTop = filterHeight - 1 - convInfo.padInfo.top;
            const padLeft = filterWidth - 1 - convInfo.padInfo.left;
            const rowDim = isChannelsLast ? 1 : 2;
            const colDim = isChannelsLast ? 2 : 3;
            const channelDim = isChannelsLast ? 3 : 1;
            this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${channelDim}];

        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${filterWidth} - 1 - wC;

            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {

              if (${isChannelsLast}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }
    class Conv3DDerFilterProgram {
        constructor(convInfo) {
            this.variableNames = ['x', 'dy'];
            this.outputShape = convInfo.filterShape;
            const strideDepth = convInfo.strideDepth;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const padFront = convInfo.padInfo.front;
            const padTop = convInfo.padInfo.top;
            const padLeft = convInfo.padInfo.left;
            this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {
            int xF = wF + yF * ${strideDepth} - ${padFront};

            if (xF < 0 || xF >= ${convInfo.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
              int xR = wR + yR * ${strideHeight} - ${padTop};

              if (xR < 0 || xR >= ${convInfo.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
                int xC = wC + yC * ${strideWidth} - ${padLeft};

                if (xC < 0 || xC >= ${convInfo.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }
    class Conv3DDerInputProgram {
        constructor(convInfo) {
            this.variableNames = ['dy', 'W'];
            this.outputShape = convInfo.inShape;
            const filterDepth = convInfo.filterDepth;
            const filterHeight = convInfo.filterHeight;
            const filterWidth = convInfo.filterWidth;
            const strideDepth = convInfo.strideDepth;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const padFront = filterDepth - 1 - convInfo.padInfo.front;
            const padTop = filterHeight - 1 - convInfo.padInfo.top;
            const padLeft = filterWidth - 1 - convInfo.padInfo.left;
            this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${filterDepth}; wF++) {
          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;

          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${filterDepth} - 1 - wF;

          for (int wR = 0; wR < ${filterHeight}; wR++) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${filterHeight} - 1 - wR;

            for (int wC = 0; wC < ${filterWidth}; wC++) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${filterWidth} - 1 - wC;

              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv2DBackpropFilter(args) {
        const { inputs, backend, attrs } = args;
        const { x, dy } = inputs;
        const { strides, pad, dataFormat, dimRoundingMode, filterShape } = attrs;
        const $dataFormat = convertConv2DDataFormat(dataFormat);
        const convInfo = computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);
        const program = new Conv2DDerFilterProgram(convInfo);
        return backend.runWebGLProgram(program, [x, dy], 'float32');
    }
    const conv2DBackpropFilterConfig = {
        kernelName: Conv2DBackpropFilter,
        backendName: 'webgl',
        kernelFunc: conv2DBackpropFilter,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv2DBackpropInput(args) {
        const { inputs, backend, attrs } = args;
        const { dy, filter } = inputs;
        const { inputShape, strides, pad, dataFormat, dimRoundingMode } = attrs;
        const $dataFormat = convertConv2DDataFormat(dataFormat);
        const convInfo = computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);
        const program = new Conv2DDerInputProgram(convInfo);
        return backend.runWebGLProgram(program, [dy, filter], 'float32');
    }
    const conv2DBackpropInputConfig = {
        kernelName: Conv2DBackpropInput,
        backendName: 'webgl',
        kernelFunc: conv2DBackpropInput,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv3D(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter } = inputs;
        const { strides, pad, dilations } = attrs;
        const convInfo = computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);
        const program = new Conv3DProgram(convInfo);
        return backend.runWebGLProgram(program, [x, filter], 'float32');
    }
    const conv3DConfig = {
        kernelName: Conv3D,
        backendName: 'webgl',
        kernelFunc: conv3D,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv3DBackpropFilterV2(args) {
        const { inputs, backend, attrs } = args;
        const { x, dy } = inputs;
        const { strides, pad, filterShape } = attrs;
        const convInfo = computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);
        const program = new Conv3DDerFilterProgram(convInfo);
        return backend.runWebGLProgram(program, [x, dy], 'float32');
    }
    const conv3DBackpropFilterV2Config = {
        kernelName: Conv3DBackpropFilterV2,
        backendName: 'webgl',
        kernelFunc: conv3DBackpropFilterV2
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function conv3DBackpropInput(args) {
        const { inputs, backend, attrs } = args;
        const { dy, filter } = inputs;
        const { pad, strides, inputShape } = attrs;
        const convInfo = computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);
        const program = new Conv3DDerInputProgram(convInfo);
        return backend.runWebGLProgram(program, [dy, filter], 'float32');
    }
    const conv3DBackpropInputConfig = {
        kernelName: Conv3DBackpropInputV2,
        backendName: 'webgl',
        kernelFunc: conv3DBackpropInput,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const COS = CHECK_NAN_SNIPPET_UNARY + `
  return cos(x);
`;
    const cos = unaryKernelFunc({ opSnippet: COS });
    const cosConfig = {
        kernelName: Cos,
        backendName: 'webgl',
        kernelFunc: cos,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const COSH = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`;
    const cosh = unaryKernelFunc({ opSnippet: COSH });
    const coshConfig = {
        kernelName: Cosh,
        backendName: 'webgl',
        kernelFunc: cosh,
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class CropAndResizeProgram {
        constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {
            this.variableNames = ['Image', 'Boxes', 'BoxInd'];
            this.outputShape = [];
            const [batch, imageHeight, imageWidth, depth] = imageShape;
            const [numBoxes,] = boxShape;
            const [cropHeight, cropWidth] = cropSize;
            this.outputShape = [numBoxes, cropHeight, cropWidth, depth];
            const methodId = method === 'bilinear' ? 1 : 0;
            const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];
            const [heightRatio, heightScale, inY] = cropHeight > 1 ?
                [
                    `${(imageHeight - 1) / (cropHeight - 1)}`,
                    '(y2-y1) * height_ratio',
                    `y1*${inputHeightFloat} + float(y)*(height_scale)`,
                ] :
                [
                    '0.0',
                    '0.0',
                    `0.5 * (y1+y2) * ${inputHeightFloat}`,
                ];
            const [widthRatio, widthScale, inX] = cropWidth > 1 ?
                [
                    `${(imageWidth - 1) / (cropWidth - 1)}`,
                    '(x2-x1) * width_ratio',
                    `x1*${inputWidthFloat} + float(x)*(width_scale)`,
                ] :
                [
                    '0.0',
                    '0.0',
                    `0.5 * (x1+x2) * ${inputWidthFloat}`,
                ];
            // Reference implementation
            // tslint:disable-next-line:max-line-length
            // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc
            this.userCode = `
      const float height_ratio = float(${heightRatio});
      const float width_ratio = float(${widthRatio});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${batch}) {
          return;
        }

        float height_scale = ${heightScale};
        float width_scale = ${widthScale};

        float in_y = ${inY};
        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {
          setOutput(float(${extrapolationValue}));
          return;
        }
        float in_x = ${inX};
        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {
          setOutput(float(${extrapolationValue}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${methodId} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const cropAndResize = (args) => {
        const { inputs, backend, attrs } = args;
        const { image, boxes, boxInd } = inputs;
        const { cropSize, method, extrapolationValue } = attrs;
        const program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);
        return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');
    };
    const cropAndResizeConfig = {
        kernelName: CropAndResize,
        backendName: 'webgl',
        kernelFunc: cropAndResize
    };

    class CumSumProgram {
        constructor(shape, exclusive, reverse) {
            this.variableNames = ['x'];
            this.customUniforms = [{ name: 'index', type: 'float' }];
            this.outputShape = shape;
            const rank = shape.length;
            const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;
            const length = shape[shape.length - 1];
            let condition = '';
            let idxString = '';
            // When exclusive is set, the cumsum op becomes roll op that copies the
            // value from the previous index based on the direction specified by the
            // reverse flag.
            if (exclusive) {
                condition = reverse ? `end != ${length - 1}` : 'end != 0';
                idxString = reverse ? 'end + 1' : 'end - 1';
            }
            else {
                condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';
                idxString = (reverse ? 'end + pow2' : 'end - pow2');
            }
            this.userCode = `
      void main() {
        ${getCoordsDataType(rank)} coords = getOutputCoords();
        int end = ${getFinalCoord(rank, 'coords')};
        float val = ${val};
        int pow2 = int(pow(2.0, index));
        if (${condition}) {
          int idx = ${idxString};
          ${getFinalCoord(rank, 'coords')} = idx;
          val += getX(${getCoords(rank, 'coords')});
        }
        setOutput(val);
      }
    `;
        }
    }
    function getCoords(rank, name) {
        if (rank === 1) {
            return `${name}`;
        }
        else if (rank === 2) {
            return `${name}.x, ${name}.y`;
        }
        else if (rank === 3) {
            return `${name}.x, ${name}.y, ${name}.z`;
        }
        else if (rank === 4) {
            return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;
        }
        else {
            throw Error(`Cumulative sum for rank ${rank} is not yet supported`);
        }
    }
    function getFinalCoord(rank, name) {
        if (rank === 1) {
            return `${name}`;
        }
        else if (rank === 2) {
            return `${name}.y`;
        }
        else if (rank === 3) {
            return `${name}.z`;
        }
        else if (rank === 4) {
            return `${name}.w`;
        }
        else {
            throw Error(`Cumulative sum for rank ${rank} is not yet supported`);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function cumsum(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, exclusive, reverse } = attrs;
        const xRank = x.shape.length;
        const permutation = getAxesPermutation([axis], xRank);
        let permutedX = x;
        if (permutation != null) {
            permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });
        }
        const permutedAxis = getInnerMostAxes(1, xRank)[0];
        if (permutedAxis !== xRank - 1) {
            throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.shape.length - 1} ` +
                `but got axis=${axis}`);
        }
        const size = permutedX.shape[permutedAxis];
        let result = identity({ inputs: { x: permutedX }, backend });
        // Use cumsum parallel algorithm, ref:
        // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda
        for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {
            const program = new CumSumProgram(permutedX.shape, false, reverse);
            const customValues = [[i]];
            const prevResult = result;
            result =
                backend.runWebGLProgram(program, [result], result.dtype, customValues);
            backend.disposeIntermediateTensorInfo(prevResult);
        }
        // For exclusive cumsum, shift the end result in the direction of sum
        // and add 0 to the front index.
        if (exclusive) {
            const program = new CumSumProgram(permutedX.shape, exclusive, reverse);
            const prevResult = result;
            result = backend.runWebGLProgram(program, [result], result.dtype);
            backend.disposeIntermediateTensorInfo(prevResult);
        }
        if (permutation != null) {
            const reversePermutation = getUndoAxesPermutation(permutation);
            const reverseTransposedResult = transpose({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });
            backend.disposeIntermediateTensorInfo(result);
            backend.disposeIntermediateTensorInfo(permutedX);
            return reverseTransposedResult;
        }
        return result;
    }
    const cumsumConfig = {
        kernelName: Cumsum,
        backendName: 'webgl',
        kernelFunc: cumsum
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function denseBincount(args) {
        const { inputs, backend, attrs } = args;
        const { x, weights } = inputs;
        const { size, binaryOutput } = attrs;
        if (x.shape.length === 1) {
            const xVals = backend.readSync(x.dataId);
            const weightsVals = backend.readSync(weights.dataId);
            const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);
            return backend.makeTensorInfo([size], weights.dtype, outVals);
        }
        else if (x.shape.length === 2) {
            const xBuf = backend.bufferSync(x);
            const weightsBuf = backend.bufferSync(weights);
            const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);
            return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);
        }
        throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` +
            `${x.shape.length}.`);
    }
    const denseBincountConfig = {
        kernelName: DenseBincount,
        backendName: 'webgl',
        kernelFunc: denseBincount
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class DepthToSpaceProgram {
        constructor(outputShape, blockSize, dataFormat) {
            this.variableNames = ['x'];
            this.outputShape = [];
            this.outputShape = outputShape;
            this.blockSize = blockSize;
            this.dataFormat = dataFormat;
            this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${blockSize};
      int offset_h = imod(h, ${blockSize});
      int in_w = w / ${blockSize};
      int offset_w = imod(w, ${blockSize});
      int offset_d = (offset_h * ${blockSize} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
        }
        getHeightCoordString() {
            if (this.dataFormat === 'NHWC') {
                return `coords[1]`;
            }
            else {
                return `coords[2]`;
            }
        }
        getWidthCoordString() {
            if (this.dataFormat === 'NHWC') {
                return `coords[2]`;
            }
            else {
                return `coords[3]`;
            }
        }
        getDepthCoordString() {
            if (this.dataFormat === 'NHWC') {
                return `coords[3]`;
            }
            else {
                return `coords[1]`;
            }
        }
        getOutputDepthSize() {
            if (this.dataFormat === 'NHWC') {
                return this.outputShape[3];
            }
            else {
                return this.outputShape[1];
            }
        }
        getInputSamplingString() {
            if (this.dataFormat === 'NHWC') {
                return `getX(b, in_h, in_w, in_d)`;
            }
            else {
                return `getX(b, in_d, in_h, in_w)`;
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function depthToSpace(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { blockSize, dataFormat } = attrs;
        const batchSize = x.shape[0];
        const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];
        const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];
        const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];
        const outputHeight = inputHeight * blockSize;
        const outputWidth = inputWidth * blockSize;
        const outputDepth = inputDepth / (blockSize * blockSize);
        const outputShape = (dataFormat === 'NHWC') ?
            [batchSize, outputHeight, outputWidth, outputDepth] :
            [batchSize, outputDepth, outputHeight, outputWidth];
        const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);
        return backend.runWebGLProgram(program, [x], x.dtype);
    }
    const depthToSpaceConfig = {
        kernelName: DepthToSpace,
        backendName: 'webgl',
        kernelFunc: depthToSpace
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class DepthwiseConv2DProgram {
        constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {
            this.variableNames = ['x', 'W'];
            this.customUniforms = [
                { name: 'pads', type: 'ivec2' },
                { name: 'strides', type: 'ivec2' },
                { name: 'dilations', type: 'ivec2' },
                { name: 'inDims', type: 'ivec2' },
            ];
            this.outputShape = convInfo.outShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            const filterHeight = convInfo.filterHeight;
            const filterWidth = convInfo.filterWidth;
            const channelMul = convInfo.outChannels / convInfo.inChannels;
            let activationSnippet = '', applyActivationSnippet = '';
            if (activation) {
                if (hasPreluActivation) {
                    activationSnippet = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
                }
                else if (hasLeakyReluAlpha) {
                    activationSnippet = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
                }
                else {
                    activationSnippet = `
          float activation(float x) {
            ${activation}
          }
        `;
                }
                applyActivationSnippet = `result = activation(result);`;
            }
            const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
            if (addBias) {
                this.variableNames.push('bias');
            }
            if (hasPreluActivation) {
                this.variableNames.push('preluActivationWeights');
            }
            if (hasLeakyReluAlpha) {
                this.variableNames.push('leakyreluAlpha');
            }
            this.userCode = `
      ${activationSnippet}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${channelMul};
        int q = d2 - d1 * ${channelMul};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class DepthwiseConvPacked2DProgram {
        constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {
            this.variableNames = ['x', 'W'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.customUniforms = [
                { name: 'pads', type: 'ivec2' },
                { name: 'strides', type: 'ivec2' },
                { name: 'dilations', type: 'ivec2' },
                { name: 'inDims', type: 'ivec2' },
            ];
            this.outputShape = convInfo.outShape;
            this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);
            const channelMul = convInfo.outChannels / convInfo.inChannels;
            const padLeft = convInfo.padInfo.left;
            const strideWidth = convInfo.strideWidth;
            const dilationWidth = convInfo.dilationWidth;
            const filterHeight = convInfo.filterHeight;
            const filterWidth = convInfo.filterWidth;
            const texelsAcross = filterWidth;
            let mainLoop = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
            for (let c = 0; c < filterWidth; c++) {
                mainLoop += `
          vec4 xTexelC${c * 2};
          int xTexelC${c * 2}Ready;
          vec4 xTexelC${c * 2 + 1};
          int xTexelC${c * 2 + 1}Ready;
          vec4 xC${c};`;
            }
            /**
             * This vectorized implementation works by gathering the values needed for
             * each output channel's dot product into vec4's and then multiplying them
             * all together (this happens in the final double for-loop below). Most of
             * the main loop consists of constructing these vec4's with the minimum
             * number of texture2D calls, which means making use of all four returned
             * values from a texture2D call at once.
             */
            mainLoop += `
    for (int r = 0; r < ${filterHeight}; r++) {
      `;
            for (let c = 0; c < filterWidth; c++) {
                mainLoop += `
          xTexelC${c * 2} = vec4(0.0);
          xTexelC${c * 2}Ready = 0;
          xTexelC${c * 2 + 1} = vec4(0.0);
          xTexelC${c * 2 + 1}Ready = 0;
          xC${c} = vec4(0.0);`;
            }
            mainLoop += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
            for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {
                const colIndex = texelC * 2;
                mainLoop += `
          xC = xCCorner + ${colIndex * dilationWidth};
          `;
                if (strideWidth === 1) {
                    if (colIndex < filterWidth) {
                        // If padding is odd, the outer texels have to be composed.
                        if (padLeft % 2 === 1) {
                            // TODO: Ensure vec4 previous does not result in redundant sample,
                            // and avoid setting xTexelRC's that exceed the boundary in the
                            // first place rather than resetting them to vec4(0)).
                            // To compute xCOffset:
                            // - If padding is odd, we must add 1 to ensure we ask for an
                            // even-numbered row.
                            // - We subtract 2 to access the previous texel.
                            mainLoop += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }
              `;
                            // This texel has been read in previous iteration if the dilation
                            // is 1.
                            if (dilationWidth === 1 && colIndex > 0) {
                                mainLoop += `
                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);
                `;
                            }
                            else {
                                mainLoop += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);
                  } else {
                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);
                  }
                  `;
                            }
                        }
                        else {
                            // Padding is even, so xRC corresponds to a single texel.
                            mainLoop += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }

                xC${colIndex} = xTexelC${colIndex};
                `;
                        }
                        if (colIndex + 1 < filterWidth) {
                            // If dilation is even, the second entry should match the first
                            // (either both are composed or both are single samples). But if
                            // dilation is odd, then the second entry should be the opposite
                            // of the first (if the first is composed, the second is a single
                            // sample, and vice versa.)
                            const nextTexelOffset = padLeft % 2 === 0 ?
                                nearestLargerEven(dilationWidth) :
                                dilationWidth;
                            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||
                                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {
                                mainLoop += `
                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${colIndex + 1}.zw = vec2(0.0);
                    }
                    xTexelC${colIndex + 1}Ready = 1;
                  }
                  `;
                                // If dilation > 1 then the xRC's will not be able to share any
                                // values, so each xRC will require two unique calls to getX.
                                if (dilationWidth > 1) {
                                    mainLoop += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {
                      xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);
                      xTexelC${colIndex}Ready = 1;
                    }
                    `;
                                }
                                mainLoop += `
                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);
                  `;
                            }
                            else {
                                // If dilation is 1 and padding is odd, we have already read the
                                // texel when constructing the previous x value. Here we can
                                // simply skip the texture read.
                                if (nextTexelOffset === 1) {
                                    mainLoop += `
                    xC${colIndex + 1} = xTexelC${colIndex};
                    `;
                                }
                                else {
                                    mainLoop += `
                    xCOffset = xC + ${nextTexelOffset};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${colIndex + 1}.zw = vec2(0.0);
                      }
                      xTexelC${colIndex + 1}Ready = 1;
                    }

                    xC${colIndex + 1} = xTexelC${colIndex + 1};
                    `;
                                }
                            }
                        }
                    }
                }
                else { // stride === 2
                    if (colIndex < filterWidth) {
                        // Depending on whether padLeft is even or odd, we want either the
                        // xy or zw channels from X texels for xC${colIndex}. If padLeft is
                        // even, xC${colIndex +1} is simply the zw channels of texels we've
                        // already sampled. But if padLeft is odd, xC{$c + 1}.zw will
                        // need to come from the xy channels of a new texel, hence the `
                        // vec4
                        // final` initialized below.
                        if (padLeft % 2 === 1) {
                            mainLoop += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${colIndex + 1}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex + 1}Ready = 1;
                }

                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);
              `;
                            if (colIndex + 1 < filterWidth) {
                                mainLoop += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);
                `;
                            }
                        }
                        else {
                            mainLoop += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${colIndex + 1}.zw = vec2(0.);
                  }
                  xTexelC${colIndex + 1}Ready = 1;
                }

                xC${colIndex} = vec4(
                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);
              `;
                            if (colIndex + 1 < filterWidth) {
                                mainLoop += `
                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);
                `;
                            }
                        }
                    }
                }
                // localize the dotProd accumulation within the loop, the theory is for
                // GPU with limited cache, accumulate sum across large amount of
                // veriables will cause lots of cache misses. (i.e. 5x5 filter will have
                // 50 variables)
                if (colIndex < filterWidth) {
                    mainLoop += `
            wTexel = getW(r, ${colIndex}, d1, q);
            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);
          `;
                    if (colIndex + 1 < filterWidth) {
                        mainLoop += `
              wTexel = getW(r, ${colIndex + 1}, d1, q);
              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);
            `;
                    }
                }
            }
            mainLoop += `
    }
  `;
            mainLoop += `
      }
    `;
            let activationSnippet = '', applyActivationSnippet = '';
            if (activation) {
                if (hasPreluActivation) {
                    activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
                }
                else if (hasLeakyReluAlpha) {
                    activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
                }
                else {
                    activationSnippet = `vec4 activation(vec4 x) {
          ${activation}
        }`;
                }
                applyActivationSnippet = `result = activation(result);`;
            }
            const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
            if (addBias) {
                this.variableNames.push('bias');
            }
            if (hasPreluActivation) {
                this.variableNames.push('preluActivationWeights');
            }
            if (hasLeakyReluAlpha) {
                this.variableNames.push('leakyreluAlpha');
            }
            this.userCode = `
      ${activationSnippet}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${channelMul};
        int q = d2 - d1 * ${channelMul};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${mainLoop}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function depthwiseConv2dNative(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter } = inputs;
        const { strides, pad, dilations, dimRoundingMode } = attrs;
        let $dilations = dilations;
        if ($dilations == null) {
            $dilations = [1, 1];
        }
        assert(eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +
            `1. Got strides ${strides} and dilations '${$dilations}'`);
        const convInfo = computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);
        let program;
        if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&
            convInfo.outChannels / convInfo.inChannels === 1) {
            program = new DepthwiseConvPacked2DProgram(convInfo);
        }
        else {
            program = new DepthwiseConv2DProgram(convInfo);
        }
        const customValues = [
            [convInfo.padInfo.top, convInfo.padInfo.left],
            [convInfo.strideHeight, convInfo.strideWidth],
            [convInfo.dilationHeight, convInfo.dilationWidth],
            [convInfo.inHeight, convInfo.inWidth]
        ];
        return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);
    }
    const depthwiseConv2dNativeConfig = {
        kernelName: DepthwiseConv2dNative,
        backendName: 'webgl',
        kernelFunc: depthwiseConv2dNative,
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class DepthwiseConv2DDerFilterProgram {
        constructor(convInfo) {
            this.variableNames = ['x', 'dy'];
            this.outputShape = convInfo.filterShape;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const padTop = convInfo.padInfo.top;
            const padLeft = convInfo.padInfo.left;
            const channelMul = convInfo.outChannels / convInfo.inChannels;
            this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${channelMul} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
            int xR = wR + yR * ${strideHeight} - ${padTop};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
              int xC = wC + yC * ${strideWidth} - ${padLeft};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }
    class DepthwiseConv2DDerInputProgram {
        constructor(convInfo) {
            this.variableNames = ['dy', 'W'];
            this.outputShape = convInfo.inShape;
            const filterHeight = convInfo.filterHeight;
            const filterWidth = convInfo.filterWidth;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const padTop = filterHeight - 1 - convInfo.padInfo.top;
            const padLeft = filterWidth - 1 - convInfo.padInfo.left;
            const channelMul = convInfo.outChannels / convInfo.inChannels;
            this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${filterWidth} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${channelMul}; dm++) {
              int d2 = d1 * ${channelMul} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function depthwiseConv2dNativeBackpropFilter(args) {
        const { inputs, backend, attrs } = args;
        const { x, dy } = inputs;
        const { strides, dilations, pad, dimRoundingMode, filterShape } = attrs;
        const convInfo = computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
        const program = new DepthwiseConv2DDerFilterProgram(convInfo);
        return backend.runWebGLProgram(program, [x, dy], 'float32');
    }
    const depthwiseConv2dNativeBackpropFilterConfig = {
        kernelName: DepthwiseConv2dNativeBackpropFilter,
        backendName: 'webgl',
        kernelFunc: depthwiseConv2dNativeBackpropFilter
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function depthwiseConv2dNativeBackpropInput(args) {
        const { inputs, backend, attrs } = args;
        const { dy, filter } = inputs;
        const { strides, dilations, pad, dimRoundingMode, inputShape } = attrs;
        const convInfo = computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
        const program = new DepthwiseConv2DDerInputProgram(convInfo);
        return backend.runWebGLProgram(program, [dy, filter], 'float32');
    }
    const depthwiseConv2dNativeBackpropInputConfig = {
        kernelName: DepthwiseConv2dNativeBackpropInput,
        backendName: 'webgl',
        kernelFunc: depthwiseConv2dNativeBackpropInput
    };

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class DiagProgram {
        constructor(size) {
            this.variableNames = ['X'];
            this.outputShape = [size, size];
            this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function diag(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        const outShape = [...x.shape, ...x.shape];
        const xSize = sizeFromShape(x.shape);
        const flat = reshape({ inputs: { x }, backend, attrs: { shape: [xSize] } });
        const program = new DiagProgram(xSize);
        const res = backend.runWebGLProgram(program, [flat], flat.dtype);
        const out = reshape({ inputs: { x: res }, backend, attrs: { shape: outShape } });
        backend.disposeIntermediateTensorInfo(flat);
        backend.disposeIntermediateTensorInfo(res);
        return out;
    }
    const diagConfig = {
        kernelName: Diag,
        backendName: 'webgl',
        kernelFunc: diag
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class Dilation2DProgram {
        constructor(convInfo) {
            this.variableNames = ['x', 'W'];
            this.outputShape = convInfo.outShape;
            const { inHeight, inWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth } = convInfo;
            const { top: padTop, left: padLeft } = padInfo;
            this.userCode = `
      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${filterHeight}; h++) {
          int hIn = hBeg + h * ${dilationHeight};

          if (hIn >= 0 && hIn < ${inHeight}) {
            for (int w = 0; w < ${filterWidth}; w++) {
              int wIn = wBeg + w * ${dilationWidth};

              if (wIn >= 0 && wIn < ${inWidth}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function dilation2D(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter } = inputs;
        const { strides, pad, dilations } = attrs;
        const convInfo = computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);
        let out;
        const program = new Dilation2DProgram(convInfo);
        out = backend.runWebGLProgram(program, [x, filter], 'float32');
        const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });
        backend.disposeIntermediateTensorInfo(out);
        return outReshaped;
    }
    const dilation2DConfig = {
        kernelName: Dilation2D,
        backendName: 'webgl',
        kernelFunc: dilation2D,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function einsum(args) {
        const { inputs, backend, attrs } = args;
        const { equation } = attrs;
        const tensors = inputs;
        const { allDims, summedDims, idDims } = decodeEinsumEquation(equation, tensors.length);
        checkEinsumDimSizes(allDims.length, idDims, tensors);
        const { path, steps } = getEinsumComputePath(summedDims, idDims);
        const nSteps = steps.length;
        let out = null;
        let numDimsRemaining = allDims.length;
        const tensorsToDispose = [];
        for (let i = 0; i < nSteps; ++i) {
            for (const idTerm of steps[i]) {
                const { permutationIndices: perm, expandDims: dimsToExpand } = getEinsumPermutation(numDimsRemaining, idDims[idTerm]);
                let x;
                if (isIdentityPermutation(perm)) {
                    x = tensors[idTerm];
                }
                else {
                    x = transpose({ inputs: { x: tensors[idTerm] }, backend, attrs: { perm } });
                    tensorsToDispose.push(x);
                }
                const targetShape = x.shape.slice();
                for (let k = 0; k < dimsToExpand.length; ++k) {
                    targetShape.splice(dimsToExpand[k], 0, 1);
                }
                if (!arraysEqual(x.shape, targetShape)) {
                    x = reshape({ inputs: { x }, backend, attrs: { shape: targetShape } });
                    tensorsToDispose.push(x);
                }
                if (out === null) {
                    out = x;
                }
                else {
                    // tslint:disable-next-line: no-unnecessary-type-assertion
                    out = multiply({ inputs: { a: x, b: out }, backend });
                    tensorsToDispose.push(out);
                }
            }
            if (i < nSteps - 1) {
                if (path[i] >= 0) {
                    out = sum({
                        inputs: { x: out },
                        backend,
                        attrs: {
                            axis: path[i] - (allDims.length - numDimsRemaining),
                            keepDims: false
                        }
                    });
                    tensorsToDispose.push(out);
                }
                numDimsRemaining--;
            }
        }
        // Clean up intermediate tensors.
        for (const tensorInfo of tensorsToDispose) {
            if (tensorInfo === out) {
                continue;
            }
            backend.disposeIntermediateTensorInfo(tensorInfo);
        }
        return out;
    }
    const einsumConfig = {
        kernelName: Einsum,
        backendName: 'webgl',
        kernelFunc: einsum
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;
    const ELU_PACKED = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
    const elu = unaryKernelFunc({ opSnippet: ELU, packedOpSnippet: ELU_PACKED });
    const eluConfig = {
        kernelName: Elu,
        backendName: 'webgl',
        kernelFunc: elu
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;
    const ELU_DER_PACKED = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
    const eluGrad = (args) => {
        const { inputs, backend } = args;
        const { dy, y } = inputs;
        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?
            new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :
            new BinaryOpProgram(ELU_DER, dy.shape, y.shape);
        return backend.runWebGLProgram(program, [dy, y], dy.dtype);
    };
    const eluGradConfig = {
        kernelName: EluGrad,
        backendName: 'webgl',
        kernelFunc: eluGrad
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const PACKED_EQUAL = `
  return vec4(equal(a, b));
`;
    const EQUAL = `return float(a == b);`;
    const equal = binaryKernelFunc({
        opSnippet: EQUAL,
        packedOpSnippet: PACKED_EQUAL,
        dtype: 'bool',
        cpuKernelImpl: equalImplCPU,
    });
    const equalConfig = {
        kernelName: Equal,
        backendName: 'webgl',
        kernelFunc: equal
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ERF = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${ERF_P};
  float a1 = ${ERF_A1};
  float a2 = ${ERF_A2};
  float a3 = ${ERF_A3};
  float a4 = ${ERF_A4};
  float a5 = ${ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`;
    const erf = unaryKernelFunc({ opSnippet: ERF });
    const erfConfig = {
        kernelName: Erf,
        backendName: 'webgl',
        kernelFunc: erf,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const EXP = CHECK_NAN_SNIPPET_UNARY + `
  return exp(x);
`;
    const EXP_PACKED = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
    const exp = unaryKernelFunc({
        opSnippet: EXP,
        packedOpSnippet: EXP_PACKED,
        cpuKernelImpl: expImplCPU,
        dtype: 'float32',
    });
    const expConfig = {
        kernelName: Exp,
        backendName: 'webgl',
        kernelFunc: exp
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function expandDims(args) {
        const { inputs, attrs, backend } = args;
        const { dim } = attrs;
        const { input } = inputs;
        const inputRank = input.shape.length;
        const newShape = input.shape.slice();
        let $dim = dim;
        if (dim < 0) {
            // Negative value is counted from the tail of rank.
            assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);
            $dim = inputRank + dim + 1;
        }
        newShape.splice($dim, 0, 1);
        return reshape({ inputs: { x: input }, backend, attrs: { shape: newShape } });
    }
    const expandDimsConfig = {
        kernelName: ExpandDims,
        backendName: 'webgl',
        kernelFunc: expandDims,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const EXPM1 = `return exp(x) - 1.0;`;
    const expm1 = unaryKernelFunc({ opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU });
    const expm1Config = {
        kernelName: Expm1,
        backendName: 'webgl',
        kernelFunc: expm1
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class FFTProgram {
        constructor(component, inputShape, inverse) {
            this.variableNames = ['real', 'imag'];
            const innerDim = inputShape[1];
            this.outputShape = inputShape;
            const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;
            const resultDenominator = inverse ? `${innerDim}.0` : '1.0';
            let opString;
            if (component === 'real') {
                opString = 'return real * expR - imag * expI;';
            }
            else if (component === 'imag') {
                opString = 'return real * expI + imag * expR;';
            }
            else {
                throw new Error(`FFT component must be either "real" or "imag", got ${component}.`);
            }
            this.userCode = `
      const float exponentMultiplier = ${exponentMultiplierSnippet};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${opString}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${innerDim});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${innerDim}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function fftImpl(x, inverse, backend) {
        const xData = backend.texData.get(x.dataId);
        const inputSize = sizeFromShape(x.shape);
        // Collapse all outer dimensions to a single batch dimension.
        const innerDimensionSize = x.shape[x.shape.length - 1];
        const batch = inputSize / innerDimensionSize;
        const input2D = reshape({ inputs: { x }, backend, attrs: { shape: [batch, innerDimensionSize] } });
        const xShape = input2D.shape;
        const realProgram = new FFTProgram('real', xShape, inverse);
        const imagProgram = new FFTProgram('imag', xShape, inverse);
        const inputs = [
            {
                dataId: xData.complexTensorInfos.real.dataId,
                dtype: xData.complexTensorInfos.real.dtype,
                shape: xShape
            },
            {
                dataId: xData.complexTensorInfos.imag.dataId,
                dtype: xData.complexTensorInfos.imag.dtype,
                shape: xShape
            }
        ];
        const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');
        const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');
        const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });
        backend.disposeIntermediateTensorInfo(realPart);
        backend.disposeIntermediateTensorInfo(imagPart);
        const complexOutputReshaped = reshape({ inputs: { x: complexOutput }, backend, attrs: { shape: x.shape } });
        backend.disposeIntermediateTensorInfo(input2D);
        backend.disposeIntermediateTensorInfo(complexOutput);
        return complexOutputReshaped;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function fft(args) {
        const { inputs, backend } = args;
        const { input } = inputs;
        return fftImpl(input, false /* inverse */, backend);
    }
    const fftConfig = {
        kernelName: FFT,
        backendName: 'webgl',
        kernelFunc: fft
    };

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class FillProgram {
        constructor(shape, value) {
            this.outputShape = [];
            this.customUniforms = [{ name: 'value', type: 'float' }];
            this.variableNames = ['x'];
            this.outputShape = shape;
            this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function fill(args) {
        const { backend, attrs } = args;
        const { shape, value } = attrs;
        let { dtype } = attrs;
        dtype = dtype || inferDtype(value);
        if (dtype === 'string') {
            // String type should be handled in CPU memory.
            const values = getArrayFromDType(dtype, sizeFromShape(shape));
            values.fill(value);
            return backend.makeTensorInfo(shape, dtype, values);
        }
        else {
            const program = new FillProgram(shape, value);
            const customValues = [[value]];
            return backend.runWebGLProgram(program, [], dtype, customValues);
        }
    }
    const fillConfig = {
        kernelName: Fill,
        backendName: 'webgl',
        kernelFunc: fill
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class FlipLeftRightProgram {
        constructor(imageShape) {
            this.variableNames = ['Image'];
            this.outputShape = [];
            const imageWidth = imageShape[2];
            this.outputShape = imageShape;
            this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${imageWidth} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${imageWidth}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const flipLeftRightConfig = {
        kernelName: FlipLeftRight,
        backendName: 'webgl',
        kernelFunc: ({ inputs, backend }) => {
            const { image } = inputs;
            const webglBackend = backend;
            const program = new FlipLeftRightProgram(image.shape);
            const output = webglBackend.runWebGLProgram(program, [image], image.dtype);
            return output;
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const FLOOR = `return floor(x);`;
    const floor = unaryKernelFunc({ opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU });
    const floorConfig = {
        kernelName: Floor,
        backendName: 'webgl',
        kernelFunc: floor,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // We use native integer division to deal with floating point imprecision. Since
    // we implement floor division and glsl implements truncated division, we
    // correct for this by subtracting 1 from result when the result is negative and
    // there is a remainder.
    const INT_DIV = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`;
    const INT_DIV_PACKED = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`;
    const floorDiv = binaryKernelFunc({ opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32' });
    const floorDivConfig = {
        kernelName: FloorDiv,
        backendName: 'webgl',
        kernelFunc: floorDiv
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class FromPixelsProgram {
        constructor(outputShape) {
            this.variableNames = ['A'];
            const glsl = getGlslDifferences();
            const [height, width,] = outputShape;
            this.outputShape = outputShape;
            this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);

        vec4 values = ${glsl.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class FromPixelsPackedProgram {
        constructor(outputShape) {
            this.variableNames = ['A'];
            this.packedInputs = false;
            this.packedOutput = true;
            const glsl = getGlslDifferences();
            const [height, width,] = outputShape;
            this.outputShape = outputShape;
            this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${width}.0, ${height}.0);
            vec4 values = ${glsl.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${glsl.output} = result;
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const fromPixelsConfig = {
        kernelName: FromPixels,
        backendName: 'webgl',
        kernelFunc: fromPixels,
    };
    let fromPixels2DContext;
    function fromPixels(args) {
        const { inputs, backend, attrs } = args;
        let { pixels } = inputs;
        const { numChannels } = attrs;
        const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&
            pixels instanceof HTMLVideoElement;
        const isImage = typeof (HTMLImageElement) !== 'undefined' &&
            pixels instanceof HTMLImageElement;
        const [width, height] = isVideo ?
            [
                pixels.videoWidth,
                pixels.videoHeight
            ] :
            [pixels.width, pixels.height];
        const texShape = [height, width];
        const outShape = [height, width, numChannels];
        if (isImage || isVideo) {
            if (fromPixels2DContext == null) {
                fromPixels2DContext = document.createElement('canvas').getContext('2d');
            }
            fromPixels2DContext.canvas.width = width;
            fromPixels2DContext.canvas.height = height;
            fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
            pixels = fromPixels2DContext.canvas;
        }
        const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');
        // This is a byte texture with pixels.
        backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;
        backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);
        const program = env().getBool('WEBGL_PACK') ?
            new FromPixelsPackedProgram(outShape) :
            new FromPixelsProgram(outShape);
        const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');
        backend.disposeData(tempPixelHandle.dataId);
        return res;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function fusedConv2d(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter, bias, preluActivationWeights } = inputs;
        const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;
        const $dataFormat = convertConv2DDataFormat(dataFormat);
        const convInfo = computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);
        let out;
        const intermediates = [];
        if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&
            convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&
            convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&
            (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {
            out = conv2dByMatMul({
                x,
                filter,
                convInfo,
                backend,
                bias,
                activation,
                preluActivationWeights,
                leakyreluAlpha
            });
        }
        else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {
            out = conv2dWithIm2Row({
                x,
                filter,
                convInfo,
                backend,
                bias,
                activation,
                preluActivationWeights,
                leakyreluAlpha
            });
        }
        else {
            const hasBias = bias != null;
            const hasPreluActivationWeights = preluActivationWeights != null;
            const hasLeakyreluAlpha = activation === 'leakyrelu';
            const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;
            const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
            const inputs = [x, filter];
            if (bias) {
                inputs.push(bias);
            }
            if (preluActivationWeights) {
                inputs.push(preluActivationWeights);
            }
            if (hasLeakyreluAlpha) {
                const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', createScalarValue(leakyreluAlpha, 'float32'));
                inputs.push($leakyreluAlpha);
                intermediates.push($leakyreluAlpha);
            }
            out = backend.runWebGLProgram(program, inputs, 'float32');
        }
        const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });
        intermediates.push(out);
        intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return outReshaped;
    }
    const fusedConv2DConfig = {
        kernelName: FusedConv2D,
        backendName: 'webgl',
        kernelFunc: fusedConv2d,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function fusedDepthwiseConv2D(args) {
        const { inputs, backend, attrs } = args;
        const { x, filter, bias, preluActivationWeights } = inputs;
        const { strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;
        const intermediates = [];
        let $dilations = dilations;
        if ($dilations == null) {
            $dilations = [1, 1];
        }
        assert(eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +
            `1. Got strides ${strides} and dilations '${$dilations}'`);
        const convInfo = computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);
        const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&
            convInfo.strideWidth <= 2 &&
            convInfo.outChannels / convInfo.inChannels === 1;
        const fusedActivation = activation ?
            mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :
            null;
        const programInputs = [x, filter];
        const hasBias = bias != null;
        const hasPreluActivationWeights = preluActivationWeights != null;
        const hasLeakyreluAlpha = activation === 'leakyrelu';
        if (hasBias) {
            programInputs.push(bias);
        }
        if (hasPreluActivationWeights) {
            programInputs.push(preluActivationWeights);
        }
        if (hasLeakyreluAlpha) {
            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', createScalarValue(leakyreluAlpha, 'float32'));
            programInputs.push($leakyreluAlpha);
            intermediates.push($leakyreluAlpha);
        }
        let program;
        if (shouldPackDepthwiseConv) {
            program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
        }
        else {
            program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
        }
        const customValues = [
            [convInfo.padInfo.top, convInfo.padInfo.left],
            [convInfo.strideHeight, convInfo.strideWidth],
            [convInfo.dilationHeight, convInfo.dilationWidth],
            [convInfo.inHeight, convInfo.inWidth]
        ];
        const result = backend.runWebGLProgram(program, programInputs, 'float32', customValues);
        intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return result;
    }
    const fusedDepthwiseConv2DConfig = {
        kernelName: FusedDepthwiseConv2D,
        backendName: 'webgl',
        kernelFunc: fusedDepthwiseConv2D,
    };

    class GatherNDProgram {
        constructor(sliceDim, strides, shape) {
            this.sliceDim = sliceDim;
            this.strides = strides;
            this.variableNames = ['x', 'indices'];
            this.outputShape = shape;
            const stridesType = getCoordsDataType(strides.length);
            const dtype = getCoordsDataType(shape.length);
            const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';
            this.userCode = `
        ${stridesType} strides = ${stridesType}(${this.strides});
         void main() {
          ${dtype} coords = getOutputCoords();
          int flattenIndex = 0;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            flattenIndex += index * ${strideString};
          }
          setOutput(getX(flattenIndex, coords[1]));
        }
      `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function gatherNd(args) {
        const { inputs, backend } = args;
        const { params, indices } = inputs;
        const indicesShape = indices.shape;
        const sliceRank = indicesShape[indicesShape.length - 1];
        const paramsSize = sizeFromShape(params.shape);
        const [resultShape, numSlices, sliceSize, strides] = prepareAndValidate(params, indices);
        const flattenIndices = reshape({ inputs: { x: indices }, backend, attrs: { shape: [numSlices, sliceRank] } });
        const flattenX = reshape({
            inputs: { x: params },
            backend,
            attrs: { shape: [(sizeFromShape(params.shape) / sliceSize), sliceSize] }
        });
        if (backend.shouldExecuteOnCPU([params, indices]) ||
            params.dtype === 'string') {
            const indicesData = backend.readSync(indices.dataId);
            const paramsBuf = backend.bufferSync(params);
            const outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);
            return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);
        }
        const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);
        const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);
        const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: resultShape } });
        backend.disposeIntermediateTensorInfo(flattenIndices);
        backend.disposeIntermediateTensorInfo(flattenX);
        backend.disposeIntermediateTensorInfo(res);
        return reshaped;
    }
    const gatherNdConfig = {
        kernelName: GatherNd,
        backendName: 'webgl',
        kernelFunc: gatherNd
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class GatherProgram {
        constructor(aShape, outputShape) {
            this.variableNames = ['A', 'indices'];
            this.outputShape = outputShape;
            this.rank = outputShape.length;
            const dtype = getCoordsDataType(this.rank);
            const sourceCoords = getSourceCoords$1(aShape);
            this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${sourceCoords}));
      }
    `;
        }
    }
    // The input and output are always flattened into rank 4 tensors.
    function getSourceCoords$1(aShape, axis) {
        const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
        const sourceCoords = [];
        for (let i = 0; i < aShape.length; i++) {
            if (i === 2) {
                sourceCoords.push('index');
            }
            else {
                sourceCoords.push(`${currentCoords[i]}`);
            }
        }
        return sourceCoords.join();
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function gatherV2(args) {
        const { inputs, backend, attrs } = args;
        const { x, indices } = inputs;
        const { axis, batchDims } = attrs;
        const parsedAxis = parseAxisParam(axis, x.shape)[0];
        if (env().get('DEBUG')) {
            // In debug mode, throw error when any index is out of bound.
            // Otherwise, just fill out of bounds with zeroes.
            const indicesVals = backend.readSync(indices.dataId);
            const axisDim = x.shape[parsedAxis];
            for (let i = 0; i < indicesVals.length; ++i) {
                const index = indicesVals[i];
                assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);
            }
        }
        const shapeInfo = collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);
        const indicesSize = sizeFromShape(indices.shape);
        const toDispose = [];
        const flattenX = reshape({
            inputs: { x },
            backend,
            attrs: {
                shape: [
                    shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,
                    shapeInfo.sliceSize
                ]
            }
        });
        const flattenIndex = reshape({
            inputs: { x: indices },
            backend,
            attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }
        });
        toDispose.push(flattenX);
        toDispose.push(flattenIndex);
        const flattenOutputShape = [
            shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,
            shapeInfo.sliceSize
        ];
        if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {
            const indicesBuf = backend.bufferSync(flattenIndex);
            const xBuf = backend.bufferSync(flattenX);
            const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);
            toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
            return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);
        }
        const program = new GatherProgram(flattenX.shape, flattenOutputShape);
        const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);
        toDispose.push(res);
        const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: shapeInfo.outputShape } });
        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return reshaped;
    }
    const gatherV2Config = {
        kernelName: GatherV2,
        backendName: 'webgl',
        kernelFunc: gatherV2
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const GREATER = `return float(a > b);`;
    const GREATER_PACKED = `
  return vec4(greaterThan(a, b));
`;
    const greater = binaryKernelFunc({
        opSnippet: GREATER,
        packedOpSnippet: GREATER_PACKED,
        cpuKernelImpl: greaterImplCPU,
        dtype: 'bool'
    });
    const greaterConfig = {
        kernelName: Greater,
        backendName: 'webgl',
        kernelFunc: greater
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const GREATER_EQUAL = `return float(a >= b);`;
    const GREATER_EQUAL_PACKED = `
  return vec4(greaterThanEqual(a, b));
`;
    const greaterEqual = binaryKernelFunc({
        opSnippet: GREATER_EQUAL,
        packedOpSnippet: GREATER_EQUAL_PACKED,
        dtype: 'bool',
        cpuKernelImpl: greaterEqualImplCPU
    });
    const greaterEqualConfig = {
        kernelName: GreaterEqual,
        backendName: 'webgl',
        kernelFunc: greaterEqual
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function ifft(args) {
        const { inputs, backend } = args;
        const { input } = inputs;
        return fftImpl(input, true /* inverse */, backend);
    }
    const ifftConfig = {
        kernelName: IFFT,
        backendName: 'webgl',
        kernelFunc: ifft
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;
    const isFinite$1 = unaryKernelFunc({ opSnippet: IS_FINITE, dtype: 'bool' });
    const isFiniteConfig = {
        kernelName: IsFinite,
        backendName: 'webgl',
        kernelFunc: isFinite$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const IS_INF = `return float(isinf(x));`;
    const isInf = unaryKernelFunc({ opSnippet: IS_INF, dtype: 'bool' });
    const isInfConfig = {
        kernelName: IsInf,
        backendName: 'webgl',
        kernelFunc: isInf,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const IS_NAN = `return float(isnan(x));`;
    const isNaN$1 = unaryKernelFunc({ opSnippet: IS_NAN, dtype: 'bool' });
    const isNaNConfig = {
        kernelName: IsNan,
        backendName: 'webgl',
        kernelFunc: isNaN$1,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const LESS = `return float(a < b);`;
    const LESS_PACKED = `
  return vec4(lessThan(a, b));
`;
    const less = binaryKernelFunc({
        opSnippet: LESS,
        packedOpSnippet: LESS_PACKED,
        cpuKernelImpl: lessImplCPU,
        dtype: 'bool'
    });
    const lessConfig = {
        kernelName: Less,
        backendName: 'webgl',
        kernelFunc: less
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const LESS_EQUAL = `return float(a <= b);`;
    const LESS_EQUAL_PACKED = `
  return vec4(lessThanEqual(a, b));
`;
    const lessEqual = binaryKernelFunc({
        opSnippet: LESS_EQUAL,
        packedOpSnippet: LESS_EQUAL_PACKED,
        cpuKernelImpl: lessEqualImplCPU,
        dtype: 'bool'
    });
    const lessEqualConfig = {
        kernelName: LessEqual,
        backendName: 'webgl',
        kernelFunc: lessEqual
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function linSpace(args) {
        const { backend, attrs } = args;
        const { start, stop, num } = attrs;
        // TODO: Use CPU implementation due to the precision problem in Safari.
        const outVals = linSpaceImplCPU(start, stop, num);
        return backend.makeTensorInfo([outVals.length], 'float32', outVals);
    }
    const linSpaceConfig = {
        kernelName: LinSpace,
        backendName: 'webgl',
        kernelFunc: linSpace
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Windows chrome return 0 if the input is negative value. We will specifically
    // return NaN if the input is 0 to solve compatiblity issue.
    const LOG = CHECK_NAN_SNIPPET_UNARY + `
  return x < 0.0 ? 0./0. : log(x);
`;
    const LOG_PACKED = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`;
    const log = unaryKernelFunc({ opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU });
    const logConfig = {
        kernelName: Log,
        backendName: 'webgl',
        kernelFunc: log
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const LOG1P = CHECK_NAN_SNIPPET_UNARY + `
  return log(1.0 + x);
`;
    const log1p = unaryKernelFunc({ opSnippet: LOG1P });
    const log1pConfig = {
        kernelName: Log1p,
        backendName: 'webgl',
        kernelFunc: log1p,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;
    const LOGICAL_AND_PACKED = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`;
    const logicalAnd = binaryKernelFunc({
        opSnippet: LOGICAL_AND,
        packedOpSnippet: LOGICAL_AND_PACKED,
        dtype: 'bool'
    });
    const logicalAndConfig = {
        kernelName: LogicalAnd,
        backendName: 'webgl',
        kernelFunc: logicalAnd
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const LOGICAL_NOT = `return float(!(x >= 1.0));`;
    const logicalNot = unaryKernelFunc({ opSnippet: LOGICAL_NOT });
    const logicalNotConfig = {
        kernelName: LogicalNot,
        backendName: 'webgl',
        kernelFunc: logicalNot,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;
    const LOGICAL_OR_PACKED = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`;
    const logicalOr = binaryKernelFunc({ opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool' });
    const logicalOrConfig = {
        kernelName: LogicalOr,
        backendName: 'webgl',
        kernelFunc: logicalOr
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class LRNProgram {
        constructor(xShape, radius, bias, alpha, beta) {
            this.variableNames = ['x'];
            this.outputShape = [];
            const rad = radius;
            const maxD = xShape[3] - 1;
            this.outputShape = xShape;
            // optimize pow(bias + alpha * sum, -beta)
            // src: https://github.com/tensorflow/tensorflow/..
            // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
            // tensorflow/core/kernels/mkl_lrn_op.cc#L320
            let powOperator;
            const basis = `float(${bias}) + float(${alpha}) * sum`;
            if (beta === 0.5) {
                powOperator = `inversesqrt(${basis})`;
            }
            else if (beta === 1.0) {
                powOperator = `1.0/(${basis})`;
            }
            else {
                powOperator = `exp(log(${basis}) * float(-${beta}));`;
            }
            this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${rad}; j <= ${rad}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${maxD}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${powOperator};
        setOutput(val);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class LRNPackedProgram {
        constructor(xShape, radius, bias, alpha, beta) {
            this.variableNames = ['x'];
            this.outputShape = [];
            this.packedInputs = true;
            this.packedOutput = true;
            const rad = radius;
            const maxD = xShape[3] - 1;
            this.outputShape = xShape;
            // optimize pow(bias + alpha * sum, -beta)
            // src: https://github.com/tensorflow/tensorflow/..
            // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
            // tensorflow/core/kernels/mkl_lrn_op.cc#L320
            let powOperator;
            const basis = `float(${bias}) + float(${alpha}) * sum`;
            if (beta === 0.5) {
                powOperator = `inversesqrt(${basis})`;
            }
            else if (beta === 1.0) {
                powOperator = `1.0/(${basis})`;
            }
            else {
                powOperator = `exp(log(${basis}) * float(-${beta}));`;
            }
            this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${rad};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${rad}; j <= ${rad}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${powOperator};
        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const lrn = (args) => {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { depthRadius, bias, alpha, beta } = attrs;
        const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?
            new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :
            new LRNProgram(x.shape, depthRadius, bias, alpha, beta);
        return backend.runWebGLProgram(program, [x], x.dtype);
    };
    // tslint:disable-next-line: variable-name
    const LRNConfig = {
        kernelName: LRN,
        backendName: 'webgl',
        kernelFunc: lrn
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class LRNGradProgram {
        constructor(inputShape, depthRadius, bias, alpha, beta) {
            this.variableNames = ['inputImage', 'outputImage', 'dy'];
            this.outputShape = [];
            this.outputShape = inputShape;
            this.depth = inputShape[3];
            this.depthRadius = depthRadius;
            this.bias = bias;
            this.alpha = alpha;
            this.beta = beta;
            this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${depthRadius})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${depthRadius} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${alpha}) * norm + float(${bias});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${alpha})
                * float(${beta})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${beta});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const lrnGrad = (args) => {
        const { inputs, backend, attrs } = args;
        const { x, y, dy } = inputs;
        const { depthRadius, bias, alpha, beta } = attrs;
        const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);
        return backend.runWebGLProgram(program, [x, y, dy], x.dtype);
    };
    // tslint:disable-next-line: variable-name
    const LRNGradConfig = {
        kernelName: LRNGrad,
        backendName: 'webgl',
        kernelFunc: lrnGrad
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxImpl(x, reduceShape, outShape, backend) {
        const inSize = sizeFromShape(reduceShape);
        const xSize = sizeFromShape(x.shape);
        const batchSize = xSize / inSize;
        const reshapedInput = reshape({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend });
        const reduced = reduce(reshapedInput, x.dtype, 'max', backend);
        const reshapedOutput = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });
        backend.disposeIntermediateTensorInfo(reshapedInput);
        backend.disposeIntermediateTensorInfo(reduced);
        return reshapedOutput;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function max(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { reductionIndices, keepDims } = attrs;
        const xRank = x.shape.length;
        const origAxes = parseAxisParam(reductionIndices, x.shape);
        let axes = origAxes;
        const permutedAxes = getAxesPermutation(axes, xRank);
        const maxInputIsTransposed = permutedAxes != null;
        const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);
        let maxInput = x;
        if (maxInputIsTransposed) {
            if (shouldExecuteOnCPU) {
                const xTexData = backend.texData.get(maxInput.dataId);
                const values = xTexData.values;
                const newShape = new Array(xRank);
                for (let i = 0; i < newShape.length; i++) {
                    newShape[i] = x.shape[permutedAxes[i]];
                }
                const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);
                maxInput = backend.makeTensorInfo(newShape, x.dtype);
                const maxInputData = backend.texData.get(maxInput.dataId);
                maxInputData.values = maxInputValues;
            }
            else {
                maxInput = transposeImpl(x, permutedAxes, backend);
            }
            axes = getInnerMostAxes(axes.length, xRank);
        }
        assertAxesAreInnerMostDims('max', axes, xRank);
        const [maxOutShape, reduceShape] = computeOutAndReduceShapes(maxInput.shape, axes);
        let outShape = maxOutShape;
        if (keepDims) {
            // rather than reshape at the end, set the target shape here.
            outShape = expandShapeToKeepDim(maxOutShape, origAxes);
        }
        let out;
        if (shouldExecuteOnCPU) {
            const xTexData = backend.texData.get(maxInput.dataId);
            const values = xTexData.values;
            const outValues = maxImplCPU(values, sizeFromShape(reduceShape), outShape, x.dtype);
            out = backend.makeTensorInfo(outShape, x.dtype);
            const outData = backend.texData.get(out.dataId);
            outData.values = outValues;
        }
        else {
            out = maxImpl(maxInput, reduceShape, outShape, backend);
        }
        if (maxInputIsTransposed) {
            backend.disposeIntermediateTensorInfo(maxInput);
        }
        return out;
    }
    const maxConfig = {
        kernelName: Max,
        backendName: 'webgl',
        kernelFunc: max
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const MAXIMUM = CHECK_NAN_SNIPPET$1 + `
  return max(a, b);
`;
    const MAXIMUM_PACKED = `
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` +
        CHECK_NAN_SNIPPET + `
  return result;
`;
    const maximum = binaryKernelFunc({
        opSnippet: MAXIMUM,
        packedOpSnippet: MAXIMUM_PACKED,
        cpuKernelImpl: maximumImplCPU
    });
    const maximumConfig = {
        kernelName: Maximum,
        backendName: 'webgl',
        kernelFunc: maximum
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxPool(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        assertNotComplex(x, 'maxPool');
        const { filterSize, strides, pad, dimRoundingMode } = attrs;
        const dilations = 1;
        assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +
            `Got strides ${strides} and dilations '${dilations}'`);
        const convInfo = computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
        if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&
            arraysEqual(convInfo.inShape, convInfo.outShape)) {
            return identity({ inputs: { x }, backend });
        }
        const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);
        return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);
    }
    const maxPoolConfig = {
        kernelName: MaxPool,
        backendName: 'webgl',
        kernelFunc: maxPool
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxPool3d(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { filterSize, strides, pad, dataFormat, dimRoundingMode } = attrs;
        const dilations = [1, 1, 1];
        const convInfo = computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
        const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);
        return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);
    }
    const maxPool3DConfig = {
        kernelName: MaxPool3D,
        backendName: 'webgl',
        kernelFunc: maxPool3d
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class MaxPool2DBackpropProgram {
        constructor(convInfo) {
            this.variableNames = ['dy', 'maxPos'];
            this.outputShape = convInfo.inShape;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const dilationHeight = convInfo.dilationHeight;
            const effectiveFilterHeight = convInfo.effectiveFilterHeight;
            const effectiveFilterWidth = convInfo.effectiveFilterWidth;
            const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
            const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
            const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;
            this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${effectiveFilterHeight};
          wR += ${dilationHeight}) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${effectiveFilterWidth} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }
    class MaxPool3DBackpropProgram {
        constructor(convInfo) {
            this.variableNames = ['dy', 'maxPos'];
            this.outputShape = convInfo.inShape;
            const strideDepth = convInfo.strideDepth;
            const strideHeight = convInfo.strideHeight;
            const strideWidth = convInfo.strideWidth;
            const dilationDepth = convInfo.dilationDepth;
            const dilationHeight = convInfo.dilationHeight;
            const dilationWidth = convInfo.dilationWidth;
            const effectiveFilterDepth = convInfo.effectiveFilterDepth;
            const effectiveFilterHeight = convInfo.effectiveFilterHeight;
            const effectiveFilterWidth = convInfo.effectiveFilterWidth;
            const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
            const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
            const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
            const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;
            this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
           wD += ${dilationDepth}) {
          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;

          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${lastIndex} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +
                  wR * ${effectiveFilterWidth} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxPool3DGrad(args) {
        const { inputs, backend, attrs } = args;
        const { dy, input } = inputs;
        const x = input;
        const { filterSize, strides, pad, dimRoundingMode } = attrs;
        const dilations = [1, 1, 1];
        const convInfo = computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
        const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true /* get positions */);
        const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);
        const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);
        const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);
        backend.disposeIntermediateTensorInfo(maxPool3dPositions);
        return result;
    }
    const maxPool3DGradConfig = {
        kernelName: MaxPool3DGrad,
        backendName: 'webgl',
        kernelFunc: maxPool3DGrad
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxPoolGrad(args) {
        const { inputs, backend, attrs } = args;
        const { dy, input, output } = inputs;
        const x = input;
        assertNotComplex([input, output], 'maxPoolGrad');
        const { filterSize, strides, pad, dimRoundingMode } = attrs;
        const convInfo = computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
        const getPositions = true;
        const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);
        const maxPoolPositions = backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);
        const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);
        const result = backend.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);
        backend.disposeIntermediateTensorInfo(maxPoolPositions);
        return result;
    }
    const maxPoolGradConfig = {
        kernelName: MaxPoolGrad,
        backendName: 'webgl',
        kernelFunc: maxPoolGrad
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {
        let program = new Pool2DProgram(convInfo, 'max', false);
        const poolOutput = backend.runWebGLProgram(program, [x], 'float32');
        program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);
        const indexOutput = backend.runWebGLProgram(program, [x], 'float32');
        return [poolOutput, indexOutput];
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const maxPoolWithArgmaxConfig = {
        kernelName: MaxPoolWithArgmax,
        backendName: 'webgl',
        kernelFunc: ({ inputs, attrs, backend }) => {
            const { x } = inputs;
            const { filterSize, strides, pad, includeBatchInIndex } = attrs;
            const webglBackend = backend;
            assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);
            const dilations = [1, 1];
            assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +
                `Got strides ${strides} and dilations '${dilations}'`);
            const convInfo = computePool2DInfo(x.shape, filterSize, strides, dilations, pad);
            const [result, indexes] = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);
            return [result, indexes];
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function meanImpl(x, reduceShape, outShape, backend) {
        const inSize = sizeFromShape(reduceShape);
        const xSize = sizeFromShape(x.shape);
        const batchSize = xSize / inSize;
        const reshapedInput = reshape({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend });
        const reduced = reduce(reshapedInput, 'float32', 'mean', backend);
        const reshapedOutput = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });
        backend.disposeIntermediateTensorInfo(reshapedInput);
        backend.disposeIntermediateTensorInfo(reduced);
        return reshapedOutput;
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const meanConfig = {
        kernelName: Mean,
        backendName: 'webgl',
        kernelFunc: ({ inputs, attrs, backend }) => {
            const { x } = inputs;
            const { keepDims, axis } = attrs;
            const webglBackend = backend;
            const xRank = x.shape.length;
            const origAxes = parseAxisParam(axis, x.shape);
            let axes = origAxes;
            const permutedAxes = getAxesPermutation(axes, xRank);
            const meanInputIsTransposed = permutedAxes != null;
            const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);
            const intermediates = [];
            let meanInput = x;
            if (meanInputIsTransposed) {
                if (shouldExecuteOnCPU) {
                    const xTexData = webglBackend.texData.get(meanInput.dataId);
                    const values = xTexData.values;
                    const newShape = new Array(xRank);
                    for (let i = 0; i < newShape.length; i++) {
                        newShape[i] = x.shape[permutedAxes[i]];
                    }
                    const meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);
                    meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);
                    const meanInputData = webglBackend.texData.get(meanInput.dataId);
                    meanInputData.values = meanInputValues;
                }
                else {
                    meanInput = transposeImpl(x, permutedAxes, webglBackend);
                }
                intermediates.push(meanInput);
                axes = getInnerMostAxes(axes.length, xRank);
            }
            assertAxesAreInnerMostDims('sum', axes, xRank);
            const [meanOutShape, reduceShape] = computeOutAndReduceShapes(meanInput.shape, axes);
            let outShape = meanOutShape;
            if (keepDims) {
                // rather than reshape at the end, set the target shape here.
                outShape = expandShapeToKeepDim(meanOutShape, origAxes);
            }
            const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);
            for (const i of intermediates) {
                webglBackend.disposeIntermediateTensorInfo(i);
            }
            return out;
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function min(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        const xRank = x.shape.length;
        const origAxes = parseAxisParam(axis, x.shape);
        let axes = origAxes;
        const permutedAxes = getAxesPermutation(axes, xRank);
        let permutedX = x;
        if (permutedAxes != null) {
            permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            axes = getInnerMostAxes(axes.length, x.shape.length);
        }
        assertAxesAreInnerMostDims('min', axes, xRank);
        const [outShape, reduceShape] = computeOutAndReduceShapes(permutedX.shape, axes);
        const inSize = sizeFromShape(reduceShape);
        const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });
        const reduced = reduce(a2D, a2D.dtype, 'min', backend);
        let res;
        if (keepDims) {
            const newShape = expandShapeToKeepDim(outShape, origAxes);
            res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });
        }
        else {
            res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });
        }
        backend.disposeIntermediateTensorInfo(a2D);
        backend.disposeIntermediateTensorInfo(reduced);
        if (permutedAxes != null) {
            backend.disposeIntermediateTensorInfo(permutedX);
        }
        return res;
    }
    const minConfig = {
        kernelName: Min,
        backendName: 'webgl',
        kernelFunc: min
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const MINIMUM = CHECK_NAN_SNIPPET$1 + `
  return min(a, b);
`;
    const MINIMUM_PACKED = `
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` +
        CHECK_NAN_SNIPPET + `
  return result;
`;
    const minimum = binaryKernelFunc({
        opSnippet: MINIMUM,
        packedOpSnippet: MINIMUM_PACKED,
        cpuKernelImpl: minimumImplCPU
    });
    const minimumConfig = {
        kernelName: Minimum,
        backendName: 'webgl',
        kernelFunc: minimum
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class MirrorPadProgram {
        constructor(xShape, paddings, mode) {
            this.variableNames = ['x'];
            this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);
            const rank = xShape.length;
            const dtype = getCoordsDataType(rank);
            const start = paddings.map(p => p[0]).join(',');
            const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
            const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);
            const offset = mode === 'reflect' ? 0 : 1;
            if (rank === 1) {
                this.userCode = `
        int start = ${start};
        int end = ${end};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${offset};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${offset};
          }
          setOutput(getX(outC - start));
        }
      `;
                return;
            }
            this.userCode = `
      ${dtype} start = ${dtype}(${start});
      ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outC = getOutputCoords();
        for (int i = 0; i < ${rank}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${offset};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};
          }
        }
        ${dtype} coords = outC - start;
        setOutput(getX(${unpackedCoords}));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    /**
     * Example shader code for
     * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`
     * ```
     *    const int start = int(2);
     *    const int end = int(5);
     *
     *    void main() {
     *       int outputLoc = getOutputCoords();
     *       vec4 result = vec4(0.);
     *
     *       int rc = outputLoc;
     *
     *       int source = rc;
     *       if (source < start) {
     *         source = start * 2 - source - 0;
     *       } else if (source >= end) {
     *         source = (end - 1) * 2 - source + 0;
     *       }
     *       source -= start;
     *
     *       result[0] = getChannel(getX(source), source);
     *       rc += 1;
     *       if(rc < 6) {
     *          int source = rc;
     *          if (source < start) {
     *            source = start * 2 - source - 0;
     *          } else if (source >= end) {
     *            source = (end - 1) * 2 - source + 0;
     *          }
     *          source -= start;
     *
     *         result[1] = getChannel(getX(source), source);
     *       }
     *
     *       setOutput(result);
     *     }
     * ```
     */
    class MirrorPadPackedProgram {
        constructor(xShape, paddings, mode) {
            this.variableNames = ['x'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);
            const rank = xShape.length;
            const dtype = getCoordsDataType(rank);
            const start = paddings.map(p => p[0]).join(',');
            const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
            const coords = getChannels('rc', rank);
            const source = getChannels('source', rank);
            const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;
            const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;
            const offset = mode === 'reflect' ? 0 : 1;
            let mainLoop = '';
            if (rank === 1) {
                const padSetup = `
        ${dtype} source = rc;
        if (source < start) {
          source = start * 2 - source - ${offset};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${offset};
        }
        source -= start;
      `;
                mainLoop = `
        ${dtype} rc = outputLoc;
        ${padSetup}
        result[0] = getChannel(getX(${source.join()}), ${innerDims});
        ${coords[rank - 1]} += 1;
        if(${cLimit}) {
          ${padSetup}
          result[1] = getChannel(getX(${source.join()}), ${innerDims});
        }
      `;
            }
            else {
                const padSetup = `
        ${dtype} source = rc;
        ${dtype} lt = ${dtype}(lessThan(source, start));
        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));
        ${dtype} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${offset}) +
                gte * ((end - 1) * 2 - source + ${offset});
        source -= start;
      `;
                mainLoop = `
        ${dtype} rc = outputLoc;
        ${padSetup}
        result[0] = getChannel(getX(${source.join()}), ${innerDims});
        ${coords[rank - 1]} += 1;
        if(${cLimit}) {
          ${padSetup}
          result[1] = getChannel(getX(${source.join()}), ${innerDims});
        }
        rc = outputLoc;
        ${coords[rank - 2]} += 1;
        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {
          ${padSetup}
          result[2] = getChannel(getX(${source.join()}), ${innerDims});
          ${coords[rank - 1]} += 1;
          if(${cLimit}) {
            ${padSetup}
            result[3] = getChannel(getX(${source.join()}), ${innerDims});
          }
        }
      `;
            }
            this.userCode = `
      const ${dtype} start = ${dtype}(${start});
      const ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${mainLoop}
        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const mirrorPadKernelFunc = ({ inputs, backend, attrs }) => {
        const { x } = inputs;
        const { paddings, mode } = attrs;
        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?
            new MirrorPadPackedProgram(x.shape, paddings, mode) :
            new MirrorPadProgram(x.shape, paddings, mode);
        const output = backend.runWebGLProgram(program, [x], x.dtype);
        return output;
    };
    const mirrorPadConfig = {
        kernelName: MirrorPad,
        backendName: 'webgl',
        kernelFunc: mirrorPadKernelFunc,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const MOD = `if (b == 0.0) return NAN;
  return mod(a, b);`;
    const MOD_PACKED = `
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  ` +
        CHECK_NAN_SNIPPET + `
  return result;
`;
    const mod = binaryKernelFunc({
        opSnippet: MOD,
        packedOpSnippet: MOD_PACKED,
    });
    const modConfig = {
        kernelName: Mod,
        backendName: 'webgl',
        kernelFunc: mod
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class MultinomialProgram {
        constructor(batchSize, numOutcomes, numSamples) {
            this.variableNames = ['probs'];
            this.customUniforms = [{ name: 'seed', type: 'float' }];
            this.outputShape = [batchSize, numSamples];
            this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${numOutcomes - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${numOutcomes - 1}));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Without the equality check div produces 0.9999 for a = b, which when
    // floored can cause errors.
    const DIV = `
if (a == b) {
  return 1.0;
};
return a / b;`;
    // We do the same as in ./binaryop_gpu, with vec4 and ivec4.
    // On Linux, the vectorized implementation produces NaNs when a and b are 0.
    const DIV_PACKED = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`;
    const realDiv = binaryKernelFunc({ opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true });
    const realDivConfig = {
        kernelName: RealDiv,
        backendName: 'webgl',
        kernelFunc: realDiv,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const SUB = 'return a - b;';
    const sub = binaryKernelFunc({
        opSnippet: SUB,
        packedOpSnippet: SUB,
        supportsComplex: true,
        cpuKernelImpl: subImplCPU
    });
    const subConfig = {
        kernelName: Sub,
        backendName: 'webgl',
        kernelFunc: sub
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function softmax(args) {
        const { inputs, backend, attrs } = args;
        const { logits } = inputs;
        const { dim } = attrs;
        const axes = parseAxisParam([dim], logits.shape);
        const maxLogit = max({
            inputs: { x: logits },
            backend,
            attrs: { reductionIndices: axes, keepDims: false }
        });
        const expandedShape = expandShapeToKeepDim(maxLogit.shape, axes);
        const maxLogitsReshaped = reshape({ inputs: { x: maxLogit }, backend, attrs: { shape: expandedShape } });
        const a = sub({ inputs: { a: logits, b: maxLogitsReshaped }, backend });
        const b = exp({ inputs: { x: a }, backend });
        const sumExp = sum({ inputs: { x: b }, backend, attrs: { axis: axes, keepDims: false } });
        const sumExpReshaped = reshape({ inputs: { x: sumExp }, backend, attrs: { shape: expandedShape } });
        const res = realDiv({ inputs: { a: b, b: sumExpReshaped }, backend });
        backend.disposeIntermediateTensorInfo(maxLogit);
        backend.disposeIntermediateTensorInfo(maxLogitsReshaped);
        backend.disposeIntermediateTensorInfo(a);
        backend.disposeIntermediateTensorInfo(b);
        backend.disposeIntermediateTensorInfo(sumExp);
        backend.disposeIntermediateTensorInfo(sumExpReshaped);
        return res;
    }
    const softmaxConfig = {
        kernelName: Softmax,
        backendName: 'webgl',
        kernelFunc: softmax
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function multinomial(args) {
        const { inputs, backend, attrs } = args;
        const { logits } = inputs;
        const { numSamples, seed, normalized } = attrs;
        const probs = normalized ?
            logits :
            softmax({ inputs: { logits }, backend, attrs: { dim: logits.shape.length - 1 } });
        const batchSize = probs.shape[0];
        const numOutcomes = probs.shape[1];
        const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);
        const customValues = [[seed]];
        const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);
        if (!normalized) {
            backend.disposeIntermediateTensorInfo(probs);
        }
        return res;
    }
    const multinomialConfig = {
        kernelName: Multinomial,
        backendName: 'webgl',
        kernelFunc: multinomial
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const NEG = CHECK_NAN_SNIPPET$2 + `
  return -x;
`;
    const NEG_PACKED = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
    // This doesn't use unaryKernelFunc because negImplCPU is not of type
    // SimpleUnaryKernelImplCPU.
    function neg(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        if (backend.shouldExecuteOnCPU([x])) {
            const xData = backend.texData.get(x.dataId);
            const [outValues, newShape] = negImplCPU(xData.values, x.shape, x.dtype);
            return backend.makeTensorInfo(newShape, x.dtype, outValues);
        }
        let program;
        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
            program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);
        }
        else {
            program = new UnaryOpProgram(x.shape, NEG);
        }
        return backend.runWebGLProgram(program, [x], x.dtype);
    }
    const negConfig = {
        kernelName: Neg,
        backendName: 'webgl',
        kernelFunc: neg
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const nonMaxSuppressionV3Impl = nonMaxSuppressionV3Impl$2;
    function nonMaxSuppressionV3(args) {
        warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +
            'Call tf.nonMaxSuppressionAsync() instead');
        const { inputs, backend, attrs } = args;
        const { boxes, scores } = inputs;
        const { maxOutputSize, iouThreshold, scoreThreshold } = attrs;
        const boxesVals = backend.readSync(boxes.dataId);
        const scoresVals = backend.readSync(scores.dataId);
        const { selectedIndices } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
        return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));
    }
    const nonMaxSuppressionV3Config = {
        kernelName: NonMaxSuppressionV3,
        backendName: 'webgl',
        kernelFunc: nonMaxSuppressionV3
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const nonMaxSuppressionV4Impl = nonMaxSuppressionV4Impl$2;
    function nonMaxSuppressionV4(args) {
        warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +
            'Call tf.nonMaxSuppressionAsync() instead');
        const { inputs, backend, attrs } = args;
        const { boxes, scores } = inputs;
        const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;
        const boxesVals = backend.readSync(boxes.dataId);
        const scoresVals = backend.readSync(scores.dataId);
        const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
        return [
            backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),
            backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))
        ];
    }
    const nonMaxSuppressionV4Config = {
        kernelName: NonMaxSuppressionV4,
        backendName: 'webgl',
        kernelFunc: nonMaxSuppressionV4
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const nonMaxSuppressionV5Impl = nonMaxSuppressionV5Impl$2;
    function nonMaxSuppressionV5(args) {
        warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +
            'Call tf.nonMaxSuppressionAsync() instead');
        const { inputs, backend, attrs } = args;
        const { boxes, scores } = inputs;
        const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;
        const boxesVals = backend.readSync(boxes.dataId);
        const scoresVals = backend.readSync(scores.dataId);
        const maxOutputSizeVal = maxOutputSize;
        const iouThresholdVal = iouThreshold;
        const scoreThresholdVal = scoreThreshold;
        const softNmsSigmaVal = softNmsSigma;
        const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);
        return [
            backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),
            backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))
        ];
    }
    const nonMaxSuppressionV5Config = {
        kernelName: NonMaxSuppressionV5,
        backendName: 'webgl',
        kernelFunc: nonMaxSuppressionV5
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class OneHotProgram {
        constructor(numIndices, depth, onValue, offValue) {
            this.variableNames = ['indices'];
            this.outputShape = [numIndices, depth];
            this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${offValue}), float(${onValue}),
                      float(index == coords.y)));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const oneHot = (args) => {
        const { inputs, backend, attrs } = args;
        const { indices } = inputs;
        const { depth, onValue, offValue } = attrs;
        const indicesSize = sizeFromShape(indices.shape);
        const program = new OneHotProgram(indicesSize, depth, onValue, offValue);
        const reshaped = reshape({ inputs: { x: indices }, backend, attrs: { shape: [indicesSize] } });
        const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);
        backend.disposeIntermediateTensorInfo(reshaped);
        const outShape = [...indices.shape, depth];
        const out = reshape({ inputs: { x: result }, backend, attrs: { shape: outShape } });
        backend.disposeIntermediateTensorInfo(result);
        return out;
    };
    const oneHotConfig = {
        kernelName: OneHot,
        backendName: 'webgl',
        kernelFunc: oneHot
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function zerosLike(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        if (x.dtype === 'complex64') {
            const realPart = real({ inputs: { input: x }, backend });
            const r = zerosLike({ inputs: { x: realPart }, backend });
            const imagPart = imag({ inputs: { input: x }, backend });
            const i = zerosLike({ inputs: { x: imagPart }, backend });
            const result = complex({ inputs: { real: r, imag: i }, backend });
            backend.disposeIntermediateTensorInfo(realPart);
            backend.disposeIntermediateTensorInfo(r);
            backend.disposeIntermediateTensorInfo(imagPart);
            backend.disposeIntermediateTensorInfo(i);
            return result;
        }
        else {
            return fill({
                attrs: {
                    shape: x.shape,
                    dtype: x.dtype,
                    value: x.dtype === 'string' ? '' : 0
                },
                backend
            });
        }
    }
    const zerosLikeConfig = {
        kernelName: ZerosLike,
        backendName: 'webgl',
        kernelFunc: zerosLike
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function onesLike(args) {
        const { inputs, backend } = args;
        const { x } = inputs;
        if (x.dtype === 'string') {
            throw new Error('onesLike is not supported under string dtype');
        }
        else if (x.dtype === 'complex64') {
            const realPart = real({ inputs: { input: x }, backend });
            const r = onesLike({ inputs: { x: realPart }, backend });
            const imagPart = imag({ inputs: { input: x }, backend });
            const i = zerosLike({ inputs: { x: imagPart }, backend });
            const result = complex({ inputs: { real: r, imag: i }, backend });
            backend.disposeIntermediateTensorInfo(realPart);
            backend.disposeIntermediateTensorInfo(r);
            backend.disposeIntermediateTensorInfo(imagPart);
            backend.disposeIntermediateTensorInfo(i);
            return result;
        }
        else {
            // TODO(cais, smilkov): Add WebGL shader for onesLike:
            //   https://github.com/tensorflow/tfjs/issues/1293
            return fill({ attrs: { shape: x.shape, dtype: x.dtype, value: 1 }, backend });
        }
    }
    const onesLikeConfig = {
        kernelName: OnesLike,
        backendName: 'webgl',
        kernelFunc: onesLike
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function pack(args) {
        const { inputs, backend, attrs } = args;
        const { axis } = attrs;
        if (inputs.length === 1) {
            return expandDims({ inputs: { input: inputs[0] }, backend, attrs: { dim: axis } });
        }
        const shape = inputs[0].shape;
        const dtype = inputs[0].dtype;
        inputs.forEach(t => {
            assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');
            assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');
        });
        const intermediateTensorInfos = [];
        const expandedTensors = inputs.map(t => {
            const expandedT = expandDims({ inputs: { input: t }, backend, attrs: { dim: axis } });
            intermediateTensorInfos.push(expandedT);
            return expandedT;
        });
        const result = concat({ inputs: expandedTensors, backend, attrs: { axis } });
        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return result;
    }
    const packConfig = {
        kernelName: Pack,
        backendName: 'webgl',
        kernelFunc: pack
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class PadProgram {
        constructor(xShape, paddings, constantValue) {
            this.variableNames = ['x'];
            this.customUniforms = [{ name: 'value', type: 'float' }];
            this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);
            const rank = xShape.length;
            const type = getCoordsDataType(rank);
            const start = paddings.map(p => p[0]).join(',');
            const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
            const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);
            if (rank === 1) {
                this.userCode = `
        int start = ${start};
        int end = ${end};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
                return;
            }
            this.userCode = `
      ${type} start = ${type}(${start});
      ${type} end = ${type}(${end});

      void main() {
        ${type} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${type} coords = outC - start;
          setOutput(getX(${unpackedCoords}));
        }
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class PadPackedProgram {
        constructor(xShape, paddings, constantValue) {
            this.variableNames = ['x'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.customUniforms = [{ name: 'value', type: 'float' }];
            this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);
            const rank = xShape.length;
            const dtype = getCoordsDataType(rank);
            const start = paddings.map(p => p[0]).join(',');
            const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
            const coords = getChannels('rc', rank);
            const source = getChannels('source', rank);
            const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;
            const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;
            const componentSetup = [
                `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;
       if(${cLimit}) {
      `,
                rank === 1 ? '' : `}
       rc = outputLoc;
       ${coords[rank - 2]} += 1;
       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,
                rank === 1 ? '' : `  ${coords[rank - 1]} += 1;
         if(${cLimit}) {`
            ];
            const paddingArea = rank === 1 ?
                'rc < start || rc >= end' :
                'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';
            let mainLoop = '';
            for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {
                mainLoop += `
        ${componentSetup[i]}
        if (${paddingArea}) {
          result[${i}] = float(value);
        } else {
          ${dtype} source = rc - start;
          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});
        }
      `;
            }
            mainLoop += (rank === 1 ? `} ` : `}}`);
            this.userCode = `
      const ${dtype} start = ${dtype}(${start});
      const ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${mainLoop}
        setOutput(result);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const padV2 = (args) => {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { paddings, constantValue } = attrs;
        if (sizeFromShape(x.shape) === 0) {
            // Short-circuit the computation, since x doesn't have value, only
            // the shape is used to compute output shape to pad.
            const outputShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);
            return fill({
                backend,
                attrs: { shape: outputShape, value: constantValue, dtype: x.dtype }
            });
        }
        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?
            new PadPackedProgram(x.shape, paddings, constantValue) :
            new PadProgram(x.shape, paddings, constantValue);
        const customValues = [[constantValue]];
        return backend.runWebGLProgram(program, [x], x.dtype, customValues);
    };
    const padV2Config = {
        kernelName: PadV2,
        backendName: 'webgl',
        kernelFunc: padV2
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const POW = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`;
    const POW_PACKED = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  ` +
        CHECK_NAN_SNIPPET + `
  return result;
`;
    const pow = binaryKernelFunc({ opSnippet: POW, packedOpSnippet: POW_PACKED });
    const powConfig = {
        kernelName: Pow,
        backendName: 'webgl',
        kernelFunc: pow
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function prod(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { axis, keepDims } = attrs;
        const xRank = x.shape.length;
        const toDispose = [];
        const origAxes = parseAxisParam(axis, x.shape);
        let axes = origAxes;
        const permutedAxes = getAxesPermutation(axes, xRank);
        let permutedX = x;
        if (permutedAxes != null) {
            permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });
            axes = getInnerMostAxes(axes.length, xRank);
            toDispose.push(permutedX);
        }
        assertAxesAreInnerMostDims('prod', axes, xRank);
        let res;
        if (backend.shouldExecuteOnCPU([permutedX])) {
            const xVals = backend.texData.get(permutedX.dataId).values;
            const { outVals, outShape, outDtype } = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);
            res = backend.makeTensorInfo(outShape, outDtype, outVals);
        }
        else {
            const [outShape, reduceShape] = computeOutAndReduceShapes(permutedX.shape, axes);
            const inSize = sizeFromShape(reduceShape);
            const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });
            const outputDType = sumOutType(x.dtype);
            const reduced = reduce(a2D, outputDType, 'prod', backend);
            res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });
            toDispose.push(a2D);
            toDispose.push(reduced);
        }
        if (keepDims) {
            toDispose.push(res);
            const newShape = expandShapeToKeepDim(res.shape, origAxes);
            res = reshape({ inputs: { x: res }, backend, attrs: { shape: newShape } });
        }
        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return res;
    }
    const prodConfig = {
        kernelName: Prod,
        backendName: 'webgl',
        kernelFunc: prod
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const range = (args) => {
        const { backend, attrs } = args;
        const { start, stop, step, dtype } = attrs;
        const values = rangeImplCPU(start, stop, step, dtype);
        return backend.makeTensorInfo([values.length], dtype, values);
    };
    const rangeConfig = {
        kernelName: Range,
        backendName: 'webgl',
        kernelFunc: range
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const RECIPROCAL = `return 1.0 / x;`;
    const reciprocal = unaryKernelFunc({ opSnippet: RECIPROCAL });
    const reciprocalConfig = {
        kernelName: Reciprocal,
        backendName: 'webgl',
        kernelFunc: reciprocal,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const RELU = CHECK_NAN_SNIPPET$2 + `
  return (x < 0.0) ? 0.0 : x;
`;
    const RELU_PACKED = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
    const relu = unaryKernelFunc({ opSnippet: RELU, packedOpSnippet: RELU_PACKED });
    const reluConfig = {
        kernelName: Relu,
        backendName: 'webgl',
        kernelFunc: relu
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const RELU6 = CHECK_NAN_SNIPPET$2 + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
    const RELU6_PACKED = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
    const relu6 = unaryKernelFunc({ opSnippet: RELU6, packedOpSnippet: RELU6_PACKED });
    const relu6Config = {
        kernelName: Relu6,
        backendName: 'webgl',
        kernelFunc: relu6
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ResizeBilinearProgram {
        constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
            this.variableNames = ['A'];
            this.outputShape = [];
            const [batch, oldHeight, oldWidth, depth] = inputShape;
            this.outputShape = [batch, newHeight, newWidth, depth];
            const effectiveInSize = [
                (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,
                (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth
            ];
            const effectiveOutSize = [
                (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,
                (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth
            ];
            let sourceFracIndexRC;
            if (halfPixelCenters) {
                sourceFracIndexRC =
                    `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +
                        ` - vec2(0.5)`;
            }
            else {
                sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;
            }
            this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ResizeBilinearPackedProgram {
        constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.outputShape = [];
            const [batch, oldHeight, oldWidth, depth] = inputShape;
            this.outputShape = [batch, newHeight, newWidth, depth];
            const effectiveInSize = [
                (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,
                (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth
            ];
            const effectiveOutSize = [
                (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,
                (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth
            ];
            let sourceFracIndexRC;
            if (halfPixelCenters) {
                sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +
                    `effectiveInputOverOutputRatioRC - vec3(0.5)`;
            }
            else {
                sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;
            }
            this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,
                                     ${oldWidth}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${depth - 1};
        bool hasNextRow = coords.z < ${newWidth - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function resizeBilinear(args) {
        const { inputs, backend, attrs } = args;
        const { images } = inputs;
        const { alignCorners, halfPixelCenters, size } = attrs;
        const [newHeight, newWidth] = size;
        const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?
            new ResizeBilinearPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) :
            new ResizeBilinearProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);
        return backend.runWebGLProgram(program, [images], 'float32');
    }
    const resizeBilinearConfig = {
        kernelName: ResizeBilinear,
        backendName: 'webgl',
        kernelFunc: resizeBilinear
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ResizeBilinearBackpropProgram {
        constructor(dyShape, inputShape, alignCorners) {
            this.variableNames = ['dy'];
            this.outputShape = [];
            this.outputShape = inputShape;
            const [, xHeight, xWidth,] = inputShape;
            const [, yHeight, yWidth] = dyShape;
            // In the backwards pass, we want to find the pixels that were generated for
            // each pixel in the input image the forward pass and add the corresponding
            // coefficient from dy to the gradient (with some interpolation).
            const effectiveXSize = [
                (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,
                (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth
            ];
            const effectiveYSize = [
                (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,
                (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth
            ];
            const heightScale = effectiveXSize[0] / effectiveYSize[0];
            const widthScale = effectiveXSize[1] / effectiveYSize[1];
            const invHeightScale = 1 / heightScale;
            const invWidthScale = 1 / widthScale;
            // This defines the size of the window of values around a particular
            // index in dy that we want to search for contributions to dx.
            const winHeight = (Math.ceil(invHeightScale) * 2) + 2;
            const winWidth = (Math.ceil(invWidthScale) * 2) + 2;
            this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${heightScale});
        const float widthScale = float(${widthScale});

        const float invHeightScale = float(${invHeightScale});
        const float invWidthScale = float(${invWidthScale});

        const int winHeight = int(${winHeight});
        const int winWidth = int(${winWidth});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${yHeight}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${yWidth}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function resizeBilinearGrad(args) {
        const { inputs, backend, attrs } = args;
        const { images, dy } = inputs;
        const { alignCorners } = attrs;
        const program = new ResizeBilinearBackpropProgram(dy.shape, images.shape, alignCorners);
        return backend.runWebGLProgram(program, [dy], dy.dtype);
    }
    const resizeBilinearGradConfig = {
        kernelName: ResizeBilinearGrad,
        backendName: 'webgl',
        kernelFunc: resizeBilinearGrad
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ResizeNearestNeighborProgram {
        constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
            this.variableNames = ['A'];
            this.outputShape = [];
            const [batch, oldHeight, oldWidth, depth] = inputShape;
            this.outputShape = [batch, newHeight, newWidth, depth];
            const effectiveInSize = [
                (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,
                (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth
            ];
            const effectiveOutSize = [
                (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,
                (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth
            ];
            // When align corners is false, we rounds the value with floor.
            const roundBase = alignCorners ? '0.5' : '0.0';
            let sourceFracIndexRC;
            if (halfPixelCenters) {
                sourceFracIndexRC =
                    `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +
                        `, vec2(0.0))`;
            }
            else {
                sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;
            }
            this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ResizeNearestNeighborPackedProgram {
        constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
            this.variableNames = ['A'];
            this.packedInputs = true;
            this.packedOutput = true;
            this.outputShape = [];
            const [batch, oldHeight, oldWidth, depth] = inputShape;
            this.outputShape = [batch, newHeight, newWidth, depth];
            const effectiveInSize = [
                (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,
                (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth
            ];
            const effectiveOutSize = [
                (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,
                (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth
            ];
            // When align corners is false, we rounds the value with floor.
            const roundBase = alignCorners ? '0.5' : '0.0';
            let sourceFracIndexRC;
            if (halfPixelCenters) {
                sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +
                    `effectiveInputOverOutputRatioRC, vec3(0.0))`;
            }
            else {
                sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;
            }
            this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,
                                     ${oldWidth}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${depth - 1};
        bool hasNextRow = coords.z < ${newWidth - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function resizeNearestNeighbor(args) {
        const { inputs, backend, attrs } = args;
        const { images } = inputs;
        const { alignCorners, halfPixelCenters, size } = attrs;
        const [newHeight, newWidth] = size;
        const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?
            new ResizeNearestNeighborPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) :
            new ResizeNearestNeighborProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);
        return backend.runWebGLProgram(program, [images], images.dtype);
    }
    const resizeNearestNeighborConfig = {
        kernelName: ResizeNearestNeighbor,
        backendName: 'webgl',
        kernelFunc: resizeNearestNeighbor
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ResizeNearestNeigborBackpropProgram {
        constructor(dyShape, inputShape, alignCorners) {
            this.variableNames = ['dy'];
            this.outputShape = [];
            this.outputShape = inputShape;
            const [, xHeight, xWidth,] = inputShape;
            const [, yHeight, yWidth] = dyShape;
            // In the backwards pass, we want to find the pixels that were generated for
            // each pixel in the input image the forward pass and add the corresponding
            // coefficient from dy to the gradient (with some interpolation).
            const effectiveXSize = [
                (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,
                (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth
            ];
            const effectiveYSize = [
                (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,
                (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth
            ];
            const heightScale = effectiveXSize[0] / effectiveYSize[0];
            const widthScale = effectiveXSize[1] / effectiveYSize[1];
            const invHeightScale = 1 / heightScale;
            const invWidthScale = 1 / widthScale;
            // This defines the size of the window of values around a particular
            // index in dy that we want to search for contributions to dx.
            const winHeight = (Math.ceil(invHeightScale) * 2) + 2;
            const winWidth = (Math.ceil(invWidthScale) * 2) + 2;
            this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${heightScale});
        const float widthScale = float(${widthScale});

        const float invHeightScale = float(${invHeightScale});
        const float invWidthScale = float(${invWidthScale});

        const int winHeight = int(${winHeight});
        const int winWidth = int(${winWidth});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${yHeight}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${yWidth}) {
              continue;
            }

            float sourceFracRow =
              float(${effectiveXSize[0]}) *
                (float(dyR) / float(${effectiveYSize[0]}));

            float sourceFracCol =
                float(${effectiveXSize[1]}) *
                  (float(dyC) / float(${effectiveYSize[1]}));

            int sourceNearestRow = int(min(
                float(int(${xHeight}) - 1),
                ${alignCorners} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${xWidth}) - 1),
                ${alignCorners} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function resizeNearestNeighborGrad(args) {
        const { inputs, backend, attrs } = args;
        const { images, dy } = inputs;
        const { alignCorners } = attrs;
        const program = new ResizeNearestNeigborBackpropProgram(dy.shape, images.shape, alignCorners);
        return backend.runWebGLProgram(program, [dy], dy.dtype);
    }
    const resizeNearestNeighborGradConfig = {
        kernelName: ResizeNearestNeighborGrad,
        backendName: 'webgl',
        kernelFunc: resizeNearestNeighborGrad
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ReverseProgram {
        constructor(xShape, axis) {
            this.variableNames = ['x'];
            const rank = xShape.length;
            if (rank > 4) {
                throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);
            }
            this.outputShape = xShape;
            if (rank === 1) {
                this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${xShape[0]} - coord - 1));
        }
      `;
                return;
            }
            const getInCoord = (i) => {
                if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
                    return `${xShape[i]} - coords[${i}] - 1`;
                }
                return `coords[${i}]`;
            };
            const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');
            const type = getCoordsDataType(rank);
            this.userCode = `
      void main() {
        ${type} coords = getOutputCoords();
        setOutput(getX(${inCoords}));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ReversePackedProgram {
        constructor(xShape, axis) {
            this.variableNames = ['x'];
            this.packedInputs = true;
            this.packedOutput = true;
            const rank = xShape.length;
            if (rank > 4) {
                throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);
            }
            this.outputShape = xShape;
            const channels = getChannels('rc', rank);
            const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;
            const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;
            const type = getCoordsDataType(rank);
            if (rank === 1) {
                this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${xShape[0]} - rc - 1),
            ${xShape[0]} - rc - 1);
          if(${nextColumn}){
              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),
                ${xShape[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `;
            }
            else {
                this.userCode = `
        void main() {
          ${type} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${getR(channels.slice())};
          if(${nextColumn}){
            result.g = ${getG(channels.slice())};
          }
          if(${nextRow}) {
            result.b = ${getB(channels.slice())};
            if(${nextColumn}) {
              result.a = ${getA(channels.slice())};
            }
          }
          setOutput(result);
        }
    `;
            }
            function getR(channels) {
                return getChannel(channels);
            }
            function getG(channels) {
                channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;
                return getChannel(channels);
            }
            function getB(channels) {
                channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;
                return getChannel(channels);
            }
            function getA(channels) {
                channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;
                channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;
                return getChannel(channels);
            }
            function getChannel(channels) {
                const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));
                const inCoords = inCoordsArray.join(',');
                const innerDims = inCoordsArray.slice(-2).join(',');
                return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;
            }
            function getInCoord(i, channels1) {
                if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
                    return `${xShape[i]} - ${channels1[i]} - 1`;
                }
                else {
                    return `${channels1[i]}`;
                }
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function reverse(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { dims } = attrs;
        const xRank = x.shape.length;
        const $dims = parseAxisParam(dims, x.shape);
        if (xRank === 0) {
            return identity({ inputs: { x }, backend });
        }
        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?
            new ReversePackedProgram(x.shape, $dims) :
            new ReverseProgram(x.shape, $dims);
        return backend.runWebGLProgram(program, [x], x.dtype);
    }
    const reverseConfig = {
        kernelName: Reverse,
        backendName: 'webgl',
        kernelFunc: reverse
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class RotateProgram {
        constructor(imageShape, fillValue) {
            this.variableNames = ['Image'];
            this.outputShape = [];
            this.customUniforms = [{ name: 'params', type: 'vec4' }];
            const imageHeight = imageShape[1];
            const imageWidth = imageShape[2];
            this.outputShape = imageShape;
            let fillSnippet = '';
            if (typeof fillValue === 'number') {
                fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;
            }
            else {
                fillSnippet = `
        vec3 fill = vec3(${fillValue.join(',')});
        float outputValue = fill[coords[3]];`;
            }
            this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${fillSnippet}
          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const rotateWithOffsetConfig = {
        kernelName: RotateWithOffset,
        backendName: 'webgl',
        kernelFunc: ({ inputs, attrs, backend }) => {
            const { image } = inputs;
            const { radians, fillValue, center } = attrs;
            const webglBackend = backend;
            const program = new RotateProgram(image.shape, fillValue);
            const [centerX, centerY] = getImageCenter(center, image.shape[1], image.shape[2]);
            const customValues = [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];
            const output = webglBackend.runWebGLProgram(program, [image], image.dtype, customValues);
            return output;
        }
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const ROUND = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`;
    const round = unaryKernelFunc({ opSnippet: ROUND });
    const roundConfig = {
        kernelName: Round,
        backendName: 'webgl',
        kernelFunc: round,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const RSQRT = `return inversesqrt(x);`;
    const rsqrt = unaryKernelFunc({ opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU });
    const rsqrtConfig = {
        kernelName: Rsqrt,
        backendName: 'webgl',
        kernelFunc: rsqrt
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class ScatterProgram {
        constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {
            this.variableNames = ['updates', 'indices', 'defaultValue'];
            this.outputShape = shape;
            const stridesType = getCoordsDataType(strides.length);
            const dtype = getCoordsDataType(shape.length);
            let indicesString = '';
            if (indicesRank === 1) {
                indicesString = 'i';
            }
            else if (indicesRank === 2) {
                indicesString = 'i, j';
            }
            const indicesSnippet = `getIndices(${indicesString})`;
            let updatesString = '';
            if (updatesRank === 1) {
                updatesString = 'i';
            }
            else if (updatesRank === 2) {
                updatesString = 'i, coords[1]';
            }
            const updatesSnippet = `getUpdates(${updatesString})`;
            const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';
            this.userCode = `
        ${stridesType} strides = ${stridesType}(${strides});

        void main() {
          ${dtype} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${updateSize}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${sliceDim}; j++) {
              int index = round(${indicesSnippet});
              flattenedIndex += index * ${strideString};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${updatesSnippet};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function scatterNd(args) {
        const { inputs, backend, attrs } = args;
        const { indices, updates } = inputs;
        const { shape } = attrs;
        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = calculateShapes(updates, indices, shape);
        const flattenShape = [outputSize / sliceSize, sliceSize];
        if (outputSize === 0) {
            return backend.makeTensorInfo(shape, indices.dtype);
        }
        const flattenIndices = reshape({ inputs: { x: indices }, backend, attrs: { shape: [numUpdates, sliceRank] } });
        const flattenX = reshape({ inputs: { x: updates }, backend, attrs: { shape: [numUpdates, sliceSize] } });
        const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)
        const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);
        const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);
        const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape } });
        backend.disposeIntermediateTensorInfo(flattenIndices);
        backend.disposeIntermediateTensorInfo(flattenX);
        backend.disposeIntermediateTensorInfo(res);
        backend.disposeIntermediateTensorInfo(defaultValue);
        return reshaped;
    }
    const scatterNdConfig = {
        kernelName: ScatterNd,
        backendName: 'webgl',
        kernelFunc: scatterNd
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class SelectProgram {
        constructor(cRank, shape, rank) {
            this.variableNames = ['c', 'a', 'b'];
            this.outputShape = shape;
            let cCoords;
            let abCoords;
            if (rank > 4) {
                throw Error(`Where for rank ${rank} is not yet supported`);
            }
            if (rank === 1) {
                abCoords = `resRC`;
                cCoords = `resRC`;
            }
            else {
                const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
                const cCoordVars = [];
                const abCoordVars = [];
                for (let i = 0; i < shape.length; i++) {
                    abCoordVars.push(`${currentCoords[i]}`);
                    if (i < cRank) {
                        cCoordVars.push(`${currentCoords[i]}`);
                    }
                }
                cCoords = cCoordVars.join();
                abCoords = abCoordVars.join();
            }
            const dtype = getCoordsDataType(rank);
            this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        float cVal = getC(${cCoords});
        if (cVal >= 1.0) {
          setOutput(getA(${abCoords}));
        } else {
          setOutput(getB(${abCoords}));
        }
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function select(args) {
        const { inputs, backend } = args;
        const { condition, t, e } = inputs;
        const program = new SelectProgram(condition.shape.length, t.shape, t.shape.length);
        return backend.runWebGLProgram(program, [condition, t, e], upcastType(t.dtype, e.dtype));
    }
    const selectConfig = {
        kernelName: Select,
        backendName: 'webgl',
        kernelFunc: select
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const SELU = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${SELU_SCALEALPHA};
  float scale = ${SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`;
    const selu = unaryKernelFunc({ opSnippet: SELU });
    const seluConfig = {
        kernelName: Selu,
        backendName: 'webgl',
        kernelFunc: selu,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const SIGMOID = CHECK_NAN_SNIPPET_UNARY + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`;
    const SIGMOID_PACKED = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
    const sigmoid = unaryKernelFunc({
        opSnippet: SIGMOID,
        packedOpSnippet: SIGMOID_PACKED,
        cpuKernelImpl: sigmoidImplCPU
    });
    const sigmoidConfig = {
        kernelName: Sigmoid,
        backendName: 'webgl',
        kernelFunc: sigmoid,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // Sign does not propagate NANs.
    const SIGN = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`;
    const sign = unaryKernelFunc({ opSnippet: SIGN });
    const signConfig = {
        kernelName: Sign,
        backendName: 'webgl',
        kernelFunc: sign,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const SIN = CHECK_NAN_SNIPPET_UNARY + `
  return sin(x);
`;
    const sin = unaryKernelFunc({ opSnippet: SIN });
    const sinConfig = {
        kernelName: Sin,
        backendName: 'webgl',
        kernelFunc: sin,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const SINH = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`;
    const sinh = unaryKernelFunc({ opSnippet: SINH });
    const sinhConfig = {
        kernelName: Sinh,
        backendName: 'webgl',
        kernelFunc: sinh,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const SOFTPLUS = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`;
    const softplus = unaryKernelFunc({ opSnippet: SOFTPLUS });
    const softplusConfig = {
        kernelName: Softplus,
        backendName: 'webgl',
        kernelFunc: softplus,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const spaceToBatchND = (args) => {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { blockShape, paddings } = attrs;
        assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +
            'implemented yet');
        const prod = blockShape.reduce((a, b) => a * b);
        const completePaddings = [[0, 0]];
        completePaddings.push(...paddings);
        for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {
            completePaddings.push([0, 0]);
        }
        const toDispose = [];
        const paddedX = padV2({
            inputs: { x },
            backend,
            attrs: { paddings: completePaddings, constantValue: 0 }
        });
        const reshapedPaddedShape = getReshaped(paddedX.shape, blockShape, prod, false);
        const permutedReshapedPaddedPermutation = getPermuted(reshapedPaddedShape.length, blockShape.length, false);
        const flattenShape = getReshapedPermuted(paddedX.shape, blockShape, prod, false);
        const reshapedPaddedX = reshape({ inputs: { x: paddedX }, backend, attrs: { shape: reshapedPaddedShape } });
        const paddedXT = transpose({
            inputs: { x: reshapedPaddedX },
            backend,
            attrs: { perm: permutedReshapedPaddedPermutation }
        });
        const result = reshape({ inputs: { x: paddedXT }, backend, attrs: { shape: flattenShape } });
        toDispose.push(paddedX);
        toDispose.push(reshapedPaddedX);
        toDispose.push(paddedXT);
        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return result;
    };
    const spaceToBatchNDConfig = {
        kernelName: SpaceToBatchND,
        backendName: 'webgl',
        kernelFunc: spaceToBatchND
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseFillEmptyRows(args) {
        const { inputs, backend } = args;
        const { indices, values, denseShape, defaultValue } = inputs;
        if (denseShape.shape.length !== 1) {
            throw new Error(`Dense shape must be a vector, saw:
         ${denseShape.shape}`);
        }
        if (indices.shape.length !== 2) {
            throw new Error(`Indices must be a matrix, saw:
         ${indices.shape}`);
        }
        if (values.shape.length !== 1) {
            throw new Error(`Values must be a vector, saw:
         ${values.shape}`);
        }
        if (defaultValue.shape.length !== 0) {
            throw new Error(`Default value must be a scalar, saw:
        ${defaultValue.shape}`);
        }
        const $indices = backend.readSync(indices.dataId);
        const $values = backend.readSync(values.dataId);
        const $denseShape = backend.readSync(denseShape.dataId);
        const $defaultValue = backend.readSync(defaultValue.dataId)[0];
        const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = sparseFillEmptyRowsImplCPU($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);
        return [
            backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),
            backend.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues),
            backend.makeTensorInfo([emptyRowIndicator.length], 'bool', new Uint8Array(emptyRowIndicator.map((value) => Number(value)))),
            backend.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap)),
        ];
    }
    const sparseFillEmptyRowsConfig = {
        kernelName: SparseFillEmptyRows,
        backendName: 'webgl',
        kernelFunc: sparseFillEmptyRows,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseReshape(args) {
        const { inputs, backend } = args;
        const { inputIndices, inputShape, newShape } = inputs;
        if (inputIndices.shape.length !== 2) {
            throw new Error(`Input indices should be a matrix but received shape ${inputIndices.shape}`);
        }
        if (inputShape.shape.length !== 1) {
            throw new Error(`Input shape should be a vector but received shape ${inputShape.shape}`);
        }
        if (newShape.shape.length !== 1) {
            throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);
        }
        const $inputShape = Array.from(backend.readSync(inputShape.dataId));
        const $inputIndices = backend.readSync(inputIndices.dataId);
        const targetShape = Array.from(backend.readSync(newShape.dataId));
        const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);
        return [
            backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),
            backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape)),
        ];
    }
    const sparseReshapeConfig = {
        kernelName: SparseReshape,
        backendName: 'webgl',
        kernelFunc: sparseReshape,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseSegmentMean(args) {
        const { inputs, backend } = args;
        const { data, indices, segmentIds } = inputs;
        if (data.shape.length < 1) {
            throw new Error(`Data should be at least 1 dimensional but received scalar`);
        }
        if (indices.shape.length !== 1) {
            throw new Error(`Indices should be a vector but received shape
              ${indices.shape}`);
        }
        if (segmentIds.shape.length !== 1) {
            throw new Error(`Segment ids should be a vector but received shape
              ${segmentIds.shape}`);
        }
        const $data = backend.readSync(data.dataId);
        const $indices = backend.readSync(indices.dataId);
        const $segmentIds = backend.readSync(segmentIds.dataId);
        const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds, true);
        return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
    }
    const sparseSegmentMeanConfig = {
        kernelName: SparseSegmentMean,
        backendName: 'webgl',
        kernelFunc: sparseSegmentMean,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseSegmentSum(args) {
        const { inputs, backend } = args;
        const { data, indices, segmentIds } = inputs;
        if (data.shape.length < 1) {
            throw new Error(`Data should be at least 1 dimensional but received scalar`);
        }
        if (indices.shape.length !== 1) {
            throw new Error(`Indices should be a vector but received shape
             ${indices.shape}`);
        }
        if (segmentIds.shape.length !== 1) {
            throw new Error(`Segment ids should be a vector but received shape
             ${segmentIds.shape}`);
        }
        const $data = backend.readSync(data.dataId);
        const $indices = backend.readSync(indices.dataId);
        const $segmentIds = backend.readSync(segmentIds.dataId);
        const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds);
        return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
    }
    const sparseSegmentSumConfig = {
        kernelName: SparseSegmentSum,
        backendName: 'webgl',
        kernelFunc: sparseSegmentSum,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function sparseToDense(args) {
        const { inputs, backend, attrs } = args;
        const { sparseIndices, sparseValues, defaultValue } = inputs;
        const { outputShape } = attrs;
        const { sliceRank, numUpdates, strides, outputSize } = calculateShapes(sparseValues, sparseIndices, outputShape);
        const sumDupeIndices = false;
        const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);
        const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);
        const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: outputShape } });
        backend.disposeIntermediateTensorInfo(res);
        return reshaped;
    }
    const sparseToDenseConfig = {
        kernelName: SparseToDense,
        backendName: 'webgl',
        kernelFunc: sparseToDense
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function splitV(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { numOrSizeSplits, axis } = attrs;
        const $axis = parseAxisParam(axis, x.shape)[0];
        const splitSizes = prepareSplitSize(x, numOrSizeSplits, $axis);
        const xRank = x.shape.length;
        const begin = new Array(xRank).fill(0);
        const size = x.shape.slice();
        return splitSizes.map(s => {
            const sliceSize = [...size];
            sliceSize[$axis] = s;
            const sliceT = slice({ inputs: { x }, backend, attrs: { begin, size: sliceSize } });
            begin[$axis] += s;
            return sliceT;
        });
    }
    const splitVConfig = {
        kernelName: SplitV,
        backendName: 'webgl',
        kernelFunc: splitV
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const SQRT = `return sqrt(x);`;
    const sqrt = unaryKernelFunc({ opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU });
    const sqrtConfig = {
        kernelName: Sqrt,
        backendName: 'webgl',
        kernelFunc: sqrt
    };

    /**
     * @license
     * Copyright 2019 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const SQUARE = `return x * x;`;
    const square = unaryKernelFunc({ opSnippet: SQUARE });
    const squareConfig = {
        kernelName: Square,
        backendName: 'webgl',
        kernelFunc: square,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
    const squaredDifference = binaryKernelFunc({ opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE });
    const squaredDifferenceConfig = {
        kernelName: SquaredDifference,
        backendName: 'webgl',
        kernelFunc: squaredDifference,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function step({ inputs, attrs, backend }) {
        const { x } = inputs;
        const opSnippet = CHECK_NAN_SNIPPET$2 + `
    return x > 0.0 ? 1.0 : float(${attrs.alpha});
  `;
        const program = new UnaryOpProgram(x.shape, opSnippet);
        return backend.runWebGLProgram(program, [x], x.dtype);
    }
    const stepConfig = {
        kernelName: Step,
        backendName: 'webgl',
        kernelFunc: step,
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class StridedSliceProgram {
        constructor(begin, strides, size) {
            this.variableNames = ['x'];
            this.outputShape = size;
            const rank = size.length;
            const inputDtype = getCoordsDataType(size.length);
            const dtype = getCoordsDataType(size.length);
            let newCoords = '';
            if (rank === 1) {
                newCoords = 'coords * strides + begin';
            }
            else {
                let outputAxis = 0;
                newCoords =
                    size.map((_, i) => {
                        outputAxis++;
                        return size.length === 1 ?
                            `coords * strides[${i}] + begin[${i}]` :
                            `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;
                    })
                        .join(',');
            }
            this.userCode = `
      ${inputDtype} begin = ${inputDtype}(${begin});
      ${inputDtype} strides = ${inputDtype}(${strides});

      void main() {
        ${dtype} coords = getOutputCoords();
        setOutput(getX(${newCoords}));
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function stridedSlice(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;
        const { finalShapeSparse, finalShape, isIdentity, sliceDim0, isSimpleSlice, begin: $begin, end: $end, strides: $strides } = sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
        let result;
        if (isIdentity) {
            // Optimization #1, slice is a no-op plus reshape
            result = reshape({ inputs: { x }, backend, attrs: { shape: finalShape } });
        }
        else if (sliceDim0 || isSimpleSlice) {
            // Optimization #2, slice is memory contiguous (only occurs in dim 0)
            assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);
            const size = computeOutShape$2($begin, $end, $strides);
            // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).
            const sliced = slice({ inputs: { x }, backend, attrs: { begin: $begin, size } });
            result =
                reshape({ inputs: { x: sliced }, backend, attrs: { shape: finalShape } });
            backend.disposeIntermediateTensorInfo(sliced);
        }
        else {
            const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);
            if (shouldExecuteOnCPU) {
                // tslint:disable-next-line: no-unnecessary-type-assertion
                const values = backend.readSync(x.dataId);
                // tslint:disable-next-line: no-unnecessary-type-assertion
                const xBuf = buffer(x.shape, x.dtype, values);
                const resultValues = stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);
                result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);
            }
            else {
                const program = new StridedSliceProgram($begin, $strides, finalShapeSparse);
                result = backend.runWebGLProgram(program, [x], x.dtype);
            }
        }
        const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: finalShape } });
        backend.disposeIntermediateTensorInfo(result);
        return resultReshaped;
    }
    const stridedSliceConfig = {
        kernelName: StridedSlice,
        backendName: 'webgl',
        kernelFunc: stridedSlice
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function stringNGrams(args) {
        const { inputs, backend, attrs } = args;
        const { separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences } = attrs;
        const { data, dataSplits } = inputs;
        const $data = backend.readSync(data.dataId);
        const $dataSplits = backend.readSync(dataSplits.dataId);
        const [nGrams, nGramsSplits] = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);
        return [
            backend.makeTensorInfo([nGrams.length], 'string', nGrams),
            backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),
        ];
    }
    const stringNGramsConfig = {
        kernelName: StringNGrams,
        backendName: 'webgl',
        kernelFunc: stringNGrams,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function stringSplit(args) {
        const { inputs, backend, attrs } = args;
        const { skipEmpty } = attrs;
        const { input, delimiter } = inputs;
        if (input.dtype !== 'string') {
            throw new Error('Input must be of datatype string');
        }
        if (input.shape.length !== 1) {
            throw new Error(`Input must be a vector, got shape: ${input.shape}`);
        }
        if (delimiter.shape.length !== 0) {
            throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);
        }
        const $input = backend.readSync(input.dataId);
        const $delimiter = backend.readSync(delimiter.dataId)[0];
        const [indices, values, shape] = stringSplitImplCPU($input, $delimiter, skipEmpty);
        const outputSize = values.length;
        return [
            backend.makeTensorInfo([outputSize, 2], 'int32', indices),
            backend.makeTensorInfo([outputSize], 'string', values),
            backend.makeTensorInfo([2], 'int32', new Int32Array(shape))
        ];
    }
    const stringSplitConfig = {
        kernelName: StringSplit,
        backendName: 'webgl',
        kernelFunc: stringSplit,
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function stringToHashBucketFast(args) {
        const { inputs, backend, attrs } = args;
        const { numBuckets } = attrs;
        const { input } = inputs;
        if (input.dtype !== 'string') {
            throw new Error('Input must be of datatype string');
        }
        if (numBuckets <= 0) {
            throw new Error(`Number of buckets must be at least 1`);
        }
        const $input = backend.readSync(input.dataId);
        const output = stringToHashBucketFastImplCPU($input, numBuckets);
        return backend.makeTensorInfo(input.shape, 'int32', output);
    }
    const stringToHashBucketFastConfig = {
        kernelName: StringToHashBucketFast,
        backendName: 'webgl',
        kernelFunc: stringToHashBucketFast,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const TAN = `return tan(x);`;
    const tan = unaryKernelFunc({ opSnippet: TAN });
    const tanConfig = {
        kernelName: Tan,
        backendName: 'webgl',
        kernelFunc: tan,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    const TANH = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`;
    const tanh = unaryKernelFunc({ opSnippet: TANH });
    const tanhConfig = {
        kernelName: Tanh,
        backendName: 'webgl',
        kernelFunc: tanh,
    };

    /**
     * @license
     * Copyright 2017 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class TileProgram {
        constructor(aShape, reps) {
            this.variableNames = ['A'];
            const outputShape = new Array(aShape.length);
            for (let i = 0; i < outputShape.length; i++) {
                outputShape[i] = aShape[i] * reps[i];
            }
            this.outputShape = outputShape;
            this.rank = outputShape.length;
            const dtype = getCoordsDataType(this.rank);
            const sourceCoords = getSourceCoords(aShape);
            this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        setOutput(getA(${sourceCoords}));
      }
    `;
        }
    }
    function getSourceCoords(aShape) {
        const rank = aShape.length;
        if (rank > 5) {
            throw Error(`Tile for rank ${rank} is not yet supported`);
        }
        if (rank === 1) {
            return `imod(resRC, ${aShape[0]})`;
        }
        const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];
        const sourceCoords = [];
        for (let i = 0; i < aShape.length; i++) {
            sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);
        }
        return sourceCoords.join();
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function tile(params) {
        const { inputs, backend, attrs } = params;
        const { x } = inputs;
        const { reps } = attrs;
        // tile gpu program cannot handle rank > 5 case.
        if (x.dtype === 'string' || x.shape.length > 5) {
            // Even thought string tensor is always on CPU, just to be consistent on how
            // to access tensor data.
            const data = backend.readSync(x.dataId);
            const value = x.dtype === 'string' ?
                data.map(d => decodeString(d)) :
                data;
            const buf = buffer(x.shape, x.dtype, value);
            const outBuf = tileImplCPU(buf, reps);
            return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
        }
        const program = new TileProgram(x.shape, reps);
        const output = backend.runWebGLProgram(program, [x], x.dtype);
        return output;
    }
    const tileConfig = {
        kernelName: Tile,
        backendName: 'webgl',
        kernelFunc: tile,
    };

    // Based on Algorithm 2 of Bitonic Top K, ref:
    // https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf
    // The original algorithm is based on computing the top K only, however
    // since for TFJS we require the indices of the top K values as well then the
    // algorithm found here is a bit modified. Rather than producing the values
    // at each step, the indices containing the top K are generated instead.
    // The output values are not generated to reduce the number of outputs in the
    // GPU, the values can easily be retrieved from the indices using a gather
    // op.
    class SwapProgram {
        /**
         * @param shape desired output shape (can be larger than input shape, output
         *                                    will be padded with -Infinity)
         */
        constructor(shape) {
            this.variableNames = ['x', 'indices'];
            // |n| Size of the original input of TopK.
            // |firstPass|indicates if this is the first time swap is being used which
            // means no indices input containing the top K is present yet.
            // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...
            this.customUniforms = [
                { name: 'n', type: 'int' },
                { name: 'firstPass', type: 'int' },
                { name: 'negativeInf', type: 'float' },
                { name: 'dir', type: 'int' },
                { name: 'inc', type: 'int' }
            ];
            this.outputShape = shape;
            this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
        }
    }
    class MergeProgram {
        /**
         * @param shape desired output shape (must be half of the input size)
         */
        constructor(shape) {
            this.variableNames = ['x', 'indices'];
            // |n| Size of the original input of TopK
            // |firstPass| indicates if this is the first time swap is being used which
            // means no indices input containing the top K is present yet.
            // |k| Top k elements desired
            this.customUniforms = [
                { name: 'n', type: 'int' },
                { name: 'firstPass', type: 'int' },
                { name: 'k', type: 'int' }
            ];
            this.outputShape = shape;
            this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function disposeIntermediateTensorInfoOrNull(backend, tensorInfo) {
        if (tensorInfo !== null) {
            backend.disposeIntermediateTensorInfo(tensorInfo);
        }
    }
    function roundUpToPow2(num) {
        let pow2 = 1;
        while (pow2 < num) {
            pow2 *= 2;
        }
        return pow2;
    }
    // Based on Algorithm 2 of Bitonic Top K, ref:
    // https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf
    function topK(args) {
        const { inputs, backend, attrs } = args;
        const { x } = inputs;
        const { k, sorted } = attrs;
        // Empirically determined constant used to determine last dim threshold for
        // handing off execution to the CPU.
        const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');
        // Empirically determined constant used to determine k threshold for handing
        // off execution to the CPU.
        const TOPK_K_CPU_HANDOFF_THRESHOLD = env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');
        const xShape = x.shape;
        const lastDim = xShape[xShape.length - 1];
        if (backend.shouldExecuteOnCPU([x]) ||
            lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||
            k > TOPK_K_CPU_HANDOFF_THRESHOLD) {
            const xVals = backend.readSync(x.dataId);
            const [allTopKVals, allTopKIndices] = topKImplCPU(xVals, xShape, x.dtype, k, sorted);
            return [
                backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),
                backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)
            ];
        }
        if (k === 0) {
            xShape[xShape.length - 1] = 0;
            return [
                backend.makeTensorInfo(xShape, x.dtype, []),
                backend.makeTensorInfo(xShape, 'int32', [])
            ];
        }
        if (lastDim === 1 /* firstPass */) {
            return [
                x, fill({ attrs: { shape: xShape, dtype: 'int32', value: 0 }, backend })
            ];
        }
        // Eagerly unpack x input since it is passed in to all the shaders which
        // require unpacked inputs.
        const xtexData = backend.texData.get(x.dataId);
        const xIsPacked = xtexData !== null && xtexData.isPacked;
        const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;
        // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
        const xSize = sizeFromShape(xShape);
        const batch = xSize / lastDim;
        const x2D = reshape({ inputs: { x: xUnPacked }, attrs: { shape: [batch, lastDim] }, backend });
        if (xIsPacked) {
            disposeIntermediateTensorInfoOrNull(backend, xUnPacked);
        }
        const kPow2 = roundUpToPow2(k);
        const lastDimPow2 = roundUpToPow2(lastDim);
        // Only the indices containing the top K are kept at every step to reduce
        // number of outputs in the GPU algorithms, so once the final set of indices
        // is computed then gather is used to grab the corresponding values
        // from the original input.
        let indices = null;
        // GPU algorithm always takes in an indices input but this input is not used
        // on the first run of a GPU algorithm, therefore if indices is null we simply
        // pass in x2D instead of it but the value will not actually be used
        const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];
        const runSwap = (dir, inc, shape) => {
            const inputs = getInputs();
            const program = new SwapProgram(shape);
            const fistPass = indices === null ? 1 : 0;
            const customValues = [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];
            const prevIndices = indices;
            indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);
            disposeIntermediateTensorInfoOrNull(backend, prevIndices);
        };
        // Step 1: local sort
        for (let len = 1; len < kPow2; len *= 2) {
            const dir = len * 2;
            for (let inc = len; inc >= 1; inc /= 2) {
                runSwap(dir, inc, [batch, lastDimPow2]);
            }
        }
        // Step 2: merge
        for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {
            const inputs = getInputs();
            const mergeProgram = new MergeProgram([batch, indicesSize / 2]);
            const firstPass = indices === null ? 1 : 0;
            const customValues = [[lastDim], [firstPass], [kPow2]];
            const prevIndices = indices;
            indices =
                backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);
            disposeIntermediateTensorInfoOrNull(backend, prevIndices);
            // Step 3: rebuild
            const len = kPow2 / 2;
            const dir = len * 2;
            for (let inc = len; inc >= 1; inc /= 2) {
                runSwap(dir, inc, indices.shape);
            }
        }
        // Keep only the requested top K results instead of kPow2
        let prevIndices = indices;
        indices = slice({ inputs: { x: indices }, backend, attrs: { begin: 0, size: [batch, k] } });
        disposeIntermediateTensorInfoOrNull(backend, prevIndices);
        // Gather values on last dimension
        let values = gatherV2({ inputs: { x: x2D, indices }, backend, attrs: { axis: 1, batchDims: 1 } });
        disposeIntermediateTensorInfoOrNull(backend, x2D);
        // Reshape back to the original input shape, except that the last
        // dimension is k.
        const newShape = xShape.slice(0, -1);
        newShape.push(k);
        prevIndices = indices;
        indices = reshape({ inputs: { x: indices }, attrs: { shape: newShape }, backend });
        disposeIntermediateTensorInfoOrNull(backend, prevIndices);
        const prevValues = values;
        values = reshape({ inputs: { x: values }, attrs: { shape: newShape }, backend });
        disposeIntermediateTensorInfoOrNull(backend, prevValues);
        return [values, indices];
    }
    const topKConfig = {
        kernelName: TopK,
        backendName: 'webgl',
        kernelFunc: topK
    };

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class TransformProgram {
        constructor(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape) {
            this.variableNames = ['Image', 'Transforms'];
            this.outputShape = outShape;
            const interpolationModeId = interpolation === 'nearest' ? 1 : 2;
            let fillModeId;
            switch (fillMode) {
                case 'constant':
                    fillModeId = 1;
                    break;
                case 'reflect':
                    fillModeId = 2;
                    break;
                case 'wrap':
                    fillModeId = 3;
                    break;
                case 'nearest':
                    fillModeId = 4;
                    break;
                default:
                    fillModeId = 1;
                    break;
            }
            this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${fillModeId} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${fillModeId} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${fillModeId} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${fillValue});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${fillValue});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${imageWidth}));
                float mapY = mapCoord(inY, float(${imageHeight}));

                if (${interpolationModeId} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
        }
    }

    /**
     * @license
     * Copyright 2021 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function transform(args) {
        const { inputs, backend, attrs } = args;
        const { image, transforms } = inputs;
        const { interpolation, fillMode, fillValue, outputShape } = attrs;
        const [batch, imageHeight, imageWidth, numChannels] = image.shape;
        const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];
        const outShape = [batch, outHeight, outWidth,
            numChannels];
        const program = new TransformProgram(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);
        return backend.runWebGLProgram(program, [image, transforms], 'float32');
    }
    const transformConfig = {
        kernelName: Transform,
        backendName: 'webgl',
        kernelFunc: transform
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the License);
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an AS IS BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function unique(args) {
        const { inputs, attrs, backend } = args;
        const { axis } = attrs;
        const { x } = inputs;
        assertNotComplex(x, 'unique');
        // For now, always forward calculation to the CPU backend.
        console.warn('WARNING: ', 'UI might be locked temporarily as data is being downloaded');
        const values = backend.readSync(x.dataId);
        const { outputValues, outputShape, indices } = uniqueImplCPU(values, axis, x.shape, x.dtype);
        return [
            backend.makeTensorInfo(outputShape, x.dtype, outputValues),
            backend.makeTensorInfo([indices.length], 'int32', indices),
        ];
    }
    const uniqueConfig = {
        kernelName: Unique,
        backendName: 'webgl',
        kernelFunc: unique,
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function unpack(args) {
        const { inputs, backend, attrs } = args;
        const { value } = inputs;
        let { axis } = attrs;
        if (axis < 0) {
            axis += value.shape.length;
        }
        const x = value;
        const xRank = x.shape.length;
        const num = value.shape[axis];
        const outShape = new Array(xRank - 1);
        let outIndex = 0;
        for (let i = 0; i < xRank; i++) {
            if (i !== axis) {
                outShape[outIndex++] = x.shape[i];
            }
        }
        const toDispose = [];
        const begin = new Array(xRank).fill(0);
        const size = x.shape.slice();
        size[axis] = 1;
        const res = new Array(num);
        for (let i = 0; i < res.length; i++) {
            begin[axis] = i;
            const sliced = slice({ inputs: { x }, backend, attrs: { begin, size } });
            const reshaped = reshape({ inputs: { x: sliced }, backend, attrs: { shape: outShape } });
            res[i] = reshaped;
            toDispose.push(sliced);
        }
        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return res;
    }
    const unpackConfig = {
        kernelName: Unpack,
        backendName: 'webgl',
        kernelFunc: unpack
    };

    /**
     * @license
     * Copyright 2018 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    class SegmentOpProgram {
        constructor(segOpInfo, segOpType) {
            this.variableNames = ['x', 'segmentIds'];
            const windowSize = segOpInfo.windowSize;
            const batchSize = segOpInfo.batchSize;
            const inSize = segOpInfo.inSize;
            const numSegments = segOpInfo.numSegments;
            const outSize = numSegments * Math.ceil(inSize / windowSize);
            this.outputShape = [batchSize, outSize];
            const initializationValue = '0.0';
            const returnValue = `sumValue`;
            const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
            const windowSizeVec4Remainder = windowSize % 4;
            const updateSnippet = `
        sumValue += dot(values, segFilter);
    `;
            let checkValueOutOfBounds = '';
            if (inSize % windowSize > 0) {
                checkValueOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return initializationValue;
        }
      `;
            }
            let checkSegmentIdOutOfBounds = '';
            if (inSize % windowSize > 0) {
                checkSegmentIdOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return -1.0;
        }
      `;
            }
            this.userCode = `
      const float initializationValue = ${initializationValue};

      float getValue(int batch, int inIdx) {
        ${checkValueOutOfBounds}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${checkSegmentIdOutOfBounds}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${numSegments})) * float(${windowSize}));
        int currentSeg = int(mod(float(outIdx), float(${numSegments})));

        float sumValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${updateSnippet}
        }
        setOutput(${returnValue});
      }
    `;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    function unsortedSegmentSum(args) {
        const { inputs, backend, attrs } = args;
        const { x, segmentIds } = inputs;
        const { numSegments } = attrs;
        const xRank = x.shape.length;
        const toDispose = [];
        let axis = 0;
        const permutation = getAxesPermutation([axis], xRank);
        let permutedX = x;
        if (permutation != null) {
            permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });
            toDispose.push(permutedX);
            axis = getInnerMostAxes(1, xRank)[0];
        }
        const outShape = computeOutShape(permutedX.shape, axis, numSegments);
        const inSize = sizeFromShape([permutedX.shape[axis]]);
        const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });
        toDispose.push(a2D);
        const outputDType = sumOutType(x.dtype);
        const segOpCompute = (x, segOpType, segmentIds, dtype, numSegments) => {
            const batchSize = x.shape[0];
            const inSize = x.shape[1];
            const windowSize = segOpComputeOptimalWindowSize(inSize, numSegments);
            const segOpInfo = { windowSize, inSize, batchSize, numSegments };
            const program = new SegmentOpProgram(segOpInfo, segOpType);
            const output = backend.compileAndRun(program, [x, segmentIds], dtype);
            toDispose.push(output);
            // No need to run another GPGPU program.
            if (output.shape[1] === numSegments) {
                return output;
            }
            const rangeInfo = range({
                backend,
                attrs: { start: 0, stop: numSegments, step: 1, dtype: 'float32' }
            });
            const tileInfo = tile({
                inputs: { x: rangeInfo },
                backend,
                attrs: { reps: [inSize / windowSize] }
            });
            toDispose.push(rangeInfo);
            toDispose.push(tileInfo);
            const result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);
            return result;
        };
        const segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);
        const reshaped = reshape({ inputs: { x: segOpResult }, backend, attrs: { shape: outShape } });
        let result = reshaped;
        if (permutation != null) {
            toDispose.push(reshaped);
            const perm = getUndoAxesPermutation(permutation);
            result = transpose({ inputs: { x: result }, backend, attrs: { perm } });
        }
        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
        return result;
    }
    const unsortedSegmentSumConfig = {
        kernelName: UnsortedSegmentSum,
        backendName: 'webgl',
        kernelFunc: unsortedSegmentSum
    };

    /**
     * @license
     * Copyright 2020 Google LLC. All Rights Reserved.
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * =============================================================================
     */
    // List all kernel configs here
    const kernelConfigs = [
        _fusedMatMulConfig,
        absConfig,
        acosConfig,
        acoshConfig,
        addConfig,
        addNConfig,
        allConfig,
        anyConfig,
        argMaxConfig,
        argMinConfig,
        asinConfig,
        asinhConfig,
        atanConfig,
        atan2Config,
        atanhConfig,
        avgPoolConfig,
        avgPool3DConfig,
        avgPool3DGradConfig,
        avgPoolGradConfig,
        batchMatMulConfig,
        batchNormConfig,
        batchToSpaceNDConfig,
        bincountConfig,
        broadcastArgsConfig,
        castConfig,
        ceilConfig,
        clipByValueConfig,
        complexConfig,
        complexAbsConfig,
        concatConfig,
        conv2DConfig,
        conv2DBackpropFilterConfig,
        conv2DBackpropInputConfig,
        conv3DConfig,
        conv3DBackpropFilterV2Config,
        conv3DBackpropInputConfig,
        cosConfig,
        coshConfig,
        cropAndResizeConfig,
        cumsumConfig,
        denseBincountConfig,
        depthToSpaceConfig,
        depthwiseConv2dNativeConfig,
        depthwiseConv2dNativeBackpropFilterConfig,
        depthwiseConv2dNativeBackpropInputConfig,
        diagConfig,
        dilation2DConfig,
        einsumConfig,
        eluConfig,
        eluGradConfig,
        equalConfig,
        erfConfig,
        expConfig,
        expandDimsConfig,
        expm1Config,
        fftConfig,
        fillConfig,
        flipLeftRightConfig,
        floorConfig,
        floorDivConfig,
        fromPixelsConfig,
        fusedConv2DConfig,
        fusedDepthwiseConv2DConfig,
        gatherNdConfig,
        gatherV2Config,
        greaterConfig,
        greaterEqualConfig,
        identityConfig,
        ifftConfig,
        imagConfig,
        isFiniteConfig,
        isInfConfig,
        isNaNConfig,
        leakyReluConfig,
        lessConfig,
        lessEqualConfig,
        linSpaceConfig,
        logConfig,
        log1pConfig,
        logicalAndConfig,
        logicalNotConfig,
        logicalOrConfig,
        LRNConfig,
        LRNGradConfig,
        maxConfig,
        maximumConfig,
        maxPoolConfig,
        maxPool3DConfig,
        maxPool3DGradConfig,
        maxPoolGradConfig,
        maxPoolWithArgmaxConfig,
        meanConfig,
        minConfig,
        minimumConfig,
        mirrorPadConfig,
        modConfig,
        multinomialConfig,
        multiplyConfig,
        negConfig,
        nonMaxSuppressionV3Config,
        nonMaxSuppressionV4Config,
        nonMaxSuppressionV5Config,
        notEqualConfig,
        oneHotConfig,
        onesLikeConfig,
        packConfig,
        padV2Config,
        powConfig,
        preluConfig,
        prodConfig,
        rangeConfig,
        realConfig,
        realDivConfig,
        reciprocalConfig,
        reluConfig,
        relu6Config,
        reshapeConfig,
        resizeBilinearConfig,
        resizeBilinearGradConfig,
        resizeNearestNeighborConfig,
        resizeNearestNeighborGradConfig,
        reverseConfig,
        rotateWithOffsetConfig,
        roundConfig,
        rsqrtConfig,
        scatterNdConfig,
        selectConfig,
        seluConfig,
        sigmoidConfig,
        signConfig,
        sinConfig,
        sinhConfig,
        sliceConfig,
        softmaxConfig,
        softplusConfig,
        spaceToBatchNDConfig,
        sparseFillEmptyRowsConfig,
        sparseReshapeConfig,
        sparseSegmentMeanConfig,
        sparseSegmentSumConfig,
        sparseToDenseConfig,
        splitVConfig,
        sqrtConfig,
        squareConfig,
        squaredDifferenceConfig,
        stepConfig,
        stridedSliceConfig,
        stringNGramsConfig,
        stringSplitConfig,
        stringToHashBucketFastConfig,
        subConfig,
        sumConfig,
        tanConfig,
        tanhConfig,
        tileConfig,
        topKConfig,
        transformConfig,
        transposeConfig,
        uniqueConfig,
        unpackConfig,
        unsortedSegmentSumConfig,
        zerosLikeConfig
    ];
    for (const kernelConfig of kernelConfigs) {
        registerKernel(kernelConfig);
    }

    window.d3 = d3;
    window.tf = tf;
    /* eslint-enable @typescript-eslint/no-explicit-any */
    // Set the dimensions and margins of the plot
    const margin = { top: 30, right: 30, bottom: 30, left: 60 }, width = 800, height = 800;
    const defaultColor = "#69b3a2";
    // Append the svg object to the body of the page
    const svg = select$3(".plot svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom);
    const tooltip = select$3(".tooltip");
    function getData() {
        return __awaiter(this, void 0, void 0, function* () {
            const raw = yield text("./data/wiki-news-300d-50k-filtered.vec");
            const dsv = dsvFormat(" ");
            return dsv.parseRows(raw).map((row, index) => {
                return {
                    word: row[0],
                    vector: row.slice(1).map((a) => parseFloat(a)),
                    freqRank: index,
                    plotPos: [0, 0],
                };
            });
        });
    }
    function saveVectorsNormed(data, vectorNorms, vectorsNormed) {
        const vnds = vectorsNormed.arraySync();
        const vns = flatten(vectorNorms.arraySync());
        for (let i = 0; i < vnds.length; ++i) {
            data[i].vectorNormed = vnds[i];
            data[i].norm = vns[i];
        }
    }
    function getComponent(i) {
        return (d) => (d.vectorNormed ? d.vectorNormed[i] : d.vector[i]);
    }
    function updatePositions(data, getX, getY) {
        // TODO: consider doing transforms within svg instead of in d3?
        // Add X axis
        const axisX = linear()
            .domain(extent$1(data, getX))
            .range([margin.left, margin.left + width]);
        select$3(".x-axis").remove();
        svg
            .append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(0, ${height + margin.top})`)
            .call(axisBottom(axisX));
        // Add Y axis
        const axisY = linear()
            .domain(extent$1(data, getY))
            .range([margin.top + height, margin.top]);
        select$3(".y-axis").remove();
        svg
            .append("g")
            .attr("class", "y-axis")
            .attr("transform", `translate(${margin.left}, 0)`)
            .call(axisLeft(axisY));
        selectAll(".word-embedding")
            .each((d) => {
            const dr = d;
            dr.plotPos = [getX(dr), getY(dr)];
        })
            .attr("cx", function (d) {
            return axisX(getX(d));
        })
            .attr("cy", function (d) {
            return axisY(getY(d));
        })
            .filter((d) => {
            return d.freqRank < 1000;
        })
            .style("display", "inline");
    }
    function showWords(words, highlight = false) {
        const selection = selectAll(".word-embedding")
            .filter((d) => {
            return words.includes(d.word);
        })
            .style("display", "inline");
        if (highlight) {
            selectAll(".word-embedding").style("fill", defaultColor);
            selection.style("fill", "red").each(function () {
                const node = this;
                if (node.parentNode) {
                    node.parentNode.appendChild(node); // Bring to front.
                }
            });
        }
    }
    function computeWordPairProjection(wordA, wordB, data, vectors) {
        let vecA, vecB;
        data.forEach((d) => {
            if (d.word == wordA && d.vectorNormed) {
                vecA = tensor(d.vectorNormed);
            }
            else if (d.word == wordB && d.vectorNormed) {
                vecB = tensor(d.vectorNormed);
            }
        });
        const N = data.length;
        if (!vecA || !vecB) {
            throw new Error(`Vector not found for ${wordA} or ${wordB} or both`);
        }
        const vecAB = sub$2(vecB, vecA);
        const vecAOs = sub$2(vectors, reshape$2(vecA, [1, 300]));
        const sims = div$1(matMul$1(vecAOs, reshape$2(vecAB, [300, 1])), dot(vecAB, vecAB));
        const distancesToABLine = norm(sub$2(vecAOs, matMul$1(reshape$2(sims, [N, 1]), reshape$2(vecAB, [1, 300]))), 
        /*ord=*/ 2, 
        /*axis=*/ 1, 
        /*keepDims=*/ true);
        return concat2d([sims, distancesToABLine], /*axis=*/ 1);
    }
    // wordsA and wordsB need not have the same length.
    function useAvgOfWordPairPositions2(data, vectors, wordsA, wordsB) {
        const vecsA = [], vecsB = [];
        data.forEach((d) => {
            if (wordsA.includes(d.word) && d.vectorNormed) {
                vecsA.push(tensor2d(d.vectorNormed, [300, 1]));
            }
            else if (wordsB.includes(d.word) && d.vectorNormed) {
                vecsB.push(tensor2d(d.vectorNormed, [300, 1]));
            }
        });
        const matA = concat2d(vecsA, /*axis=*/ 1);
        const matB = concat2d(vecsB, /*axis=*/ 1);
        const simsA = matMul$1(vectors, matA);
        const simsB = matMul$1(vectors, matB);
        const aggDistA = exp$2(mean$1(log$2(maximum$2(mul(sub$2(1, simsA), 0.5), 0)), 
        /*axis=*/ 1, 
        /*keepDims=*/ true));
        const aggDistB = exp$2(mean$1(log$2(maximum$2(mul(sub$2(1, simsB), 0.5), 0)), 
        /*axis=*/ 1, 
        /*keepDims=*/ true));
        const totDist = add$1(aggDistA, aggDistB);
        const abScale = softmax$2(concat$2([aggDistA, aggDistB], /*axis=*/ 1));
        const coords = concat$2([abScale, totDist], /*axis=*/ 1);
        const coordsArr = coords.arraySync();
        updatePositions(data, (d) => coordsArr[d.freqRank][0], (d) => coordsArr[d.freqRank][2]);
        showWords(wordsA.concat(wordsB));
    }
    // wordsA and wordsB must be the same length.
    function useAvgOfWordPairPositions(data, vectors, wordsA, wordsB) {
        const projs = [];
        for (let i = 0; i < wordsA.length; ++i) {
            projs.push(computeWordPairProjection(wordsA[i], wordsB[i], data, vectors));
        }
        const coords = div$1(addN$2(projs), wordsA.length);
        const coordsArr = coords.arraySync();
        updatePositions(data, (d) => coordsArr[d.freqRank][0], (d) => coordsArr[d.freqRank][1]);
        showWords(wordsA.concat(wordsB));
    }
    function useGirlBoyPositions(data, vectors) {
        const coords = computeWordPairProjection("girl", "boy", data, vectors);
        const coordsArr = coords.arraySync();
        updatePositions(data, (d) => coordsArr[d.freqRank][0], (d) => coordsArr[d.freqRank][1]);
        showWords(["girl", "boy"]);
    }
    getData().then(function (data) {
        const vectors = tensor2d(data.map((d) => d.vector));
        const vectorNorms = norm(vectors, 
        /*ord=*/ 2, 
        /*dim=*/ 1, 
        /*keep_dims=*/ true);
        const vectorsNormed = div$1(vectors, vectorNorms);
        saveVectorsNormed(data, vectorNorms, vectorsNormed);
        selectAll("[name=projection]").on("click", function () {
            if (this.value == "comp01") {
                updatePositions(data, getComponent(0), getComponent(1));
            }
            else if (this.value == "comp23") {
                updatePositions(data, getComponent(2), getComponent(3));
            }
            else if (this.value == "girlboy") {
                useGirlBoyPositions(data, vectorsNormed);
            }
            else if (this.value == "freqlen") {
                updatePositions(data, (d) => Math.log(d.freqRank + 1), (d) => d.norm || -1);
            }
            else if (this.value == "gender") {
                useAvgOfWordPairPositions(data, vectorsNormed, ["girl", "woman", "female", "she", "herself", "mother", "daughter"], ["boy", "man", "male", "he", "himself", "father", "son"]);
            }
            else if (this.value == "liberty") {
                useAvgOfWordPairPositions(data, vectorsNormed, ["libertarian", "liberty", "libertarianism"], ["authoritarian", "authority", "authoritarianism"]);
            }
            else if (this.value == "gender2") {
                useAvgOfWordPairPositions2(data, vectorsNormed, ["girl", "woman", "female", "she", "herself", "mother", "daughter"], ["boy", "man", "male", "he", "himself", "father", "son"]);
            }
            else if (this.value == "liberty2") {
                useAvgOfWordPairPositions2(data, vectorsNormed, ["libertarian", "liberty", "libertarianism"], ["authoritarian", "authority", "authoritarianism"]);
            }
            else if (this.value == "chinaus") {
                useAvgOfWordPairPositions(data, vectorsNormed, ["China", "Chinese"], ["U.S.", "American"]
                // TODO: Adjectives are closer to the American side. Why?
                );
            }
        });
        const freqRankToRadius = pow$3()
            .exponent(0.5)
            .domain(extent$1(data, (d) => d.freqRank))
            .range([15, 2]);
        // Add dots
        svg
            .append("g")
            .selectAll("dot")
            .data(data)
            .join("circle")
            .attr("class", "word-embedding")
            .attr("r", (d) => freqRankToRadius(d.freqRank))
            .style("fill", defaultColor)
            .style("opacity", 0.5)
            .style("display", "none")
            .on("mouseover", function (event, d) {
            tooltip.style("display", "block");
        })
            .on("mousemove", function (event, d) {
            const coords = pointer(event, svg.node());
            coords[0] += 10;
            coords[1] += 10;
            tooltip
                .html(`${d.word}: ${d.plotPos}`)
                .style("left", coords[0] + "px")
                .style("top", coords[1] + "px");
            select$3(this).style("opacity", 1);
        })
            .on("mouseleave", function (event, d) {
            select$3(this).style("opacity", 0.5);
            tooltip.style("display", "none");
        })
            .on("click", (event, d) => {
            // Highlight the 10 nearest neighbors.
            selectAll(".word-embedding").style("fill", defaultColor);
            const similarities = flatten(matMul$1(vectorsNormed, tensor2d(d.vectorNormed || d.vector, [300, 1]))
                .arraySync());
            const sim10 = [...similarities].sort(descending$2)[10];
            showWords(data
                .filter((d) => similarities[d.freqRank] >= sim10)
                .map((d) => d.word), 
            /*highlight=*/ true);
        });
        updatePositions(data, getComponent(0), getComponent(1));
        select$3("[name=customWord]").on("input", function () {
            showWords([this.value], true);
        });
    });

})();
